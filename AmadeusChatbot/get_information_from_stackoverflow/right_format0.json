{
    "0": {
        "question_id": "15112125",
        "answer_id": "15112149",
        "question": "<p>I'm trying to make a function that will compare multiple variables to an integer and output a string of three letters. I was wondering if there was a way to translate this into Python. So say:</p>\n\n<pre><code>x = 0\ny = 1\nz = 3\nmylist = []\n\nif x or y or z == 0 :\n    mylist.append(\"c\")\nif x or y or z == 1 :\n    mylist.append(\"d\")\nif x or y or z == 2 :\n    mylist.append(\"e\")\nif x or y or z == 3 : \n    mylist.append(\"f\")\n</code></pre>\n\n<p>which would return a list of </p>\n\n<pre><code>[\"c\", \"d\", \"f\"]\n</code></pre>\n\n<p>Is something like this possible?</p>\n",
        "answer": "<p>You misunderstand how boolean expressions work; they don't work like an English sentence and guess that you are talking about the same comparison for all names here. You are looking for:</p>\n\n<pre><code>if x == 1 or y == 1 or z == 1:\n</code></pre>\n\n<p><code>x</code> and <code>y</code> are otherwise evaluated on their own (<code>False</code> if <code>0</code>, <code>True</code> otherwise).</p>\n\n<p>You can shorten that using a containment test against <a href=\"https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences\" rel=\"noreferrer\">a tuple</a>:</p>\n\n<pre><code>if 1 in (x, y, z):\n</code></pre>\n\n<p>or better still:</p>\n\n<pre><code>if 1 in {x, y, z}:\n</code></pre>\n\n<p>using <a href=\"https://docs.python.org/3/tutorial/datastructures.html#sets\" rel=\"noreferrer\">a <code>set</code></a> to take advantage of the constant-cost membership test (<code>in</code> takes a fixed amount of time whatever the left-hand operand is).</p>\n\n<p>When you use <code>or</code>, python sees each side of the operator as <em>separate</em> expressions. The expression <code>x or y == 1</code> is treated as first a boolean test for <code>x</code>, then if that is False, the expression <code>y == 1</code> is tested.</p>\n\n<p>This is due to <a href=\"http://docs.python.org/2/reference/expressions.html#operator-precedence\" rel=\"noreferrer\">operator precedence</a>. The <code>or</code> operator has a lower precedence than the <code>==</code> test, so the latter is evaluated <em>first</em>.</p>\n\n<p>However, even if this were <em>not</em> the case, and the expression <code>x or y or z == 1</code> was actually interpreted as <code>(x or y or z) == 1</code> instead, this would still not do what you expect it to do. </p>\n\n<p><code>x or y or z</code> would evaluate to the first argument that is 'truthy', e.g. not <code>False</code>, numeric 0 or empty (see <a href=\"http://docs.python.org/2/reference/expressions.html#boolean-operations\" rel=\"noreferrer\">boolean expressions</a> for details on what Python considers false in a boolean context).</p>\n\n<p>So for the values <code>x = 2; y = 1; z = 0</code>, <code>x or y or z</code> would resolve to <code>2</code>, because that is the first true-like value in the arguments. Then <code>2 == 1</code> would be <code>False</code>, even though <code>y == 1</code> would be <code>True</code>.</p>\n\n<p>The same would apply to the inverse; testing multiple values against a single variable; <code>x == 1 or 2 or 3</code> would fail for the same reasons. Use <code>x == 1 or x == 2 or x == 3</code> or <code>x in {1, 2, 3}</code>.</p>\n"
    },
    "1": {
        "question_id": "509211",
        "answer_id": "509295",
        "question": "<p>I need a good explanation (references are a plus) on Python's slice notation. </p>\n\n<p>To me, this notation needs a bit of picking up. </p>\n\n<p>It looks extremely powerful, but I haven't quite got my head around it.</p>\n",
        "answer": "<p>It's pretty simple really:</p>\n\n<pre><code>a[start:stop]  # items start through stop-1\na[start:]      # items start through the rest of the array\na[:stop]       # items from the beginning through stop-1\na[:]           # a copy of the whole array\n</code></pre>\n\n<p>There is also the <code>step</code> value, which can be used with any of the above:</p>\n\n<pre><code>a[start:stop:step] # start through not past stop, by step\n</code></pre>\n\n<p>The key point to remember is that the <code>:stop</code> value represents the first value that is <em>not</em> in the selected slice. So, the difference between <code>stop</code> and <code>start</code> is the number of elements selected (if <code>step</code> is 1, the default).</p>\n\n<p>The other feature is that <code>start</code> or <code>stop</code> may be a <em>negative</em> number, which means it counts from the end of the array instead of the beginning. So:</p>\n\n<pre><code>a[-1]    # last item in the array\na[-2:]   # last two items in the array\na[:-2]   # everything except the last two items\n</code></pre>\n\n<p>Similarly, <code>step</code> may be a negative number:</p>\n\n<pre><code>a[::-1]    # all items in the array, reversed\na[1::-1]   # the first two items, reversed\na[:-3:-1]  # the last two items, reversed\na[-3::-1]  # everything except the last two items, reversed\n</code></pre>\n\n<p>Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for <code>a[:-2]</code> and <code>a</code> only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.</p>\n\n<h3>Relation to <code>slice()</code> object</h3>\n\n<p>The slicing operator <code>[]</code> is actually being used in the above code with a <code>slice()</code> object using the <code>:</code> notation (which is only valid within <code>[]</code>), i.e.:</p>\n\n<pre><code>a[start:stop:step]\n</code></pre>\n\n<p>is equivalent to:</p>\n\n<pre><code>a[slice(start, stop, step)]\n</code></pre>\n\n<p>Slice objects also behave slightly differently depending on the number of arguments, similarly to <code>range()</code>, i.e. both <code>slice(stop)</code> and <code>slice(start, stop[, step])</code> are supported.\nTo skip specifying a given argument, one might use <code>None</code>, so that e.g. <code>a[start:]</code> is equivalent to <code>a[slice(start, None)]</code> or <code>a[::-1]</code> is equivalent to <code>a[slice(None, None, -1)]</code>.</p>\n\n<p>While the <code>:</code>-based notation is very helpful for simple slicing, the explicit use of <code>slice()</code> objects simplifies the programmatic generation of slicing.</p>\n"
    },
    "2": {
        "question_id": "1132941",
        "answer_id": "1145781",
        "question": "<p>Anyone tinkering with Python long enough has been bitten (or torn to pieces) by the following issue:</p>\n\n<pre><code>def foo(a=[]):\n    a.append(5)\n    return a\n</code></pre>\n\n<p>Python novices would expect this function to always return a list with only one element: <code>[5]</code>. The result is instead very different, and very astonishing (for a novice):</p>\n\n<pre><code>&gt;&gt;&gt; foo()\n[5]\n&gt;&gt;&gt; foo()\n[5, 5]\n&gt;&gt;&gt; foo()\n[5, 5, 5]\n&gt;&gt;&gt; foo()\n[5, 5, 5, 5]\n&gt;&gt;&gt; foo()\n</code></pre>\n\n<p>A manager of mine once had his first encounter with this feature, and called it \"a dramatic design flaw\" of the language. I replied that the behavior had an underlying explanation, and it is indeed very puzzling and unexpected if you don't understand the internals. However, I was not able to answer (to myself) the following question: what is the reason for binding the default argument at function definition, and not at function execution? I doubt the experienced behavior has a practical use (who really used static variables in C, without breeding bugs?)</p>\n\n<p><strong>Edit</strong>: </p>\n\n<p>Baczek made an interesting example. Together with most of your comments and Utaal's in particular, I elaborated further:</p>\n\n<pre><code>&gt;&gt;&gt; def a():\n...     print(\"a executed\")\n...     return []\n... \n&gt;&gt;&gt;            \n&gt;&gt;&gt; def b(x=a()):\n...     x.append(5)\n...     print(x)\n... \na executed\n&gt;&gt;&gt; b()\n[5]\n&gt;&gt;&gt; b()\n[5, 5]\n</code></pre>\n\n<p>To me, it seems that the design decision was relative to where to put the scope of parameters: inside the function or \"together\" with it?</p>\n\n<p>Doing the binding inside the function would mean that <code>x</code> is effectively bound to the specified default when the function is called, not defined, something that would present a deep flaw: the <code>def</code> line would be \"hybrid\" in the sense that part of the binding (of the function object) would happen at definition, and part (assignment of default parameters) at function invocation time.</p>\n\n<p>The actual behavior is more consistent: everything of that line gets evaluated when that line is executed, meaning at function definition.</p>\n",
        "answer": "<p>Actually, this is not a design flaw, and it is not because of internals, or performance.<br>\nIt comes simply from the fact that functions in Python are first-class objects, and not only a piece of code.</p>\n\n<p>As soon as you get to think into this way, then it completely makes sense: a function is an object being evaluated on its definition; default parameters are kind of \"member data\" and therefore their state may change from one call to the other - exactly as in any other object.</p>\n\n<p>In any case, Effbot has a very nice explanation of the reasons for this behavior in <a href=\"http://effbot.org/zone/default-values.htm\" rel=\"noreferrer\">Default Parameter Values in Python</a>.<br>\nI found it very clear, and I really suggest reading it for a better knowledge of how function objects work.</p>\n"
    },
    "3": {
        "question_id": "23294658",
        "answer_id": "23294659",
        "question": "<p>I am writing a program that must accept input from the user.</p>\n\n<pre><code>#note: Python 2.7 users should use `raw_input`, the equivalent of 3.X's `input`\nage = int(input(\"Please enter your age: \"))\nif age &gt;= 18: \n    print(\"You are able to vote in the United States!\")\nelse:\n    print(\"You are not able to vote in the United States.\")\n</code></pre>\n\n<p>This works as expected if the user enters sensible data. </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>C:\\Python\\Projects&gt; canyouvote.py\nPlease enter your age: 23\nYou are able to vote in the United States!\n</code></pre>\n\n<p>But if they make a mistake, then it crashes:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>C:\\Python\\Projects&gt; canyouvote.py\nPlease enter your age: dickety six\nTraceback (most recent call last):\n  File \"canyouvote.py\", line 1, in &lt;module&gt;\n    age = int(input(\"Please enter your age: \"))\nValueError: invalid literal for int() with base 10: 'dickety six'\n</code></pre>\n\n<p>Instead of crashing, I would like it to try getting the input again. Like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>C:\\Python\\Projects&gt; canyouvote.py\nPlease enter your age: dickety six\nSorry, I didn't understand that.\nPlease enter your age: 26\nYou are able to vote in the United States!\n</code></pre>\n\n<p>How can I accomplish this? What if I also wanted to reject values like <code>-1</code>, which is a valid <code>int</code>, but nonsensical in this context?</p>\n",
        "answer": "<p>The simplest way to accomplish this would be to put the <code>input</code> method in a while loop. Use <a href=\"https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops\" rel=\"noreferrer\"><code>continue</code></a> when you get bad input, and <code>break</code> out of the loop when you're satisfied.</p>\n\n<h2>When Your Input Might Raise an Exception</h2>\n\n<p>Use <a href=\"https://docs.python.org/3/tutorial/errors.html#handling-exceptions\" rel=\"noreferrer\">try and catch</a> to detect when the user enters data that can't be parsed.</p>\n\n<pre><code>while True:\n    try:\n        # Note: Python 2.x users should use raw_input, the equivalent of 3.x's input\n        age = int(input(\"Please enter your age: \"))\n    except ValueError:\n        print(\"Sorry, I didn't understand that.\")\n        #better try again... Return to the start of the loop\n        continue\n    else:\n        #age was successfully parsed!\n        #we're ready to exit the loop.\n        break\nif age &gt;= 18: \n    print(\"You are able to vote in the United States!\")\nelse:\n    print(\"You are not able to vote in the United States.\")\n</code></pre>\n\n<h2>Implementing Your Own Validation Rules</h2>\n\n<p>If you want to reject values that Python can successfully parse, you can add your own validation logic.</p>\n\n<pre><code>while True:\n    data = input(\"Please enter a loud message (must be all caps): \")\n    if not data.isupper():\n        print(\"Sorry, your response was not loud enough.\")\n        continue\n    else:\n        #we're happy with the value given.\n        #we're ready to exit the loop.\n        break\n\nwhile True:\n    data = input(\"Pick an answer from A to D:\")\n    if data.lower() not in ('a', 'b', 'c', 'd'):\n        print(\"Not an appropriate choice.\")\n    else:\n        break\n</code></pre>\n\n<h2>Combining Exception Handling and Custom Validation</h2>\n\n<p>Both of the above techniques can be combined into one loop.</p>\n\n<pre><code>while True:\n    try:\n        age = int(input(\"Please enter your age: \"))\n    except ValueError:\n        print(\"Sorry, I didn't understand that.\")\n        continue\n\n    if age &lt; 0:\n        print(\"Sorry, your response must not be negative.\")\n        continue\n    else:\n        #age was successfully parsed, and we're happy with its value.\n        #we're ready to exit the loop.\n        break\nif age &gt;= 18: \n    print(\"You are able to vote in the United States!\")\nelse:\n    print(\"You are not able to vote in the United States.\")\n</code></pre>\n\n<h2>Encapsulating it All in a Function</h2>\n\n<p>If you need to ask your user for a lot of different values, it might be useful to put this code in a function, so you don't have to retype it every time.</p>\n\n<pre><code>def get_non_negative_int(prompt):\n    while True:\n        try:\n            value = int(input(prompt))\n        except ValueError:\n            print(\"Sorry, I didn't understand that.\")\n            continue\n\n        if value &lt; 0:\n            print(\"Sorry, your response must not be negative.\")\n            continue\n        else:\n            break\n    return value\n\nage = get_non_negative_int(\"Please enter your age: \")\nkids = get_non_negative_int(\"Please enter the number of children you have: \")\nsalary = get_non_negative_int(\"Please enter your yearly earnings, in dollars: \")\n</code></pre>\n\n<h3>Putting It All Together</h3>\n\n<p>You can extend this idea to make a very generic input function:</p>\n\n<pre><code>def sanitised_input(prompt, type_=None, min_=None, max_=None, range_=None):\n    if min_ is not None and max_ is not None and max_ &lt; min_:\n        raise ValueError(\"min_ must be less than or equal to max_.\")\n    while True:\n        ui = input(prompt)\n        if type_ is not None:\n            try:\n                ui = type_(ui)\n            except ValueError:\n                print(\"Input type must be {0}.\".format(type_.__name__))\n                continue\n        if max_ is not None and ui &gt; max_:\n            print(\"Input must be less than or equal to {0}.\".format(max_))\n        elif min_ is not None and ui &lt; min_:\n            print(\"Input must be greater than or equal to {0}.\".format(min_))\n        elif range_ is not None and ui not in range_:\n            if isinstance(range_, range):\n                template = \"Input must be between {0.start} and {0.stop}.\"\n                print(template.format(range_))\n            else:\n                template = \"Input must be {0}.\"\n                if len(range_) == 1:\n                    print(template.format(*range_))\n                else:\n                    print(template.format(\" or \".join((\", \".join(map(str,\n                                                                     range_[:-1])),\n                                                       str(range_[-1])))))\n        else:\n            return ui\n</code></pre>\n\n<p>With usage such as:</p>\n\n<pre><code>age = sanitised_input(\"Enter your age: \", int, 1, 101)\nanswer = sanitised_input(\"Enter your answer: \", str.lower, range_=('a', 'b', 'c', 'd'))\n</code></pre>\n\n<h2>Common Pitfalls, and Why you Should Avoid Them</h2>\n\n<h3>The Redundant Use of Redundant <code>input</code> Statements</h3>\n\n<p>This method works but is generally considered poor style:</p>\n\n<pre><code>data = input(\"Please enter a loud message (must be all caps): \")\nwhile not data.isupper():\n    print(\"Sorry, your response was not loud enough.\")\n    data = input(\"Please enter a loud message (must be all caps): \")\n</code></pre>\n\n<p>It might look attractive initially because it's shorter than the <code>while True</code> method, but it violates the <a href=\"http://en.wikipedia.org/wiki/Don%27t_repeat_yourself\" rel=\"noreferrer\">Don't Repeat Yourself</a> principle of software development. This increases the likelihood of bugs in your system. What if you want to backport to 2.7 by changing <code>input</code> to <code>raw_input</code>, but accidentally change only the first <code>input</code> above? It's a <code>SyntaxError</code> just waiting to happen.</p>\n\n<h3>Recursion Will Blow Your Stack</h3>\n\n<p>If you've just learned about recursion, you might be tempted to use it in <code>get_non_negative_int</code> so you can dispose of the while loop.</p>\n\n<pre><code>def get_non_negative_int(prompt):\n    try:\n        value = int(input(prompt))\n    except ValueError:\n        print(\"Sorry, I didn't understand that.\")\n        return get_non_negative_int(prompt)\n\n    if value &lt; 0:\n        print(\"Sorry, your response must not be negative.\")\n        return get_non_negative_int(prompt)\n    else:\n        return value\n</code></pre>\n\n<p>This appears to work fine most of the time, but if the user enters invalid data enough times, the script will terminate with a <code>RuntimeError: maximum recursion depth exceeded</code>. You may think \"no fool would make 1000 mistakes in a row\", but you're underestimating the ingenuity of fools!</p>\n"
    },
    "4": {
        "question_id": "2612802",
        "answer_id": "2612815",
        "question": "<p>What are the options to clone or copy a list in Python?</p>\n\n<p>While using <code>new_list = my_list</code>, any modifications to <code>new_list</code> changes <code>my_list</code> everytime.\nWhy is this?</p>\n",
        "answer": "<p>With <code>new_list = my_list</code>, you don't actually have two lists. The assignment just copies the reference to the list, not the actual list, so both <code>new_list</code> and <code>my_list</code> refer to the same list after the assignment.</p>\n\n<p>To actually copy the list, you have various possibilities:</p>\n\n<ul>\n<li><p>You can use the builtin <a href=\"https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types\" rel=\"noreferrer\"><code>list.copy()</code></a> method (available since Python 3.3):</p>\n\n<pre><code>new_list = old_list.copy()\n</code></pre></li>\n<li><p>You can slice it: </p>\n\n<pre><code>new_list = old_list[:]\n</code></pre>\n\n<p><a href=\"https://en.wikipedia.org/wiki/Alex_Martelli\" rel=\"noreferrer\" title=\"Alex Martelli\">Alex Martelli's</a> opinion (at least <a href=\"https://www.youtube.com/watch?v=g7V89K8QfgQ\" rel=\"noreferrer\" title=\"Bay Area Python Interest Group August 2007 Meeting\">back in 2007</a>) about this is, that <em>it is a weird syntax and it does not make sense to use it ever</em>. ;) (In his opinion, the next one is more readable).</p></li>\n<li><p>You can use the built in <a href=\"https://docs.python.org/2/library/functions.html#list\" rel=\"noreferrer\" title=\"list\"><code>list()</code></a> function:</p>\n\n<pre><code>new_list = list(old_list)\n</code></pre></li>\n<li><p>You can use generic <a href=\"https://docs.python.org/2/library/copy.html#copy.copy\" rel=\"noreferrer\" title=\"copy.copy\"><code>copy.copy()</code></a>:</p>\n\n<pre><code>import copy\nnew_list = copy.copy(old_list)\n</code></pre>\n\n<p>This is a little slower than <code>list()</code> because it has to find out the datatype of <code>old_list</code> first.</p></li>\n<li><p>If the list contains objects and you want to copy them as well, use generic <a href=\"https://docs.python.org/2/library/copy.html#copy.deepcopy\" rel=\"noreferrer\" title=\"copy.deepcopy\"><code>copy.deepcopy()</code></a>:</p>\n\n<pre><code>import copy\nnew_list = copy.deepcopy(old_list)\n</code></pre>\n\n<p>Obviously the slowest and most memory-needing method, but sometimes unavoidable.</p></li>\n</ul>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>import copy\n\nclass Foo(object):\n    def __init__(self, val):\n         self.val = val\n\n    def __repr__(self):\n        return str(self.val)\n\nfoo = Foo(1)\n\na = ['foo', foo]\nb = a.copy()\nc = a[:]\nd = list(a)\ne = copy.copy(a)\nf = copy.deepcopy(a)\n\n# edit orignal list and instance \na.append('baz')\nfoo.val = 5\n\nprint('original: %r\\n list.copy(): %r\\n slice: %r\\n list(): %r\\n copy: %r\\n deepcopy: %r'\n      % (a, b, c, d, e, f))\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>original: ['foo', 5, 'baz']\nlist.copy(): ['foo', 5]\nslice: ['foo', 5]\nlist(): ['foo', 5]\ncopy: ['foo', 5]\ndeepcopy: ['foo', 1]\n</code></pre>\n"
    },
    "5": {
        "question_id": "1373164",
        "answer_id": "1373185",
        "question": "<p>How do I accomplish variable variables in Python? </p>\n\n<p>Here is an elaborative manual entry, for instance: <em><a href=\"http://us3.php.net/manual/en/language.variables.variable.php\" rel=\"noreferrer\">Variable variables</a></em></p>\n\n<p>I have heard this is a bad idea in general though, and it is a security hole in Python. Is that true?</p>\n",
        "answer": "<p>You can use <a href=\"https://docs.python.org/tutorial/datastructures.html#dictionaries\" rel=\"noreferrer\">dictionaries</a> to accomplish this. Dictionaries are stores of keys and values. </p>\n\n<pre><code>&gt;&gt;&gt; dct = {'x': 1, 'y': 2, 'z': 3}\n&gt;&gt;&gt; dct\n{'y': 2, 'x': 1, 'z': 3}\n&gt;&gt;&gt; dct[\"y\"]\n2\n</code></pre>\n\n<p>You can use variable key names to achieve the effect of variable variables without the security risk.</p>\n\n<pre><code>&gt;&gt;&gt; x = \"spam\"\n&gt;&gt;&gt; z = {x: \"eggs\"}\n&gt;&gt;&gt; z[\"spam\"]\n'eggs'\n</code></pre>\n\n<p>For cases where you're thinking of doing something like</p>\n\n<pre><code>var1 = 'foo'\nvar2 = 'bar'\nvar3 = 'baz'\n...\n</code></pre>\n\n<p>a list may be more appropriate than a dict. A list represents an ordered sequence of objects, with integer indices:</p>\n\n<pre><code>l = ['foo', 'bar', 'baz']\nprint(l[1])           # prints bar, because indices start at 0\nl.append('potatoes')  # l is now ['foo', 'bar', 'baz', 'potatoes']\n</code></pre>\n\n<p>For ordered sequences, lists are more convenient than dicts with integer keys, because lists support iteration in index order, <a href=\"https://stackoverflow.com/questions/509211/understanding-pythons-slice-notation\">slicing</a>, <code>append</code>, and other operations that would require awkward key management with a dict.</p>\n"
    },
    "6": {
        "question_id": "240178",
        "answer_id": "240205",
        "question": "<p>I needed to create a list of lists in Python, so I typed the following:  </p>\n\n<pre><code>myList = [[1] * 4] * 3\n</code></pre>\n\n<p>The list looked like this:  </p>\n\n<pre><code>[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]  \n</code></pre>\n\n<p>Then I changed one of the innermost values:  </p>\n\n<pre><code>myList[0][0] = 5\n</code></pre>\n\n<p>Now my list looks like this:  </p>\n\n<pre><code>[[5, 1, 1, 1], [5, 1, 1, 1], [5, 1, 1, 1]]  \n</code></pre>\n\n<p>which is not what I wanted or expected. Can someone please explain what's going on, and how to get around it?</p>\n",
        "answer": "<p>When you write <code>[x]*3</code> you get, essentially, the list <code>[x, x, x]</code>. That is, a list with 3 references to the same <code>x</code>. When you then modify this single <code>x</code> it is visible via all three references to it.</p>\n\n<p>To fix it, you need to make sure that you create a new list at each position. One way to do it is</p>\n\n<pre><code>[[1]*4 for _ in range(3)]\n</code></pre>\n\n<p>which will reevaluate <code>[1]*4</code> each time instead of evaluating it once and making 3 references to 1 list.</p>\n\n<hr>\n\n<p>You might wonder why <code>*</code> can't make independent objects the way the list comprehension does. That's because the multiplication operator <code>*</code> operates on objects, without seeing expressions. When you use <code>*</code> to multiply <code>[[1] * 4]</code> by 3, <code>*</code> only sees the 1-element list <code>[[1] * 4]</code> evaluates to, not the <code>[[1] * 4</code> expression text. <code>*</code> has no idea how to make copies of that element, no idea how to reevaluate <code>[[1] * 4]</code>, and no idea you even want copies, and in general, there might not even be a way to copy the element.</p>\n\n<p>The only option <code>*</code> has is to make new references to the existing sublist instead of trying to make new sublists. Anything else would be inconsistent or require major redesigning of fundamental language design decisions.</p>\n\n<p>In contrast, a list comprehension reevaluates the element expression on every iteration. <code>[[1] * 4 for n in range(3)]</code> reevaluates <code>[1] * 4</code> every time for the same reason <code>[x**2 for x in range(3)]</code> reevaluates <code>x**2</code> every time. Every evaluation of <code>[1] * 4</code> generates a new list, so the list comprehension does what you wanted.</p>\n\n<p>Incidentally, <code>[1] * 4</code> also doesn't copy the elements of <code>[1]</code>, but that doesn't matter, since integers are immutable. You can't do something like <code>1.value = 2</code> and turn a 1 into a 2.</p>\n"
    },
    "7": {
        "question_id": "20109391",
        "answer_id": "20159305",
        "question": "<p>Having spent a decent amount of time watching both the <a href=\"/questions/tagged/r\" class=\"post-tag\" title=\"show questions tagged &#39;r&#39;\" rel=\"tag\">r</a> and <a href=\"/questions/tagged/pandas\" class=\"post-tag\" title=\"show questions tagged &#39;pandas&#39;\" rel=\"tag\">pandas</a> tags on SO, the impression that I get is that <code>pandas</code> questions are less likely to contain reproducible data. This is something that the R community has been pretty good about encouraging, and thanks to guides like <a href=\"https://stackoverflow.com/questions/5963269/how-to-make-a-great-r-reproducible-example\">this</a>, newcomers are able to get some help on putting together these examples. People who are able to read these guides and come back with reproducible data will often have much better luck getting answers to their questions.</p>\n\n<p>How can we create good reproducible examples for <code>pandas</code> questions? Simple dataframes can be put together, e.g.:</p>\n\n<pre><code>import pandas as pd\ndf = pd.DataFrame({'user': ['Bob', 'Jane', 'Alice'], \n                   'income': [40000, 50000, 42000]})\n</code></pre>\n\n<p>But many example datasets need more complicated structure, e.g.:</p>\n\n<ul>\n<li><code>datetime</code> indices or data</li>\n<li>Multiple categorical variables (is there an equivalent to R's <code>expand.grid()</code> function, which produces all possible combinations of some given variables?)</li>\n<li>MultiIndex or Panel data</li>\n</ul>\n\n<p>For datasets that are hard to mock up using a few lines of code, is there an equivalent to R's <code>dput()</code> that allows you to generate copy-pasteable code to regenerate your datastructure?</p>\n",
        "answer": "<p><em>Note: The ideas here are pretty generic for Stack Overflow, indeed <a href=\"http://sscce.org/\" rel=\"noreferrer\">questions</a>.</em></p>\n\n<h3>Disclaimer: Writing a good question is HARD.</h3>\n\n<h2>The Good:</h2>\n\n<ul>\n<li><p>do include small* example DataFrame, either as runnable code:</p>\n\n<pre><code>In [1]: df = pd.DataFrame([[1, 2], [1, 3], [4, 6]], columns=['A', 'B'])\n</code></pre>\n\n<p>or make it \"copy and pasteable\" using <code>pd.read_clipboard(sep='\\s\\s+')</code>, you can format the text for Stack Overflow highlight and use Ctrl+K (or prepend four spaces to each line), or place three tildes above and below your code with your code unindented:</p>\n\n<pre><code>In [2]: df\nOut[2]: \n   A  B\n0  1  2\n1  1  3\n2  4  6\n</code></pre>\n\n<p>test <code>pd.read_clipboard(sep='\\s\\s+')</code> yourself.</p>\n\n<p>* <em>I really do mean <strong>small</strong>, the vast majority of example DataFrames could be fewer than 6 rows<sup>citation needed</sup>, and <strong>I bet I can do it in 5 rows.</strong> Can you reproduce the error with <code>df = df.head()</code>, if not fiddle around to see if you can make up a small DataFrame which exhibits the issue you are facing.</em></p>\n\n<p>* <em>Every rule has an exception, the obvious one is for performance issues  (<a href=\"http://ipython.org/ipython-doc/dev/interactive/tutorial.html#magic-functions\" rel=\"noreferrer\">in which case definitely use %timeit and possibly %prun</a>), where you should generate (consider using np.random.seed so we have the exact same frame): <code>df = pd.DataFrame(np.random.randn(100000000, 10))</code>. Saying that, \"make this code fast for me\" is not strictly on topic for the site...</em></p></li>\n<li><p>write out the outcome you desire (similarly to above)</p>\n\n<pre><code>In [3]: iwantthis\nOut[3]: \n   A  B\n0  1  5\n1  4  6\n</code></pre>\n\n<p><em>Explain what the numbers come from: the 5 is sum of the B column for the rows where A is 1.</em></p></li>\n<li><p>do show <em>the code</em> you've tried:</p>\n\n<pre><code>In [4]: df.groupby('A').sum()\nOut[4]: \n   B\nA   \n1  5\n4  6\n</code></pre>\n\n<p><em>But say what's incorrect: the A column is in the index rather than a column.</em></p></li>\n<li><p>do show you've done some research (<a href=\"http://pandas.pydata.org/pandas-docs/stable/search.html?q=groupby+sum\" rel=\"noreferrer\">search the docs</a>, <a href=\"https://stackoverflow.com/search?q=[pandas]+groupby+sum\">search StackOverflow</a>), give a summary:</p>\n\n<blockquote>\n  <p>The docstring for sum simply states \"Compute sum of group values\"</p>\n  \n  <p>The <a href=\"http://pandas.pydata.org/pandas-docs/stable/groupby.html#cython-optimized-aggregation-functions\" rel=\"noreferrer\">groupby docs</a> don't give any examples for this.</p>\n</blockquote>\n\n<p><em>Aside: the answer here is to use <code>df.groupby('A', as_index=False).sum()</code>.</em></p></li>\n<li><p>if it's relevant that you have Timestamp columns, e.g. you're resampling or something, then be explicit and apply <code>pd.to_datetime</code> to them for good measure**.</p>\n\n<pre><code>df['date'] = pd.to_datetime(df['date']) # this column ought to be date..\n</code></pre>\n\n<p>** <em>Sometimes this is the issue itself: they were strings.</em></p></li>\n</ul>\n\n<h2>The Bad:</h2>\n\n<ul>\n<li><p>don't include a MultiIndex, which <strong>we can't copy and paste</strong> (see above), this is kind of a grievance with pandas default display but nonetheless annoying:</p>\n\n<pre><code>In [11]: df\nOut[11]:\n     C\nA B   \n1 2  3\n  2  6\n</code></pre>\n\n<p><em>The correct way is to include an ordinary DataFrame with a <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.set_index.html\" rel=\"noreferrer\"><code>set_index</code></a> call:</em></p>\n\n<pre><code>In [12]: df = pd.DataFrame([[1, 2, 3], [1, 2, 6]], columns=['A', 'B', 'C']).set_index(['A', 'B'])\n\nIn [13]: df\nOut[13]: \n     C\nA B   \n1 2  3\n  2  6\n</code></pre></li>\n<li><p>do provide insight to what it is when giving the outcome you want:</p>\n\n<pre><code>   B\nA   \n1  1\n5  0\n</code></pre>\n\n<p><em>Be specific about how you got the numbers (what are they)... double check they're correct.</em></p></li>\n<li><p>If your code throws an error, do include the entire stack trace (this can be edited out later if it's too noisy). Show the line number (and the corresponding line of your code which it's raising against).</p></li>\n</ul>\n\n<h2>The Ugly:</h2>\n\n<ul>\n<li><p>don't link to a csv we don't have access to (ideally don't link to an external source at all...)</p>\n\n<pre><code>df = pd.read_csv('my_secret_file.csv')  # ideally with lots of parsing options\n</code></pre>\n\n<p><em><strong>Most data is proprietary</strong> we get that: Make up similar data and see if you can reproduce the problem (something small).</em></p></li>\n<li><p>don't explain the situation vaguely in words, like you have a DataFrame which is \"large\", mention some of the column names in passing (be sure not to mention their dtypes). Try and go into lots of detail about something which is completely meaningless without seeing the actual context. Presumably no one is even going to read to the end of this paragraph.</p>\n\n<p><em>Essays are bad, it's easier with small examples.</em></p></li>\n<li><p>don't include 10+ (100+??) lines of data munging before getting to your actual question.</p>\n\n<p><em>Please, we see enough of this in our day jobs. We want to help, but <a href=\"https://www.youtube.com/watch?v=ECfRp-jwbI4\" rel=\"noreferrer\">not like this...</a>.</em><br>\n<em>Cut the intro, and just show the relevant DataFrames (or small versions of them) in the step which is causing you trouble.</em></p></li>\n</ul>\n\n<h3>Anyways, have fun learning Python, NumPy and Pandas!</h3>\n"
    },
    "8": {
        "question_id": "1207406",
        "answer_id": "1207461",
        "question": "<p>I'm iterating over a list of tuples in Python, and am attempting to remove them if they meet certain criteria. </p>\n\n<pre><code>for tup in somelist:\n    if determine(tup):\n         code_to_remove_tup\n</code></pre>\n\n<p>What should I use in place of <code>code_to_remove_tup</code>? I can't figure out how to remove the item in this fashion.</p>\n",
        "answer": "<p>You can use a list comprehension to create a new list containing only the elements you don't want to remove:</p>\n\n<pre><code>somelist = [x for x in somelist if not determine(x)]\n</code></pre>\n\n<p>Or, by assigning to the slice <code>somelist[:]</code>, you can mutate the existing list to contain only the items you want:</p>\n\n<pre><code>somelist[:] = [x for x in somelist if not determine(x)]\n</code></pre>\n\n<p>This approach could be useful if there are other references to <code>somelist</code> that need to reflect the changes.</p>\n\n<p>Instead of a comprehension, you could also use <code>itertools</code>. In Python 2:</p>\n\n<pre><code>from itertools import ifilterfalse\nsomelist[:] = ifilterfalse(determine, somelist)\n</code></pre>\n\n<p>Or in Python 3:</p>\n\n<pre><code>from itertools import filterfalse\nsomelist[:] = filterfalse(determine, somelist)\n</code></pre>\n"
    },
    "9": {
        "question_id": "952914",
        "answer_id": "952952",
        "question": "<p>I wonder whether there is a shortcut to make a simple list out of list of lists in Python.</p>\n\n<p>I can do that in a <code>for</code> loop, but maybe there is some cool \"one-liner\"? I tried it with <em>reduce</em>, but I get an error.</p>\n\n<p><strong>Code</strong></p>\n\n<pre><code>l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\nreduce(lambda x, y: x.extend(y), l)\n</code></pre>\n\n<p><strong>Error message</strong></p>\n\n<pre><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 1, in &lt;lambda&gt;\nAttributeError: 'NoneType' object has no attribute 'extend'\n</code></pre>\n",
        "answer": "<p>Given a list of lists <code>l</code>,</p>\n\n<p><code>flat_list = [item for sublist in l for item in sublist]</code></p>\n\n<p>which means:</p>\n\n<pre><code>flat_list = []\nfor sublist in l:\n    for item in sublist:\n        flat_list.append(item)\n</code></pre>\n\n<p>is faster than the shortcuts posted so far. (<code>l</code> is the list to flatten.)</p>\n\n<p>Here is the corresponding function:</p>\n\n<pre><code>flatten = lambda l: [item for sublist in l for item in sublist]\n</code></pre>\n\n<p>As evidence, you can use the <code>timeit</code> module in the standard library:</p>\n\n<pre><code>$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' '[item for sublist in l for item in sublist]'\n10000 loops, best of 3: 143 usec per loop\n$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'sum(l, [])'\n1000 loops, best of 3: 969 usec per loop\n$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'reduce(lambda x,y: x+y,l)'\n1000 loops, best of 3: 1.1 msec per loop\n</code></pre>\n\n<p>Explanation: the shortcuts based on <code>+</code> (including the implied use in <code>sum</code>) are, of necessity, <code>O(L**2)</code> when there are L sublists -- as the intermediate result list keeps getting longer, at each step a new intermediate result list object gets allocated, and all the items in the previous intermediate result must be copied over (as well as a few new ones added at the end). So, for simplicity and without actual loss of generality, say you have L sublists of I items each: the first I items are copied back and forth L-1 times, the second I items L-2 times, and so on; total number of copies is I times the sum of x for x from 1 to L excluded, i.e., <code>I * (L**2)/2</code>.</p>\n\n<p>The list comprehension just generates one list, once, and copies each item over (from its original place of residence to the result list) also exactly once.</p>\n"
    },
    "10": {
        "question_id": "312443",
        "answer_id": "312464",
        "question": "<p>I have a list of arbitrary length, and I need to split it up into equal size chunks and operate on it. There are some obvious ways to do this, like keeping a counter and two lists, and when the second list fills up, add it to the first list and empty the second list for the next round of data, but this is potentially extremely expensive.</p>\n\n<p>I was wondering if anyone had a good solution to this for lists of any length, e.g. using generators.</p>\n\n<p>I was looking for something useful in <code>itertools</code> but I couldn't find anything obviously useful. Might've missed it, though.</p>\n\n<p>Related question: <a href=\"https://stackoverflow.com/questions/434287/what-is-the-most-pythonic-way-to-iterate-over-a-list-in-chunks\">What is the most \u201cpythonic\u201d way to iterate over a list in chunks?</a></p>\n",
        "answer": "<p>Here's a generator that yields the chunks you want:</p>\n\n<pre><code>def chunks(l, n):\n    \"\"\"Yield successive n-sized chunks from l.\"\"\"\n    for i in range(0, len(l), n):\n        yield l[i:i + n]\n</code></pre>\n\n<hr>\n\n<pre><code>import pprint\npprint.pprint(list(chunks(range(10, 75), 10)))\n[[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],\n [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\n [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],\n [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],\n [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n [70, 71, 72, 73, 74]]\n</code></pre>\n\n<hr>\n\n<p>If you're using Python 2, you should use <code>xrange()</code> instead of <code>range()</code>:</p>\n\n<pre><code>def chunks(l, n):\n    \"\"\"Yield successive n-sized chunks from l.\"\"\"\n    for i in xrange(0, len(l), n):\n        yield l[i:i + n]\n</code></pre>\n\n<hr>\n\n<p>Also you can simply use list comprehension instead of writing a function, though it's a good idea to encapsulate operations like this in named functions so that your code is easier to understand. Python 3:</p>\n\n<pre><code>[l[i:i + n] for i in range(0, len(l), n)]\n</code></pre>\n\n<p>Python 2 version:</p>\n\n<pre><code>[l[i:i + n] for i in xrange(0, len(l), n)]\n</code></pre>\n"
    },
    "11": {
        "question_id": "986006",
        "answer_id": "986145",
        "question": "<p>The Python documentation seems unclear about whether parameters are passed by reference or value, and the following code produces the unchanged value 'Original'</p>\n\n<pre><code>class PassByReference:\n    def __init__(self):\n        self.variable = 'Original'\n        self.change(self.variable)\n        print(self.variable)\n\n    def change(self, var):\n        var = 'Changed'\n</code></pre>\n\n<p>Is there something I can do to pass the variable by actual reference?</p>\n",
        "answer": "<p>Arguments are <a href=\"http://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference\" rel=\"noreferrer\">passed by assignment</a>. The rationale behind this is twofold:</p>\n\n<ol>\n<li>the parameter passed in is actually a <em>reference</em> to an object (but the reference is passed by value)</li>\n<li>some data types are mutable, but others aren't</li>\n</ol>\n\n<p>So:</p>\n\n<ul>\n<li><p>If you pass a <em>mutable</em> object into a method, the method gets a reference to that same object and you can mutate it to your heart's delight, but if you rebind the reference in the method, the outer scope will know nothing about it, and after you're done, the outer reference will still point at the original object. </p></li>\n<li><p>If you pass an <em>immutable</em> object to a method, you still can't rebind the outer reference, and you can't even mutate the object.</p></li>\n</ul>\n\n<p>To make it even more clear, let's have some examples. </p>\n\n<h2>List - a mutable type</h2>\n\n<p><strong>Let's try to modify the list that was passed to a method:</strong></p>\n\n<pre><code>def try_to_change_list_contents(the_list):\n    print('got', the_list)\n    the_list.append('four')\n    print('changed to', the_list)\n\nouter_list = ['one', 'two', 'three']\n\nprint('before, outer_list =', outer_list)\ntry_to_change_list_contents(outer_list)\nprint('after, outer_list =', outer_list)\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>before, outer_list = ['one', 'two', 'three']\ngot ['one', 'two', 'three']\nchanged to ['one', 'two', 'three', 'four']\nafter, outer_list = ['one', 'two', 'three', 'four']\n</code></pre>\n\n<p>Since the parameter passed in is a reference to <code>outer_list</code>, not a copy of it, we can use the mutating list methods to change it and have the changes reflected in the outer scope.</p>\n\n<p><strong>Now let's see what happens when we try to change the reference that was passed in as a parameter:</strong></p>\n\n<pre><code>def try_to_change_list_reference(the_list):\n    print('got', the_list)\n    the_list = ['and', 'we', 'can', 'not', 'lie']\n    print('set to', the_list)\n\nouter_list = ['we', 'like', 'proper', 'English']\n\nprint('before, outer_list =', outer_list)\ntry_to_change_list_reference(outer_list)\nprint('after, outer_list =', outer_list)\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>before, outer_list = ['we', 'like', 'proper', 'English']\ngot ['we', 'like', 'proper', 'English']\nset to ['and', 'we', 'can', 'not', 'lie']\nafter, outer_list = ['we', 'like', 'proper', 'English']\n</code></pre>\n\n<p>Since the <code>the_list</code> parameter was passed by value, assigning a new list to it had no effect that the code outside the method could see. The <code>the_list</code> was a copy of the <code>outer_list</code> reference, and we had <code>the_list</code> point to a new list, but there was no way to change where <code>outer_list</code> pointed.</p>\n\n<h2>String - an immutable type</h2>\n\n<p><strong>It's immutable, so there's nothing we can do to change the contents of the string</strong></p>\n\n<p><strong>Now, let's try to change the reference</strong></p>\n\n<pre><code>def try_to_change_string_reference(the_string):\n    print('got', the_string)\n    the_string = 'In a kingdom by the sea'\n    print('set to', the_string)\n\nouter_string = 'It was many and many a year ago'\n\nprint('before, outer_string =', outer_string)\ntry_to_change_string_reference(outer_string)\nprint('after, outer_string =', outer_string)\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>before, outer_string = It was many and many a year ago\ngot It was many and many a year ago\nset to In a kingdom by the sea\nafter, outer_string = It was many and many a year ago\n</code></pre>\n\n<p>Again, since the <code>the_string</code> parameter was passed by value, assigning a new string to it had no effect that the code outside the method could see. The <code>the_string</code> was a copy of the <code>outer_string</code> reference, and we had <code>the_string</code> point to a new string, but there was no way to change where <code>outer_string</code> pointed.</p>\n\n<p>I hope this clears things up a little.</p>\n\n<p><strong>EDIT:</strong> It's been noted that this doesn't answer the question that @David originally asked, \"Is there something I can do to pass the variable by actual reference?\". Let's work on that.</p>\n\n<h2>How do we get around this?</h2>\n\n<p>As @Andrea's answer shows, you could return the new value. This doesn't change the way things are passed in, but does let you get the information you want back out:</p>\n\n<pre><code>def return_a_whole_new_string(the_string):\n    new_string = something_to_do_with_the_old_string(the_string)\n    return new_string\n\n# then you could call it like\nmy_string = return_a_whole_new_string(my_string)\n</code></pre>\n\n<p>If you really wanted to avoid using a return value, you could create a class to hold your value and pass it into the function or use an existing class, like a list:</p>\n\n<pre><code>def use_a_wrapper_to_simulate_pass_by_reference(stuff_to_change):\n    new_string = something_to_do_with_the_old_string(stuff_to_change[0])\n    stuff_to_change[0] = new_string\n\n# then you could call it like\nwrapper = [my_string]\nuse_a_wrapper_to_simulate_pass_by_reference(wrapper)\n\ndo_something_with(wrapper[0])\n</code></pre>\n\n<p>Although this seems a little cumbersome.</p>\n"
    },
    "12": {
        "question_id": "20449427",
        "answer_id": "20449433",
        "question": "<p>Why are <code>x</code> and <code>y</code> strings instead of ints in the below code?</p>\n\n<p>(Note: in Python 2.x use <code>raw_input()</code>. In Python 3.x use <code>input()</code>. <code>raw_input()</code> was renamed to <code>input()</code> in Python 3.x)</p>\n\n<pre><code>play = True\n\nwhile play:\n\n    x = input(\"Enter a number: \")\n    y = input(\"Enter a number: \")\n\n    print(x + y)\n    print(x - y)\n    print(x * y)\n    print(x / y)\n    print(x % y)\n\n    if input(\"Play again? \") == \"no\":\n        play = False\n</code></pre>\n",
        "answer": "<p><strong>TLDR</strong></p>\n\n<ul>\n<li>Python 3 doesn't evaluate the data received with <code>input</code> function, but Python 2's <code>input</code> function does (read the next section to understand the implication).</li>\n<li>Python 2's equivalent of Python 3's <code>input</code> is the <code>raw_input</code> function.</li>\n</ul>\n\n<p><strong>Python 2.x</strong></p>\n\n<p>There were two functions to get user input, called <a href=\"https://docs.python.org/2/library/functions.html#input\" rel=\"noreferrer\"><code>input</code></a> and <a href=\"https://docs.python.org/2/library/functions.html#raw_input\" rel=\"noreferrer\"><code>raw_input</code></a>. The difference between them is, <code>raw_input</code> doesn't evaluate the data and returns as it is, in string form. But, <code>input</code> will evaluate whatever you entered and the result of evaluation will be returned. For example,</p>\n\n<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.version\n'2.7.6 (default, Mar 22 2014, 22:59:56) \\n[GCC 4.8.2]'\n&gt;&gt;&gt; data = input(\"Enter a number: \")\nEnter a number: 5 + 17\n&gt;&gt;&gt; data, type(data)\n(22, &lt;type 'int'&gt;)\n</code></pre>\n\n<p>The data <code>5 + 17</code> is evaluated and the result is <code>22</code>. When it evaluates the expression <code>5 + 17</code>, it detects that you are adding two numbers and so the result will also be of the same <code>int</code> type. So, the type conversion is done for free and <code>22</code> is returned as the result of <code>input</code> and stored in <code>data</code> variable. You can think of <code>input</code> as the <code>raw_input</code> composed with an <a href=\"https://docs.python.org/2/library/functions.html#eval\" rel=\"noreferrer\"><code>eval</code></a> call.</p>\n\n<pre><code>&gt;&gt;&gt; data = eval(raw_input(\"Enter a number: \"))\nEnter a number: 5 + 17\n&gt;&gt;&gt; data, type(data)\n(22, &lt;type 'int'&gt;)\n</code></pre>\n\n<p><strong>Note:</strong> you should be careful when you are using <code>input</code> in Python 2.x. I explained why one should be careful when using it, in <a href=\"https://stackoverflow.com/a/21122817/1903116\">this answer</a>.</p>\n\n<p>But, <code>raw_input</code> doesn't evaluate the input and returns as it is, as a string.</p>\n\n<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.version\n'2.7.6 (default, Mar 22 2014, 22:59:56) \\n[GCC 4.8.2]'\n&gt;&gt;&gt; data = raw_input(\"Enter a number: \")\nEnter a number: 5 + 17\n&gt;&gt;&gt; data, type(data)\n('5 + 17', &lt;type 'str'&gt;)\n</code></pre>\n\n<p><strong>Python 3.x</strong></p>\n\n<p>Python 3.x's <a href=\"https://docs.python.org/3/library/functions.html#input\" rel=\"noreferrer\"><code>input</code></a> and Python 2.x's <code>raw_input</code> are similar and <code>raw_input</code> is not available in Python 3.x. </p>\n\n<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.version\n'3.4.0 (default, Apr 11 2014, 13:05:11) \\n[GCC 4.8.2]'\n&gt;&gt;&gt; data = input(\"Enter a number: \")\nEnter a number: 5 + 17\n&gt;&gt;&gt; data, type(data)\n('5 + 17', &lt;class 'str'&gt;)\n</code></pre>\n\n<hr>\n\n<p><strong>Solution</strong></p>\n\n<p>To answer your question, since Python 3.x doesn't evaluate and convert the data type, you have to explicitly convert to <code>int</code>s, with <a href=\"https://docs.python.org/3/library/functions.html#int\" rel=\"noreferrer\"><code>int</code></a>, like this</p>\n\n<pre><code>x = int(input(\"Enter a number: \"))\ny = int(input(\"Enter a number: \"))\n</code></pre>\n\n<p>You can accept numbers of any base and convert them directly to base-10 with the <code>int</code> function, like this</p>\n\n<pre><code>&gt;&gt;&gt; data = int(input(\"Enter a number: \"), 8)\nEnter a number: 777\n&gt;&gt;&gt; data\n511\n&gt;&gt;&gt; data = int(input(\"Enter a number: \"), 16)\nEnter a number: FFFF\n&gt;&gt;&gt; data\n65535\n&gt;&gt;&gt; data = int(input(\"Enter a number: \"), 2)\nEnter a number: 10101010101\n&gt;&gt;&gt; data\n1365\n</code></pre>\n\n<p>The second parameter tells what is the base of the numbers entered and then internally it understands and converts it. If the entered data is wrong it will throw a <code>ValueError</code>.</p>\n\n<pre><code>&gt;&gt;&gt; data = int(input(\"Enter a number: \"), 2)\nEnter a number: 1234\nTraceback (most recent call last):\n  File \"&lt;input&gt;\", line 1, in &lt;module&gt;\nValueError: invalid literal for int() with base 2: '1234'\n</code></pre>\n\n<p>For values that can have a fractional component, the type would be <code>float</code> rather than <code>int</code>:</p>\n\n<pre><code>x = float(input(\"Enter a number:\"))\n</code></pre>\n\n<hr>\n\n<p>Apart from that, your program can be changed a little bit, like this</p>\n\n<pre><code>while True:\n    ...\n    ...\n    if input(\"Play again? \") == \"no\":\n        break\n</code></pre>\n\n<p>You can get rid of the <code>play</code> variable by using <code>break</code> and <code>while True</code>. </p>\n"
    },
    "13": {
        "question_id": "47152691",
        "answer_id": "47152692",
        "question": "<ul>\n<li>What is pivot?</li>\n<li>How do I pivot?</li>\n<li>Is this a pivot?</li>\n<li>Long format to wide format?</li>\n</ul>\n\n<p>I've seen a lot of questions that ask about pivot tables.  Even if they don't know that they are asking about pivot tables, they usually are.  It is virtually impossible to write a canonical question and answer that encompasses all aspects of pivoting....</p>\n\n<p>... But I'm going to give it a go.</p>\n\n<hr>\n\n<p>The problem with existing questions and answers is that often the question is focused on a nuance that the OP has trouble generalizing in order to use a number of the existing good answers.  However, none of the answers attempt to give a comprehensive explanation (because it's a daunting task)</p>\n\n<p>Look a few examples from my <a href=\"https://www.google.com/search?q=how%20to%20pivot%20a%20pandas%20dataframe&amp;oq=How%20do%20I%20pivot%20a%20pandas%20dataframe\" rel=\"noreferrer\"><strong>google search</strong></a></p>\n\n<ol>\n<li><a href=\"https://stackoverflow.com/q/28337117/2336654\">How to pivot a dataframe in Pandas?</a>\n\n<ul>\n<li>Good question and answer.  But the answer only answers the specific question with little explanation.</li>\n</ul></li>\n<li><a href=\"https://stackoverflow.com/q/42708193/2336654\">pandas pivot table to data frame</a>\n\n<ul>\n<li>In this question, the OP is concerned with the output of the pivot.  Namely how the columns look.  OP wanted it to look like R.  This isn't very helpful for pandas users.</li>\n</ul></li>\n<li><a href=\"https://stackoverflow.com/q/11400181/2336654\">pandas pivoting a dataframe, duplicate rows</a>\n\n<ul>\n<li>Another decent question but the answer focuses on one method, namely <code>pd.DataFrame.pivot</code></li>\n</ul></li>\n</ol>\n\n<p>So whenever someone searches for <code>pivot</code> they get sporadic results that are likely not going to answer their specific question.</p>\n\n<hr>\n\n<h1>Setup</h1>\n\n<p>You may notice that I conspicuously named my columns and relevant column values to correspond with how I'm going to pivot in the answers below.  Pay attention so that you get familiar with where which column names go where to get the results you're looking for.</p>\n\n<pre><code>import numpy as np\nimport pandas as pd\nfrom numpy.core.defchararray import add\n\nnp.random.seed([3,1415])\nn = 20\n\ncols = np.array(['key', 'row', 'item', 'col'])\narr1 = (np.random.randint(5, size=(n, 4)) // [2, 1, 2, 1]).astype(str)\n\ndf = pd.DataFrame(\n    add(cols, arr1), columns=cols\n).join(\n    pd.DataFrame(np.random.rand(n, 2).round(2)).add_prefix('val')\n)\nprint(df)\n\n     key   row   item   col  val0  val1\n0   key0  row3  item1  col3  0.81  0.04\n1   key1  row2  item1  col2  0.44  0.07\n2   key1  row0  item1  col0  0.77  0.01\n3   key0  row4  item0  col2  0.15  0.59\n4   key1  row0  item2  col1  0.81  0.64\n5   key1  row2  item2  col4  0.13  0.88\n6   key2  row4  item1  col3  0.88  0.39\n7   key1  row4  item1  col1  0.10  0.07\n8   key1  row0  item2  col4  0.65  0.02\n9   key1  row2  item0  col2  0.35  0.61\n10  key2  row0  item2  col1  0.40  0.85\n11  key2  row4  item1  col2  0.64  0.25\n12  key0  row2  item2  col3  0.50  0.44\n13  key0  row4  item1  col4  0.24  0.46\n14  key1  row3  item2  col3  0.28  0.11\n15  key0  row3  item1  col1  0.31  0.23\n16  key0  row0  item2  col3  0.86  0.01\n17  key0  row4  item0  col3  0.64  0.21\n18  key2  row2  item2  col0  0.13  0.45\n19  key0  row2  item0  col4  0.37  0.70\n</code></pre>\n\n<h3>Question(s)</h3>\n\n<ol>\n<li><p>Why do I get <code>ValueError: Index contains duplicate entries, cannot reshape</code></p></li>\n<li><p>How do I pivot <code>df</code> such that the <code>col</code> values are columns, <code>row</code> values are the index, and mean of <code>val0</code> are the values?</p>\n\n<pre><code>col   col0   col1   col2   col3  col4\nrow                                  \nrow0  0.77  0.605    NaN  0.860  0.65\nrow2  0.13    NaN  0.395  0.500  0.25\nrow3   NaN  0.310    NaN  0.545   NaN\nrow4   NaN  0.100  0.395  0.760  0.24\n</code></pre></li>\n<li><p>How do I pivot <code>df</code> such that the <code>col</code> values are columns, <code>row</code> values are the index, mean of <code>val0</code> are the values, and missing values are <code>0</code>?</p>\n\n<pre><code>col   col0   col1   col2   col3  col4\nrow                                  \nrow0  0.77  0.605  0.000  0.860  0.65\nrow2  0.13  0.000  0.395  0.500  0.25\nrow3  0.00  0.310  0.000  0.545  0.00\nrow4  0.00  0.100  0.395  0.760  0.24\n</code></pre></li>\n<li><p>Can I get something other than <code>mean</code>, like maybe <code>sum</code>?</p>\n\n<pre><code>col   col0  col1  col2  col3  col4\nrow                               \nrow0  0.77  1.21  0.00  0.86  0.65\nrow2  0.13  0.00  0.79  0.50  0.50\nrow3  0.00  0.31  0.00  1.09  0.00\nrow4  0.00  0.10  0.79  1.52  0.24\n</code></pre></li>\n<li><p>Can I do more that one aggregation at a time?</p>\n\n<pre><code>       sum                          mean                           \ncol   col0  col1  col2  col3  col4  col0   col1   col2   col3  col4\nrow                                                                \nrow0  0.77  1.21  0.00  0.86  0.65  0.77  0.605  0.000  0.860  0.65\nrow2  0.13  0.00  0.79  0.50  0.50  0.13  0.000  0.395  0.500  0.25\nrow3  0.00  0.31  0.00  1.09  0.00  0.00  0.310  0.000  0.545  0.00\nrow4  0.00  0.10  0.79  1.52  0.24  0.00  0.100  0.395  0.760  0.24\n</code></pre></li>\n<li><p>Can I aggregate over multiple value columns?</p>\n\n<pre><code>      val0                             val1                          \ncol   col0   col1   col2   col3  col4  col0   col1  col2   col3  col4\nrow                                                                  \nrow0  0.77  0.605  0.000  0.860  0.65  0.01  0.745  0.00  0.010  0.02\nrow2  0.13  0.000  0.395  0.500  0.25  0.45  0.000  0.34  0.440  0.79\nrow3  0.00  0.310  0.000  0.545  0.00  0.00  0.230  0.00  0.075  0.00\nrow4  0.00  0.100  0.395  0.760  0.24  0.00  0.070  0.42  0.300  0.46\n</code></pre></li>\n<li><p>Can Subdivide by multiple columns?</p>\n\n<pre><code>item item0             item1                         item2                   \ncol   col2  col3  col4  col0  col1  col2  col3  col4  col0   col1  col3  col4\nrow                                                                          \nrow0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.605  0.86  0.65\nrow2  0.35  0.00  0.37  0.00  0.00  0.44  0.00  0.00  0.13  0.000  0.50  0.13\nrow3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.000  0.28  0.00\nrow4  0.15  0.64  0.00  0.00  0.10  0.64  0.88  0.24  0.00  0.000  0.00  0.00\n</code></pre></li>\n<li><p>Or </p>\n\n<pre><code>item      item0             item1                         item2                  \ncol        col2  col3  col4  col0  col1  col2  col3  col4  col0  col1  col3  col4\nkey  row                                                                         \nkey0 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.86  0.00\n     row2  0.00  0.00  0.37  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.50  0.00\n     row3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.00  0.00  0.00\n     row4  0.15  0.64  0.00  0.00  0.00  0.00  0.00  0.24  0.00  0.00  0.00  0.00\nkey1 row0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.81  0.00  0.65\n     row2  0.35  0.00  0.00  0.00  0.00  0.44  0.00  0.00  0.00  0.00  0.00  0.13\n     row3  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.28  0.00\n     row4  0.00  0.00  0.00  0.00  0.10  0.00  0.00  0.00  0.00  0.00  0.00  0.00\nkey2 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.40  0.00  0.00\n     row2  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.13  0.00  0.00  0.00\n     row4  0.00  0.00  0.00  0.00  0.00  0.64  0.88  0.00  0.00  0.00  0.00  0.00\n</code></pre></li>\n<li><p>Can I aggregate the frequency in which the column and rows occur together, aka \"cross tabulation\"?</p>\n\n<pre><code>col   col0  col1  col2  col3  col4\nrow                               \nrow0     1     2     0     1     1\nrow2     1     0     2     1     2\nrow3     0     1     0     2     0\nrow4     0     1     2     2     1\n</code></pre></li>\n<li><p>How do I convert a DataFrame from long to wide by pivoting on ONLY two columns? Given,</p>\n\n<pre><code>np.random.seed([3, 1415])\ndf2 = pd.DataFrame({'A': list('aaaabbbc'), 'B': np.random.choice(15, 8)})        \ndf2        \n   A   B\n0  a   0\n1  a  11\n2  a   2\n3  a  11\n4  b  10\n5  b  10\n6  b  14\n7  c   7\n</code></pre>\n\n<p>The expected should would look something like</p>\n\n<pre><code>      a     b    c\n0   0.0  10.0  7.0\n1  11.0  10.0  NaN\n2   2.0  14.0  NaN\n3  11.0   NaN  NaN\n</code></pre></li>\n</ol>\n",
        "answer": "<p>We start by answering the first question:</p>\n\n<h2>Question 1</h2>\n\n<blockquote>\n  <p>Why do I get <code>ValueError: Index contains duplicate entries, cannot reshape</code></p>\n</blockquote>\n\n<p>This occurs because pandas is attempting to reindex either a <code>columns</code> or <code>index</code> object with duplicate entries.  There are varying methods to use that can perform a pivot.  Some of them are not well suited to when there are duplicates of the keys in which it is being asked to pivot on.  For example.  Consider <code>pd.DataFrame.pivot</code>.  I know there are duplicate entries that share the <code>row</code> and <code>col</code> values:</p>\n\n<pre><code>df.duplicated(['row', 'col']).any()\n\nTrue\n</code></pre>\n\n<p>So when I <code>pivot</code> using</p>\n\n<pre><code>df.pivot(index='row', columns='col', values='val0')\n</code></pre>\n\n<p>I get the error mentioned above.  In fact, I get the same error when I try to perform the same task with:</p>\n\n<pre><code>df.set_index(['row', 'col'])['val0'].unstack()\n</code></pre>\n\n<p>Here is a list of idioms we can use to pivot</p>\n\n<ol>\n<li><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html\" rel=\"noreferrer\"><strong><code>pd.DataFrame.groupby</code></strong></a> + <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.unstack.html\" rel=\"noreferrer\"><strong><code>pd.DataFrame.unstack</code></strong></a>\n\n<ul>\n<li>Good general approach for doing just about any type of pivot</li>\n<li>You specify all columns that will constitute the pivoted row levels and column levels in one group by.  You follow that by selecting the remaining columns you want to aggregate and the function(s) you want to perform the aggregation.  Finally, you <code>unstack</code> the levels that you want to be in the column index.</li>\n</ul></li>\n<li><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.pivot_table.html\" rel=\"noreferrer\"><strong><code>pd.DataFrame.pivot_table</code></strong></a>\n\n<ul>\n<li>A glorified version of <code>groupby</code> with more intuitive API.  For many people, this is the preferred approach.  And is the intended approach by the developers.</li>\n<li>Specify row level, column levels, values to be aggregated, and function(s) to perform aggregations.</li>\n</ul></li>\n<li><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.set_index.html\" rel=\"noreferrer\"><strong><code>pd.DataFrame.set_index</code></strong></a> + <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.unstack.html\" rel=\"noreferrer\"><strong><code>pd.DataFrame.unstack</code></strong></a>\n\n<ul>\n<li>Convenient and intuitive for some (myself included).  Cannot handle duplicate grouped keys.</li>\n<li>Similar to the <code>groupby</code> paradigm, we specify all columns that will eventually be either row or column levels and set those to be the index.  We then <code>unstack</code> the levels we want in the columns.  If either the remaining index levels or column levels are not unique, this method will fail.</li>\n</ul></li>\n<li><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot.html\" rel=\"noreferrer\"><strong><code>pd.DataFrame.pivot</code></strong></a>\n\n<ul>\n<li>Very similar to <code>set_index</code> in that it shares the duplicate key limitation.  The API is very limited as well.  It only takes scalar values for <code>index</code>, <code>columns</code>, <code>values</code>.</li>\n<li>Similar to the <code>pivot_table</code> method in that we select rows, columns, and values on which to pivot.  However, we cannot aggregate and if either rows or columns are not unique, this method will fail.</li>\n</ul></li>\n<li><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.crosstab.html\" rel=\"noreferrer\"><strong><code>pd.crosstab</code></strong></a>\n\n<ul>\n<li>This a specialized version of <code>pivot_table</code> and in it's purest form is the most intuitive way to perform several tasks.</li>\n</ul></li>\n<li><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.factorize.html\" rel=\"noreferrer\"><strong><code>pd.factorize</code></strong></a> + <a href=\"https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.bincount.html\" rel=\"noreferrer\"><strong><code>np.bincount</code></strong></a>\n\n<ul>\n<li>This is a highly advanced technique that is very obscure but is very fast.  It cannot be used in all circumstances, but when it can be used and you are comfortable using it, you will reap the performance rewards.</li>\n</ul></li>\n<li><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.get_dummies.html\" rel=\"noreferrer\"><strong><code>pd.get_dummies</code></strong></a> + <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.dot.html\" rel=\"noreferrer\"><strong><code>pd.DataFrame.dot</code></strong></a>\n\n<ul>\n<li>I use this for cleverly performing cross tabulation.  </li>\n</ul></li>\n</ol>\n\n<hr>\n\n<h1>Examples</h1>\n\n<p>What I'm going to do for each subsequent answer and question is to answer it using <code>pd.DataFrame.pivot_table</code>.  Then I'll provide alternatives to perform the same task.  </p>\n\n<h2>Question 3</h2>\n\n<blockquote>\n  <p>How do I pivot <code>df</code> such that the <code>col</code> values are columns, <code>row</code> values are the index, mean of <code>val0</code> are the values, and missing values are <code>0</code>?</p>\n</blockquote>\n\n<ul>\n<li><p><code>pd.DataFrame.pivot_table</code></p>\n\n<ul>\n<li><code>fill_value</code> is not set by default.  I tend to set it appropriately.  In this case I set it to <code>0</code>.  Notice I skipped <strong>question 2</strong> as it's the same as this answer without the <code>fill_value</code></li>\n<li><p><code>aggfunc='mean'</code> is the default and I didn't have to set it.  I included it to be explicit.</p>\n\n<pre><code>df.pivot_table(\n    values='val0', index='row', columns='col',\n    fill_value=0, aggfunc='mean')\n\ncol   col0   col1   col2   col3  col4\nrow                                  \nrow0  0.77  0.605  0.000  0.860  0.65\nrow2  0.13  0.000  0.395  0.500  0.25\nrow3  0.00  0.310  0.000  0.545  0.00\nrow4  0.00  0.100  0.395  0.760  0.24\n</code></pre></li>\n</ul></li>\n<li><p><code>pd.DataFrame.groupby</code></p>\n\n<pre><code>df.groupby(['row', 'col'])['val0'].mean().unstack(fill_value=0)\n</code></pre></li>\n<li><p><code>pd.crosstab</code></p>\n\n<pre><code>pd.crosstab(\n    index=df['row'], columns=df['col'],\n    values=df['val0'], aggfunc='mean').fillna(0)\n</code></pre></li>\n</ul>\n\n<hr>\n\n<h2>Question 4</h2>\n\n<blockquote>\n  <p>Can I get something other than <code>mean</code>, like maybe <code>sum</code>?</p>\n</blockquote>\n\n<ul>\n<li><p><code>pd.DataFrame.pivot_table</code></p>\n\n<pre><code>df.pivot_table(\n    values='val0', index='row', columns='col',\n    fill_value=0, aggfunc='sum')\n\ncol   col0  col1  col2  col3  col4\nrow                               \nrow0  0.77  1.21  0.00  0.86  0.65\nrow2  0.13  0.00  0.79  0.50  0.50\nrow3  0.00  0.31  0.00  1.09  0.00\nrow4  0.00  0.10  0.79  1.52  0.24\n</code></pre></li>\n<li><p><code>pd.DataFrame.groupby</code></p>\n\n<pre><code>df.groupby(['row', 'col'])['val0'].sum().unstack(fill_value=0)\n</code></pre></li>\n<li><p><code>pd.crosstab</code></p>\n\n<pre><code>pd.crosstab(\n    index=df['row'], columns=df['col'],\n    values=df['val0'], aggfunc='sum').fillna(0)\n</code></pre></li>\n</ul>\n\n<hr>\n\n<h2>Question 5</h2>\n\n<blockquote>\n  <p>Can I do more that one aggregation at a time?</p>\n</blockquote>\n\n<p>Notice that for <code>pivot_table</code> and <code>cross_tab</code> I needed to pass list of callables.  On the other hand, <code>groupby.agg</code> is able to take strings for a limited number of special functions.  <code>groupby.agg</code> would also have taken the same callables we passed to the others, but it is often more efficient to leverage the string function names as there are efficiencies to be gained.</p>\n\n<ul>\n<li><p><code>pd.DataFrame.pivot_table</code></p>\n\n<pre><code>df.pivot_table(\n    values='val0', index='row', columns='col',\n    fill_value=0, aggfunc=[np.size, np.mean])\n\n     size                      mean                           \ncol  col0 col1 col2 col3 col4  col0   col1   col2   col3  col4\nrow                                                           \nrow0    1    2    0    1    1  0.77  0.605  0.000  0.860  0.65\nrow2    1    0    2    1    2  0.13  0.000  0.395  0.500  0.25\nrow3    0    1    0    2    0  0.00  0.310  0.000  0.545  0.00\nrow4    0    1    2    2    1  0.00  0.100  0.395  0.760  0.24\n</code></pre></li>\n<li><p><code>pd.DataFrame.groupby</code></p>\n\n<pre><code>df.groupby(['row', 'col'])['val0'].agg(['size', 'mean']).unstack(fill_value=0)\n</code></pre></li>\n<li><p><code>pd.crosstab</code></p>\n\n<pre><code>pd.crosstab(\n    index=df['row'], columns=df['col'],\n    values=df['val0'], aggfunc=[np.size, np.mean]).fillna(0, downcast='infer')\n</code></pre></li>\n</ul>\n\n<hr>\n\n<h2>Question 6</h2>\n\n<blockquote>\n  <p>Can I aggregate over multiple value columns?</p>\n</blockquote>\n\n<ul>\n<li><p><code>pd.DataFrame.pivot_table</code> we pass <code>values=['val0', 'val1']</code> but we could've left that off completely</p>\n\n<pre><code>df.pivot_table(\n    values=['val0', 'val1'], index='row', columns='col',\n    fill_value=0, aggfunc='mean')\n\n      val0                             val1                          \ncol   col0   col1   col2   col3  col4  col0   col1  col2   col3  col4\nrow                                                                  \nrow0  0.77  0.605  0.000  0.860  0.65  0.01  0.745  0.00  0.010  0.02\nrow2  0.13  0.000  0.395  0.500  0.25  0.45  0.000  0.34  0.440  0.79\nrow3  0.00  0.310  0.000  0.545  0.00  0.00  0.230  0.00  0.075  0.00\nrow4  0.00  0.100  0.395  0.760  0.24  0.00  0.070  0.42  0.300  0.46\n</code></pre></li>\n<li><p><code>pd.DataFrame.groupby</code></p>\n\n<pre><code>df.groupby(['row', 'col'])['val0', 'val1'].mean().unstack(fill_value=0)\n</code></pre></li>\n</ul>\n\n<hr>\n\n<h2>Question 7</h2>\n\n<blockquote>\n  <p>Can Subdivide by multiple columns?</p>\n</blockquote>\n\n<ul>\n<li><p><code>pd.DataFrame.pivot_table</code></p>\n\n<pre><code>df.pivot_table(\n    values='val0', index='row', columns=['item', 'col'],\n    fill_value=0, aggfunc='mean')\n\nitem item0             item1                         item2                   \ncol   col2  col3  col4  col0  col1  col2  col3  col4  col0   col1  col3  col4\nrow                                                                          \nrow0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.605  0.86  0.65\nrow2  0.35  0.00  0.37  0.00  0.00  0.44  0.00  0.00  0.13  0.000  0.50  0.13\nrow3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.000  0.28  0.00\nrow4  0.15  0.64  0.00  0.00  0.10  0.64  0.88  0.24  0.00  0.000  0.00  0.00\n</code></pre></li>\n<li><p><code>pd.DataFrame.groupby</code></p>\n\n<pre><code>df.groupby(\n    ['row', 'item', 'col']\n)['val0'].mean().unstack(['item', 'col']).fillna(0).sort_index(1)\n</code></pre></li>\n</ul>\n\n<hr>\n\n<h2>Question 8</h2>\n\n<blockquote>\n  <p>Can Subdivide by multiple columns?</p>\n</blockquote>\n\n<ul>\n<li><p><code>pd.DataFrame.pivot_table</code></p>\n\n<pre><code>df.pivot_table(\n    values='val0', index=['key', 'row'], columns=['item', 'col'],\n    fill_value=0, aggfunc='mean')\n\nitem      item0             item1                         item2                  \ncol        col2  col3  col4  col0  col1  col2  col3  col4  col0  col1  col3  col4\nkey  row                                                                         \nkey0 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.86  0.00\n     row2  0.00  0.00  0.37  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.50  0.00\n     row3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.00  0.00  0.00\n     row4  0.15  0.64  0.00  0.00  0.00  0.00  0.00  0.24  0.00  0.00  0.00  0.00\nkey1 row0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.81  0.00  0.65\n     row2  0.35  0.00  0.00  0.00  0.00  0.44  0.00  0.00  0.00  0.00  0.00  0.13\n     row3  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.28  0.00\n     row4  0.00  0.00  0.00  0.00  0.10  0.00  0.00  0.00  0.00  0.00  0.00  0.00\nkey2 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.40  0.00  0.00\n     row2  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.13  0.00  0.00  0.00\n     row4  0.00  0.00  0.00  0.00  0.00  0.64  0.88  0.00  0.00  0.00  0.00  0.00\n</code></pre></li>\n<li><p><code>pd.DataFrame.groupby</code></p>\n\n<pre><code>df.groupby(\n    ['key', 'row', 'item', 'col']\n)['val0'].mean().unstack(['item', 'col']).fillna(0).sort_index(1)\n</code></pre></li>\n<li><p><code>pd.DataFrame.set_index</code> because the set of keys are unique for both rows and columns</p>\n\n<pre><code>df.set_index(\n    ['key', 'row', 'item', 'col']\n)['val0'].unstack(['item', 'col']).fillna(0).sort_index(1)\n</code></pre></li>\n</ul>\n\n<hr>\n\n<h2>Question 9</h2>\n\n<blockquote>\n  <p>Can I aggregate the frequency in which the column and rows occur together, aka \"cross tabulation\"?</p>\n</blockquote>\n\n<ul>\n<li><p><code>pd.DataFrame.pivot_table</code></p>\n\n<pre><code>df.pivot_table(index='row', columns='col', fill_value=0, aggfunc='size')\n\n    col   col0  col1  col2  col3  col4\nrow                               \nrow0     1     2     0     1     1\nrow2     1     0     2     1     2\nrow3     0     1     0     2     0\nrow4     0     1     2     2     1\n</code></pre></li>\n<li><p><code>pd.DataFrame.groupby</code></p>\n\n<pre><code>df.groupby(['row', 'col'])['val0'].size().unstack(fill_value=0)\n</code></pre></li>\n<li><p><code>pd.cross_tab</code></p>\n\n<pre><code>pd.crosstab(df['row'], df['col'])\n</code></pre></li>\n<li><p><code>pd.factorize</code> + <code>np.bincount</code></p>\n\n<pre><code># get integer factorization `i` and unique values `r`\n# for column `'row'`\ni, r = pd.factorize(df['row'].values)\n# get integer factorization `j` and unique values `c`\n# for column `'col'`\nj, c = pd.factorize(df['col'].values)\n# `n` will be the number of rows\n# `m` will be the number of columns\nn, m = r.size, c.size\n# `i * m + j` is a clever way of counting the \n# factorization bins assuming a flat array of length\n# `n * m`.  Which is why we subsequently reshape as `(n, m)`\nb = np.bincount(i * m + j, minlength=n * m).reshape(n, m)\n# BTW, whenever I read this, I think 'Bean, Rice, and Cheese'\npd.DataFrame(b, r, c)\n\n      col3  col2  col0  col1  col4\nrow3     2     0     0     1     0\nrow2     1     2     1     0     2\nrow0     1     0     1     2     1\nrow4     2     2     0     1     1\n</code></pre></li>\n<li><p><code>pd.get_dummies</code></p>\n\n<pre><code>pd.get_dummies(df['row']).T.dot(pd.get_dummies(df['col']))\n\n      col0  col1  col2  col3  col4\nrow0     1     2     0     1     1\nrow2     1     0     2     1     2\nrow3     0     1     0     2     0\nrow4     0     1     2     2     1\n</code></pre></li>\n</ul>\n\n<hr>\n\n<h2>Question 10</h2>\n\n<blockquote>\n  <p>How do I convert a DataFrame from long to wide by pivoting on ONLY two\n  columns?</p>\n</blockquote>\n\n<p>The first step is to assign a number to each row - this number will be the row index of that value in the pivoted result. This is done using <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.GroupBy.cumcount.html\" rel=\"noreferrer\"><strong><code>GroupBy.cumcount</code></strong></a>:</p>\n\n<pre><code>df2.insert(0, 'count', df.groupby('A').cumcount())\ndf2\n\n   count  A   B\n0      0  a   0\n1      1  a  11\n2      2  a   2\n3      3  a  11\n4      0  b  10\n5      1  b  10\n6      2  b  14\n7      0  c   7\n</code></pre>\n\n<p>The second step is to use the newly created column as the index to call <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pivot.html\" rel=\"noreferrer\"><strong><code>DataFrame.pivot</code></strong></a>. </p>\n\n<pre><code>df2.pivot(*df)\n# df.pivot(index='count', columns='A', values='B')\n\nA         a     b    c\ncount                 \n0       0.0  10.0  7.0\n1      11.0  10.0  NaN\n2       2.0  14.0  NaN\n3      11.0   NaN  NaN\n</code></pre>\n\n<p>To do this in one line, use <code>assign</code>:</p>\n\n<pre><code>df2.assign(count=df.groupby('A').cumcount()).pivot('count', 'A', 'B')\n\nA         a     b    c\ncount                 \n0      12.0  11.0  9.0\n1       5.0   3.0  NaN\n2       0.0   7.0  NaN\n3       3.0   NaN  NaN\n</code></pre>\n"
    },
    "14": {
        "question_id": "36901",
        "answer_id": "36908",
        "question": "<p>In the following method definitions, what does the <code>*</code> and <code>**</code> do for <code>param2</code>?</p>\n\n<pre><code>def foo(param1, *param2):\ndef bar(param1, **param2):\n</code></pre>\n",
        "answer": "<p>The <code>*args</code> and <code>**kwargs</code> is a common idiom to allow arbitrary number of arguments to functions as described in the section <a href=\"http://docs.python.org/dev/tutorial/controlflow.html#more-on-defining-functions\" rel=\"noreferrer\">more on defining functions</a> in the Python documentation.</p>\n\n<p>The <code>*args</code> will give you all function parameters <a href=\"https://docs.python.org/dev/tutorial/controlflow.html#arbitrary-argument-lists\" rel=\"noreferrer\">as a tuple</a>:</p>\n\n<pre><code>In [1]: def foo(*args):\n   ...:     for a in args:\n   ...:         print a\n   ...:         \n   ...:         \n\nIn [2]: foo(1)\n1\n\n\nIn [4]: foo(1,2,3)\n1\n2\n3\n</code></pre>\n\n<p>The <code>**kwargs</code> will give you all \n<strong>keyword arguments</strong> except for those corresponding to a formal parameter as a dictionary.</p>\n\n<pre><code>In [5]: def bar(**kwargs):\n   ...:     for a in kwargs:\n   ...:         print a, kwargs[a]\n   ...:         \n   ...:         \n\nIn [6]: bar(name='one', age=27)\nage 27\nname one\n</code></pre>\n\n<p>Both idioms can be mixed with normal arguments to allow a set of fixed and some variable arguments:</p>\n\n<pre><code>def foo(kind, *args, **kwargs):\n   pass\n</code></pre>\n\n<p>Another usage of the <code>*l</code> idiom is to <strong>unpack argument lists</strong> when calling a function.</p>\n\n<pre><code>In [9]: def foo(bar, lee):\n   ...:     print bar, lee\n   ...:     \n   ...:     \n\nIn [10]: l = [1,2]\n\nIn [11]: foo(*l)\n1 2\n</code></pre>\n\n<p>In Python 3 it is possible to use <code>*l</code> on the left side of an assignment (<a href=\"http://www.python.org/dev/peps/pep-3132/\" rel=\"noreferrer\">Extended Iterable Unpacking</a>), though it gives a list instead of a tuple in this context:</p>\n\n<pre><code>first, *rest = [1,2,3,4]\nfirst, *l, last = [1,2,3,4]\n</code></pre>\n\n<p>Also Python 3 adds new semantic (refer <a href=\"https://www.python.org/dev/peps/pep-3102/\" rel=\"noreferrer\">PEP 3102</a>):</p>\n\n<pre><code>def func(arg1, arg2, arg3, *, kwarg1, kwarg2):\n    pass\n</code></pre>\n\n<p>Such function accepts only 3 positional arguments, and everything after <code>*</code> can only be passed as keyword arguments.</p>\n"
    },
    "15": {
        "question_id": "291978",
        "answer_id": "292502",
        "question": "<p>What <strong>exactly</strong> are the Python scoping rules?</p>\n\n<p>If I have some code:</p>\n\n<pre><code>code1\nclass Foo:\n   code2\n   def spam.....\n      code3\n      for code4..:\n       code5\n       x()\n</code></pre>\n\n<p>Where is <code>x</code> found?  Some possible choices include the list below:</p>\n\n<ol>\n<li>In the enclosing source file</li>\n<li>In the class namespace</li>\n<li>In the function definition</li>\n<li>In the for loop index variable</li>\n<li>Inside the for loop</li>\n</ol>\n\n<p>Also there is the context during execution, when the function <code>spam</code> is passed somewhere else. And maybe <a href=\"https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions\" rel=\"noreferrer\">lambda functions</a> pass a bit differently?</p>\n\n<p>There must be a simple reference or algorithm somewhere.  It's a confusing world for intermediate Python programmers.</p>\n",
        "answer": "<p>Actually, a concise rule for Python Scope resolution, from <a href=\"https://rads.stackoverflow.com/amzn/click/com/0596513984\" rel=\"noreferrer\" rel=\"nofollow noreferrer\">Learning Python, 3rd. Ed.</a>. (These rules are specific to variable names, not attributes. If you reference it without a period, these rules apply)</p>\n\n<p>LEGB Rule.</p>\n\n<p><strong>L</strong>, Local \u2014 Names assigned in any way within a function (<code>def</code> or <code>lambda</code>)), and not declared global in that function.</p>\n\n<p><strong>E</strong>, Enclosing-function locals \u2014 Name in the local scope of any and all statically enclosing functions (<code>def</code> or <code>lambda</code>), from inner to outer.</p>\n\n<p><strong>G</strong>, Global (module) \u2014 Names assigned at the top-level of a module file, or by executing a <code>global</code> statement in a <code>def</code> within the file.</p>\n\n<p><strong>B</strong>, Built-in (Python) \u2014 Names preassigned in the built-in names module : <code>open</code>,<code>range</code>,<code>SyntaxError</code>,...</p>\n\n<p>So, in the case of</p>\n\n<pre><code>code1\nclass Foo:\n   code2\n   def spam.....\n      code3\n      for code4..:\n       code5\n       x()\n</code></pre>\n\n<p>The for loop does not have its own namespace. In LEGB order, the scopes would be </p>\n\n<p>L : local, in <code>def spam</code> (in <code>code3</code>, <code>code 4</code>, <code>code5</code>).</p>\n\n<p>E : Enclosed function, any enclosing functions (if the whole example were in another <code>def</code>)</p>\n\n<p>G : Global. Were there any <code>x</code> declared globally in the module (<code>code1</code>)?</p>\n\n<p>B : Any builtin <code>x</code> in Python.</p>\n\n<p><code>x</code> will never be found in <code>code2</code> (even in cases where you might expect it would, see <a href=\"https://stackoverflow.com/a/23471004/2810305\">Antti's answer</a> or <a href=\"https://stackoverflow.com/q/13905741/2810305\">here</a>).</p>\n"
    },
    "16": {
        "question_id": "423379",
        "answer_id": "423596",
        "question": "<p>How can I create or use a global variable in a function?</p>\n\n<p>If I create a global variable in one function, how can I use that global variable in another function? Do I need to store the global variable in a local variable of the function which needs its access?</p>\n",
        "answer": "<p>You can use a global variable in other functions by declaring it as <code>global</code> in each function that assigns to it:</p>\n\n<pre><code>globvar = 0\n\ndef set_globvar_to_one():\n    global globvar    # Needed to modify global copy of globvar\n    globvar = 1\n\ndef print_globvar():\n    print(globvar)     # No need for global declaration to read value of globvar\n\nset_globvar_to_one()\nprint_globvar()       # Prints 1\n</code></pre>\n\n<p>I imagine the reason for it is that, since global variables are so dangerous, Python wants to make sure that you really know that's what you're playing with by explicitly requiring the <code>global</code> keyword.</p>\n\n<p>See other answers if you want to share a global variable across modules.</p>\n"
    },
    "17": {
        "question_id": "53645882",
        "answer_id": "53645883",
        "question": "<ul>\n<li>How to perform a (<code>LEFT</code>|<code>RIGHT</code>|<code>FULL</code>) (<code>INNER</code>|<code>OUTER</code>) join with pandas?</li>\n<li>How do I add NaNs for missing rows after merge?</li>\n<li>How do I get rid of NaNs after merging?</li>\n<li>Can I merge on the index?</li>\n<li><a href=\"https://stackoverflow.com/questions/53699012/performant-cartesian-product-cross-join-of-two-pandas-dataframes/53699013#53699013\">Cross join with pandas?</a></li>\n<li>How do I merge multiple DataFrames?   </li>\n<li><code>merge</code>? <code>join</code>? <code>concat</code>? <code>update</code>? Who? What? Why?!</li>\n</ul>\n\n<p>... and more. I've seen these recurring questions asking about various facets of the pandas merge functionality. Most of the information regarding merge and its various use cases today is fragmented across dozens of badly worded, unsearchable posts. The aim here is to collate some of the more important points for posterity.</p>\n\n<p>This QnA is meant to be the next installment in a series of helpful  user-guides on common pandas idioms (see <a href=\"https://stackoverflow.com/questions/47152691/how-to-pivot-a-dataframe\">this post on pivoting</a>, and <a href=\"https://stackoverflow.com/questions/49620538/what-are-the-levels-keys-and-names-arguments-for-in-pandas-concat-functio\">this post on concatenation</a>, which I will be touching on, later). </p>\n\n<p>Please note that this post is <em>not</em> meant to be a replacement for the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html\" rel=\"noreferrer\">documentation</a>, so please read that as well! Some of the examples are taken from there. </p>\n",
        "answer": "<p>This post aims to give readers a primer on SQL-flavoured merging with pandas, how to use it, and when not to use it.</p>\n\n<p>In particular, here's what this post will go through:</p>\n\n<ul>\n<li><p>The basics - types of joins (LEFT, RIGHT, OUTER, INNER)</p>\n\n<ul>\n<li>merging with different column names</li>\n<li>avoiding duplicate merge key column in output   </li>\n</ul></li>\n<li>Merging with index under different conditions \n\n<ul>\n<li>effectively using your named index</li>\n<li>merge key as the index of one and column of another</li>\n</ul></li>\n<li>Multiway merges on columns and indexes (unique and non-unique)</li>\n<li>Notable alternatives to <code>merge</code> and <code>join</code></li>\n</ul>\n\n<p>What this post will not go through:</p>\n\n<ul>\n<li>Performance-related discussions and timings (for now). Mostly notable mentions of better alternatives, wherever appropriate.</li>\n<li>Handling suffixes, removing extra columns, renaming outputs, and other specific use cases. There are other (read: better) posts that deal with that, so figure it out!</li>\n</ul>\n\n<blockquote>\n  <p><strong>Note</strong><br>\n  Most examples default to INNER JOIN operations while demonstrating various features, unless otherwise specified. </p>\n  \n  <p>Furthermore, all the DataFrames here can be copied and replicated so\n  you can play with them. Also, see <a href=\"https://stackoverflow.com/questions/31610889/how-to-copy-paste-dataframe-from-stackoverflow-into-python\">this\n  post</a>\n  on how to read DataFrames from your clipboard.</p>\n  \n  <p>Lastly, all visual representation of JOIN operations have been hand-drawn using Google Drawings. Inspiration from <a href=\"https://stackoverflow.com/a/55858991/4909087\">here</a>.</p>\n</blockquote>\n\n<h1>Enough Talk, just show me how to use <code>merge</code>!</h1>\n\n<p><strong>Setup</strong>    </p>\n\n<pre><code>np.random.seed(0)\nleft = pd.DataFrame({'key': ['A', 'B', 'C', 'D'], 'value': np.random.randn(4)})    \nright = pd.DataFrame({'key': ['B', 'D', 'E', 'F'], 'value': np.random.randn(4)})\n\nleft\n\n  key     value\n0   A  1.764052\n1   B  0.400157\n2   C  0.978738\n3   D  2.240893\n\nright\n\n  key     value\n0   B  1.867558\n1   D -0.977278\n2   E  0.950088\n3   F -0.151357\n</code></pre>\n\n<p>For the sake of simplicity, the key column has the same name (for now).</p>\n\n<p>An <strong>INNER JOIN</strong> is represented by </p>\n\n<p><img src=\"https://i.stack.imgur.com/YvuOa.png\" width=\"500\"/></p>\n\n<blockquote>\n  <p><strong>Note</strong><br>\n  This, along with the forthcoming figures all follow this convention:</p>\n  \n  <ul>\n  <li><strong>blue</strong> indicates rows that are present in the merge result</li>\n  <li><strong>red</strong> indicates rows that are excluded from the result (i.e., removed)</li>\n  <li><strong>green</strong> indicates missing values that are replaced with NaNs in the result</li>\n  </ul>\n</blockquote>\n\n<p>To perform an INNER JOIN, call <a href=\"https://pandas-docs.github.io/pandas-docs-travis/generated/pandas.merge.html\" rel=\"noreferrer\"><code>pd.merge</code></a> specifying the left DataFrame, the right DataFrame, and the join key. </p>\n\n<pre><code>pd.merge(left, right, on='key')\n\n  key   value_x   value_y\n0   B  0.400157  1.867558\n1   D  2.240893 -0.977278\n</code></pre>\n\n<p>This returns only rows from <code>left</code> and <code>right</code> which share a common key (in this example, \"B\" and \"D). </p>\n\n<p>In more recent versions of pandas (v0.21 or so), <code>merge</code> is now a first order function, so you can call <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.merge.html\" rel=\"noreferrer\"><code>DataFrame.merge</code></a>. </p>\n\n<pre><code>left.merge(right, on='key')\n# Or, if you want to be explicit\n# left.merge(right, on='key', how='inner')\n\n  key   value_x   value_y\n0   B  0.400157  1.867558\n1   D  2.240893 -0.977278\n</code></pre>\n\n<p>A <strong>LEFT OUTER JOIN</strong>, or LEFT JOIN  is represented by </p>\n\n<p><img src=\"https://i.stack.imgur.com/BECid.png\" width=\"500\" /></p>\n\n<p>This can be performed by specifying <code>how='left'</code>. </p>\n\n<pre><code>left.merge(right, on='key', how='left')\n\n  key   value_x   value_y\n0   A  1.764052       NaN\n1   B  0.400157  1.867558\n2   C  0.978738       NaN\n3   D  2.240893 -0.977278\n</code></pre>\n\n<p>Carefully note the placement of NaNs here. If you specify <code>how='left'</code>, then only keys from <code>left</code> are used, and missing data from <code>right</code> is replaced by NaN.</p>\n\n<p>And similarly, for a <strong>RIGHT OUTER JOIN</strong>, or RIGHT JOIN which is...</p>\n\n<p><img src=\"https://i.stack.imgur.com/8w1US.png\" width=\"500\" /></p>\n\n<p>...specify <code>how='right'</code>:</p>\n\n<pre><code>left.merge(right, on='key', how='right')\n\n  key   value_x   value_y\n0   B  0.400157  1.867558\n1   D  2.240893 -0.977278\n2   E       NaN  0.950088\n3   F       NaN -0.151357\n</code></pre>\n\n<p>Here, keys from <code>right</code> are used, and missing data from <code>left</code> is replaced by NaN.</p>\n\n<p>Finally, for the <strong>FULL OUTER JOIN</strong>, given by</p>\n\n<p><img src=\"https://i.stack.imgur.com/euLoe.png\" width=\"500\" /></p>\n\n<p>specify <code>how='outer'</code>.</p>\n\n<pre><code>left.merge(right, on='key', how='outer')\n\n  key   value_x   value_y\n0   A  1.764052       NaN\n1   B  0.400157  1.867558\n2   C  0.978738       NaN\n3   D  2.240893 -0.977278\n4   E       NaN  0.950088\n5   F       NaN -0.151357\n</code></pre>\n\n<p>This uses the keys from both frames, and NaNs are inserted for missing rows in both.  </p>\n\n<p>The documentation summarises these various merges nicely:</p>\n\n<p><a href=\"https://i.stack.imgur.com/5qDIy.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/5qDIy.png\" alt=\"enter image description here\"></a></p>\n\n<h3><strong>Other JOINs - LEFT-Excluding, RIGHT-Excluding, and FULL-Excluding/ANTI JOINs</strong></h3>\n\n<p>If you need <strong>LEFT-Excluding JOINs</strong> and <strong>RIGHT-Excluding JOINs</strong> in two steps.</p>\n\n<p>For LEFT-Excluding JOIN, represented as</p>\n\n<p><img src=\"https://i.stack.imgur.com/bXWIV.png\" width=\"500\"/></p>\n\n<p>Start by performing a LEFT OUTER JOIN and then filtering (excluding!) rows coming from <code>left</code> only,</p>\n\n<pre><code>(left.merge(right, on='key', how='left', indicator=True)\n     .query('_merge == \"left_only\"')\n     .drop('_merge', 1))\n\n  key   value_x  value_y\n0   A  1.764052      NaN\n2   C  0.978738      NaN\n</code></pre>\n\n<p>Where,</p>\n\n<pre><code>left.merge(right, on='key', how='left', <b>indicator=True</b>)\n\n  key   value_x   value_y     _merge\n0   A  1.764052       NaN  left_only\n1   B  0.400157  1.867558       both\n2   C  0.978738       NaN  left_only\n3   D  2.240893 -0.977278       both</code></pre>\n\n<p>And similarly, for a RIGHT-Excluding JOIN, </p>\n\n<p><img src=\"https://i.stack.imgur.com/Z0br2.png\" width=\"500\"/></p>\n\n<pre><code>(left.merge(right, on='key', how='right', <b>indicator=True</b>)\n     .query('_merge == \"right_only\"')\n     .drop('_merge', 1))\n\n  key  value_x   value_y\n2   E      NaN  0.950088\n3   F      NaN -0.151357</code></pre>\n\n<p>Lastly, if you are required to do a merge that only retains keys from the left or right, but not both (IOW, performing an <strong>ANTI-JOIN</strong>), </p>\n\n<p><img src=\"https://i.stack.imgur.com/PWMYd.png\" width=\"500\"/></p>\n\n<p>You can do this in similar fashion\u2014</p>\n\n<pre><code>(left.merge(right, on='key', how='outer', indicator=True)\n     .query('_merge != \"both\"')\n     .drop('_merge', 1))\n\n  key   value_x   value_y\n0   A  1.764052       NaN\n2   C  0.978738       NaN\n4   E       NaN  0.950088\n5   F       NaN -0.151357\n</code></pre>\n\n<h3><strong>Different names for key columns</strong></h3>\n\n<p>If the key columns are named differently\u2014for example, <code>left</code> has <code>keyLeft</code>, and <code>right</code> has <code>keyRight</code> instead of <code>key</code>\u2014then you will have to specify <code>left_on</code> and <code>right_on</code> as arguments instead of <code>on</code>:</p>\n\n<pre><code>left2 = left.rename({'key':'keyLeft'}, axis=1)\nright2 = right.rename({'key':'keyRight'}, axis=1)\n\nleft2\n\n  keyLeft     value\n0       A  1.764052\n1       B  0.400157\n2       C  0.978738\n3       D  2.240893\n\nright2\n\n  keyRight     value\n0        B  1.867558\n1        D -0.977278\n2        E  0.950088\n3        F -0.151357\n</code></pre>\n\n<p></p>\n\n<pre><code>left2.merge(right2, left_on='keyLeft', right_on='keyRight', how='inner')\n\n  keyLeft   value_x keyRight   value_y\n0       B  0.400157        B  1.867558\n1       D  2.240893        D -0.977278\n</code></pre>\n\n<h3><strong>Avoiding duplicate key column in output</strong></h3>\n\n<p>When merging on <code>keyLeft</code> from <code>left</code> and <code>keyRight</code> from <code>right</code>, if you only want either of the <code>keyLeft</code> or <code>keyRight</code> (but not both) in the output, you can start by setting the index as a preliminary step.</p>\n\n<pre><code>left3 = left2.set_index('keyLeft')\nleft3.merge(right2, left_index=True, right_on='keyRight')\n\n    value_x keyRight   value_y\n0  0.400157        B  1.867558\n1  2.240893        D -0.977278\n</code></pre>\n\n<p>Contrast this with the output of the command just before (thst is, the output of <code>left2.merge(right2, left_on='keyLeft', right_on='keyRight', how='inner')</code>), you'll notice <code>keyLeft</code> is missing. You can figure out what column to keep based on which frame's index is set as the key. This may matter when, say, performing some OUTER JOIN operation. </p>\n\n<h3><strong>Merging only a single column from one of the <code>DataFrames</code></strong></h3>\n\n<p>For example, consider</p>\n\n<pre><code>right3 = right.assign(newcol=np.arange(len(right)))\nright3\n  key     value  newcol\n0   B  1.867558       0\n1   D -0.977278       1\n2   E  0.950088       2\n3   F -0.151357       3\n</code></pre>\n\n<p>If you are required to merge only \"new_val\" (without any of the other columns), you can usually just subset columns before merging:</p>\n\n<pre><code>left.merge(right3[['key', 'newcol']], on='key')\n\n  key     value  newcol\n0   B  0.400157       0\n1   D  2.240893       1\n</code></pre>\n\n<p>If you're doing a LEFT OUTER JOIN, a more performant solution would involve <code>map</code>:</p>\n\n<pre><code># left['newcol'] = left['key'].map(right3.set_index('key')['newcol']))\nleft.assign(newcol=left['key'].map(right3.set_index('key')['newcol']))\n\n  key     value  newcol\n0   A  1.764052     NaN\n1   B  0.400157     0.0\n2   C  0.978738     NaN\n3   D  2.240893     1.0\n</code></pre>\n\n<p>As mentioned, this is similar to, but faster than</p>\n\n<pre><code>left.merge(right3[['key', 'newcol']], on='key', how='left')\n\n  key     value  newcol\n0   A  1.764052     NaN\n1   B  0.400157     0.0\n2   C  0.978738     NaN\n3   D  2.240893     1.0\n</code></pre>\n\n<h3><strong>Merging on multiple columns</strong></h3>\n\n<p>To join on more than one column, specify a list for <code>on</code> (or <code>left_on</code> and <code>right_on</code>, as appropriate).</p>\n\n<pre><code>left.merge(right, on=['key1', 'key2'] ...)\n</code></pre>\n\n<p>Or, in the event the names are different,</p>\n\n<pre><code>left.merge(right, left_on=['lkey1', 'lkey2'], right_on=['rkey1', 'rkey2'])\n</code></pre>\n\n<h3><strong>Other useful <code>merge*</code> operations and functions</strong></h3>\n\n<ul>\n<li><strong>Merging a DataFrame with Series on index</strong>: See <a href=\"https://stackoverflow.com/a/40762674/4909087\">this answer</a>.</li>\n<li><p>Besides <code>merge</code>, <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.update.html\" rel=\"noreferrer\"><code>DataFrame.update</code></a> and <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.combine_first.html\" rel=\"noreferrer\"><code>DataFrame.combine_first</code></a> are also used in certain cases to update one DataFrame with another.</p></li>\n<li><p><a href=\"http://pandas.pydata.org/pandas-docs/version/0.19.0/generated/pandas.merge_ordered.html\" rel=\"noreferrer\"><code>pd.merge_ordered</code></a> is a useful function for ordered JOINs.</p></li>\n<li><p><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.merge_asof.html\" rel=\"noreferrer\"><code>pd.merge_asof</code></a> (read: merge_asOf) is useful for <em>approximate</em> joins.</p></li>\n</ul>\n\n<p><strong>This section only covers the very basics, and is designed to only whet your appetite. For more examples and cases, see the <a href=\"https://pandas.pydata.org/pandas-docs/stable/merging.html\" rel=\"noreferrer\">documentation on <code>merge</code>, <code>join</code>, and <code>concat</code></a> as well as the links to the function specs.</strong></p>\n\n<hr>\n\n<h1>Index-based *-JOIN (+ index-column <code>merge</code>s)</h1>\n\n<p><strong>Setup</strong></p>\n\n<pre><code>np.random.seed([3, 14])\nleft = pd.DataFrame({'value': np.random.randn(4)}, index=['A', 'B', 'C', 'D'])    \nright = pd.DataFrame({'value': np.random.randn(4)}, index=['B', 'D', 'E', 'F'])\nleft.index.name = right.index.name = 'idxkey'\n\nleft\n           value\nidxkey          \nA      -0.602923\nB      -0.402655\nC       0.302329\nD      -0.524349\n\nright\n\n           value\nidxkey          \nB       0.543843\nD       0.013135\nE      -0.326498\nF       1.385076\n</code></pre>\n\n<p>Typically, a merge on index would look like this:</p>\n\n<pre><code>left.merge(right, left_index=True, right_index=True)\n\n\n         value_x   value_y\nidxkey                    \nB      -0.402655  0.543843\nD      -0.524349  0.013135\n</code></pre>\n\n<h3><strong>Support for index names</strong></h3>\n\n<p>If your index is named, then v0.23 users can also specify the level name to <code>on</code> (or <code>left_on</code> and <code>right_on</code> as necessary).</p>\n\n<pre><code>left.merge(right, on='idxkey')\n\n         value_x   value_y\nidxkey                    \nB      -0.402655  0.543843\nD      -0.524349  0.013135\n</code></pre>\n\n<h3><strong>Merging on index of one, column(s) of another</strong></h3>\n\n<p>It is possible (and quite simple) to use the index of one, and the column of another, to perform a merge. For example,</p>\n\n<pre><code>left.merge(right, left_on='key1', right_index=True)\n</code></pre>\n\n<p>Or vice versa (<code>right_on=...</code> and <code>left_index=True</code>). </p>\n\n<pre><code>right2 = right.reset_index().rename({'idxkey' : 'colkey'}, axis=1)\nright2\n\n  colkey     value\n0      B  0.543843\n1      D  0.013135\n2      E -0.326498\n3      F  1.385076\n\nleft.merge(right2, left_index=True, right_on='colkey')\n\n    value_x colkey   value_y\n0 -0.402655      B  0.543843\n1 -0.524349      D  0.013135\n</code></pre>\n\n<p>In this special case, the index for <code>left</code> is named, so you can also use the index name with <code>left_on</code>, like this:</p>\n\n<pre><code>left.merge(right2, left_on='idxkey', right_on='colkey')\n\n    value_x colkey   value_y\n0 -0.402655      B  0.543843\n1 -0.524349      D  0.013135\n</code></pre>\n\n<p><strong><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.join.html\" rel=\"noreferrer\"><code>DataFrame.join</code></a></strong><br>\nBesides these, there is another succinct option. You can use <code>DataFrame.join</code> which defaults to joins on the index. <code>DataFrame.join</code> does a LEFT OUTER JOIN by default, so <code>how='inner'</code> is necessary here.</p>\n\n<pre><code>left.join(right, how='inner', lsuffix='_x', rsuffix='_y')\n\n         value_x   value_y\nidxkey                    \nB      -0.402655  0.543843\nD      -0.524349  0.013135\n</code></pre>\n\n<p>Note that I needed to specify the <code>lsuffix</code> and <code>rsuffix</code> arguments since <code>join</code> would otherwise error out:</p>\n\n<pre><code>left.join(right)\nValueError: columns overlap but no suffix specified: Index(['value'], dtype='object')\n</code></pre>\n\n<p>Since the column names are the same. This would not be a problem if they were differently named.</p>\n\n<pre><code>left.rename(columns={'value':'leftvalue'}).join(right, how='inner')\n\n        leftvalue     value\nidxkey                     \nB       -0.402655  0.543843\nD       -0.524349  0.013135\n</code></pre>\n\n<p><strong><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.concat.html\" rel=\"noreferrer\"><code>pd.concat</code></a></strong><br>\nLastly, as an alternative for index-based joins, you can use <code>pd.concat</code>:</p>\n\n<pre><code>pd.concat([left, right], axis=1, sort=False, join='inner')\n\n           value     value\nidxkey                    \nB      -0.402655  0.543843\nD      -0.524349  0.013135\n</code></pre>\n\n<p>Omit <code>join='inner'</code> if you need a FULL OUTER JOIN (the default):</p>\n\n<pre><code>pd.concat([left, right], axis=1, sort=False)\n\n      value     value\nA -0.602923       NaN\nB -0.402655  0.543843\nC  0.302329       NaN\nD -0.524349  0.013135\nE       NaN -0.326498\nF       NaN  1.385076\n</code></pre>\n\n<p>For more information, see <a href=\"https://stackoverflow.com/questions/49620538/what-are-the-levels-keys-and-names-arguments-for-in-pandas-concat-functio/49620539#49620539\">this canonical post on <code>pd.concat</code> by @piRSquared</a>.</p>\n\n<hr>\n\n<h1>Generalizing: <code>merge</code>ing multiple DataFrames</h1>\n\n<p><strong>Setup</strong></p>\n\n<pre><code>np.random.seed(0)\nA = pd.DataFrame({'key': ['A', 'B', 'C', 'D'], 'valueA': np.random.randn(4)})    \nB = pd.DataFrame({'key': ['B', 'D', 'E', 'F'], 'valueB': np.random.randn(4)})\nC = pd.DataFrame({'key': ['D', 'E', 'J', 'C'], 'valueC': np.ones(4)})\ndfs = [A, B, C]   \n</code></pre>\n\n<p>Oftentimes, the situation arises when multiple DataFrames are to be merged together. Naively, this can be done by chaining <code>merge</code> calls:</p>\n\n<pre><code>A.merge(B, on='key').merge(C, on='key')\n\n  key    valueA    valueB  valueC\n0   D  2.240893 -0.977278     1.0\n</code></pre>\n\n<p>However, this quickly gets out of hand for many DataFrames. Furthermore, it may be necessary to generalise for an unknown number of DataFrames. To do this, one often used simple trick is with <a href=\"https://docs.python.org/3/library/functools.html#functools.reduce\" rel=\"noreferrer\"><code>functools.reduce</code></a>, and you can use it to achieve a INNER JOIN like so:</p>\n\n<pre><code>from functools import reduce\nreduce(pd.merge, dfs)\n\n  key    valueA    valueB  valueC\n0   D  2.240893 -0.977278     1.0\n</code></pre>\n\n<p>Note that every column besides the \"key\" column should be differently named for this to work out-of-box. Otherwise, you may need to use a <code>lambda</code>.</p>\n\n<p>For a FULL OUTER JOIN, you can <a href=\"https://en.wikipedia.org/wiki/Currying\" rel=\"noreferrer\">curry</a> <code>pd.merge</code> using <a href=\"https://docs.python.org/3/library/functools.html#functools.partial\" rel=\"noreferrer\"><code>functools.partial</code></a>:</p>\n\n<pre><code>from functools import partial\nouter_merge = partial(pd.merge, how='outer')\nreduce(outer_merge, dfs)\n\n  key    valueA    valueB  valueC\n0   A  1.764052       NaN     NaN\n1   B  0.400157  1.867558     NaN\n2   C  0.978738       NaN     1.0\n3   D  2.240893 -0.977278     1.0\n4   E       NaN  0.950088     1.0\n5   F       NaN -0.151357     NaN\n6   J       NaN       NaN     1.0\n</code></pre>\n\n<p>As you may have noticed, this is quite powerful\u2014you can also use it to control column names during merge. Simply add more keyword arguments as needed:</p>\n\n<pre><code>partial(pd.merge, how='outer', left_index=True, right_on=...)\n</code></pre>\n\n<p><strong>The alternative: <code>pd.concat</code></strong><br>\nIf your column values are unique, then it makes sense to use <code>pd.concat</code>, this is faster than a two-at-a-time multi-way merge. </p>\n\n<pre><code>pd.concat([\n    df.set_index('key') for df in dfs], axis=1, join='inner'\n).reset_index()\n\n  key    valueA    valueB  valueC\n0   D  2.240893 -0.977278     1.0\n</code></pre>\n\n<h3><strong>Multiway merge on unique indexes</strong></h3>\n\n<p>If you are merging multiple DataFrames on unique indexes, you should once again prefer <code>pd.concat</code> for better performance.</p>\n\n<pre><code># Note, the \"key\" column values are unique, so the index is unique.\nA2 = A.set_index('key')\nB2 = B.set_index('key')\nC2 = C.set_index('key')\ndfs2 = [A2, B2, C2]\n</code></pre>\n\n<p></p>\n\n<pre><code>pd.concat(dfs2, axis=1, sort=False, join='inner')\n\n       valueA    valueB  valueC\nkey                            \nD    2.240893 -0.977278     1.0\n</code></pre>\n\n<p>As always, omit <code>join='inner'</code> for a FULL OUTER JOIN.</p>\n\n<h3><strong>Multiway merge on indexes with duplicates</strong></h3>\n\n<p><code>concat</code> is fast, but has its shortcomings. It cannot handle duplicates.</p>\n\n<pre><code>A3 = pd.DataFrame({'key': ['A', 'B', 'C', 'D', 'D'], 'valueA': np.random.randn(5)})\n</code></pre>\n\n<p></p>\n\n<pre><code>pd.concat([df.set_index('key') for df in [A3, B, C]], axis=1, join='inner')\nValueError: Shape of passed values is (3, 4), indices imply (3, 2)\n</code></pre>\n\n<p>In this situation, <code>join</code> is the best option, since it can handle non-unique indexes (<code>join</code> calls <code>merge</code> under the hood).</p>\n\n<pre><code># For inner join. For left join, omit the \"how\" argument.\nA3.set_index('key').join([B2, C2], how='inner')\n\n       valueA    valueB  valueC\nkey                            \nD    1.454274 -0.977278     1.0\nD    0.761038 -0.977278     1.0\n</code></pre>\n"
    },
    "18": {
        "question_id": "89228",
        "answer_id": "89243",
        "question": "<p>How can I call an external command (as if I'd typed it at the Unix shell or Windows command prompt) from within a <code>Python</code> script?</p>\n",
        "answer": "<p>Look at the <a href=\"https://docs.python.org/library/subprocess.html\" rel=\"noreferrer\">subprocess module</a> in the standard library:</p>\n\n<pre><code>import subprocess\nsubprocess.run([\"ls\", \"-l\"])\n</code></pre>\n\n<p>The advantage of <strong>subprocess</strong> vs. <strong>system</strong> is that it is more flexible (you can get the stdout, stderr, the \"real\" status code, better error handling, etc...).</p>\n\n<p>The <a href=\"https://docs.python.org/library/os.html#os.system\" rel=\"noreferrer\">official documentation</a> recommends the <strong>subprocess</strong> module over the alternative os.system():</p>\n\n<blockquote>\n  <p>The <strong>subprocess</strong> module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function [<a href=\"https://docs.python.org/library/os.html#os.system\" rel=\"noreferrer\"><code>os.system()</code></a>].</p>\n</blockquote>\n\n<p>The \"<a href=\"https://docs.python.org/library/subprocess.html#replacing-older-functions-with-the-subprocess-module\" rel=\"noreferrer\">Replacing Older Functions with the subprocess Module</a>\" section in the <strong>subprocess</strong> documentation may have some helpful recipes.</p>\n\n<p>Older versions of Python use call:</p>\n\n<pre><code>import subprocess\nsubprocess.call([\"ls\", \"-l\"])\n</code></pre>\n"
    },
    "19": {
        "question_id": "231767",
        "answer_id": "231855",
        "question": "<p>What is the use of the <code>yield</code> keyword in Python? What does it do?</p>\n\n<p>For example, I'm trying to understand this code<sup><strong>1</strong></sup>:</p>\n\n<pre><code>def _get_child_candidates(self, distance, min_dist, max_dist):\n    if self._leftchild and distance - max_dist &lt; self._median:\n        yield self._leftchild\n    if self._rightchild and distance + max_dist &gt;= self._median:\n        yield self._rightchild  \n</code></pre>\n\n<p>And this is the caller:</p>\n\n<pre><code>result, candidates = [], [self]\nwhile candidates:\n    node = candidates.pop()\n    distance = node._get_dist(obj)\n    if distance &lt;= max_dist and distance &gt;= min_dist:\n        result.extend(node._values)\n    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))\nreturn result\n</code></pre>\n\n<p>What happens when the method <code>_get_child_candidates</code> is called?\nIs a list returned? A single element? Is it called again? When will subsequent calls stop?</p>\n\n<hr>\n\n<p><sub>\n1. This piece of code was written by Jochen Schulz (jrschulz), who made a great Python library for metric spaces. This is the link to the complete source: <a href=\"http://well-adjusted.de/~jrschulz/mspace/\" rel=\"noreferrer\">Module mspace</a>.</sub></p>\n",
        "answer": "<p>To understand what <code>yield</code> does, you must understand what <em>generators</em> are. And before you can understand generators, you must understand <em>iterables</em>.</p>\n\n<h2>Iterables</h2>\n\n<p>When you create a list, you can read its items one by one. Reading its items one by one is called iteration:</p>\n\n<pre><code>&gt;&gt;&gt; mylist = [1, 2, 3]\n&gt;&gt;&gt; for i in mylist:\n...    print(i)\n1\n2\n3\n</code></pre>\n\n<p><code>mylist</code> is an <em>iterable</em>. When you use a list comprehension, you create a list, and so an iterable:</p>\n\n<pre><code>&gt;&gt;&gt; mylist = [x*x for x in range(3)]\n&gt;&gt;&gt; for i in mylist:\n...    print(i)\n0\n1\n4\n</code></pre>\n\n<p>Everything you can use \"<code>for... in...</code>\" on is an iterable; <code>lists</code>, <code>strings</code>, files...</p>\n\n<p>These iterables are handy because you can read them as much as you wish, but you store all the values in memory and this is not always what you want when you have a lot of values.</p>\n\n<h2>Generators</h2>\n\n<p>Generators are iterators, a kind of iterable <strong>you can only iterate over once</strong>. Generators do not store all the values in memory, <strong>they generate the values on the fly</strong>:</p>\n\n<pre><code>&gt;&gt;&gt; mygenerator = (x*x for x in range(3))\n&gt;&gt;&gt; for i in mygenerator:\n...    print(i)\n0\n1\n4\n</code></pre>\n\n<p>It is just the same except you used <code>()</code> instead of <code>[]</code>. BUT, you <strong>cannot</strong> perform <code>for i in mygenerator</code> a second time since generators can only be used once: they calculate 0, then forget about it and calculate 1, and end calculating 4, one by one.</p>\n\n<h2>Yield</h2>\n\n<p><code>yield</code> is a keyword that is used like <code>return</code>, except the function will return a generator.</p>\n\n<pre><code>&gt;&gt;&gt; def createGenerator():\n...    mylist = range(3)\n...    for i in mylist:\n...        yield i*i\n...\n&gt;&gt;&gt; mygenerator = createGenerator() # create a generator\n&gt;&gt;&gt; print(mygenerator) # mygenerator is an object!\n&lt;generator object createGenerator at 0xb7555c34&gt;\n&gt;&gt;&gt; for i in mygenerator:\n...     print(i)\n0\n1\n4\n</code></pre>\n\n<p>Here it's a useless example, but it's handy when you know your function will return a huge set of values that you will only need to read once.</p>\n\n<p>To master <code>yield</code>, you must understand that <strong>when you call the function, the code you have written in the function body does not run.</strong> The function only returns the generator object, this is a bit tricky :-)</p>\n\n<p>Then, your code will continue from where it left off each time <code>for</code> uses the generator.</p>\n\n<p>Now the hard part:</p>\n\n<p>The first time the <code>for</code> calls the generator object created from your function, it will run the code in your function from the beginning until it hits <code>yield</code>, then it'll return the first value of the loop. Then, each other call will run the loop you have written in the function one more time, and return the next value, until there is no value to return.</p>\n\n<p>The generator is considered empty once the function runs, but does not hit <code>yield</code> anymore. It can be because the loop had come to an end, or because you do not satisfy an <code>\"if/else\"</code> anymore.</p>\n\n<hr>\n\n<h2>Your code explained</h2>\n\n<p>Generator:</p>\n\n<pre><code># Here you create the method of the node object that will return the generator\ndef _get_child_candidates(self, distance, min_dist, max_dist):\n\n    # Here is the code that will be called each time you use the generator object:\n\n    # If there is still a child of the node object on its left\n    # AND if distance is ok, return the next child\n    if self._leftchild and distance - max_dist &lt; self._median:\n        yield self._leftchild\n\n    # If there is still a child of the node object on its right\n    # AND if distance is ok, return the next child\n    if self._rightchild and distance + max_dist &gt;= self._median:\n        yield self._rightchild\n\n    # If the function arrives here, the generator will be considered empty\n    # there is no more than two values: the left and the right children\n</code></pre>\n\n<p>Caller:</p>\n\n<pre><code># Create an empty list and a list with the current object reference\nresult, candidates = list(), [self]\n\n# Loop on candidates (they contain only one element at the beginning)\nwhile candidates:\n\n    # Get the last candidate and remove it from the list\n    node = candidates.pop()\n\n    # Get the distance between obj and the candidate\n    distance = node._get_dist(obj)\n\n    # If distance is ok, then you can fill the result\n    if distance &lt;= max_dist and distance &gt;= min_dist:\n        result.extend(node._values)\n\n    # Add the children of the candidate in the candidates list\n    # so the loop will keep running until it will have looked\n    # at all the children of the children of the children, etc. of the candidate\n    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))\n\nreturn result\n</code></pre>\n\n<p>This code contains several smart parts:</p>\n\n<ul>\n<li><p>The loop iterates on a list, but the list expands while the loop is being iterated :-) It's a concise way to go through all these nested data even if it's a bit dangerous since you can end up with an infinite loop. In this case, <code>candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))</code> exhausts all the values of the generator, but <code>while</code> keeps creating new generator objects which will produce different values from the previous ones since it's not applied on the same node.</p></li>\n<li><p>The <code>extend()</code> method is a list object method that expects an iterable and adds its values to the list.</p></li>\n</ul>\n\n<p>Usually we pass a list to it:</p>\n\n<pre><code>&gt;&gt;&gt; a = [1, 2]\n&gt;&gt;&gt; b = [3, 4]\n&gt;&gt;&gt; a.extend(b)\n&gt;&gt;&gt; print(a)\n[1, 2, 3, 4]\n</code></pre>\n\n<p>But in your code it gets a generator, which is good because:</p>\n\n<ol>\n<li>You don't need to read the values twice.</li>\n<li>You may have a lot of children and you don't want them all stored in memory.</li>\n</ol>\n\n<p>And it works because Python does not care if the argument of a method is a list or not. Python expects iterables so it will work with strings, lists, tuples and generators! This is called duck typing and is one of the reason why Python is so cool. But this is another story, for another question...</p>\n\n<p>You can stop here, or read a little bit to see an advanced use of a generator:</p>\n\n<h2>Controlling a generator exhaustion</h2>\n\n<pre><code>&gt;&gt;&gt; class Bank(): # Let's create a bank, building ATMs\n...    crisis = False\n...    def create_atm(self):\n...        while not self.crisis:\n...            yield \"$100\"\n&gt;&gt;&gt; hsbc = Bank() # When everything's ok the ATM gives you as much as you want\n&gt;&gt;&gt; corner_street_atm = hsbc.create_atm()\n&gt;&gt;&gt; print(corner_street_atm.next())\n$100\n&gt;&gt;&gt; print(corner_street_atm.next())\n$100\n&gt;&gt;&gt; print([corner_street_atm.next() for cash in range(5)])\n['$100', '$100', '$100', '$100', '$100']\n&gt;&gt;&gt; hsbc.crisis = True # Crisis is coming, no more money!\n&gt;&gt;&gt; print(corner_street_atm.next())\n&lt;type 'exceptions.StopIteration'&gt;\n&gt;&gt;&gt; wall_street_atm = hsbc.create_atm() # It's even true for new ATMs\n&gt;&gt;&gt; print(wall_street_atm.next())\n&lt;type 'exceptions.StopIteration'&gt;\n&gt;&gt;&gt; hsbc.crisis = False # The trouble is, even post-crisis the ATM remains empty\n&gt;&gt;&gt; print(corner_street_atm.next())\n&lt;type 'exceptions.StopIteration'&gt;\n&gt;&gt;&gt; brand_new_atm = hsbc.create_atm() # Build a new one to get back in business\n&gt;&gt;&gt; for cash in brand_new_atm:\n...    print cash\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n...\n</code></pre>\n\n<p><strong>Note:</strong> For Python 3, use<code>print(corner_street_atm.__next__())</code> or <code>print(next(corner_street_atm))</code></p>\n\n<p>It can be useful for various things like controlling access to a resource.</p>\n\n<h2>Itertools, your best friend</h2>\n\n<p>The itertools module contains special functions to manipulate iterables. Ever wish to duplicate a generator?\nChain two generators? Group values in a nested list with a one-liner? <code>Map / Zip</code> without creating another list?</p>\n\n<p>Then just <code>import itertools</code>.</p>\n\n<p>An example? Let's see the possible orders of arrival for a four-horse race:</p>\n\n<pre><code>&gt;&gt;&gt; horses = [1, 2, 3, 4]\n&gt;&gt;&gt; races = itertools.permutations(horses)\n&gt;&gt;&gt; print(races)\n&lt;itertools.permutations object at 0xb754f1dc&gt;\n&gt;&gt;&gt; print(list(itertools.permutations(horses)))\n[(1, 2, 3, 4),\n (1, 2, 4, 3),\n (1, 3, 2, 4),\n (1, 3, 4, 2),\n (1, 4, 2, 3),\n (1, 4, 3, 2),\n (2, 1, 3, 4),\n (2, 1, 4, 3),\n (2, 3, 1, 4),\n (2, 3, 4, 1),\n (2, 4, 1, 3),\n (2, 4, 3, 1),\n (3, 1, 2, 4),\n (3, 1, 4, 2),\n (3, 2, 1, 4),\n (3, 2, 4, 1),\n (3, 4, 1, 2),\n (3, 4, 2, 1),\n (4, 1, 2, 3),\n (4, 1, 3, 2),\n (4, 2, 1, 3),\n (4, 2, 3, 1),\n (4, 3, 1, 2),\n (4, 3, 2, 1)]\n</code></pre>\n\n<h2>Understanding the inner mechanisms of iteration</h2>\n\n<p>Iteration is a process implying iterables (implementing the <code>__iter__()</code> method) and iterators (implementing the <code>__next__()</code> method).\nIterables are any objects you can get an iterator from. Iterators are objects that let you iterate on iterables.</p>\n\n<p>There is more about it in this article about <a href=\"http://effbot.org/zone/python-for-statement.htm\" rel=\"noreferrer\">how <code>for</code> loops work</a>.</p>\n"
    },
    "20": {
        "question_id": "419163",
        "answer_id": "419185",
        "question": "<p>What does the <code>if __name__ == \"__main__\":</code> do?</p>\n\n<pre><code># Threading example\nimport time, thread\n\ndef myfunction(string, sleeptime, lock, *args):\n    while True:\n        lock.acquire()\n        time.sleep(sleeptime)\n        lock.release()\n        time.sleep(sleeptime)\n\nif __name__ == \"__main__\":\n    lock = thread.allocate_lock()\n    thread.start_new_thread(myfunction, (\"Thread #: 1\", 2, lock))\n    thread.start_new_thread(myfunction, (\"Thread #: 2\", 2, lock))\n</code></pre>\n",
        "answer": "<p>Whenever the Python interpreter reads a source file, it does two things:</p>\n\n<ul>\n<li><p>it sets a few special variables like <code>__name__</code>, and then</p></li>\n<li><p>it executes all of the code found in the file.</p></li>\n</ul>\n\n<p>Let's see how this works and how it relates to your question about the <code>__name__</code> checks we always see in Python scripts.</p>\n\n<h1>Code Sample</h1>\n\n<p>Let's use a slightly different code sample to explore how imports and scripts work.  Suppose the following is in a file called <code>foo.py</code>.</p>\n\n<pre><code># Suppose this is foo.py.\n\nprint(\"before import\")\nimport math\n\nprint(\"before functionA\")\ndef functionA():\n    print(\"Function A\")\n\nprint(\"before functionB\")\ndef functionB():\n    print(\"Function B {}\".format(math.sqrt(100)))\n\nprint(\"before __name__ guard\")\nif __name__ == '__main__':\n    functionA()\n    functionB()\nprint(\"after __name__ guard\")\n</code></pre>\n\n<h1>Special Variables</h1>\n\n<p>When the Python interpeter reads a source file, it first defines a few special variables. In this case, we care about the <code>__name__</code> variable.</p>\n\n<p><strong>When Your Module Is the Main Program</strong></p>\n\n<p>If you are running your module (the source file) as the main program, e.g.</p>\n\n<pre><code>python foo.py\n</code></pre>\n\n<p>the interpreter will assign the hard-coded string <code>\"__main__\"</code> to the <code>__name__</code> variable, i.e.</p>\n\n<pre><code># It's as if the interpreter inserts this at the top\n# of your module when run as the main program.\n__name__ = \"__main__\" \n</code></pre>\n\n<p><strong>When Your Module Is Imported By Another</strong></p>\n\n<p>On the other hand, suppose some other module is the main program and it imports your module. This means there's a statement like this in the main program, or in some other module the main program imports:</p>\n\n<pre><code># Suppose this is in some other main program.\nimport foo\n</code></pre>\n\n<p>In this case, the interpreter will look at the filename of your module, <code>foo.py</code>, strip off the <code>.py</code>, and assign that string to your module's <code>__name__</code> variable, i.e.</p>\n\n<pre><code># It's as if the interpreter inserts this at the top\n# of your module when it's imported from another module.\n__name__ = \"foo\"\n</code></pre>\n\n<h1>Executing the Module's Code</h1>\n\n<p>After the special variables are set up, the interpreter executes all the code in the module, one statement at a time. You may want to open another window on the side with the code sample so you can follow along with this explanation.</p>\n\n<p><strong>Always</strong></p>\n\n<ol>\n<li><p>It prints the string <code>\"before import\"</code> (without quotes).</p></li>\n<li><p>It loads the <code>math</code> module and assigns it to a variable called <code>math</code>. This is equivalent to replacing <code>import math</code> with the following (note that <code>__import__</code> is a low-level function in Python that takes a string and triggers the actual import):</p></li>\n</ol>\n\n<pre><code># Find and load a module given its string name, \"math\",\n# then assign it to a local variable called math.\nmath = __import__(\"math\")\n</code></pre>\n\n<ol start=\"3\">\n<li><p>It prints the string <code>\"before functionA\"</code>.</p></li>\n<li><p>It executes the <code>def</code> block, creating a function object, then assigning that function object to a variable called <code>functionA</code>.</p></li>\n<li><p>It prints the string <code>\"before functionB\"</code>.</p></li>\n<li><p>It executes the second <code>def</code> block, creating another function object, then assigning it to a variable called <code>functionB</code>.</p></li>\n<li><p>It prints the string <code>\"before __name__ guard\"</code>.</p></li>\n</ol>\n\n<p><strong>Only When Your Module Is the Main Program</strong></p>\n\n<ol start=\"8\">\n<li>If your module is the main program, then it will see that <code>__name__</code> was indeed set to <code>\"__main__\"</code> and it calls the two functions, printing the strings <code>\"Function A\"</code> and <code>\"Function B 10.0\"</code>.</li>\n</ol>\n\n<p><strong>Only When Your Module Is Imported by Another</strong></p>\n\n<ol start=\"8\">\n<li>(<strong>instead</strong>) If your module is not the main program but was imported by another one, then <code>__name__</code> will be <code>\"foo\"</code>, not <code>\"__main__\"</code>, and it'll skip the body of the <code>if</code> statement.</li>\n</ol>\n\n<p><strong>Always</strong></p>\n\n<ol start=\"9\">\n<li>It will print the string <code>\"after __name__ guard\"</code> in both situations.</li>\n</ol>\n\n<p><strong><em>Summary</em></strong></p>\n\n<p>In summary, here's what'd be printed in the two cases:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code># What gets printed if foo is the main program\nbefore import\nbefore functionA\nbefore functionB\nbefore __name__ guard\nFunction A\nFunction B 10.0\nafter __name__ guard\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code># What gets printed if foo is imported as a regular module\nbefore import\nbefore functionA\nbefore functionB\nbefore __name__ guard\nafter __name__ guard\n</code></pre>\n\n<h1>Why Does It Work This Way?</h1>\n\n<p>You might naturally wonder why anybody would want this.  Well, sometimes you want to write a <code>.py</code> file that can be both used by other programs and/or modules as a module, and can also be run as the main program itself.  Examples:</p>\n\n<ul>\n<li><p>Your module is a library, but you want to have a script mode where it runs some unit tests or a demo.</p></li>\n<li><p>Your module is only used as a main program, but it has some unit tests, and the testing framework works by importing <code>.py</code> files like your script and running special test functions. You don't want it to try running the script just because it's importing the module.</p></li>\n<li><p>Your module is mostly used as a main program, but it also provides a programmer-friendly API for advanced users.</p></li>\n</ul>\n\n<p>Beyond those examples, it's elegant that running a script in Python is just setting up a few magic variables and importing the script. \"Running\" the script is a side effect of importing the script's module.</p>\n\n<h1>Food for Thought</h1>\n\n<ul>\n<li><p>Question: Can I have multiple <code>__name__</code> checking blocks?  Answer: it's strange to do so, but the language won't stop you.</p></li>\n<li><p>Suppose the following is in <code>foo2.py</code>.  What happens if you say <code>python foo2.py</code> on the command-line? Why?</p></li>\n</ul>\n\n<pre class=\"lang-py prettyprint-override\"><code># Suppose this is foo2.py.\n\ndef functionA():\n    print(\"a1\")\n    from foo2 import functionB\n    print(\"a2\")\n    functionB()\n    print(\"a3\")\n\ndef functionB():\n    print(\"b\")\n\nprint(\"t1\")\nif __name__ == \"__main__\":\n    print(\"m1\")\n    functionA()\n    print(\"m2\")\nprint(\"t2\")\n</code></pre>\n\n<ul>\n<li>Now, figure out what will happen if you remove the <code>__name__</code> check in <code>foo3.py</code>:</li>\n</ul>\n\n<pre class=\"lang-py prettyprint-override\"><code># Suppose this is foo3.py.\n\ndef functionA():\n    print(\"a1\")\n    from foo3 import functionB\n    print(\"a2\")\n    functionB()\n    print(\"a3\")\n\ndef functionB():\n    print(\"b\")\n\nprint(\"t1\")\nprint(\"m1\")\nfunctionA()\nprint(\"m2\")\nprint(\"t2\")\n</code></pre>\n\n<ul>\n<li>What will this do when used as a script?  When imported as a module?</li>\n</ul>\n\n<pre class=\"lang-py prettyprint-override\"><code># Suppose this is in foo4.py\n__name__ = \"__main__\"\n\ndef bar():\n    print(\"bar\")\n\nprint(\"before __name__ guard\")\nif __name__ == \"__main__\":\n    bar()\nprint(\"after __name__ guard\")\n</code></pre>\n"
    },
    "21": {
        "question_id": "613183",
        "answer_id": "613218",
        "question": "<p>I have a dictionary of values read from two fields in a database: a string field and a numeric field. The string field is unique, so that is the key of the dictionary.</p>\n\n<p>I can sort on the keys, but how can I sort based on the values?</p>\n\n<p>Note: I have read Stack Overflow question here <em><a href=\"https://stackoverflow.com/questions/72899\">How do I sort a list of dictionaries by a value of the dictionary?</a></em> and probably could change my code to have a list of dictionaries, but since I do not really need a list of dictionaries I wanted to know if there is a simpler solution to sort either in ascending or descending order.</p>\n",
        "answer": "<p>It is not possible to sort a dictionary, only to get a representation of a dictionary that is sorted. Dictionaries are inherently orderless, but other types, such as lists and tuples, are not. So you need an ordered data type to represent sorted values, which will be a list\u2014probably a list of tuples.</p>\n\n<p>For instance,</p>\n\n<pre><code>import operator\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nsorted_x = sorted(x.items(), key=operator.itemgetter(1))\n</code></pre>\n\n<p><code>sorted_x</code> will be a list of tuples sorted by the second element in each tuple. <code>dict(sorted_x) == x</code>.</p>\n\n<p>And for those wishing to sort on keys instead of values:</p>\n\n<pre><code>import operator\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nsorted_x = sorted(x.items(), key=operator.itemgetter(0))\n</code></pre>\n\n<p>In Python3 since unpacking is not allowed <a href=\"https://stackoverflow.com/a/15712231/4293057\">[1]</a> we can use </p>\n\n<pre><code>x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nsorted_x = sorted(x.items(), key=lambda kv: kv[1])\n</code></pre>\n\n<p>If you want the output as a dict, you can use <a href=\"https://docs.python.org/3/library/collections.html#collections.OrderedDict\" rel=\"noreferrer\"><code>collections.OrderedDict</code></a>:</p>\n\n<pre><code>import collections\n\nsorted_dict = collections.OrderedDict(sorted_x)\n</code></pre>\n"
    },
    "22": {
        "question_id": "2158395",
        "answer_id": "2158532",
        "question": "<p>Yes, I know this subject has been covered before (<a href=\"https://stackoverflow.com/questions/120886\">here</a>, <a href=\"https://stackoverflow.com/questions/406121\">here</a>, <a href=\"https://stackoverflow.com/questions/457215\">here</a>, <a href=\"https://stackoverflow.com/questions/952914\">here</a>), but as far as I know, all solutions, except for one, fail on a list like this:</p>\n\n<pre><code>L = [[[1, 2, 3], [4, 5]], 6]\n</code></pre>\n\n<p>Where the desired output is</p>\n\n<pre><code>[1, 2, 3, 4, 5, 6]\n</code></pre>\n\n<p>Or perhaps even better, an iterator. The only solution I saw that works for an arbitrary nesting is found <a href=\"https://stackoverflow.com/questions/406121\">in this question</a>:</p>\n\n<pre><code>def flatten(x):\n    result = []\n    for el in x:\n        if hasattr(el, \"__iter__\") and not isinstance(el, basestring):\n            result.extend(flatten(el))\n        else:\n            result.append(el)\n    return result\n\nflatten(L)\n</code></pre>\n\n<p>Is this the best model? Did I overlook something? Any problems?</p>\n",
        "answer": "<p>Using generator functions can make your example a little easier to read and probably boost the performance.</p>\n\n<h2>Python 2</h2>\n\n<pre><code>def flatten(l):\n    for el in l:\n        if isinstance(el, collections.Iterable) and not isinstance(el, basestring):\n            for sub in flatten(el):\n                yield sub\n        else:\n            yield el\n</code></pre>\n\n<p>I used the <a href=\"http://docs.python.org/library/collections.html#abcs-abstract-base-classes\" rel=\"noreferrer\">Iterable ABC</a> added in 2.6.</p>\n\n<h2>Python 3</h2>\n\n<p>In Python 3, the <code>basestring</code> is no more, but you can use a tuple of <code>str</code> and <code>bytes</code> to get the same effect there.</p>\n\n<p>The <code>yield from</code> operator returns an item from a generator one at a time. This <a href=\"https://docs.python.org/3/whatsnew/3.3.html#pep-380\" rel=\"noreferrer\">syntax for delegating to a subgenerator</a> was added in 3.3</p>\n\n<pre><code>def flatten(l):\n    for el in l:\n        if isinstance(el, collections.Iterable) and not isinstance(el, (str, bytes)):\n            yield from flatten(el)\n        else:\n            yield el\n</code></pre>\n"
    },
    "23": {
        "question_id": "5767228",
        "answer_id": "5771787",
        "question": "<p>My code is:</p>\n\n<pre><code>from Tkinter import *\n\nadmin = Tk()\ndef button(an):\n    print an\n    print 'het'\n\nb = Button(admin, text='as', command=button('hey'))\nb.pack()\nmainloop()\n</code></pre>\n\n<p>The button doesn't work, it prints 'hey' and 'het' once without my command, and then, when I press the button nothing happens.</p>\n",
        "answer": "<p>Consider this code:</p>\n\n<pre><code>b = Button(admin, text='as', command=button('hey'))\n</code></pre>\n\n<p>It does exactly the same as this:</p>\n\n<pre><code>result = button('hey')\nb = button(admin, text='as', command=result)\n</code></pre>\n\n<p>The <code>command</code> option takes a reference to a function, which is a fancy way of saying you need to pass it the name of the function.  To pass a reference you must use the name only, without using parenthesis or arguments. For example:</p>\n\n<pre><code>b = Button(... command = button)\n</code></pre>\n\n<p>If you want to pass a parameter such as \"hey\" you must use a little extra code:</p>\n\n<ul>\n<li>You can create an intermediate function that can be called without your argument and which then calls your <code>button</code> function, </li>\n<li>You can use <code>lambda</code> to create what is referred to as an <em>anonymous function</em>. In every way it's a function except it doesn't have a name. When you call the <code>lambda</code> command it returns a <em>reference</em> to the created function, which means it can be used for the value of the <code>command</code> option to the button.</li>\n<li>You can use <a href=\"https://docs.python.org/2/library/functools.html#functools.partial\" rel=\"nofollow noreferrer\">functools.partial</a></li>\n</ul>\n\n<p>For me, <code>lambda</code> is the simplest since it doesn't require any additional imports like <code>functools.partial</code> does, though some people think that <code>functools.partial</code> is easier to understand.</p>\n\n<p>To create a lambda function that calls your <code>button</code> function with an argument you would do something like this:</p>\n\n<pre><code>lambda: button('hey')\n</code></pre>\n\n<p>You end up with a function that is functionally equivalent to:</p>\n\n<pre><code>def some_name():\n    button('hey')\n</code></pre>\n\n<p>As I said earlier, <code>lambda</code> returns a reference to this nameless function. Since a reference is what the <code>command</code> option expects you can use <code>lambda</code> directly in the creation of the button:</p>\n\n<pre><code>b = Button(... command = lambda: button('hey'))\n</code></pre>\n\n<p>There's a question on this site that has a lot of interesting comments about lambda, in general. See the question <a href=\"https://stackoverflow.com/questions/890128/why-python-lambdas-are-useful\">Why Python lambdas are useful?</a>. That same discussion has <a href=\"https://stackoverflow.com/questions/890128/python-lambda-why/5771855#5771855\">an answer that shows how to use lambdas in a loop</a> when you need to pass in a variable to the callback. </p>\n\n<p>Finally, see the section titled <a href=\"http://effbot.org/zone/tkinter-callbacks.htm\" rel=\"nofollow noreferrer\">Tkinter Callbacks on effbot.org</a> for a nice tutorial. The coverage of lambda is pretty lean but the information there might still be useful.</p>\n"
    },
    "24": {
        "question_id": "306313",
        "answer_id": "306353",
        "question": "<p>Why does the following behave unexpectedly in Python?</p>\n\n<pre><code>&gt;&gt;&gt; a = 256\n&gt;&gt;&gt; b = 256\n&gt;&gt;&gt; a is b\nTrue           # This is an expected result\n&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; a is b\nFalse          # What happened here? Why is this False?\n&gt;&gt;&gt; 257 is 257\nTrue           # Yet the literal numbers compare properly\n</code></pre>\n\n<p>I am using Python 2.5.2. Trying some different versions of Python, it appears that Python 2.3.3 shows the above behaviour between 99 and 100.</p>\n\n<p>Based on the above, I can hypothesize that Python is internally implemented such that \"small\" integers are stored in a different way than larger integers and the <code>is</code> operator can tell the difference. Why the leaky abstraction? What is a better way of comparing two arbitrary objects to see whether they are the same when I don't know in advance whether they are numbers or not?</p>\n",
        "answer": "<p>Take a look at this:</p>\n\n<pre><code>&gt;&gt;&gt; a = 256\n&gt;&gt;&gt; b = 256\n&gt;&gt;&gt; id(a)\n9987148\n&gt;&gt;&gt; id(b)\n9987148\n&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; id(a)\n11662816\n&gt;&gt;&gt; id(b)\n11662828\n</code></pre>\n\n<p>EDIT: Here's what I found in the Python 2 documentation, <a href=\"https://docs.python.org/2/c-api/int.html\" rel=\"noreferrer\">\"Plain Integer Objects\"</a> (It's the same for <a href=\"https://docs.python.org/3/c-api/long.html\" rel=\"noreferrer\">Python 3</a>):</p>\n\n<blockquote>\n  <p>The current implementation keeps an\n  array of integer objects for all\n  integers between -5 and 256, when you\n  create an int in that range you\n  actually just get back a reference to\n  the existing object. So it should be\n  possible to change the value of 1. I\n  suspect the behaviour of Python in\n  this case is undefined. :-)</p>\n</blockquote>\n"
    },
    "25": {
        "question_id": "394809",
        "answer_id": "394814",
        "question": "<p>If Python does not have a ternary conditional operator, is it possible to simulate one using other language constructs?</p>\n",
        "answer": "<p>Yes, it was <a href=\"https://mail.python.org/pipermail/python-dev/2005-September/056846.html\" rel=\"noreferrer\" title=\"[Python-Dev] Conditional Expression Resolution\">added</a> in version 2.5. The expression syntax is:</p>\n\n<pre><code>a if condition else b\n</code></pre>\n\n<p>First <code>condition</code> is evaluated, then exactly one of either <code>a</code> or <code>b</code> is evaluated and returned based on the <a href=\"https://en.wikipedia.org/wiki/Boolean_data_type\" rel=\"noreferrer\" title=\"Boolean data type\">Boolean</a> value of <code>condition</code>. If <code>condition</code> evaluates to <code>True</code>, then <code>a</code> is evaluated and returned but <code>b</code> is ignored, or else when <code>b</code> is evaluated and returned but <code>a</code> is ignored.</p>\n\n<p>This allows short-circuiting because when <code>condition</code> is true only <code>a</code> is evaluated and <code>b</code> is not evaluated at all, but when <code>condition</code> is false only <code>b</code> is evaluated and <code>a</code> is not evaluated at all.</p>\n\n<p>For example:</p>\n\n<pre><code>&gt;&gt;&gt; 'true' if True else 'false'\n'true'\n&gt;&gt;&gt; 'true' if False else 'false'\n'false'\n</code></pre>\n\n<p>Note that conditionals are an <em>expression</em>, not a <em>statement</em>. This means you can't use assignment statements or <code>pass</code> or other <strong>statements</strong> within a conditional <strong>expression</strong>:</p>\n\n<pre><code>&gt;&gt;&gt; pass if False else x = 3\n  File \"&lt;stdin&gt;\", line 1\n    pass if False else x = 3\n          ^\nSyntaxError: invalid syntax\n</code></pre>\n\n<p>You can, however, use conditional expressions to assign a variable like so:</p>\n\n<pre><code>x = a if True else b\n</code></pre>\n\n<p>Think of the conditional expression as switching between two values. It is very useful when you're in a 'one value or another' situation, it but doesn't do much else.</p>\n\n<p>If you need to use statements, you have to use a normal <code>if</code> <strong>statement</strong> instead of a conditional <strong>expression</strong>.</p>\n\n<hr>\n\n<p>Keep in mind that it's frowned upon by some Pythonistas for several reasons:</p>\n\n<ul>\n<li>The order of the arguments is different from those of the classic <code>condition ? a : b</code> ternary operator from many other languages (such as C, C++, Go, Perl, Ruby, Java, Javascript, etc.), which may lead to bugs when people unfamiliar with Python's \"surprising\" behaviour use it (they may reverse the argument order).</li>\n<li>Some find it \"unwieldy\", since it goes contrary to the normal flow of thought (thinking of the condition first and then the effects).</li>\n<li>Stylistic reasons. (Although the 'inline <code>if</code>' can be <em>really</em> useful, and make your script more concise, it really does complicate your code)</li>\n</ul>\n\n<p>If you're having trouble remembering the order, then remember that when read aloud, you (almost) say what you mean. For example, <code>x = 4 if b &gt; 8 else 9</code> is read aloud as <code>x will be 4 if b is greater than 8 otherwise 9</code>.</p>\n\n<p>Official documentation:     </p>\n\n<ul>\n<li><a href=\"https://docs.python.org/3/reference/expressions.html#conditional-expressions\" rel=\"noreferrer\" title=\"Conditional expressions\">Conditional expressions</a></li>\n<li><a href=\"https://docs.python.org/3.3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator\" rel=\"noreferrer\" title=\"Is there an equivalent of C\u2019s \u201d?:\u201d ternary operator?\">Is there an equivalent of C\u2019s \u201d?:\u201d ternary operator?</a></li>\n</ul>\n"
    },
    "26": {
        "question_id": "20625582",
        "answer_id": "20627316",
        "question": "<h2>Background</h2>\n\n<p>I just upgraded my Pandas from 0.11 to 0.13.0rc1. Now, the application is popping out many new warnings. One of them like this:</p>\n\n<pre><code>E:\\FinReporter\\FM_EXT.py:449: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_index,col_indexer] = value instead\n  quote_df['TVol']   = quote_df['TVol']/TVOL_SCALE\n</code></pre>\n\n<p>I want to know what exactly it means?  Do I need to change something?</p>\n\n<p>How should I suspend the warning if I insist to use <code>quote_df['TVol']   = quote_df['TVol']/TVOL_SCALE</code>?</p>\n\n<h2>The function that gives errors</h2>\n\n<pre><code>def _decode_stock_quote(list_of_150_stk_str):\n    \"\"\"decode the webpage and return dataframe\"\"\"\n\n    from cStringIO import StringIO\n\n    str_of_all = \"\".join(list_of_150_stk_str)\n\n    quote_df = pd.read_csv(StringIO(str_of_all), sep=',', names=list('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefg')) #dtype={'A': object, 'B': object, 'C': np.float64}\n    quote_df.rename(columns={'A':'STK', 'B':'TOpen', 'C':'TPCLOSE', 'D':'TPrice', 'E':'THigh', 'F':'TLow', 'I':'TVol', 'J':'TAmt', 'e':'TDate', 'f':'TTime'}, inplace=True)\n    quote_df = quote_df.ix[:,[0,3,2,1,4,5,8,9,30,31]]\n    quote_df['TClose'] = quote_df['TPrice']\n    quote_df['RT']     = 100 * (quote_df['TPrice']/quote_df['TPCLOSE'] - 1)\n    quote_df['TVol']   = quote_df['TVol']/TVOL_SCALE\n    quote_df['TAmt']   = quote_df['TAmt']/TAMT_SCALE\n    quote_df['STK_ID'] = quote_df['STK'].str.slice(13,19)\n    quote_df['STK_Name'] = quote_df['STK'].str.slice(21,30)#.decode('gb2312')\n    quote_df['TDate']  = quote_df.TDate.map(lambda x: x[0:4]+x[5:7]+x[8:10])\n\n    return quote_df\n</code></pre>\n\n<h2>More error messages</h2>\n\n<pre><code>E:\\FinReporter\\FM_EXT.py:449: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_index,col_indexer] = value instead\n  quote_df['TVol']   = quote_df['TVol']/TVOL_SCALE\nE:\\FinReporter\\FM_EXT.py:450: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_index,col_indexer] = value instead\n  quote_df['TAmt']   = quote_df['TAmt']/TAMT_SCALE\nE:\\FinReporter\\FM_EXT.py:453: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_index,col_indexer] = value instead\n  quote_df['TDate']  = quote_df.TDate.map(lambda x: x[0:4]+x[5:7]+x[8:10])\n</code></pre>\n",
        "answer": "<p>The <code>SettingWithCopyWarning</code> was created to flag potentially confusing \"chained\" assignments, such as the following, which don't always work as expected, particularly when the first selection returns a <em>copy</em>.  [see <a href=\"https://github.com/pydata/pandas/pull/5390\" rel=\"noreferrer\">GH5390</a> and <a href=\"https://github.com/pydata/pandas/issues/5597\" rel=\"noreferrer\">GH5597</a> for background discussion.]</p>\n\n<pre><code>df[df['A'] &gt; 2]['B'] = new_val  # new_val not set in df\n</code></pre>\n\n<p>The warning offers a suggestion to rewrite as follows:</p>\n\n<pre><code>df.loc[df['A'] &gt; 2, 'B'] = new_val\n</code></pre>\n\n<p>However, this doesn't fit your usage, which is equivalent to:</p>\n\n<pre><code>df = df[df['A'] &gt; 2]\ndf['B'] = new_val\n</code></pre>\n\n<p>While it's clear that you don't care about writes making it back to the original frame (since you overwrote the reference to it), unfortunately this pattern can not be differentiated from the first chained assignment example, hence the (false positive) warning.  The potential for false positives is addressed in the <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\" rel=\"noreferrer\">docs on indexing</a>, if you'd like to read further.  You can safely disable this new warning with the following assignment.</p>\n\n<pre><code>pd.options.mode.chained_assignment = None  # default='warn'\n</code></pre>\n"
    },
    "27": {
        "question_id": "100003",
        "answer_id": "100146",
        "question": "<p>What are metaclasses and what do we use them for?</p>\n",
        "answer": "<p>A metaclass is the class of a class. A class defines how an instance of the class (i.e. an object) behaves while a metaclass defines how a class behaves. A class is an instance of a metaclass.</p>\n\n<p>While in Python you can use arbitrary callables for metaclasses (like <a href=\"https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python/100037#100037\">Jerub</a> shows), the better approach is to make it an actual class itself. <code>type</code> is the usual metaclass in Python. <code>type</code> is itself a class, and it is its own type. You won't be able to recreate something like <code>type</code> purely in Python, but Python cheats a little. To create your own metaclass in Python you really just want to subclass <code>type</code>.</p>\n\n<p>A metaclass is most commonly used as a class-factory. When you create an object by calling the class, Python creates a new class (when it executes the 'class' statement) by calling the metaclass. Combined with the normal <code>__init__</code> and <code>__new__</code> methods, metaclasses therefore allow you to do 'extra things' when creating a class, like registering the new class with some registry or replace the class with something else entirely.</p>\n\n<p>When the <code>class</code> statement is executed, Python first executes the body of the <code>class</code> statement as a normal block of code. The resulting namespace (a dict) holds the attributes of the class-to-be. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the <code>__metaclass__</code> attribute of the class-to-be (if any) or the <code>__metaclass__</code> global variable. The metaclass is then called with the name, bases and attributes of the class to instantiate it.</p>\n\n<p>However, metaclasses actually define the <em>type</em> of a class, not just a factory for it, so you can do much more with them. You can, for instance, define normal methods on the metaclass. These metaclass-methods are like classmethods in that they can be called on the class without an instance, but they are also not like classmethods in that they cannot be called on an instance of the class. <code>type.__subclasses__()</code> is an example of a method on the <code>type</code> metaclass. You can also define the normal 'magic' methods, like <code>__add__</code>, <code>__iter__</code> and <code>__getattr__</code>, to implement or change how the class behaves.</p>\n\n<p>Here's an aggregated example of the bits and pieces:</p>\n\n<pre><code>def make_hook(f):\n    \"\"\"Decorator to turn 'foo' method into '__foo__'\"\"\"\n    f.is_hook = 1\n    return f\n\nclass MyType(type):\n    def __new__(mcls, name, bases, attrs):\n\n        if name.startswith('None'):\n            return None\n\n        # Go over attributes and see if they should be renamed.\n        newattrs = {}\n        for attrname, attrvalue in attrs.iteritems():\n            if getattr(attrvalue, 'is_hook', 0):\n                newattrs['__%s__' % attrname] = attrvalue\n            else:\n                newattrs[attrname] = attrvalue\n\n        return super(MyType, mcls).__new__(mcls, name, bases, newattrs)\n\n    def __init__(self, name, bases, attrs):\n        super(MyType, self).__init__(name, bases, attrs)\n\n        # classregistry.register(self, self.interfaces)\n        print \"Would register class %s now.\" % self\n\n    def __add__(self, other):\n        class AutoClass(self, other):\n            pass\n        return AutoClass\n        # Alternatively, to autogenerate the classname as well as the class:\n        # return type(self.__name__ + other.__name__, (self, other), {})\n\n    def unregister(self):\n        # classregistry.unregister(self)\n        print \"Would unregister class %s now.\" % self\n\nclass MyObject:\n    __metaclass__ = MyType\n\n\nclass NoneSample(MyObject):\n    pass\n\n# Will print \"NoneType None\"\nprint type(NoneSample), repr(NoneSample)\n\nclass Example(MyObject):\n    def __init__(self, value):\n        self.value = value\n    @make_hook\n    def add(self, other):\n        return self.__class__(self.value + other.value)\n\n# Will unregister the class\nExample.unregister()\n\ninst = Example(10)\n# Will fail with an AttributeError\n#inst.unregister()\n\nprint inst + inst\nclass Sibling(MyObject):\n    pass\n\nExampleSibling = Example + Sibling\n# ExampleSibling is now a subclass of both Example and Sibling (with no\n# content of its own) although it will believe it's called 'AutoClass'\nprint ExampleSibling\nprint ExampleSibling.__mro__\n</code></pre>\n"
    },
    "28": {
        "question_id": "1832940",
        "answer_id": "1832957",
        "question": "<p>I am using the following class to easily store data of my songs.</p>\n\n<pre><code>class Song:\n    \"\"\"The class to store the details of each song\"\"\"\n    attsToStore=('Name', 'Artist', 'Album', 'Genre', 'Location')\n    def __init__(self):\n        for att in self.attsToStore:\n            exec 'self.%s=None'%(att.lower()) in locals()\n    def setDetail(self, key, val):\n        if key in self.attsToStore:\n            exec 'self.%s=val'%(key.lower()) in locals()\n</code></pre>\n\n<p>I feel that this is just much more extensible than writing out an <code>if/else</code> block. However, <code>eval</code> seems to be considered a bad practice and unsafe to use. If so, can anyone explain to me why and show me a better way of defining the above class?</p>\n",
        "answer": "<p>Yes, using eval is a bad practice. Just to name a few reasons:</p>\n\n<ol>\n<li>There is almost always a better way to do it</li>\n<li>Very dangerous and insecure</li>\n<li>Makes debugging difficult</li>\n<li>Slow</li>\n</ol>\n\n<p>In your case you can use <a href=\"http://docs.python.org/library/functions.html#setattr\" rel=\"noreferrer\">setattr</a> instead:</p>\n\n<pre><code>class Song:\n    \"\"\"The class to store the details of each song\"\"\"\n    attsToStore=('Name', 'Artist', 'Album', 'Genre', 'Location')\n    def __init__(self):\n        for att in self.attsToStore:\n            setattr(self, att.lower(), None)\n    def setDetail(self, key, val):\n        if key in self.attsToStore:\n            setattr(self, key.lower(), val)\n</code></pre>\n\n<p><strong>EDIT:</strong></p>\n\n<p>There are some cases where you have to use eval or exec. But they are rare. Using eval in your case is a bad practice for sure. I'm emphasizing on bad practice because eval and exec are frequently used in the wrong place.</p>\n\n<p><strong>EDIT 2:</strong></p>\n\n<p>It looks like some disagree that eval is 'very dangerous and insecure' in the OP case. That might be true for this specific case but not in general. The question was general and the reasons I listed are true for the general case as well.</p>\n\n<p><strong>EDIT 3:</strong>\nReordered point 1 and 4</p>\n"
    },
    "29": {
        "question_id": "1680528",
        "answer_id": "1680555",
        "question": "<p>What I want is this behavior:</p>\n\n<pre><code>class a:\n    list = []\n\nx = a()\ny = a()\n\nx.list.append(1)\ny.list.append(2)\nx.list.append(3)\ny.list.append(4)\n\nprint(x.list) # prints [1, 3]\nprint(y.list) # prints [2, 4]\n</code></pre>\n\n<p>Of course, what really happens when I print is:</p>\n\n<pre><code>print(x.list) # prints [1, 2, 3, 4]\nprint(y.list) # prints [1, 2, 3, 4]\n</code></pre>\n\n<p>Clearly they are sharing the data in class <code>a</code>. How do I get separate instances to achieve the behavior I desire?</p>\n",
        "answer": "<p>You want this:</p>\n\n<pre><code>class a:\n    def __init__(self):\n        self.list = []\n</code></pre>\n\n<p>Declaring the variables inside the class declaration makes them \"class\" members and not instance members. Declaring them inside the <code>__init__</code> method makes sure that a new instance of the members is created alongside every new instance of the object, which is the behavior you're looking for.</p>\n"
    },
    "30": {
        "question_id": "2709821",
        "answer_id": "2709832",
        "question": "<p>What is the purpose of the <code>self</code> word in Python? I understand it refers to the specific object created from that class, but I can't see why it explicitly needs to be added to every function as a parameter. To illustrate, in Ruby I can do this:</p>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>class myClass\n    def myFunc(name)\n        @name = name\n    end\nend\n</code></pre>\n\n<p>Which I understand, quite easily. However in Python I need to include <code>self</code>:</p>\n\n<pre><code>class myClass:\n    def myFunc(self, name):\n        self.name = name\n</code></pre>\n\n<p>Can anyone talk me through this? It is not something I've come across in my (admittedly limited) experience.</p>\n",
        "answer": "<p>The reason you need to use <code>self.</code> is because Python does not use the <code>@</code> syntax to refer to instance attributes. Python decided to do methods in a way that makes the instance to which the method belongs be <em>passed</em> automatically, but not <em>received</em> automatically: the first parameter of methods is the instance the method is called on. That makes methods entirely the same as functions, and leaves the actual name to use up to you (although <code>self</code> is the convention, and people will generally frown at you when you use something else.) <code>self</code> is not special to the code, it's just another object.</p>\n\n<p>Python could have done something else to distinguish normal names from attributes -- special syntax like Ruby has, or requiring declarations like C++ and Java do, or perhaps something  yet more different -- but it didn't. Python's all for making things explicit, making it obvious what's what, and although it doesn't do it entirely everywhere, it does do it for instance attributes. That's why assigning to an instance attribute needs to know what instance to assign to, and that's why it needs <code>self.</code>.</p>\n"
    },
    "31": {
        "question_id": "4750806",
        "answer_id": "12476379",
        "question": "<p><a href=\"https://pip.pypa.io/en/stable/\" rel=\"noreferrer\"><code>pip</code></a> is a replacement for <a href=\"http://setuptools.readthedocs.io/en/latest/easy_install.html\" rel=\"noreferrer\"><code>easy_install</code></a>. But should I install <code>pip</code> using <code>easy_install</code> on Windows?  Is there a better way?</p>\n",
        "answer": "<h2>Python 2.7.9+ and 3.4+</h2>\n\n<p>Good news! <a href=\"https://docs.python.org/3/whatsnew/3.4.html\" rel=\"noreferrer\">Python 3.4</a> (released March 2014) and <a href=\"https://docs.python.org/2/whatsnew/2.7.html#pep-477-backport-ensurepip-pep-453-to-python-2-7\" rel=\"noreferrer\">Python 2.7.9</a> (released December 2014) ship with Pip. This is the best feature of any Python release. It makes the community's wealth of libraries accessible to everyone. Newbies are no longer excluded from using community libraries by the prohibitive difficulty of setup. In shipping with a package manager, Python joins <a href=\"http://en.wikipedia.org/wiki/Ruby_%28programming_language%29\" rel=\"noreferrer\">Ruby</a>, <a href=\"http://en.wikipedia.org/wiki/Node.js\" rel=\"noreferrer\">Node.js</a>, <a href=\"http://en.wikipedia.org/wiki/Haskell_%28programming_language%29\" rel=\"noreferrer\">Haskell</a>, <a href=\"http://en.wikipedia.org/wiki/Perl\" rel=\"noreferrer\">Perl</a>, <a href=\"http://en.wikipedia.org/wiki/Go_%28programming_language%29\" rel=\"noreferrer\">Go</a>&mdash;almost every other contemporary language with a majority open-source community. Thank you Python.</p>\n\n<p>Of course, that doesn't mean Python packaging is problem solved. The experience remains frustrating. I discuss this <a href=\"https://stackoverflow.com/questions/2436731/does-python-have-a-package-module-management-system/13445719#13445719\">in Stack Overflow question <em>Does Python have a package/module management system?</em></a>.</p>\n\n<p>And, alas for everyone using Python 2.7.8 or earlier (a sizable portion of the community). There's no plan to ship Pip to you. Manual instructions follow.</p>\n\n<h2>Python 2 \u2264 2.7.8 and Python 3 \u2264 3.3</h2>\n\n<p>Flying in the face of its <a href=\"http://www.python.org/about/\" rel=\"noreferrer\">'batteries included'</a> motto, Python ships without a package manager. To make matters worse, Pip was&mdash;until recently&mdash;ironically difficult to install.</p>\n\n<h3>Official instructions</h3>\n\n<p>Per <a href=\"https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip\" rel=\"noreferrer\">https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip</a>:</p>\n\n<p>Download <a href=\"https://bootstrap.pypa.io/get-pip.py\" rel=\"noreferrer\"><code>get-pip.py</code></a>, being careful to save it as a <code>.py</code> file rather than <code>.txt</code>. Then, run it from the command prompt:</p>\n\n<pre><code>python get-pip.py\n</code></pre>\n\n<p>You possibly need an administrator command prompt to do this. Follow <em><a href=\"http://technet.microsoft.com/en-us/library/cc947813(v=ws.10).aspx\" rel=\"noreferrer\">Start a Command Prompt as an Administrator</a></em> (Microsoft TechNet).</p>\n\n<p>This installs the pip package, which (in Windows) contains ...\\Scripts\\pip.exe that path must be in PATH environment variable to use pip from the command line (see the second part of 'Alternative Instructions' for adding it to your PATH,</p>\n\n<h3>Alternative instructions</h3>\n\n<p>The official documentation tells users to install Pip and each of its dependencies from source. That's tedious for the experienced and prohibitively difficult for newbies.</p>\n\n<p>For our sake, Christoph Gohlke prepares Windows installers (<code>.msi</code>) for popular Python packages. He builds installers for all Python versions, both 32 and 64 bit. You need to:</p>\n\n<ol>\n<li><a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#setuptools\" rel=\"noreferrer\">Install setuptools</a></li>\n<li><a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip\" rel=\"noreferrer\">Install pip</a></li>\n</ol>\n\n<p>For me, this installed Pip at <code>C:\\Python27\\Scripts\\pip.exe</code>. Find <code>pip.exe</code> on your computer, then add its folder (for example, <code>C:\\Python27\\Scripts</code>) to your path (Start / Edit environment variables). Now you should be able to run <code>pip</code> from the command line. Try installing a package:</p>\n\n<pre><code>pip install httpie\n</code></pre>\n\n<p>There you go (hopefully)! Solutions for common problems are given below:</p>\n\n<h3>Proxy problems</h3>\n\n<p>If you work in an office, you might be behind an HTTP proxy. If so, set the environment variables <a href=\"http://docs.python.org/2/library/urllib.html\" rel=\"noreferrer\"><code>http_proxy</code> and <code>https_proxy</code></a>. Most Python applications (and other free software) respect these. Example syntax:</p>\n\n<pre><code>http://proxy_url:port\nhttp://username:password@proxy_url:port\n</code></pre>\n\n<p>If you're really unlucky, your proxy might be a Microsoft <a href=\"https://en.wikipedia.org/wiki/NT_LAN_Manager\" rel=\"noreferrer\">NTLM</a> proxy. Free software can't cope. The only solution is to install a free software friendly proxy that forwards to the nasty proxy. <a href=\"http://cntlm.sourceforge.net/\" rel=\"noreferrer\">http://cntlm.sourceforge.net/</a></p>\n\n<h3>Unable to find vcvarsall.bat</h3>\n\n<p>Python modules can be partly written in C or C++. Pip tries to compile from source. If you don't have a C/C++ compiler installed and configured, you'll see this cryptic error message.</p>\n\n<blockquote>\n  <p>Error: Unable to find vcvarsall.bat</p>\n</blockquote>\n\n<p>You can fix that by <a href=\"https://stackoverflow.com/questions/2817869/error-unable-to-find-vcvarsall-bat\">installing a C++ compiler</a> such as <a href=\"http://en.wikipedia.org/wiki/MinGW\" rel=\"noreferrer\">MinGW</a> or <a href=\"http://en.wikipedia.org/wiki/Visual_C%2B%2B#32-bit_versions\" rel=\"noreferrer\">Visual C++</a>. Microsoft actually ships one specifically for use with Python. Or try <em><a href=\"http://aka.ms/vcpython27\" rel=\"noreferrer\">Microsoft Visual C++ Compiler for Python 2.7</a></em>.</p>\n\n<p>Often though it's easier to check <a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\" rel=\"noreferrer\">Christoph's site</a> for your package.</p>\n"
    },
    "32": {
        "question_id": "17071871",
        "answer_id": "17071908",
        "question": "<p>How to select rows from a <code>DataFrame</code> based on values in some column in pandas?</p>\n\n<p>In <strong>SQL</strong>, I would use:</p>\n\n<pre class=\"lang-sql prettyprint-override\"><code>SELECT *\nFROM table\nWHERE colume_name = some_value\n</code></pre>\n\n<p><em>I tried to look at pandas documentation but did not immediately find the answer.</em></p>\n",
        "answer": "<p>To select rows whose column value equals a scalar, <code>some_value</code>, use <code>==</code>:</p>\n\n<pre><code>df.loc[df['column_name'] == some_value]\n</code></pre>\n\n<p>To select rows whose column value is in an iterable, <code>some_values</code>, use <code>isin</code>:</p>\n\n<pre><code>df.loc[df['column_name'].isin(some_values)]\n</code></pre>\n\n<p>Combine multiple conditions with <code>&amp;</code>: </p>\n\n<pre><code>df.loc[(df['column_name'] &gt;= A) &amp; (df['column_name'] &lt;= B)]\n</code></pre>\n\n<p>Note the parentheses. Due to Python's <a href=\"https://docs.python.org/3/reference/expressions.html#operator-precedence\" rel=\"noreferrer\">operator precedence rules</a>, <code>&amp;</code> binds more tightly than <code>&lt;=</code> and <code>&gt;=</code>. Thus, the parentheses in the last example are necessary. Without the parentheses </p>\n\n<pre><code>df['column_name'] &gt;= A &amp; df['column_name'] &lt;= B\n</code></pre>\n\n<p>is parsed as </p>\n\n<pre><code>df['column_name'] &gt;= (A &amp; df['column_name']) &lt;= B\n</code></pre>\n\n<p>which results in a <a href=\"https://stackoverflow.com/questions/36921951/truth-value-of-a-series-is-ambiguous-use-a-empty-a-bool-a-item-a-any-o\">Truth value of a Series is ambiguous error</a>.</p>\n\n<hr>\n\n<p>To select rows whose column value <em>does not equal</em> <code>some_value</code>, use <code>!=</code>:</p>\n\n<pre><code>df.loc[df['column_name'] != some_value]\n</code></pre>\n\n<p><code>isin</code> returns a boolean Series, so to select rows whose value is <em>not</em> in <code>some_values</code>, negate the boolean Series using <code>~</code>:</p>\n\n<pre><code>df.loc[~df['column_name'].isin(some_values)]\n</code></pre>\n\n<hr>\n\n<p>For example,</p>\n\n<pre><code>import pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'A': 'foo bar foo bar foo bar foo foo'.split(),\n                   'B': 'one one two three two two one three'.split(),\n                   'C': np.arange(8), 'D': np.arange(8) * 2})\nprint(df)\n#      A      B  C   D\n# 0  foo    one  0   0\n# 1  bar    one  1   2\n# 2  foo    two  2   4\n# 3  bar  three  3   6\n# 4  foo    two  4   8\n# 5  bar    two  5  10\n# 6  foo    one  6  12\n# 7  foo  three  7  14\n\nprint(df.loc[df['A'] == 'foo'])\n</code></pre>\n\n<p>yields</p>\n\n<pre><code>     A      B  C   D\n0  foo    one  0   0\n2  foo    two  2   4\n4  foo    two  4   8\n6  foo    one  6  12\n7  foo  three  7  14\n</code></pre>\n\n<hr>\n\n<p>If you have multiple values you want to include, put them in a\nlist (or more generally, any iterable) and use <code>isin</code>:</p>\n\n<pre><code>print(df.loc[df['B'].isin(['one','three'])])\n</code></pre>\n\n<p>yields</p>\n\n<pre><code>     A      B  C   D\n0  foo    one  0   0\n1  bar    one  1   2\n3  bar  three  3   6\n6  foo    one  6  12\n7  foo  three  7  14\n</code></pre>\n\n<hr>\n\n<p>Note, however, that if you wish to do this many times, it is more efficient to\nmake an index first, and then use <code>df.loc</code>:</p>\n\n<pre><code>df = df.set_index(['B'])\nprint(df.loc['one'])\n</code></pre>\n\n<p>yields</p>\n\n<pre><code>       A  C   D\nB              \none  foo  0   0\none  bar  1   2\none  foo  6  12\n</code></pre>\n\n<p>or, to include multiple values from the index use <code>df.index.isin</code>:</p>\n\n<pre><code>df.loc[df.index.isin(['one','two'])]\n</code></pre>\n\n<p>yields</p>\n\n<pre><code>       A  C   D\nB              \none  foo  0   0\none  bar  1   2\ntwo  foo  2   4\ntwo  foo  4   8\ntwo  bar  5  10\none  foo  6  12\n</code></pre>\n"
    },
    "33": {
        "question_id": "20002503",
        "answer_id": "20002504",
        "question": "<p>I am writing a security system that denies access to unauthorized users.</p>\n\n<pre class=\"lang-python prettyprint-override\"><code>import sys\n\nprint(\"Hello. Please enter your name:\")\nname = sys.stdin.readline().strip()\nif name == \"Kevin\" or \"Jon\" or \"Inbar\":\n    print(\"Access granted.\")\nelse:\n    print(\"Access denied.\")\n</code></pre>\n\n<p>It grants access to authorized users as expected, but it also lets in unauthorized users!</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Hello. Please enter your name:\nBob\nAccess granted.\n</code></pre>\n\n<p>Why does this occur? I've plainly stated to only grant access when <code>name</code> equals Kevin, Jon, or Inbar. I have also tried the opposite logic, <code>if \"Kevin\" or \"Jon\" or \"Inbar\" == name</code>, but the result is the same.</p>\n",
        "answer": "<p>In many cases, Python looks and behaves like natural English, but this is one case where that abstraction fails. People can use context clues to determine that \"Jon\" and \"Inbar\" are objects joined to the verb \"equals\", but the Python interpreter is more literal minded.</p>\n\n<pre><code>if name == \"Kevin\" or \"Jon\" or \"Inbar\":\n</code></pre>\n\n<p>is logically equivalent to:  </p>\n\n<pre><code>if (name == \"Kevin\") or (\"Jon\") or (\"Inbar\"):\n</code></pre>\n\n<p>Which, for user Bob, is equivalent to:</p>\n\n<pre><code>if (False) or (\"Jon\") or (\"Inbar\"):\n</code></pre>\n\n<p>The <code>or</code> operator chooses the first argument with a positive <a href=\"http://docs.python.org/3/library/stdtypes.html#truth-value-testing\" rel=\"nofollow noreferrer\">truth value</a>:  </p>\n\n<pre><code>if (\"Jon\"):\n</code></pre>\n\n<p>And since \"Jon\" has a positive truth value, the <code>if</code> block executes. That is what causes \"Access granted\" to be printed regardless of the name given.</p>\n\n<p>All of this reasoning also applies to the expression <code>if \"Kevin\" or \"Jon\" or \"Inbar\" == name</code>. the first value, <code>\"Kevin\"</code>, is true, so the <code>if</code> block executes.</p>\n\n<hr>\n\n<p>There are two common ways to properly construct this conditional.  </p>\n\n<ol>\n<li><p>Use multiple <code>==</code> operators to explicitly check against each value:<br>\n<code>if name == \"Kevin\" or name == \"Jon\" or name == \"Inbar\":</code>  </p></li>\n<li><p>Compose a sequence of valid values, and use the <code>in</code> operator to test for membership:<br>\n<code>if name in {\"Kevin\", \"Jon\", \"Inbar\"}:</code></p></li>\n</ol>\n\n<p>In general of the two the second should be preferred as it's easier to read and also faster:</p>\n\n<pre><code>&gt;&gt;&gt; import timeit\n&gt;&gt;&gt; timeit.timeit('name == \"Kevin\" or name == \"Jon\" or name == \"Inbar\"', setup=\"name='Inbar'\")\n0.4247764749999945\n&gt;&gt;&gt; timeit.timeit('name in {\"Kevin\", \"Jon\", \"Inbar\"}', setup=\"name='Inbar'\")\n0.18493307199999265\n</code></pre>\n"
    },
    "34": {
        "question_id": "36250353",
        "answer_id": "36250354",
        "question": "<p>I have a script named <code>requests.py</code> that imports the requests package.  The script either can't access attributes from the package, or can't import them.  Why isn't this working and how do I fix it?</p>\n\n<p>The following code raises an <code>AttributeError</code>.</p>\n\n<pre><code>import requests\n\nres = requests.get('http://www.google.ca')\nprint(res)\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>Traceback (most recent call last):\n  File \"/Users/me/dev/rough/requests.py\", line 1, in &lt;module&gt;\n    import requests\n  File \"/Users/me/dev/rough/requests.py\", line 3, in &lt;module&gt;\n    requests.get('http://www.google.ca')\nAttributeError: module 'requests' has no attribute 'get'\n</code></pre>\n\n<p>The following code raises an <code>ImportError</code>.</p>\n\n<pre><code>from requests import get\n\nres = get('http://www.google.ca')\nprint(res)\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>Traceback (most recent call last):\n  File \"requests.py\", line 1, in &lt;module&gt;\n    from requests import get\n  File \"/Users/me/dev/rough/requests.py\", line 1, in &lt;module&gt;\n    from requests import get\nImportError: cannot import name 'get'\n</code></pre>\n\n<p>Or code that imports from a module inside the <code>requests</code> package:</p>\n\n<pre><code>from requests.auth import AuthBase\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>Traceback (most recent call last):\n  File \"requests.py\", line 1, in &lt;module&gt;\n    from requests.auth import AuthBase\n  File \"/Users/me/dev/rough/requests.py\", line 1, in &lt;module&gt;\n    from requests.auth import AuthBase\nImportError: No module named 'requests.auth'; 'requests' is not a package\n</code></pre>\n",
        "answer": "<p>This happens because your local module named <code>requests.py</code> shadows the installed <code>requests</code> module you are trying to use.  The current directory is prepended to <code>sys.path</code>, so the local name takes precedence over the installed name.</p>\n\n<p>An extra debugging tip when this comes up is to look at the Traceback carefully, and realize that the name of your script in question is matching the module you are trying to import: </p>\n\n<p>Notice the name you used in your script:</p>\n\n<pre><code>File \"/Users/me/dev/rough/requests.py\", line 1, in &lt;module&gt;\n</code></pre>\n\n<p>The module you are trying to import: <code>requests</code></p>\n\n<p>Rename your module to something else to avoid the name collision.</p>\n\n<p>Python may generate a <code>requests.pyc</code> file next to your <code>requests.py</code> file (in the <code>__pycache__</code> directory in Python 3).  Remove that as well after your rename, as the interpreter will still reference that file, re-producing the error. However, the <code>pyc</code> file in <code>__pycache__</code> <em>should</em> not affect your code if the <code>py</code> file has been removed.</p>\n\n<p>In the example, renaming the file to <code>my_requests.py</code>, removing <code>requests.pyc</code>, and running again successfully prints <code>&lt;Response [200]&gt;</code>.</p>\n"
    },
    "35": {
        "question_id": "323972",
        "answer_id": "325528",
        "question": "<p>Is it possible to terminate a running thread without setting/checking any flags/semaphores/etc.?</p>\n",
        "answer": "<p>It is generally a bad pattern to kill a thread abruptly, in Python and in any language. Think of the following cases:</p>\n\n<ul>\n<li>the thread is holding a critical resource that must be closed properly</li>\n<li>the thread has created several other threads that must be killed as well.</li>\n</ul>\n\n<p>The nice way of handling this if you can afford it (if you are managing your own threads) is to have an exit_request flag that each threads checks on regular interval to see if it is time for it to exit.</p>\n\n<p><strong>For example:</strong></p>\n\n<pre><code>import threading\n\nclass StoppableThread(threading.Thread):\n    \"\"\"Thread class with a stop() method. The thread itself has to check\n    regularly for the stopped() condition.\"\"\"\n\n    def __init__(self):\n        super(StoppableThread, self).__init__()\n        self._stop_event = threading.Event()\n\n    def stop(self):\n        self._stop_event.set()\n\n    def stopped(self):\n        return self._stop_event.is_set()\n</code></pre>\n\n<p>In this code, you should call <code>stop()</code> on the thread when you want it to exit, and wait for the thread to exit properly using <code>join()</code>. The thread should check the stop flag at regular intervals.</p>\n\n<p>There are cases however when you really need to kill a thread. An example is when you are wrapping an external library that is busy for long calls and you want to interrupt it.</p>\n\n<p>The following code allows (with some restrictions) to raise an Exception in a Python thread:</p>\n\n<pre><code>def _async_raise(tid, exctype):\n    '''Raises an exception in the threads with id tid'''\n    if not inspect.isclass(exctype):\n        raise TypeError(\"Only types can be raised (not instances)\")\n    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(ctypes.c_long(tid),\n                                                     ctypes.py_object(exctype))\n    if res == 0:\n        raise ValueError(\"invalid thread id\")\n    elif res != 1:\n        # \"if it returns a number greater than one, you're in trouble,\n        # and you should call it again with exc=NULL to revert the effect\"\n        ctypes.pythonapi.PyThreadState_SetAsyncExc(ctypes.c_long(tid), None)\n        raise SystemError(\"PyThreadState_SetAsyncExc failed\")\n\nclass ThreadWithExc(threading.Thread):\n    '''A thread class that supports raising exception in the thread from\n       another thread.\n    '''\n    def _get_my_tid(self):\n        \"\"\"determines this (self's) thread id\n\n        CAREFUL : this function is executed in the context of the caller\n        thread, to get the identity of the thread represented by this\n        instance.\n        \"\"\"\n        if not self.isAlive():\n            raise threading.ThreadError(\"the thread is not active\")\n\n        # do we have it cached?\n        if hasattr(self, \"_thread_id\"):\n            return self._thread_id\n\n        # no, look for it in the _active dict\n        for tid, tobj in threading._active.items():\n            if tobj is self:\n                self._thread_id = tid\n                return tid\n\n        # TODO: in python 2.6, there's a simpler way to do : self.ident\n\n        raise AssertionError(\"could not determine the thread's id\")\n\n    def raiseExc(self, exctype):\n        \"\"\"Raises the given exception type in the context of this thread.\n\n        If the thread is busy in a system call (time.sleep(),\n        socket.accept(), ...), the exception is simply ignored.\n\n        If you are sure that your exception should terminate the thread,\n        one way to ensure that it works is:\n\n            t = ThreadWithExc( ... )\n            ...\n            t.raiseExc( SomeException )\n            while t.isAlive():\n                time.sleep( 0.1 )\n                t.raiseExc( SomeException )\n\n        If the exception is to be caught by the thread, you need a way to\n        check that your thread has caught it.\n\n        CAREFUL : this function is executed in the context of the\n        caller thread, to raise an excpetion in the context of the\n        thread represented by this instance.\n        \"\"\"\n        _async_raise( self._get_my_tid(), exctype )\n</code></pre>\n\n<p>(Based on <a href=\"http://tomerfiliba.com/recipes/Thread2/\" rel=\"nofollow noreferrer\">Killable Threads</a> by Tomer Filiba. The quote about the return value of <code>PyThreadState_SetAsyncExc</code> appears to be from an <a href=\"https://svn.python.org/projects/stackless/Python-2.4.3/dev/Python/pystate.c\" rel=\"nofollow noreferrer\">old version of Python</a>.)</p>\n\n<p>As noted in the documentation, this is not a magic bullet because if the thread is busy outside the Python interpreter, it will not catch the interruption.</p>\n\n<p>A good usage pattern of this code is to have the thread catch a specific exception and perform the cleanup. That way, you can interrupt a task and still have proper cleanup.</p>\n"
    },
    "36": {
        "question_id": "1663807",
        "answer_id": "1663826",
        "question": "<p>I have two iterables in Python, and I want to go over them in pairs:</p>\n\n<pre><code>foo = (1, 2, 3)\nbar = (4, 5, 6)\n\nfor (f, b) in some_iterator(foo, bar):\n    print \"f: \", f, \"; b: \", b\n</code></pre>\n\n<p>It should result in:</p>\n\n<pre><code>f: 1; b: 4\nf: 2; b: 5\nf: 3; b: 6\n</code></pre>\n\n<p><em>One</em> way to do it is to iterate over the indices:</p>\n\n<pre><code>for i in xrange(len(foo)):\n    print \"f: \", foo[i], \"; b: \", b[i]\n</code></pre>\n\n<p>But that seems somewhat unpythonic to me. Is there a better way to do it?</p>\n",
        "answer": "<h2>Python 3</h2>\n\n<pre><code>for f, b in zip(foo, bar):\n    print(f, b)\n</code></pre>\n\n<p><code>zip</code> stops when the shorter of <code>foo</code> or <code>bar</code> stops.</p>\n\n<p>In <strong>Python 3</strong>, <a href=\"https://docs.python.org/3/library/functions.html#zip\" rel=\"noreferrer\"><code>zip</code></a>\nreturns an iterator of tuples, like <code>itertools.izip</code> in Python2.  To get a list\nof tuples, use <code>list(zip(foo, bar))</code>. And to zip until both iterators are\nexhausted, you would use\n<a href=\"https://docs.python.org/3.4/library/itertools.html#itertools.zip_longest\" rel=\"noreferrer\">itertools.zip_longest</a>.</p>\n\n<h2>Python 2</h2>\n\n<p>In <strong>Python 2</strong>, <a href=\"https://docs.python.org/2/library/functions.html#zip\" rel=\"noreferrer\"><code>zip</code></a>\nreturns a list of tuples. This is fine when <code>foo</code> and <code>bar</code> are not massive. If they are both massive then forming <code>zip(foo,bar)</code> is an unnecessarily massive\ntemporary variable, and should be replaced by <code>itertools.izip</code> or\n<code>itertools.izip_longest</code>, which returns an iterator instead of a list.</p>\n\n<pre><code>import itertools\nfor f,b in itertools.izip(foo,bar):\n    print(f,b)\nfor f,b in itertools.izip_longest(foo,bar):\n    print(f,b)\n</code></pre>\n\n<p><code>izip</code> stops when either <code>foo</code> or <code>bar</code> is exhausted.\n<code>izip_longest</code> stops when both <code>foo</code> and <code>bar</code> are exhausted.\nWhen the shorter iterator(s) are exhausted, <code>izip_longest</code> yields a tuple with <code>None</code> in the position corresponding to that iterator. You can also set a different <code>fillvalue</code> besides <code>None</code> if you wish. See here for the <a href=\"http://docs.python.org/library/itertools.html#itertools.izip_longest\" rel=\"noreferrer\">full story</a>.</p>\n\n<hr>\n\n<p>Note also that <code>zip</code> and its <code>zip</code>-like brethen can accept an arbitrary number of iterables as arguments. For example,</p>\n\n<pre><code>for num, cheese, color in zip([1,2,3], ['manchego', 'stilton', 'brie'], \n                              ['red', 'blue', 'green']):\n    print('{} {} {}'.format(num, color, cheese))\n</code></pre>\n\n<p>prints</p>\n\n<pre><code>1 red manchego\n2 blue stilton\n3 green brie\n</code></pre>\n"
    },
    "37": {
        "question_id": "480214",
        "answer_id": "480227",
        "question": "<p>Is there a built-in that removes duplicates from list in Python, whilst preserving order? I know that I can use a set to remove duplicates, but that destroys the original order. I also know that I can roll my own like this:</p>\n\n<pre><code>def uniq(input):\n  output = []\n  for x in input:\n    if x not in output:\n      output.append(x)\n  return output\n</code></pre>\n\n<p>(Thanks to <a href=\"https://stackoverflow.com/users/28169/unwind\">unwind</a> for that <a href=\"https://stackoverflow.com/questions/479897/how-do-you-remove-duplicates-from-a-list-in-python#479921\">code sample</a>.)</p>\n\n<p>But I'd like to avail myself of a built-in or a more Pythonic idiom if possible.</p>\n\n<p>Related question: <a href=\"https://stackoverflow.com/questions/89178/in-python-what-is-the-fastest-algorithm-for-removing-duplicates-from-a-list-so-t\">In Python, what is the fastest algorithm for removing duplicates from a list so that all elements are unique <em>while preserving order</em>?</a></p>\n",
        "answer": "<p>Here you have some alternatives: <a href=\"http://www.peterbe.com/plog/uniqifiers-benchmark\" rel=\"noreferrer\">http://www.peterbe.com/plog/uniqifiers-benchmark</a></p>\n\n<p>Fastest one:</p>\n\n<pre><code>def f7(seq):\n    seen = set()\n    seen_add = seen.add\n    return [x for x in seq if not (x in seen or seen_add(x))]\n</code></pre>\n\n<p>Why assign <code>seen.add</code> to <code>seen_add</code> instead of just calling <code>seen.add</code>? Python is a dynamic language, and resolving <code>seen.add</code> each iteration is more costly than resolving a local variable. <code>seen.add</code> could have changed between iterations, and the runtime isn't smart enough to rule that out. To play it safe, it has to check the object each time.</p>\n\n<p>If you plan on using this function a lot on the same dataset, perhaps you would be better off with an ordered set: <a href=\"http://code.activestate.com/recipes/528878/\" rel=\"noreferrer\">http://code.activestate.com/recipes/528878/</a></p>\n\n<p><em>O</em>(1) insertion, deletion and member-check per operation.</p>\n\n<p>(Small additional note: <code>seen.add()</code> always returns <code>None</code>, so the <em><code>or</code></em> above is there only as a way to attempt a set update, and not as an integral part of the logical test.)</p>\n"
    },
    "38": {
        "question_id": "1436703",
        "answer_id": "2626364",
        "question": "<p>What is the difference between <code>__str__</code> and <code>__repr__</code> in Python?</p>\n",
        "answer": "<p><a href=\"https://stackoverflow.com/users/95810/alex-martelli\">Alex</a> summarized well but, surprisingly, was too succinct.</p>\n\n<p>First, let me reiterate the main points in <a href=\"https://stackoverflow.com/a/1436756/3798217\">Alex\u2019s post</a>:</p>\n\n<ul>\n<li>The default implementation is useless (it\u2019s hard to think of one which wouldn\u2019t be, but yeah)</li>\n<li><code>__repr__</code> goal is to be unambiguous</li>\n<li><code>__str__</code> goal is to be readable</li>\n<li>Container\u2019s <code>__str__</code> uses contained objects\u2019 <code>__repr__</code></li>\n</ul>\n\n<p><strong>Default implementation is useless</strong></p>\n\n<p>This is mostly a surprise because Python\u2019s defaults tend to be fairly useful. However, in this case, having a default for <code>__repr__</code> which would act like:</p>\n\n<pre><code>return \"%s(%r)\" % (self.__class__, self.__dict__)\n</code></pre>\n\n<p>would have been too dangerous (for example, too easy to get into infinite recursion if objects reference each other). So Python cops out. Note that there is one default which is true: if <code>__repr__</code> is defined, and <code>__str__</code> is not, the object will behave as though <code>__str__=__repr__</code>.</p>\n\n<p>This means, in simple terms: almost every object you implement should have a functional <code>__repr__</code> that\u2019s usable for understanding the object. Implementing <code>__str__</code> is optional: do that if you need a \u201cpretty print\u201d functionality (for example, used by a report generator).</p>\n\n<p><strong>The goal of <code>__repr__</code> is to be unambiguous</strong></p>\n\n<p>Let me come right out and say it \u2014 I do not believe in debuggers. I don\u2019t really know how to use any debugger, and have never used one seriously. Furthermore, I believe that the big fault in debuggers is their basic nature \u2014 most failures I debug happened a long long time ago, in a galaxy far far away. This means that I do believe, with religious fervor, in logging. Logging is the lifeblood of any decent fire-and-forget server system. Python makes it easy to log: with maybe some project specific wrappers, all you need is a</p>\n\n<pre><code>log(INFO, \"I am in the weird function and a is\", a, \"and b is\", b, \"but I got a null C \u2014 using default\", default_c)\n</code></pre>\n\n<p>But you have to do the last step \u2014 make sure every object you implement has a useful repr, so code like that can just work. This is why the \u201ceval\u201d thing comes up: if you have enough information so <code>eval(repr(c))==c</code>, that means you know everything there is to know about <code>c</code>. If that\u2019s easy enough, at least in a fuzzy way, do it. If not, make sure you have enough information about <code>c</code> anyway. I usually use an eval-like format: <code>\"MyClass(this=%r,that=%r)\" % (self.this,self.that)</code>. It does not mean that you can actually construct MyClass, or that those are the right constructor arguments \u2014 but it is a useful form to express \u201cthis is everything you need to know about this instance\u201d.</p>\n\n<p>Note: I used <code>%r</code> above, not <code>%s</code>. You always want to use <code>repr()</code> [or <code>%r</code> formatting character, equivalently] inside <code>__repr__</code> implementation, or you\u2019re defeating the goal of repr. You want to be able to differentiate <code>MyClass(3)</code> and <code>MyClass(\"3\")</code>.</p>\n\n<p><strong>The goal of <code>__str__</code> is to be readable</strong></p>\n\n<p>Specifically, it is not intended to be unambiguous \u2014 notice that <code>str(3)==str(\"3\")</code>. Likewise, if you implement an IP abstraction, having the str of it look like 192.168.1.1 is just fine. When implementing a date/time abstraction, the str can be \"2010/4/12 15:35:22\", etc. The goal is to represent it in a way that a user, not a programmer, would want to read it. Chop off useless digits, pretend to be some other class \u2014 as long is it supports readability, it is an improvement.</p>\n\n<p><strong>Container\u2019s <code>__str__</code> uses contained objects\u2019 <code>__repr__</code></strong></p>\n\n<p>This seems surprising, doesn\u2019t it? It is a little, but how readable would</p>\n\n<pre><code>[moshe is, 3, hello\nworld, this is a list, oh I don't know, containing just 4 elements]\n</code></pre>\n\n<p>be? Not very. Specifically, the strings in a container would find it way too easy to disturb its string representation. In the face of ambiguity, remember, Python resists the temptation to guess. If you want the above behavior when you\u2019re printing a list, just</p>\n\n<pre><code>print \"[\" + \", \".join(l) + \"]\"\n</code></pre>\n\n<p>(you can probably also figure out what to do about dictionaries.</p>\n\n<p><strong>Summary</strong></p>\n\n<p>Implement <code>__repr__</code> for any class you implement. This should be second nature. Implement <code>__str__</code> if you think it would be useful to have a string version which errs on the side of readability.</p>\n"
    },
    "39": {
        "question_id": "826948",
        "answer_id": "826957",
        "question": "<p>Why do I receive a syntax error when printing a string in Python 3?</p>\n\n<pre><code>&gt;&gt;&gt; print \"hello World\"\n  File \"&lt;stdin&gt;\", line 1\n    print \"hello World\"\n                      ^\nSyntaxError: invalid syntax\n</code></pre>\n",
        "answer": "<p>In Python 3, <code>print</code> <a href=\"http://docs.python.org/3.0/whatsnew/3.0.html#print-is-a-function\" rel=\"noreferrer\">became a function</a>. This means that you need to include parenthesis now like mentioned below:</p>\n\n<pre><code>print(\"Hello World\")\n</code></pre>\n"
    },
    "40": {
        "question_id": "1894269",
        "answer_id": "1894296",
        "question": "<p>I was wondering what the simplest way is to convert a <code>string</code> list like the following to a <code>list</code>:</p>\n\n<pre><code>x = u'[ \"A\",\"B\",\"C\" , \" D\"]'\n</code></pre>\n\n<p>Even in case user puts spaces in between the commas, and spaces inside of the quotes. I need to handle that as well to:</p>\n\n<pre><code>x = [\"A\", \"B\", \"C\", \"D\"] \n</code></pre>\n\n<p>in Python.</p>\n\n<p>I know I can strip spaces with <code>strip()</code> and <code>split()</code> using the split operator and check for non alphabets. But the code was getting very kludgy. Is there a quick function that I'm not aware of?</p>\n",
        "answer": "<pre><code>&gt;&gt;&gt; import ast\n&gt;&gt;&gt; x = u'[ \"A\",\"B\",\"C\" , \" D\"]'\n&gt;&gt;&gt; x = ast.literal_eval(x)\n&gt;&gt;&gt; x\n['A', 'B', 'C', ' D']\n&gt;&gt;&gt; x = [n.strip() for n in x]\n&gt;&gt;&gt; x\n['A', 'B', 'C', 'D']\n</code></pre>\n\n<p><a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\" rel=\"noreferrer\">ast.literal_eval</a>:</p>\n\n<blockquote>\n  <p>With ast.literal_eval, you can safely evaluate an expression node or a string containing a Python expression. The string or node provided may only consist of the following Python literal structures: strings, numbers, tuples, lists, dicts, booleans, and None.</p>\n</blockquote>\n"
    },
    "41": {
        "question_id": "739654",
        "answer_id": "739665",
        "question": "<p>How can I make two decorators in Python that would do the following?</p>\n\n<pre><code>@makebold\n@makeitalic\ndef say():\n   return \"Hello\"\n</code></pre>\n\n<p>...which should return:</p>\n\n<pre><code>\"&lt;b&gt;&lt;i&gt;Hello&lt;/i&gt;&lt;/b&gt;\"\n</code></pre>\n\n<p>I'm not trying to make <code>HTML</code> this way in a real application - just trying to understand how decorators and decorator chaining works.</p>\n",
        "answer": "<p>Check out <a href=\"http://docs.python.org/reference/compound_stmts.html#function\" rel=\"noreferrer\">the documentation</a> to see how decorators work. Here is what you asked for:</p>\n\n<pre><code>from functools import wraps\n\ndef makebold(fn):\n    @wraps(fn)\n    def wrapped(*args, **kwargs):\n        return \"&lt;b&gt;\" + fn(*args, **kwargs) + \"&lt;/b&gt;\"\n    return wrapped\n\ndef makeitalic(fn):\n    @wraps(fn)\n    def wrapped(*args, **kwargs):\n        return \"&lt;i&gt;\" + fn(*args, **kwargs) + \"&lt;/i&gt;\"\n    return wrapped\n\n@makebold\n@makeitalic\ndef hello():\n    return \"hello world\"\n\n@makebold\n@makeitalic\ndef log(s):\n    return s\n\nprint hello()        # returns \"&lt;b&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/b&gt;\"\nprint hello.__name__ # with functools.wraps() this returns \"hello\"\nprint log('hello')   # returns \"&lt;b&gt;&lt;i&gt;hello&lt;/i&gt;&lt;/b&gt;\"\n</code></pre>\n"
    },
    "42": {
        "question_id": "19960077",
        "answer_id": "19960116",
        "question": "<p>How can I achieve the equivalents of SQL's <code>IN</code> and <code>NOT IN</code>?</p>\n\n<p>I have a list with the required values.\nHere's the scenario:</p>\n\n<pre><code>df = pd.DataFrame({'countries':['US','UK','Germany','China']})\ncountries = ['UK','China']\n\n# pseudo-code:\ndf[df['countries'] not in countries]\n</code></pre>\n\n<p>My current way of doing this is as follows:</p>\n\n<pre><code>df = pd.DataFrame({'countries':['US','UK','Germany','China']})\ncountries = pd.DataFrame({'countries':['UK','China'], 'matched':True})\n\n# IN\ndf.merge(countries,how='inner',on='countries')\n\n# NOT IN\nnot_in = df.merge(countries,how='left',on='countries')\nnot_in = not_in[pd.isnull(not_in['matched'])]\n</code></pre>\n\n<p>But this seems like a horrible kludge. Can anyone improve on it?</p>\n",
        "answer": "<p>You can use <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.isin.html\" rel=\"noreferrer\"><code>pd.Series.isin</code></a>. </p>\n\n<p>For \"IN\" use: <code>something.isin(somewhere)</code> </p>\n\n<p>Or for \"NOT IN\": <code>~something.isin(somewhere)</code> </p>\n\n<p>As a worked example:</p>\n\n<pre><code>&gt;&gt;&gt; df\n  countries\n0        US\n1        UK\n2   Germany\n3     China\n&gt;&gt;&gt; countries\n['UK', 'China']\n&gt;&gt;&gt; df.countries.isin(countries)\n0    False\n1     True\n2    False\n3     True\nName: countries, dtype: bool\n&gt;&gt;&gt; df[df.countries.isin(countries)]\n  countries\n1        UK\n3     China\n&gt;&gt;&gt; df[~df.countries.isin(countries)]\n  countries\n0        US\n2   Germany\n</code></pre>\n"
    },
    "43": {
        "question_id": "466345",
        "answer_id": "466376",
        "question": "<p>Short and simple. I've got a huge list of date-times like this as strings:</p>\n\n<pre><code>Jun 1 2005  1:33PM\nAug 28 1999 12:00AM\n</code></pre>\n\n<p>I'm going to be shoving these back into proper datetime fields in a database so I need to magic them into real datetime objects. </p>\n\n<p>Any help (even if it's just a kick in the right direction) would be appreciated.</p>\n\n<p>Edit: This is going through Django's ORM so I can't use SQL to do the conversion on insert.</p>\n",
        "answer": "<p><code>datetime.strptime</code> is the main routine for parsing strings into datetimes. It can handle all sorts of formats, with the format determined by a format string you give it:</p>\n\n<pre><code>from datetime import datetime\n\ndatetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')\n</code></pre>\n\n<p>The resulting <code>datetime</code> object is timezone-naive.</p>\n\n<p>Links:</p>\n\n<ul>\n<li><p>Python documentation for <code>strptime</code>: <a href=\"https://docs.python.org/2/library/datetime.html#datetime.datetime.strptime\" rel=\"noreferrer\" title=\"datetime.datetime.strptime\">Python 2</a>, <a href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime\" rel=\"noreferrer\">Python 3</a></p></li>\n<li><p>Python documentation for <code>strptime</code>/<code>strftime</code> format strings: <a href=\"https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior\" rel=\"noreferrer\" title=\"strftime-and-strptime-behavior\">Python 2</a>, <a href=\"https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior\" rel=\"noreferrer\">Python 3</a></p></li>\n<li><p><a href=\"http://strftime.org/\" rel=\"noreferrer\">strftime.org</a> is also a really nice reference for strftime</p></li>\n</ul>\n\n<p>Notes:</p>\n\n<ul>\n<li><code>strptime</code> = \"string parse time\"</li>\n<li><code>strftime</code> = \"string format time\"</li>\n<li>Pronounce it out loud today &amp; you won't have to search for it again in 6 months.</li>\n</ul>\n"
    },
    "44": {
        "question_id": "38987",
        "answer_id": "26853961",
        "question": "<p>I have two Python dictionaries, and I want to write a single expression that returns these two dictionaries, merged.  The <code>update()</code> method would be what I need, if it returned its result instead of modifying a dict in-place.</p>\n\n<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; z = x.update(y)\n&gt;&gt;&gt; print(z)\nNone\n&gt;&gt;&gt; x\n{'a': 1, 'b': 10, 'c': 11}\n</code></pre>\n\n<p>How can I get that final merged dict in <code>z</code>, not <code>x</code>?</p>\n\n<p>(To be extra-clear, the last-one-wins conflict-handling of <code>dict.update()</code> is what I'm looking for as well.)</p>\n",
        "answer": "<blockquote>\n  <h2>How can I merge two Python dictionaries in a single expression?</h2>\n</blockquote>\n\n<p>For dictionaries <code>x</code> and <code>y</code>, <code>z</code> becomes a shallowly merged dictionary with values from <code>y</code> replacing those from <code>x</code>.</p>\n\n<ul>\n<li><p>In Python 3.5 or greater:</p>\n\n<pre><code>z = {**x, **y}\n</code></pre></li>\n<li><p>In Python 2, (or 3.4 or lower) write a function:</p>\n\n<pre><code>def merge_two_dicts(x, y):\n    z = x.copy()   # start with x's keys and values\n    z.update(y)    # modifies z with y's keys and values &amp; returns None\n    return z\n</code></pre>\n\n<p>and now:</p>\n\n<pre><code>z = merge_two_dicts(x, y)\n</code></pre></li>\n</ul>\n\n<h3>Explanation</h3>\n\n<p>Say you have two dicts and you want to merge them into a new dict without altering the original dicts:</p>\n\n<pre><code>x = {'a': 1, 'b': 2}\ny = {'b': 3, 'c': 4}\n</code></pre>\n\n<p>The desired result is to get a new dictionary (<code>z</code>) with the values merged, and the second dict's values overwriting those from the first.</p>\n\n<pre><code>&gt;&gt;&gt; z\n{'a': 1, 'b': 3, 'c': 4}\n</code></pre>\n\n<p>A new syntax for this, proposed in <a href=\"https://www.python.org/dev/peps/pep-0448\" rel=\"noreferrer\">PEP 448</a> and <a href=\"https://mail.python.org/pipermail/python-dev/2015-February/138564.html\" rel=\"noreferrer\">available as of Python 3.5</a>, is </p>\n\n<pre><code>z = {**x, **y}\n</code></pre>\n\n<p>And it is indeed a single expression. </p>\n\n<p>Note that we can merge in with literal notation as well:</p>\n\n<pre><code>z = {**x, 'foo': 1, 'bar': 2, **y}\n</code></pre>\n\n<p>and now: </p>\n\n<pre><code>&gt;&gt;&gt; z\n{'a': 1, 'b': 3, 'foo': 1, 'bar': 2, 'c': 4}\n</code></pre>\n\n<p>It is now showing as implemented in the <a href=\"https://www.python.org/dev/peps/pep-0478/#features-for-3-5\" rel=\"noreferrer\">release schedule for 3.5, PEP 478</a>, and it has now made its way into <a href=\"https://docs.python.org/dev/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations\" rel=\"noreferrer\">What's New in Python 3.5</a> document.</p>\n\n<p>However, since many organizations are still on Python 2, you may wish to do this in a backwards compatible way. The classically Pythonic way, available in Python 2 and Python 3.0-3.4, is to do this as a two-step process:</p>\n\n<pre><code>z = x.copy()\nz.update(y) # which returns None since it mutates z\n</code></pre>\n\n<p>In both approaches, <code>y</code> will come second and its values will replace <code>x</code>'s values, thus <code>'b'</code> will point to <code>3</code> in our final result.</p>\n\n<h2>Not yet on Python 3.5, but want a <em>single expression</em></h2>\n\n<p>If you are not yet on Python 3.5, or need to write backward-compatible code, and you want this in a <em>single expression</em>, the most performant while correct approach is to put it in a function:</p>\n\n<pre><code>def merge_two_dicts(x, y):\n    \"\"\"Given two dicts, merge them into a new dict as a shallow copy.\"\"\"\n    z = x.copy()\n    z.update(y)\n    return z\n</code></pre>\n\n<p>and then you have a single expression:</p>\n\n<pre><code>z = merge_two_dicts(x, y)\n</code></pre>\n\n<p>You can also make a function to merge an undefined number of dicts, from zero to a very large number:</p>\n\n<pre><code>def merge_dicts(*dict_args):\n    \"\"\"\n    Given any number of dicts, shallow copy and merge into a new dict,\n    precedence goes to key value pairs in latter dicts.\n    \"\"\"\n    result = {}\n    for dictionary in dict_args:\n        result.update(dictionary)\n    return result\n</code></pre>\n\n<p>This function will work in Python 2 and 3 for all dicts. e.g. given dicts <code>a</code> to <code>g</code>:</p>\n\n<pre><code>z = merge_dicts(a, b, c, d, e, f, g) \n</code></pre>\n\n<p>and key value pairs in <code>g</code> will take precedence over dicts <code>a</code> to <code>f</code>, and so on.</p>\n\n<h2>Critiques of Other Answers</h2>\n\n<p>Don't use what you see in the formerly accepted answer:</p>\n\n<pre><code>z = dict(x.items() + y.items())\n</code></pre>\n\n<p>In Python 2, you create two lists in memory for each dict, create a third list in memory with length equal to the length of the first two put together, and then discard all three lists to create the dict. <strong>In Python 3, this will fail</strong> because you're adding two <code>dict_items</code> objects together, not two lists - </p>\n\n<pre><code>&gt;&gt;&gt; c = dict(a.items() + b.items())\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unsupported operand type(s) for +: 'dict_items' and 'dict_items'\n</code></pre>\n\n<p>and you would have to explicitly create them as lists, e.g. <code>z = dict(list(x.items()) + list(y.items()))</code>. This is a waste of resources and computation power. </p>\n\n<p>Similarly, taking the union of <code>items()</code> in Python 3 (<code>viewitems()</code> in Python 2.7) will also fail when values are unhashable objects (like lists, for example). Even if your values are hashable, <strong>since sets are semantically unordered, the behavior is undefined in regards to precedence. So don't do this:</strong></p>\n\n<pre><code>&gt;&gt;&gt; c = dict(a.items() | b.items())\n</code></pre>\n\n<p>This example demonstrates what happens when values are unhashable:</p>\n\n<pre><code>&gt;&gt;&gt; x = {'a': []}\n&gt;&gt;&gt; y = {'b': []}\n&gt;&gt;&gt; dict(x.items() | y.items())\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unhashable type: 'list'\n</code></pre>\n\n<p>Here's an example where y should have precedence, but instead the value from x is retained due to the arbitrary order of sets:</p>\n\n<pre><code>&gt;&gt;&gt; x = {'a': 2}\n&gt;&gt;&gt; y = {'a': 1}\n&gt;&gt;&gt; dict(x.items() | y.items())\n{'a': 2}\n</code></pre>\n\n<p>Another hack you should not use:</p>\n\n<pre><code>z = dict(x, **y)\n</code></pre>\n\n<p>This uses the <code>dict</code> constructor, and is very fast and memory efficient (even slightly more-so than our two-step process) but unless you know precisely what is happening here (that is, the second dict is being passed as keyword arguments to the dict constructor), it's difficult to read, it's not the intended usage, and so it is not Pythonic. </p>\n\n<p>Here's an example of the usage being <a href=\"https://code.djangoproject.com/attachment/ticket/13357/django-pypy.2.diff\" rel=\"noreferrer\">remediated in django</a>.</p>\n\n<p>Dicts are intended to take hashable keys (e.g. frozensets or tuples), but <strong>this method fails in Python 3 when keys are not strings.</strong></p>\n\n<pre><code>&gt;&gt;&gt; c = dict(a, **b)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: keyword arguments must be strings\n</code></pre>\n\n<p>From the <a href=\"https://mail.python.org/pipermail/python-dev/2010-April/099459.html\" rel=\"noreferrer\">mailing list</a>, Guido van Rossum, the creator of the language, wrote:</p>\n\n<blockquote>\n  <p>I am fine with\n  declaring dict({}, **{1:3}) illegal, since after all it is abuse of\n  the ** mechanism.</p>\n</blockquote>\n\n<p>and </p>\n\n<blockquote>\n  <p>Apparently dict(x, **y) is going around as \"cool hack\" for \"call\n  x.update(y) and return x\". Personally I find it more despicable than\n  cool.</p>\n</blockquote>\n\n<p>It is my understanding (as well as the understanding of the <a href=\"https://mail.python.org/pipermail/python-dev/2010-April/099485.html\" rel=\"noreferrer\">creator of the language</a>) that the intended usage for <code>dict(**y)</code> is for creating dicts for readability purposes, e.g.:</p>\n\n<pre><code>dict(a=1, b=10, c=11)\n</code></pre>\n\n<p>instead of </p>\n\n<pre><code>{'a': 1, 'b': 10, 'c': 11}\n</code></pre>\n\n<h2>Response to comments</h2>\n\n<blockquote>\n  <p>Despite what Guido says, <code>dict(x, **y)</code> is in line with the dict specification, which btw. works for both Python 2 and 3. The fact that this only works for string keys is a direct consequence of how keyword parameters work and not a short-comming of dict. Nor is using the ** operator in this place an abuse of the mechanism, in fact ** was designed precisely to pass dicts as keywords. </p>\n</blockquote>\n\n<p>Again, it doesn't work for 3 when keys are non-strings. The implicit calling contract is that namespaces take ordinary dicts, while users must only pass keyword arguments that are strings. All other callables enforced it. <code>dict</code> broke this consistency in Python 2:</p>\n\n<pre><code>&gt;&gt;&gt; foo(**{('a', 'b'): None})\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: foo() keywords must be strings\n&gt;&gt;&gt; dict(**{('a', 'b'): None})\n{('a', 'b'): None}\n</code></pre>\n\n<p>This inconsistency was bad given other implementations of Python (Pypy, Jython, IronPython). Thus it was fixed in Python 3, as this usage could be a breaking change.</p>\n\n<p>I submit to you that it is malicious incompetence to intentionally write code that only works in one version of a language or that only works given certain arbitrary constraints.</p>\n\n<p>More comments:</p>\n\n<blockquote>\n  <p><code>dict(x.items() + y.items())</code> is still the most readable solution for Python 2. Readability counts. </p>\n</blockquote>\n\n<p>My response: <code>merge_two_dicts(x, y)</code> actually seems much clearer to me, if we're actually concerned about readability. And it is not forward compatible, as Python 2 is increasingly deprecated.</p>\n\n<blockquote>\n  <p><code>{**x, **y}</code> does not seem to handle nested dictionaries. the contents of nested keys are simply overwritten, not merged [...] I ended up being burnt by these answers that do not merge recursively and I was surprised no one mentioned it. In my interpretation of the word \"merging\" these answers describe \"updating one dict with another\", and not merging.</p>\n</blockquote>\n\n<p>Yes. I must refer you back to the question, which is asking for a <em>shallow</em> merge of <strong><em>two</em></strong> dictionaries, with the first's values being overwritten by the second's - in a single expression.</p>\n\n<p>Assuming two dictionary of dictionaries, one might recursively merge them in a single function, but you should be careful not to modify the dicts from either source, and the surest way to avoid that is to make a copy when assigning values. As keys must be hashable and are usually therefore immutable, it is pointless to copy them:</p>\n\n<pre><code>from copy import deepcopy\n\ndef dict_of_dicts_merge(x, y):\n    z = {}\n    overlapping_keys = x.keys() &amp; y.keys()\n    for key in overlapping_keys:\n        z[key] = dict_of_dicts_merge(x[key], y[key])\n    for key in x.keys() - overlapping_keys:\n        z[key] = deepcopy(x[key])\n    for key in y.keys() - overlapping_keys:\n        z[key] = deepcopy(y[key])\n    return z\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>&gt;&gt;&gt; x = {'a':{1:{}}, 'b': {2:{}}}\n&gt;&gt;&gt; y = {'b':{10:{}}, 'c': {11:{}}}\n&gt;&gt;&gt; dict_of_dicts_merge(x, y)\n{'b': {2: {}, 10: {}}, 'a': {1: {}}, 'c': {11: {}}}\n</code></pre>\n\n<p>Coming up with contingencies for other value types is far beyond the scope of this question, so I will point you at <a href=\"https://stackoverflow.com/a/24088493/541136\">my answer to the canonical question on a \"Dictionaries of dictionaries merge\"</a>.</p>\n\n<h2>Less Performant But Correct Ad-hocs</h2>\n\n<p>These approaches are less performant, but they will provide correct behavior.\nThey will be <em>much less</em> performant than <code>copy</code> and <code>update</code> or the new unpacking because they iterate through each key-value pair at a higher level of abstraction, but they <em>do</em> respect the order of precedence (latter dicts have precedence)</p>\n\n<p>You can also chain the dicts manually inside a dict comprehension:</p>\n\n<pre><code>{k: v for d in dicts for k, v in d.items()} # iteritems in Python 2.7\n</code></pre>\n\n<p>or in python 2.6 (and perhaps as early as 2.4 when generator expressions were introduced):</p>\n\n<pre><code>dict((k, v) for d in dicts for k, v in d.items())\n</code></pre>\n\n<p><code>itertools.chain</code> will chain the iterators over the key-value pairs in the correct order:</p>\n\n<pre><code>import itertools\nz = dict(itertools.chain(x.iteritems(), y.iteritems()))\n</code></pre>\n\n<h2>Performance Analysis</h2>\n\n<p>I'm only going to do the performance analysis of the usages known to behave correctly. </p>\n\n<pre><code>import timeit\n</code></pre>\n\n<p>The following is done on Ubuntu 14.04</p>\n\n<p>In Python 2.7 (system Python):</p>\n\n<pre><code>&gt;&gt;&gt; min(timeit.repeat(lambda: merge_two_dicts(x, y)))\n0.5726828575134277\n&gt;&gt;&gt; min(timeit.repeat(lambda: {k: v for d in (x, y) for k, v in d.items()} ))\n1.163769006729126\n&gt;&gt;&gt; min(timeit.repeat(lambda: dict(itertools.chain(x.iteritems(), y.iteritems()))))\n1.1614501476287842\n&gt;&gt;&gt; min(timeit.repeat(lambda: dict((k, v) for d in (x, y) for k, v in d.items())))\n2.2345519065856934\n</code></pre>\n\n<p>In Python 3.5 (deadsnakes PPA):</p>\n\n<pre><code>&gt;&gt;&gt; min(timeit.repeat(lambda: {**x, **y}))\n0.4094954460160807\n&gt;&gt;&gt; min(timeit.repeat(lambda: merge_two_dicts(x, y)))\n0.7881555100320838\n&gt;&gt;&gt; min(timeit.repeat(lambda: {k: v for d in (x, y) for k, v in d.items()} ))\n1.4525277839857154\n&gt;&gt;&gt; min(timeit.repeat(lambda: dict(itertools.chain(x.items(), y.items()))))\n2.3143140770262107\n&gt;&gt;&gt; min(timeit.repeat(lambda: dict((k, v) for d in (x, y) for k, v in d.items())))\n3.2069112799945287\n</code></pre>\n\n<h2>Resources on Dictionaries</h2>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/327311/how-are-pythons-built-in-dictionaries-implemented/44509302#44509302\">My explanation of Python's <strong>dictionary implementation</strong>, updated for 3.6.</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1024847/add-new-keys-to-a-dictionary/27208535#27208535\">Answer on how to add new keys to a dictionary</a></li>\n<li><a href=\"https://stackoverflow.com/questions/209840/map-two-lists-into-a-dictionary-in-python/33737067#33737067\">Mapping two lists into a dictionary</a></li>\n<li>The official Python <a href=\"https://docs.python.org/3/tutorial/datastructures.html#dictionaries\" rel=\"noreferrer\">docs on dictionaries</a> </li>\n<li><a href=\"https://www.youtube.com/watch?v=66P5FMkWoVU\" rel=\"noreferrer\">The Dictionary Even Mightier</a> - talk by Brandon Rhodes at Pycon 2017</li>\n<li><a href=\"https://www.youtube.com/watch?v=npw4s1QTmPg\" rel=\"noreferrer\">Modern Python Dictionaries, A Confluence of Great Ideas</a> - talk by Raymond Hettinger at Pycon 2017</li>\n</ul>\n"
    },
    "45": {
        "question_id": "15479928",
        "answer_id": "15479974",
        "question": "<p>I don't understand how looping over a dictionary or set in python is done by 'arbitrary' order.</p>\n\n<p>I mean, it's a programming language so everything in the language must be 100% determined, correct? Python must have some kind of algorithm that decides which part of the dictionary or set is chosen, 1st, second and so on. </p>\n\n<p>What am I missing?</p>\n",
        "answer": "<p>The order is not arbitrary, but depends on the insertion and deletion history of the dictionary or set, as well as on the specific Python implementation. For the remainder of this answer, for 'dictionary', you can also read 'set'; sets are implemented as dictionaries with just keys and no values.</p>\n\n<p>Keys are hashed, and hash values are assigned to slots in a dynamic table (it can grow or shrink based on needs). And that mapping process can lead to collisions, meaning that a key will have to be slotted in a <em>next</em> slot based on what is already there.</p>\n\n<p>Listing the contents loops over the slots, and so keys are listed in the order they <em>currently</em> reside in the table.</p>\n\n<p>Take the keys <code>'foo'</code> and <code>'bar'</code>, for example, and lets assume the table size is 8 slots. In Python 2.7, <code>hash('foo')</code> is <code>-4177197833195190597</code>, <code>hash('bar')</code> is <code>327024216814240868</code>. Modulo 8, that means these two keys are slotted in slots 3 and 4 then:</p>\n\n<pre><code>&gt;&gt;&gt; hash('foo')\n-4177197833195190597\n&gt;&gt;&gt; hash('foo') % 8\n3\n&gt;&gt;&gt; hash('bar')\n327024216814240868\n&gt;&gt;&gt; hash('bar') % 8\n4\n</code></pre>\n\n<p>This informs their listing order:</p>\n\n<pre><code>&gt;&gt;&gt; {'bar': None, 'foo': None}\n{'foo': None, 'bar': None}\n</code></pre>\n\n<p>All slots except 3 and 4 are empty, looping over the table first lists slot 3, then slot 4, so <code>'foo'</code> is listed before <code>'bar'</code>.</p>\n\n<p><code>bar</code> and <code>baz</code>, however, have hash values that are exactly 8 apart and thus map to the exact same slot, <code>4</code>:</p>\n\n<pre><code>&gt;&gt;&gt; hash('bar')\n327024216814240868\n&gt;&gt;&gt; hash('baz')\n327024216814240876\n&gt;&gt;&gt; hash('bar') % 8\n4\n&gt;&gt;&gt; hash('baz') % 8\n4\n</code></pre>\n\n<p>Their order now depends on which key was slotted first; the second key will have to be moved to a next slot:</p>\n\n<pre><code>&gt;&gt;&gt; {'baz': None, 'bar': None}\n{'bar': None, 'baz': None}\n&gt;&gt;&gt; {'bar': None, 'baz': None}\n{'baz': None, 'bar': None}\n</code></pre>\n\n<p>The table order differs here, because one or the other key was slotted first.</p>\n\n<p>The technical name for the underlying structure used by CPython (the most commonly used Python implemenation) is a <a href=\"http://en.wikipedia.org/wiki/hash_table\" rel=\"noreferrer\">hash table</a>, one that uses open addressing. If you are curious, and understand C well enough, take a look at the <a href=\"http://hg.python.org/cpython/file/tip/Objects/dictobject.c\" rel=\"noreferrer\">C implementation</a> for all the (well documented) details. You could also watch this <a href=\"http://pyvideo.org/video/276/the-mighty-dictionary-55\" rel=\"noreferrer\">Pycon 2010 presentation by Brandon Rhodes</a> about how CPython <code>dict</code> works, or pick up a copy of <a href=\"http://shop.oreilly.com/product/9780596510046.do\" rel=\"noreferrer\">Beautiful Code</a>, which includes a chapter on the implementation written by Andrew Kuchling.</p>\n\n<p>Note that as of Python 3.3, a random hash seed is used as well, making hash collisions unpredictable to prevent certain types of denial of service (where an attacker renders a Python server unresponsive by causing mass hash collisions). This means that the order of a given dictionary is then <em>also</em> dependent on the random hash seed for the current Python invocation.</p>\n\n<p>Other implementations are free to use a different structure for dictionaries, as long as they satisfy the documented Python interface for them, but I believe that all implementations so far use a variation of the hash table.</p>\n\n<p>CPython 3.6 introduces a <em>new</em> <code>dict</code> implementation that maintains insertion order, and is faster and more memory efficient to boot. Rather than keep a large sparse table where each row references the stored hash value, and the key and value objects, the new implementation adds a smaller hash <em>array</em> that only references indices in dense table (one that only contains as many rows as there are actual key-value pairs), and it is the dense table that happens to list the contained items in order. See the <a href=\"https://mail.python.org/pipermail/python-dev/2012-December/123028.html\" rel=\"noreferrer\">proposal to Python-Dev for more details</a>. Note that in Python 3.6 this is considered an <em>implementation detail</em>, Python-the-language does not specify that other implementations have to retain order. This changed in Python 3.7, where this detail was <a href=\"https://mail.python.org/pipermail/python-dev/2017-December/151283.html\" rel=\"noreferrer\">elevated to be a <em>language specification</em></a>; for any implementation to be properly compatible with Python 3.7 or newer it <strong>must</strong> copy this order-preserving behaviour.</p>\n\n<p>Python 2.7 and newer also provides an <a href=\"https://docs.python.org/2/library/collections.html#collections.OrderedDict\" rel=\"noreferrer\"><code>OrderedDict</code> class</a>, a subclass of <code>dict</code> that adds an additional data structure to record key order. At the price of some speed and extra memory, this class remembers in what order you inserted keys; listing keys, values or items will then do so in that order. It uses a doubly-linked list stored in an additional dictionary to keep the order up-to-date efficiently. See the <a href=\"https://mail.python.org/pipermail/python-dev/2012-December/123028.html\" rel=\"noreferrer\">post by Raymond Hettinger outlining the idea</a>. Note that the <code>set</code> type is still unordered.</p>\n\n<p>If you wanted an ordered set, you can install the <a href=\"https://pypi.python.org/pypi/oset\" rel=\"noreferrer\"><code>oset</code> package</a>; it works on Python 2.5 and up.</p>\n"
    },
    "46": {
        "question_id": "1301346",
        "answer_id": "1301369",
        "question": "<p>Can someone please explain the exact meaning of having leading underscores before an object's name in Python? Also, explain the difference between a single and a double leading underscore. Also, does that meaning stay the same whether the object in question is a variable, a function, a method, etc.?</p>\n",
        "answer": "<h2>Single Underscore</h2>\n\n<p>Names, in a class, with a leading underscore are simply to indicate to other programmers that the attribute or method is intended to be private.  However, nothing special is done with the name itself.</p>\n\n<p>To quote <a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\">PEP-8</a>:</p>\n\n<blockquote>\n  <p>_single_leading_underscore: weak \"internal use\" indicator. E.g. <code>from M import *</code> does not import objects whose name starts with an underscore.</p>\n</blockquote>\n\n<h2>Double Underscore (Name Mangling)</h2>\n\n<p>From <a href=\"https://docs.python.org/3/tutorial/classes.html#private-variables\" rel=\"noreferrer\">the Python docs</a>:</p>\n\n<blockquote>\n  <p>Any identifier of the form <code>__spam</code> (at least two leading underscores, at most one trailing underscore) is textually replaced with <code>_classname__spam</code>, where <code>classname</code> is the current class name with leading underscore(s) stripped. This mangling is done without regard to the syntactic position of the identifier, so it can be used to define class-private instance and class variables, methods, variables stored in globals, and even variables stored in instances. private to this class on instances of other classes. </p>\n</blockquote>\n\n<p>And a warning from the same page:</p>\n\n<blockquote>\n  <p>Name mangling is intended to give classes an easy way to define \u201cprivate\u201d instance variables and methods, without having to worry about instance variables defined by derived classes, or mucking with instance variables by code outside the class. Note that the mangling rules are designed mostly to avoid accidents; it still is possible for a determined soul to access or modify a variable that is considered private.</p>\n</blockquote>\n\n<h2>Example</h2>\n\n<pre><code>&gt;&gt;&gt; class MyClass():\n...     def __init__(self):\n...             self.__superprivate = \"Hello\"\n...             self._semiprivate = \", world!\"\n...\n&gt;&gt;&gt; mc = MyClass()\n&gt;&gt;&gt; print mc.__superprivate\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: myClass instance has no attribute '__superprivate'\n&gt;&gt;&gt; print mc._semiprivate\n, world!\n&gt;&gt;&gt; print mc.__dict__\n{'_MyClass__superprivate': 'Hello', '_semiprivate': ', world!'}\n</code></pre>\n"
    },
    "47": {
        "question_id": "21122540",
        "answer_id": "21122817",
        "question": "<p>I am getting an error when I try to run this simple python script:</p>\n\n<pre><code>input_variable = input (\"Enter your name: \")\nprint (\"your name is\" + input_variable)\n</code></pre>\n\n<p>Lets say I type in \"dude\", the error I am getting is:</p>\n\n<pre><code>line 1, in &lt;module&gt;\ninput_variable = input (\"Enter your name: \")\nFile \"&lt;string&gt;\", line 1, in &lt;module&gt;\nNameError: name 'dude' is not defined\n</code></pre>\n\n<p>I am running Mac OS X 10.9.1 and I am using the Python Launcher app that came with the install of python 3.3 to run the script.</p>\n\n<p>Edit: I realized I am somehow running these scripts with 2.7. I guess the real question is how do I run my scripts with version 3.3? I thought if I dragged and dropped my scripts on top of the Python Launcher app that is inside the Python 3.3 folder in my applications folder that it would launch my scripts using 3.3. I guess this method still launches scripts with 2.7. So How do I use 3.3?</p>\n",
        "answer": "<p><strong>TL;DR</strong></p>\n\n<p><code>input</code> function in Python 2.7, evaluates whatever your enter, as a Python expression. If you simply want to read strings, then use <code>raw_input</code> function in Python 2.7, which will not evaluate the read strings.</p>\n\n<p>If you are using Python 3.x, <code>raw_input</code> has been renamed to <code>input</code>. Quoting the <a href=\"https://docs.python.org/3.0/whatsnew/3.0.html#builtins\" rel=\"noreferrer\">Python 3.0 release notes</a>,</p>\n\n<blockquote>\n  <p><code>raw_input()</code> was renamed to <code>input()</code>. That is, the new <code>input()</code> function reads a line from <code>sys.stdin</code> and returns it with the trailing newline stripped. It raises <code>EOFError</code> if the input is terminated prematurely. To get the old behavior of <code>input()</code>, use <code>eval(input())</code></p>\n</blockquote>\n\n<hr>\n\n<p><strong>In Python 2.7</strong>, there are two functions which can be used to accept user inputs. One is <a href=\"http://docs.python.org/2/library/functions.html#input\" rel=\"noreferrer\"><code>input</code></a> and the other one is <a href=\"http://docs.python.org/2/library/functions.html#raw_input\" rel=\"noreferrer\"><code>raw_input</code></a>. You can think of the relation between them as follows</p>\n\n<pre><code>input = eval(raw_input)\n</code></pre>\n\n<p>Consider the following piece of code to understand this better</p>\n\n<pre><code>&gt;&gt;&gt; dude = \"thefourtheye\"\n&gt;&gt;&gt; input_variable = input(\"Enter your name: \")\nEnter your name: dude\n&gt;&gt;&gt; input_variable\n'thefourtheye'\n</code></pre>\n\n<p><code>input</code> accepts a string from the user and evaluates the string in the current Python context. When I type <code>dude</code> as input, it finds that <code>dude</code> is bound to the value <code>thefourtheye</code> and so the result of evaluation becomes <code>thefourtheye</code> and that gets assigned to <code>input_variable</code>.</p>\n\n<p>If I enter something else which is not there in the current python context, it will fail will the <code>NameError</code>.</p>\n\n<pre><code>&gt;&gt;&gt; input(\"Enter your name: \")\nEnter your name: dummy\nTraceback (most recent call last):\n  File \"&lt;input&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\nNameError: name 'dummy' is not defined\n</code></pre>\n\n<p><strong>Security considerations with Python 2.7's <code>input</code>:</strong></p>\n\n<p>Since whatever user types is evaluated, it imposes security issues as well. For example, if you have already loaded <code>os</code> module in your program with <code>import os</code>, and then the user types in</p>\n\n<pre><code>os.remove(\"/etc/hosts\")\n</code></pre>\n\n<p>this will be evaluated as a function call expression by python and it will be executed. If you are executing Python with elevated privileges, <code>/etc/hosts</code> file will be deleted. See, how dangerous it could be?</p>\n\n<p>To demonstrate this, let's try to execute <code>input</code> function again.</p>\n\n<pre><code>&gt;&gt;&gt; dude = \"thefourtheye\"\n&gt;&gt;&gt; input(\"Enter your name: \")\nEnter your name: input(\"Enter your name again: \")\nEnter your name again: dude\n</code></pre>\n\n<p>Now, when <code>input(\"Enter your name: \")</code> is executed, it waits for the user input and the user input is a valid Python function invocation and so that is also invoked. That is why we are seeing <code>Enter your name again:</code> prompt again.</p>\n\n<p>So, you are better off with <code>raw_input</code> function, like this</p>\n\n<pre><code>input_variable = raw_input(\"Enter your name: \")\n</code></pre>\n\n<p>If you need to convert the result to some other type, then you can use appropriate functions to convert the string returned by <code>raw_input</code>. For example, to read inputs as integers, use the <code>int</code> function, like shown in <a href=\"https://stackoverflow.com/a/20449433/1903116\">this answer</a>.</p>\n\n<p><strong>In python 3.x</strong>, there is only one function to get user inputs and that is called <a href=\"http://docs.python.org/3/library/functions.html#input\" rel=\"noreferrer\"><code>input</code></a>, which is equivalent to Python 2.7's <code>raw_input</code>.</p>\n"
    },
    "48": {
        "question_id": "533905",
        "answer_id": "533917",
        "question": "<p>How can I get the Cartesian product (every possible combination of values) from a group of lists?</p>\n\n<p>Input: </p>\n\n<pre><code>somelists = [\n   [1, 2, 3],\n   ['a', 'b'],\n   [4, 5]\n]\n</code></pre>\n\n<p>Desired output:</p>\n\n<pre><code>[(1, 'a', 4), (1, 'a', 5), (1, 'b', 4), (1, 'b', 5), (2, 'a', 4), (2, 'a', 5) ...]\n</code></pre>\n",
        "answer": "<p>In Python 2.6+</p>\n\n<pre><code>import itertools\nfor element in itertools.product(*somelists):\n    print(element)\n</code></pre>\n\n<p>Documentation:\n<a href=\"https://docs.python.org/3/library/itertools.html#itertools.product\" rel=\"noreferrer\">Python 3 - itertools.product</a></p>\n"
    },
    "49": {
        "question_id": "493386",
        "answer_id": "493399",
        "question": "<p>The question is in the title.</p>\n\n<p>I'd like to do it in  <a href=\"/questions/tagged/python\" class=\"post-tag\" title=\"show questions tagged &#39;python&#39;\" rel=\"tag\">python</a>. What I'd like to do in this example in <a href=\"/questions/tagged/c\" class=\"post-tag\" title=\"show questions tagged &#39;c&#39;\" rel=\"tag\">c</a>:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int i;\n    for (i=0; i&lt;10; i++) printf(\".\");\n    return 0;\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>..........\n</code></pre>\n\n<p>In Python:</p>\n\n<pre><code>&gt;&gt;&gt; for i in xrange(0,10): print '.'\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n&gt;&gt;&gt; for i in xrange(0,10): print '.',\n. . . . . . . . . .\n</code></pre>\n\n<p>In Python <code>print</code> will add a <code>\\n</code> or a space, how can I avoid that? Now, it's just an example. Don't tell me I can first build a string then print it. I'd like to know how to \"append\" strings to <code>stdout</code>.</p>\n",
        "answer": "<h2>General way</h2>\n\n<pre><code>import sys\nsys.stdout.write('.')\n</code></pre>\n\n<p>You may also need to call</p>\n\n<pre><code>sys.stdout.flush()\n</code></pre>\n\n<p>to ensure <code>stdout</code> is flushed immediately.</p>\n\n<h2>Python 2.6+</h2>\n\n<p>From Python 2.6 you can import the <code>print</code> function from Python 3:</p>\n\n<pre><code>from __future__ import print_function\n</code></pre>\n\n<p>This allows you to use the Python 3 solution below.</p>\n\n<h2>Python 3</h2>\n\n<p>In Python 3, the <code>print</code> statement has been changed into a function. In Python 3, you can instead do:</p>\n\n<pre><code>print('.', end='')\n</code></pre>\n\n<p>This also works in Python 2, provided that you've used <code>from __future__ import print_function</code>.</p>\n\n<p>If you are having trouble with buffering, you can flush the output by adding <code>flush=True</code> keyword argument:</p>\n\n<pre><code>print('.', end='', flush=True)\n</code></pre>\n\n<p>However, note that the <code>flush</code> keyword is not available in the version of the <code>print</code> function imported from <code>__future__</code> in Python 2; it only works in Python 3, more specifically 3.3 and later. In earlier versions you'll still need to flush manually with a call to <code>sys.stdout.flush()</code>.</p>\n\n<h2>Sources</h2>\n\n<ol>\n<li><a href=\"https://docs.python.org/2/library/functions.html#print\" rel=\"noreferrer\">https://docs.python.org/2/library/functions.html#print</a></li>\n<li><a href=\"https://docs.python.org/2/library/__future__.html\" rel=\"noreferrer\">https://docs.python.org/2/library/__future__.html</a></li>\n<li><a href=\"https://docs.python.org/3/library/functions.html#print\" rel=\"noreferrer\">https://docs.python.org/3/library/functions.html#print</a></li>\n</ol>\n"
    },
    "50": {
        "question_id": "3277503",
        "answer_id": "3277516",
        "question": "<p>How do I read every line of a file in Python and store each line as an element in a list? </p>\n\n<p>I want to read the file line by line and append each line to the end of the list.</p>\n",
        "answer": "<pre><code>with open(fname) as f:\n    content = f.readlines()\n# you may also want to remove whitespace characters like `\\n` at the end of each line\ncontent = [x.strip() for x in content] \n</code></pre>\n"
    },
    "51": {
        "question_id": "1504717",
        "answer_id": "1504742",
        "question": "<p>I've got a Python program where two variables are set to the value <code>'public'</code>. In a conditional expression I have the comparison <code>var1 is var2</code> which fails, but if I change it to <code>var1 == var2</code> it returns <code>True</code>.</p>\n\n<p>Now if I open my Python interpreter and do the same \"is\" comparison, it succeeds.</p>\n\n<pre><code>&gt;&gt;&gt; s1 = 'public'\n&gt;&gt;&gt; s2 = 'public'\n&gt;&gt;&gt; s2 is s1\nTrue\n</code></pre>\n\n<p>What am I missing here?</p>\n",
        "answer": "<p><code>is</code> is identity testing, <code>==</code> is equality testing. what happens in your code would be emulated in the interpreter like this:</p>\n\n<pre><code>&gt;&gt;&gt; a = 'pub'\n&gt;&gt;&gt; b = ''.join(['p', 'u', 'b'])\n&gt;&gt;&gt; a == b\nTrue\n&gt;&gt;&gt; a is b\nFalse\n</code></pre>\n\n<p>so, no wonder they're not the same, right?</p>\n\n<p>In other words: <code>is</code> is the <code>id(a) == id(b)</code></p>\n"
    },
    "52": {
        "question_id": "1101750",
        "answer_id": "1101765",
        "question": "<p>I've created this simple GUI:</p>\n\n<pre><code>from tkinter import *\n\nroot = Tk()\n\ndef grabText(event):\n    print(entryBox.get())    \n\nentryBox = Entry(root, width=60).grid(row=2, column=1, sticky=W)\n\ngrabBtn = Button(root, text=\"Grab\")\ngrabBtn.grid(row=8, column=1)\ngrabBtn.bind('&lt;Button-1&gt;', grabText)\n\nroot.mainloop()\n</code></pre>\n\n<p>I get the UI up and running. When I click on the <code>Grab</code> button, I get the following error on the console:</p>\n\n<pre><code>C:\\Python&gt; python.exe myFiles\\testBed.py\nException in Tkinter callback\nTraceback (most recent call last):\n  File \"C:\\Python\\lib\\lib-tk\\Tkinter.py\", line 1403, in __call__\n    return self.func(*args)\n  File \"myFiles\\testBed.py\", line 10, in grabText\n    if entryBox.get().strip()==\"\":\nAttributeError: 'NoneType' object has no attribute 'get'\n</code></pre>\n\n<p>Why is <code>entryBox</code> set to <code>None</code>?</p>\n",
        "answer": "<p>The <code>grid</code>, <code>pack</code> and <code>place</code> functions of the <code>Entry</code> object and of all other widgets returns <code>None</code>. In python when you do <code>a().b()</code>, the result of the expression is whatever <code>b()</code> returns, therefore <code>Entry(...).grid(...)</code> will return <code>None</code>. </p>\n\n<p>You should split that on to two lines like this:</p>\n\n<pre><code>entryBox = Entry(root, width=60)\nentryBox.grid(row=2, column=1, sticky=W)\n</code></pre>\n\n<p>That way you get your <code>Entry</code> reference stored in <code>entryBox</code> and it's laid out like you expect. This has a bonus side effect of making your layout easier to understand and maintain if you collect all of your <code>grid</code> and/or <code>pack</code> statements in blocks.</p>\n"
    },
    "53": {
        "question_id": "132988",
        "answer_id": "133024",
        "question": "<p>My <a href=\"https://english.stackexchange.com/questions/19967/what-does-google-fu-mean\">Google-fu</a> has failed me.</p>\n\n<p>In Python, are the following two tests for equality equivalent?</p>\n\n<pre><code>n = 5\n# Test one.\nif n == 5:\n    print 'Yay!'\n\n# Test two.\nif n is 5:\n    print 'Yay!'\n</code></pre>\n\n<p>Does this hold true for objects where you would be comparing instances (a <code>list</code> say)?</p>\n\n<p>Okay, so this kind of answers my question:</p>\n\n<pre><code>L = []\nL.append(1)\nif L == [1]:\n    print 'Yay!'\n# Holds true, but...\n\nif L is [1]:\n    print 'Yay!'\n# Doesn't.\n</code></pre>\n\n<p>So <code>==</code> tests value where <code>is</code> tests to see if they are the same object?</p>\n",
        "answer": "<p><code>is</code> will return <code>True</code> if two variables point to the same object, <code>==</code> if the objects referred to by the variables are equal.</p>\n\n<pre><code>&gt;&gt;&gt; a = [1, 2, 3]\n&gt;&gt;&gt; b = a\n&gt;&gt;&gt; b is a \nTrue\n&gt;&gt;&gt; b == a\nTrue\n&gt;&gt;&gt; b = a[:] # Make a new copy of list `a` via the slice operator, and assign it to variable `b`\n&gt;&gt;&gt; b is a\nFalse\n&gt;&gt;&gt; b == a\nTrue\n</code></pre>\n\n<p>In your case, the second test only works because Python caches small integer objects, which is an implementation detail. For larger integers, this does not work:</p>\n\n<pre><code>&gt;&gt;&gt; 1000 is 10**3\nFalse\n&gt;&gt;&gt; 1000 == 10**3\nTrue\n</code></pre>\n\n<p>The same holds true for string literals:</p>\n\n<pre><code>&gt;&gt;&gt; \"a\" is \"a\"\nTrue\n&gt;&gt;&gt; \"aa\" is \"a\" * 2\nTrue\n&gt;&gt;&gt; x = \"a\"\n&gt;&gt;&gt; \"aa\" is x * 2\nFalse\n&gt;&gt;&gt; \"aa\" is intern(x*2)\nTrue\n</code></pre>\n\n<p>Please see <a href=\"https://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none\">this question</a> as well.</p>\n"
    },
    "54": {
        "question_id": "2817869",
        "answer_id": "10558328",
        "question": "<p>I tried to install the Python package <a href=\"https://pypi.python.org/pypi/dulwich\" rel=\"noreferrer\">dulwich</a>:</p>\n\n\n\n<pre class=\"lang-none prettyprint-override\"><code>pip install dulwich\n</code></pre>\n\n<p>But I get a cryptic error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: Unable to find vcvarsall.bat\n</code></pre>\n\n<p>The same happens if I try installing the package manually:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&gt; python setup.py install\nrunning build_ext\nbuilding 'dulwich._objects' extension\nerror: Unable to find vcvarsall.bat\n</code></pre>\n",
        "answer": "<p><strong><em>Update</strong>: Comments point out that the instructions here may be dangerous. Consider using the Visual C++ 2008 Express edition or the purpose-built <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=44266\" rel=\"noreferrer\">Microsoft Visual C++ Compiler for Python</a> (<a href=\"/a/26127562/2778484\">details</a>) and <strong>NOT</strong> using the original answer below. Original error message means the required version of Visual C++ is not installed.</em></p>\n\n<hr>\n\n<p>For Windows installations:</p>\n\n<p>While running setup.py for package installations, Python 2.7 searches for an installed Visual Studio 2008. You can trick Python to use a newer Visual Studio by setting the correct path in <code>VS90COMNTOOLS</code> environment variable before calling <code>setup.py</code>.</p>\n\n<p>Execute the following command based on the version of Visual Studio installed:</p>\n\n<ul>\n<li>Visual Studio 2010 (VS10): <code>SET VS90COMNTOOLS=%VS100COMNTOOLS%</code></li>\n<li>Visual Studio 2012 (VS11): <code>SET VS90COMNTOOLS=%VS110COMNTOOLS%</code></li>\n<li>Visual Studio 2013 (VS12): <code>SET VS90COMNTOOLS=%VS120COMNTOOLS%</code></li>\n<li>Visual Studio 2015 (VS14): <code>SET VS90COMNTOOLS=%VS140COMNTOOLS%</code></li>\n</ul>\n\n<hr>\n\n<p>WARNING: As noted below, this answer is unlikely to work if you are trying to compile python modules.</p>\n\n<p>See <a href=\"https://stackoverflow.com/questions/3047542\">Building lxml for Python 2.7 on Windows</a> for details.</p>\n"
    },
    "55": {
        "question_id": "3701646",
        "answer_id": "4855685",
        "question": "<p>I have a directory which hosts all of my Django apps (<code>C:\\My_Projects</code>). I want to add this directory to my <code>PYTHONPATH</code> so I can call the apps directly.</p>\n\n<p>I tried adding <code>C:\\My_Projects\\;</code> to my Windows <code>Path</code> variable from the Windows GUI (<code>My Computer &gt; Properties &gt; Advanced System Settings &gt; Environment Variables</code>). But it still doesn't read the coltrane module and generates this error:</p>\n\n<blockquote>\n  <p>Error: No module named coltrane</p>\n</blockquote>\n",
        "answer": "<p>You know what has worked for me really well on windows.</p>\n\n<p><code>My Computer &gt; Properties &gt; Advanced System Settings &gt; Environment Variables &gt;</code> </p>\n\n<p>Just add the path as C:\\Python27 (or wherever you installed python)</p>\n\n<p>OR</p>\n\n<p>Then under system variables I create a new Variable called <code>PythonPath</code>. In this variable I have <code>C:\\Python27\\Lib;C:\\Python27\\DLLs;C:\\Python27\\Lib\\lib-tk;C:\\other-folders-on-the-path</code></p>\n\n<p><img src=\"https://i.stack.imgur.com/ZGp36.png\" alt=\"enter image description here\"></p>\n\n<p>This is the best way that has worked for me which I hadn't found in any of the docs offered.</p>\n\n<p><strong>EDIT:</strong> For those who are not able to get it,\nPlease add </p>\n\n<blockquote>\n  <p>C:\\Python27;</p>\n</blockquote>\n\n<p>along with it. Else it will <em>never work</em>.</p>\n"
    },
    "56": {
        "question_id": "32815451",
        "answer_id": "32825482",
        "question": "<p>In my app the state of a common object is changed by making requests, and the response depends on the state.</p>\n\n<pre><code>class SomeObj():\n    def __init__(self, param):\n        self.param = param\n    def query(self):\n        self.param += 1\n        return self.param\n\nglobal_obj = SomeObj(0)\n\n@app.route('/')\ndef home():\n    flash(global_obj.query())\n    render_template('index.html')\n</code></pre>\n\n<p>If I run this on my development server, I expect to get 1, 2, 3 and so on.  If requests are made from 100 different clients simultaneously, can something go wrong? The expected result would be that the 100 different clients each see a unique number from 1 to 100. Or will something like this happen:</p>\n\n<ol>\n<li>Client 1 queries. <code>self.param</code> is incremented by 1.</li>\n<li>Before the return statement can be executed, the thread switches over to client 2. <code>self.param</code> is incremented again.</li>\n<li>The thread switches back to client 1, and the client is returned the number 2, say.</li>\n<li>Now the thread moves to client 2 and returns him/her the number 3.</li>\n</ol>\n\n<p>Since there were only two clients, the expected results were 1 and 2, not 2 and 3.  A number was skipped.</p>\n\n<p>Will this actually happen as I scale up my application? What alternatives to a global variable should I look at? </p>\n",
        "answer": "<p>You can't use global variables to hold this sort of data. Not only is it not thread safe, it's not <em>process</em> safe, and WSGI servers in production spawn multiple processes. Not only would your counts be wrong if you were using threads to handle requests, they would also vary depending on which process handled the request.</p>\n\n<p>Use a data source outside of Flask to hold global data. A database, memcached, or redis are all appropriate separate storage areas, depending on your needs. If you need to load and access Python data, consider <a href=\"https://stackoverflow.com/a/28426819\"><code>multiprocessing.Manager</code></a>. You could also use the session for simple data that is per-user.</p>\n\n<hr>\n\n<p>The development server may run in single thread and process. You won't see the behavior you describe since each request will be handled synchronously. Enable threads or processes and you will see it. <code>app.run(threaded=True)</code> or <code>app.run(processes=10)</code>. (In 1.0 the server is threaded by default.)</p>\n\n<hr>\n\n<p>Some WSGI servers may support gevent or another async worker. Global variables are still not thread safe because there's still no protection against most race conditions. You can still have a scenario where one worker gets a value, yields, another modifies it, yields, then the first worker also modifies it.</p>\n\n<hr>\n\n<p>If you need to store some global data <em>during</em> a request, you may use Flask's <a href=\"http://flask.pocoo.org/docs/1.0/api/#flask.g\" rel=\"noreferrer\"><code>g</code> object</a>. Another common case is some top-level object that manages database connections. The distinction for this type of \"global\" is that it's unique to each request, not used <em>between</em> requests, and there's something managing the set up and teardown of the resource.</p>\n"
    },
    "57": {
        "question_id": "10434599",
        "answer_id": "16664376",
        "question": "<p>I want to be able to get the data sent to my Flask app.  I've tried accessing <code>request.data</code> but it is an empty string. How do you access request data?</p>\n\n<pre><code>@app.route('/', methods=['GET', 'POST'])\ndef parse_request():\n    data = request.data  # data is empty\n    # need posted data here\n</code></pre>\n\n<hr>\n\n<p>The answer to this question led me to ask <a href=\"https://stackoverflow.com/q/10999990\">Get raw POST body in Python Flask regardless of Content-Type header</a> next, which is about getting the raw data rather than the parsed data.</p>\n",
        "answer": "<p>The <a href=\"http://flask.pocoo.org/docs/api/#flask.Request\" rel=\"noreferrer\">docs</a> describe the attributes available on the request.  In most common cases <code>request.data</code> will be empty because it's used as a fallback:</p>\n\n<blockquote>\n  <p><code>request.data</code> Contains the incoming request data as string in case it came with a mimetype Flask does not handle.</p>\n</blockquote>\n\n<ul>\n<li><code>request.args</code>: the key/value pairs in the URL query string</li>\n<li><code>request.form</code>: the key/value pairs in the body, from a HTML post form, or JavaScript request that isn't JSON encoded</li>\n<li><code>request.files</code>: the files in the body, which Flask keeps separate from <code>form</code>. HTML forms must use <code>enctype=multipart/form-data</code> or files will not be uploaded.</li>\n<li><code>request.values</code>: combined <code>args</code> and <code>form</code>, preferring <code>args</code> if keys overlap</li>\n</ul>\n\n<p>All of these are <a href=\"http://werkzeug.pocoo.org/docs/datastructures/#werkzeug.datastructures.MultiDict\" rel=\"noreferrer\"><code>MultiDict</code></a> instances. You can access values using:</p>\n\n<ul>\n<li><code>request.form['name']</code>: use indexing if you know the key exists</li>\n<li><code>request.form.get('name')</code>: use <code>get</code> if the key might not exist</li>\n<li><code>request.form.getlist('name')</code>: use <code>getlist</code> if the key is sent multiple times and you want a list of values. <code>get</code> only returns the first value.</li>\n</ul>\n"
    },
    "58": {
        "question_id": "20646822",
        "answer_id": "20648053",
        "question": "<p>So this is embarrassing. I've got an application that I threw together in <code>Flask</code> and for now it is just serving up a single static HTML page with some links to CSS and JS. And I can't find where in the documentation <code>Flask</code> describes returning static files. Yes, I could use <code>render_template</code> but I know the data is not templatized. I'd have thought <code>send_file</code> or <code>url_for</code> was the right thing, but I could not get those to work. In the meantime, I am opening the files, reading content, and rigging up a <code>Response</code> with appropriate mimetype:</p>\n\n<pre><code>import os.path\n\nfrom flask import Flask, Response\n\n\napp = Flask(__name__)\napp.config.from_object(__name__)\n\n\ndef root_dir():  # pragma: no cover\n    return os.path.abspath(os.path.dirname(__file__))\n\n\ndef get_file(filename):  # pragma: no cover\n    try:\n        src = os.path.join(root_dir(), filename)\n        # Figure out how flask returns static files\n        # Tried:\n        # - render_template\n        # - send_file\n        # This should not be so non-obvious\n        return open(src).read()\n    except IOError as exc:\n        return str(exc)\n\n\n@app.route('/', methods=['GET'])\ndef metrics():  # pragma: no cover\n    content = get_file('jenkins_analytics.html')\n    return Response(content, mimetype=\"text/html\")\n\n\n@app.route('/', defaults={'path': ''})\n@app.route('/&lt;path:path&gt;')\ndef get_resource(path):  # pragma: no cover\n    mimetypes = {\n        \".css\": \"text/css\",\n        \".html\": \"text/html\",\n        \".js\": \"application/javascript\",\n    }\n    complete_path = os.path.join(root_dir(), path)\n    ext = os.path.splitext(path)[1]\n    mimetype = mimetypes.get(ext, \"text/html\")\n    content = get_file(complete_path)\n    return Response(content, mimetype=mimetype)\n\n\nif __name__ == '__main__':  # pragma: no cover\n    app.run(port=80)\n</code></pre>\n\n<p>Someone want to give a code sample or url for this? I know this is going to be dead simple.</p>\n",
        "answer": "<p>The preferred method is to use nginx or another web server to serve static files; they'll be able to do it more efficiently than Flask.</p>\n\n<p>However, you can use <a href=\"http://flask.pocoo.org/docs/latest/api/#flask.send_from_directory\"><code>send_from_directory</code></a> to send files from a directory, which can be pretty convenient in some situations:</p>\n\n<pre><code>from flask import Flask, request, send_from_directory\n\n# set the project root directory as the static folder, you can set others.\napp = Flask(__name__, static_url_path='')\n\n@app.route('/js/&lt;path:path&gt;')\ndef send_js(path):\n    return send_from_directory('js', path)\n\nif __name__ == \"__main__\":\n    app.run()\n</code></pre>\n\n<p>Do <strong>not</strong> use <code>send_file</code> or <code>send_static_file</code> with an user-supplied path.</p>\n\n<p><code>send_static_file</code> example:</p>\n\n<pre><code>from flask import Flask, request\n# set the project root directory as the static folder, you can set others.\napp = Flask(__name__, static_url_path='')\n\n@app.route('/')\ndef root():\n    return app.send_static_file('index.html')\n</code></pre>\n"
    },
    "59": {
        "question_id": "4836710",
        "answer_id": "18415320",
        "question": "<p>Using Python 3.x, I have a list of strings for which I would like to perform a natural alphabetical sort. </p>\n\n<p><strong>Natural sort:</strong> The order by which files in Windows are sorted.</p>\n\n<p>For instance, the following list is naturally sorted (what I want):</p>\n\n<pre><code>['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']\n</code></pre>\n\n<p>And here's the \"sorted\" version of the above list (what I have):</p>\n\n<pre><code>['Elm11', 'Elm12', 'Elm2', 'elm0', 'elm1', 'elm10', 'elm13', 'elm9']\n</code></pre>\n\n<p>I'm looking for a sort function which behaves like the first one.</p>\n",
        "answer": "<p>There is a third party library for this on PyPI called <a href=\"https://github.com/SethMMorton/natsort\" rel=\"noreferrer\">natsort</a> (full disclosure, I am the package's author).  For your case, you can do either of the following:</p>\n\n<pre><code>&gt;&gt;&gt; from natsort import natsorted, ns\n&gt;&gt;&gt; x = ['Elm11', 'Elm12', 'Elm2', 'elm0', 'elm1', 'elm10', 'elm13', 'elm9']\n&gt;&gt;&gt; natsorted(x, key=lambda y: y.lower())\n['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']\n&gt;&gt;&gt; natsorted(x, alg=ns.IGNORECASE)  # or alg=ns.IC\n['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']\n</code></pre>\n\n<p>You should note that <code>natsort</code> uses a general algorithm so it should work for just about any input that you throw at it. If you want more details on why you might choose a library to do this rather than rolling your own function, check out the <code>natsort</code> documentation's <a href=\"http://natsort.readthedocs.io/en/master/howitworks.html\" rel=\"noreferrer\">How It Works</a> page, in particular the <a href=\"http://natsort.readthedocs.io/en/master/howitworks.html#special-cases-everywhere\" rel=\"noreferrer\">Special Cases Everywhere!</a> section.</p>\n\n<hr>\n\n<p>If you need a sorting key instead of a sorting function, use either of the below formulas.</p>\n\n<pre><code>&gt;&gt;&gt; from natsort import natsort_keygen, ns\n&gt;&gt;&gt; l1 = ['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']\n&gt;&gt;&gt; l2 = l1[:]\n&gt;&gt;&gt; natsort_key1 = natsort_keygen(key=lambda y: y.lower())\n&gt;&gt;&gt; l1.sort(key=natsort_key1)\n&gt;&gt;&gt; l1\n['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']\n&gt;&gt;&gt; natsort_key2 = natsort_keygen(alg=ns.IGNORECASE)\n&gt;&gt;&gt; l2.sort(key=natsort_key2)\n&gt;&gt;&gt; l2\n['elm0', 'elm1', 'Elm2', 'elm9', 'elm10', 'Elm11', 'Elm12', 'elm13']\n</code></pre>\n"
    },
    "60": {
        "question_id": "67631",
        "answer_id": "67692",
        "question": "<p>How can I load a Python module given its full path? Note that the file can be anywhere in the filesystem, as it is a configuration option.</p>\n",
        "answer": "<p>For Python 3.5+ use:</p>\n\n<pre><code>import importlib.util\nspec = importlib.util.spec_from_file_location(\"module.name\", \"/path/to/file.py\")\nfoo = importlib.util.module_from_spec(spec)\nspec.loader.exec_module(foo)\nfoo.MyClass()\n</code></pre>\n\n<p>For Python 3.3 and 3.4 use:</p>\n\n<pre><code>from importlib.machinery import SourceFileLoader\n\nfoo = SourceFileLoader(\"module.name\", \"/path/to/file.py\").load_module()\nfoo.MyClass()\n</code></pre>\n\n<p>(Although this has been deprecated in Python 3.4.)</p>\n\n<p>For Python 2 use:</p>\n\n<pre><code>import imp\n\nfoo = imp.load_source('module.name', '/path/to/file.py')\nfoo.MyClass()\n</code></pre>\n\n<p>There are equivalent convenience functions for compiled Python files and DLLs.</p>\n\n<p>See also <a href=\"http://bugs.python.org/issue21436\" rel=\"noreferrer\">http://bugs.python.org/issue21436</a>.</p>\n"
    },
    "61": {
        "question_id": "582336",
        "answer_id": "582337",
        "question": "<p>Project Euler and other coding contests often have a maximum time to run or people boast of how fast their particular solution runs.  With python, sometimes the approaches are somewhat kludgey - i.e., adding timing code to <code>__main__</code>.</p>\n\n<p>What is a good way to profile how long a python program takes to run?</p>\n",
        "answer": "<p>Python includes a profiler called <a href=\"https://docs.python.org/3/library/profile.html#module-cProfile\" rel=\"noreferrer\">cProfile</a>. It not only gives the total running time, but also times each function separately, and tells you how many times each function was called, making it easy to determine where you should make optimizations.</p>\n\n<p>You can call it from within your code, or from the interpreter, like this:</p>\n\n<pre><code>import cProfile\ncProfile.run('foo()')\n</code></pre>\n\n<p>Even more usefully, you can invoke the cProfile when running a script:</p>\n\n<pre><code>python -m cProfile myscript.py\n</code></pre>\n\n<p>To make it even easier, I made a little batch file called 'profile.bat':</p>\n\n<pre><code>python -m cProfile %1\n</code></pre>\n\n<p>So all I have to do is run:</p>\n\n<pre><code>profile euler048.py\n</code></pre>\n\n<p>And I get this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>1007 function calls in 0.061 CPU seconds\n\nOrdered by: standard name\nncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    1    0.000    0.000    0.061    0.061 &lt;string&gt;:1(&lt;module&gt;)\n 1000    0.051    0.000    0.051    0.000 euler048.py:2(&lt;lambda&gt;)\n    1    0.005    0.005    0.061    0.061 euler048.py:2(&lt;module&gt;)\n    1    0.000    0.000    0.061    0.061 {execfile}\n    1    0.002    0.002    0.053    0.053 {map}\n    1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler objects}\n    1    0.000    0.000    0.000    0.000 {range}\n    1    0.003    0.003    0.003    0.003 {sum}\n</code></pre>\n\n<p>EDIT: Updated link to a good video resource from PyCon 2013 titled \n<a href=\"https://web.archive.org/web/20170318204046/http://lanyrd.com/2013/pycon/scdywg/\" rel=\"noreferrer\"><strong><em>Python Profiling</em></strong></a><br>\n<a href=\"https://www.youtube.com/watch?v=QJwVYlDzAXs\" rel=\"noreferrer\">Also via YouTube</a>.</p>\n"
    },
    "62": {
        "question_id": "406121",
        "answer_id": "406199",
        "question": "<p>Is there a simple way to flatten a list of iterables with a list comprehension, or failing that, what would you all consider to be the best way to flatten a shallow list like this, balancing performance and readability?</p>\n\n<p>I tried to flatten such a list with a nested list comprehension, like this:</p>\n\n<pre><code>[image for image in menuitem for menuitem in list_of_menuitems]\n</code></pre>\n\n<p>But I get in trouble of the <code>NameError</code> variety there, because the <code>name 'menuitem' is not defined</code>.  After googling and looking around on Stack Overflow, I got the desired results with a <code>reduce</code> statement:</p>\n\n<pre><code>reduce(list.__add__, map(lambda x: list(x), list_of_menuitems))\n</code></pre>\n\n<p>But this method is fairly unreadable because I need that <code>list(x)</code> call there because x is a Django <code>QuerySet</code> object.</p>\n\n<p><strong>Conclusion</strong>: </p>\n\n<p>Thanks to everyone who contributed to this question.  Here is a summary of what I learned.  I'm also making this a community wiki in case others want to add to or correct these observations.</p>\n\n<p>My original reduce statement is redundant and is better written this way:</p>\n\n<pre><code>&gt;&gt;&gt; reduce(list.__add__, (list(mi) for mi in list_of_menuitems))\n</code></pre>\n\n<p>This is the correct syntax for a nested list comprehension (Brilliant summary <a href=\"https://stackoverflow.com/users/3002/df\">dF</a>!):</p>\n\n<pre><code>&gt;&gt;&gt; [image for mi in list_of_menuitems for image in mi]\n</code></pre>\n\n<p>But neither of these methods are as efficient as using <code>itertools.chain</code>:</p>\n\n<pre><code>&gt;&gt;&gt; from itertools import chain\n&gt;&gt;&gt; list(chain(*list_of_menuitems))\n</code></pre>\n\n<p>And as @cdleary notes, it's probably better style to avoid * operator magic by using <code>chain.from_iterable</code> like so:</p>\n\n<pre><code>&gt;&gt;&gt; chain = itertools.chain.from_iterable([[1,2],[3],[5,89],[],[6]])\n&gt;&gt;&gt; print(list(chain))\n&gt;&gt;&gt; [1, 2, 3, 5, 89, 6]\n</code></pre>\n",
        "answer": "<p>If you're just looking to iterate over a flattened version of the data structure and don't need an indexable sequence, consider <a href=\"http://docs.python.org/library/itertools.html#itertools.chain\" rel=\"noreferrer\">itertools.chain and company</a>.</p>\n\n<pre><code>&gt;&gt;&gt; list_of_menuitems = [['image00', 'image01'], ['image10'], []]\n&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; chain = itertools.chain(*list_of_menuitems)\n&gt;&gt;&gt; print(list(chain))\n['image00', 'image01', 'image10']\n</code></pre>\n\n<p>It will work on anything that's iterable, which should include Django's iterable <code>QuerySet</code>s, which it appears that you're using in the question.</p>\n\n<p><strong>Edit:</strong> This is probably as good as a reduce anyway, because reduce will have the same overhead copying the items into the list that's being extended. <code>chain</code> will only incur this (same) overhead if you run <code>list(chain)</code> at the end.</p>\n\n<p><strong>Meta-Edit:</strong> Actually, it's less overhead than the question's proposed solution, because you throw away the temporary lists you create when you extend the original with the temporary.</p>\n\n<p><strong>Edit:</strong> As <a href=\"https://stackoverflow.com/questions/406121/flattening-a-shallow-list-in-python#411548\">J.F. Sebastian says</a> <code>itertools.chain.from_iterable</code> avoids the unpacking and you should use that to avoid <code>*</code> magic, but <a href=\"https://stackoverflow.com/questions/406121/flattening-a-shallow-list-in-python#408281\">the timeit app</a> shows negligible performance difference.</p>\n"
    },
    "63": {
        "question_id": "68645",
        "answer_id": "68672",
        "question": "<p>Is it possible to have static class variables or methods in Python? What syntax is required to do this?</p>\n",
        "answer": "<p>Variables declared inside the class definition, but not inside a method are class or static variables:</p>\n\n<pre><code>&gt;&gt;&gt; class MyClass:\n...     i = 3\n...\n&gt;&gt;&gt; MyClass.i\n3 \n</code></pre>\n\n<p>As @<a href=\"https://stackoverflow.com/questions/68645/static-class-variables-in-python#answer-69067\">millerdev</a> points out, this creates a class-level <code>i</code> variable, but this is distinct from any instance-level <code>i</code> variable, so you could have</p>\n\n<pre><code>&gt;&gt;&gt; m = MyClass()\n&gt;&gt;&gt; m.i = 4\n&gt;&gt;&gt; MyClass.i, m.i\n&gt;&gt;&gt; (3, 4)\n</code></pre>\n\n<p>This is different from C++ and Java, but not so different from C#, where a static member can't be accessed using a reference to an instance.</p>\n\n<p>See <a href=\"https://docs.python.org/2/tutorial/classes.html#class-objects\" rel=\"noreferrer\">what the Python tutorial has to say on the subject of classes and class objects</a>.</p>\n\n<p>@Steve Johnson has already answered regarding <a href=\"http://web.archive.org/web/20090214211613/http://pyref.infogami.com/staticmethod\" rel=\"noreferrer\">static methods</a>, also documented under <a href=\"https://docs.python.org/2/library/functions.html#staticmethod\" rel=\"noreferrer\">\"Built-in Functions\" in the Python Library Reference</a>.</p>\n\n<pre><code>class C:\n    @staticmethod\n    def f(arg1, arg2, ...): ...\n</code></pre>\n\n<p>@beidy recommends <a href=\"https://docs.python.org/2/library/functions.html#classmethod\" rel=\"noreferrer\">classmethod</a>s over staticmethod, as the method then receives the class type as the first argument, but I'm still a little fuzzy on the advantages of this approach over staticmethod. If you are too, then it probably doesn't matter.</p>\n"
    },
    "64": {
        "question_id": "434287",
        "answer_id": "434411",
        "question": "<p>I have a Python script which takes as input a list of integers, which I need to work with four integers at a time.  Unfortunately, I don't have control of the input, or I'd have it passed in as a list of four-element tuples.  Currently, I'm iterating over it this way:</p>\n\n<pre><code>for i in xrange(0, len(ints), 4):\n    # dummy op for example code\n    foo += ints[i] * ints[i + 1] + ints[i + 2] * ints[i + 3]\n</code></pre>\n\n<p>It looks a lot like \"C-think\", though, which makes me suspect there's a more pythonic way of dealing with this situation.  The list is discarded after iterating, so it needn't be preserved.  Perhaps something like this would be better?</p>\n\n<pre><code>while ints:\n    foo += ints[0] * ints[1] + ints[2] * ints[3]\n    ints[0:4] = []\n</code></pre>\n\n<p>Still doesn't quite \"feel\" right, though.  :-/</p>\n\n<p>Related question: <a href=\"https://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks-in-python\">How do you split a list into evenly sized chunks in Python?</a></p>\n",
        "answer": "<p>Modified from the <a href=\"https://docs.python.org/library/itertools.html#itertools-recipes\" rel=\"noreferrer\">recipes</a> section of Python's <a href=\"http://docs.python.org/library/itertools.html\" rel=\"noreferrer\">itertools</a> docs:</p>\n\n<pre><code>from itertools import zip_longest\n\ndef grouper(iterable, n, fillvalue=None):\n    args = [iter(iterable)] * n\n    return zip_longest(*args, fillvalue=fillvalue)\n</code></pre>\n\n<p><strong>Example</strong><br>\nIn pseudocode to keep the example terse.</p>\n\n<pre><code>grouper('ABCDEFG', 3, 'x') --&gt; 'ABC' 'DEF' 'Gxx'\n</code></pre>\n\n<p><strong>Note:</strong> on Python 2 use <code>izip_longest</code> instead of <code>zip_longest</code>.</p>\n"
    },
    "65": {
        "question_id": "2600191",
        "answer_id": "2600208",
        "question": "<p>Given an item, how can I count its occurrences in a list in Python?</p>\n",
        "answer": "<p>If you only want one item's count, use the <code>count</code> method:</p>\n\n<pre><code>&gt;&gt;&gt; [1, 2, 3, 4, 1, 4, 1].count(1)\n3\n</code></pre>\n\n<p><strong>Don't</strong> use this if you want to count multiple items. Calling <code>count</code> in a loop requires a separate pass over the list for every <code>count</code> call, which can be catastrophic for performance. If you want to count all items, or even just multiple items, use <code>Counter</code>, as explained in the other answers.</p>\n"
    },
    "66": {
        "question_id": "104420",
        "answer_id": "104436",
        "question": "<p>How do you generate all the permutations of a list in Python, independently of the type of elements in that list?</p>\n\n<p>For example:</p>\n\n<pre><code>permutations([])\n[]\n\npermutations([1])\n[1]\n\npermutations([1, 2])\n[1, 2]\n[2, 1]\n\npermutations([1, 2, 3])\n[1, 2, 3]\n[1, 3, 2]\n[2, 1, 3]\n[2, 3, 1]\n[3, 1, 2]\n[3, 2, 1]\n</code></pre>\n",
        "answer": "<p><strong>Starting with Python 2.6</strong> (and if you're on Python 3) you have a <strong>standard-library</strong> tool for this: <a href=\"https://docs.python.org/2/library/itertools.html#itertools.permutations\" rel=\"noreferrer\"><code>itertools.permutations</code></a>.</p>\n\n<pre><code>import itertools\nlist(itertools.permutations([1, 2, 3]))\n</code></pre>\n\n<hr>\n\n<p>If you're using an <strong>older Python (&lt;2.6)</strong> for some reason or are just curious to know how it works, here's one nice approach, taken from  <a href=\"http://code.activestate.com/recipes/252178/\" rel=\"noreferrer\">http://code.activestate.com/recipes/252178/</a>:</p>\n\n<pre><code>def all_perms(elements):\n    if len(elements) &lt;=1:\n        yield elements\n    else:\n        for perm in all_perms(elements[1:]):\n            for i in range(len(elements)):\n                # nb elements[0:1] works in both string and list contexts\n                yield perm[:i] + elements[0:1] + perm[i:]\n</code></pre>\n\n<p>A couple of alternative approaches are listed in the documentation of <code>itertools.permutations</code>. Here's one:</p>\n\n<pre><code>def permutations(iterable, r=None):\n    # permutations('ABCD', 2) --&gt; AB AC AD BA BC BD CA CB CD DA DB DC\n    # permutations(range(3)) --&gt; 012 021 102 120 201 210\n    pool = tuple(iterable)\n    n = len(pool)\n    r = n if r is None else r\n    if r &gt; n:\n        return\n    indices = range(n)\n    cycles = range(n, n-r, -1)\n    yield tuple(pool[i] for i in indices[:r])\n    while n:\n        for i in reversed(range(r)):\n            cycles[i] -= 1\n            if cycles[i] == 0:\n                indices[i:] = indices[i+1:] + indices[i:i+1]\n                cycles[i] = n - i\n            else:\n                j = cycles[i]\n                indices[i], indices[-j] = indices[-j], indices[i]\n                yield tuple(pool[i] for i in indices[:r])\n                break\n        else:\n            return\n</code></pre>\n\n<p>And another, based on <code>itertools.product</code>:</p>\n\n<pre><code>def permutations(iterable, r=None):\n    pool = tuple(iterable)\n    n = len(pool)\n    r = n if r is None else r\n    for indices in product(range(n), repeat=r):\n        if len(set(indices)) == r:\n            yield tuple(pool[i] for i in indices)\n</code></pre>\n"
    },
    "67": {
        "question_id": "1267869",
        "answer_id": "1267892",
        "question": "<p>I have two integer values <code>a</code> and <code>b</code>, but I need their ratio in floating point.  I know that <code>a &lt; b</code> and I want to calculate <code>a / b</code>, so if I use integer division I'll always get 0 with a remainder of <code>a</code>.</p>\n\n<p>How can I force <code>c</code> to be a floating point number in Python in the following?</p>\n\n<pre><code>c = a / b\n</code></pre>\n",
        "answer": "<p>In Python 2, division of two ints produces an int. In Python 3, it produces a float. We can get the new behaviour by importing from <code>__future__</code>.</p>\n\n<pre><code>&gt;&gt;&gt; from __future__ import division\n&gt;&gt;&gt; a = 4\n&gt;&gt;&gt; b = 6\n&gt;&gt;&gt; c = a / b\n&gt;&gt;&gt; c\n0.66666666666666663\n</code></pre>\n"
    },
    "68": {
        "question_id": "180986",
        "answer_id": "180993",
        "question": "<p>What is the difference between the <code>search()</code> and <code>match()</code> functions in the <a href=\"http://docs.python.org/2/library/re.html\" rel=\"noreferrer\">Python <code>re</code> module</a>?</p>\n\n<p>I've read the <a href=\"http://www.python.org/doc/2.5.2/lib/matching-searching.html\" rel=\"noreferrer\">documentation</a> (<a href=\"http://docs.python.org/2/library/re.html?highlight=matching%20searching#search-vs-match\" rel=\"noreferrer\">current documentation</a>), but I never seem to remember it.  I keep having to look it up and re-learn it.  I'm hoping that someone will answer it clearly with examples so that (perhaps) it will stick in my head.  Or at least I'll have a better place to return with my question and it will take less time to re-learn it.</p>\n",
        "answer": "<p><code>re.match</code> is anchored at the beginning of the string. That has nothing to do with newlines, so it is not the same as using <code>^</code> in the pattern.</p>\n\n<p>As the <a href=\"http://docs.python.org/2/library/re.html#re.match\" rel=\"noreferrer\">re.match documentation</a> says:</p>\n\n<blockquote>\n  <p>If zero or more characters at the\n  <strong>beginning of string</strong> match the regular expression pattern, return a\n  corresponding <code>MatchObject</code> instance.\n  Return <code>None</code> if the string does not\n  match the pattern; note that this is\n  different from a zero-length match.</p>\n  \n  <p>Note: If you want to locate a match\n  anywhere in string, use <code>search()</code>\n  instead.</p>\n</blockquote>\n\n<p><code>re.search</code> searches the entire string, as <a href=\"http://docs.python.org/2/library/re.html#re.search\" rel=\"noreferrer\">the documentation says</a>:</p>\n\n<blockquote>\n  <p><strong>Scan through string</strong> looking for a\n  location where the regular expression\n  pattern produces a match, and return a\n  corresponding <code>MatchObject</code> instance.\n  Return <code>None</code> if no position in the\n  string matches the pattern; note that\n  this is different from finding a\n  zero-length match at some point in the\n  string.</p>\n</blockquote>\n\n<p>So if you need to match at the beginning of the string, or to match the entire string use <code>match</code>. It is faster. Otherwise use <code>search</code>.</p>\n\n<p>The documentation has a <a href=\"http://docs.python.org/2/library/re.html#search-vs-match\" rel=\"noreferrer\">specific section for <code>match</code> vs. <code>search</code></a> that also covers multiline strings:</p>\n\n<blockquote>\n  <p>Python offers two different primitive\n  operations based on regular\n  expressions: <code>match</code> checks for a match\n  <strong>only at the beginning</strong> of the string,\n  while <code>search</code> checks for a match\n  <strong>anywhere</strong> in the string (this is what\n  Perl does by default).</p>\n  \n  <p>Note that <code>match</code> may differ from <code>search</code>\n  even when using a regular expression\n  beginning with <code>'^'</code>: <code>'^'</code> matches only\n  at the start of the string, or in\n  <code>MULTILINE</code> mode also immediately\n  following a newline. The \u201c<code>match</code>\u201d\n  operation succeeds <em>only if the pattern\n  matches at the <strong>start</strong> of the string</em>\n  regardless of mode, or at the starting\n  position given by the optional <code>pos</code>\n  argument regardless of whether a\n  newline precedes it.</p>\n</blockquote>\n\n<p>Now, enough talk. Time to see some example code:</p>\n\n<pre><code># example code:\nstring_with_newlines = \"\"\"something\nsomeotherthing\"\"\"\n\nimport re\n\nprint re.match('some', string_with_newlines) # matches\nprint re.match('someother', \n               string_with_newlines) # won't match\nprint re.match('^someother', string_with_newlines, \n               re.MULTILINE) # also won't match\nprint re.search('someother', \n                string_with_newlines) # finds something\nprint re.search('^someother', string_with_newlines, \n                re.MULTILINE) # also finds something\n\nm = re.compile('thing$', re.MULTILINE)\n\nprint m.match(string_with_newlines) # no match\nprint m.match(string_with_newlines, pos=4) # matches\nprint m.search(string_with_newlines, \n               re.MULTILINE) # also matches\n</code></pre>\n"
    },
    "69": {
        "question_id": "3394835",
        "answer_id": "3394898",
        "question": "<p>So I have difficulty with the concept of <code>*args</code> and <code>**kwargs</code>.</p>\n\n<p>So far I have learned that:</p>\n\n<ul>\n<li><code>*args</code> = list of arguments - as positional arguments</li>\n<li><code>**kwargs</code> = dictionary - whose keys become separate keyword arguments and the values become values of these arguments.</li>\n</ul>\n\n<p>I don't understand what programming task this would be helpful for. </p>\n\n<p>Maybe:</p>\n\n<p>I think to enter lists and dictionaries as arguments of a function AND at the same time as a wildcard, so I can pass ANY argument?</p>\n\n<p>Is there a simple example to explain how <code>*args</code> and <code>**kwargs</code> are used?</p>\n\n<p>Also the tutorial I found used just the \"*\" and a variable name. </p>\n\n<p>Are <code>*args</code> and <code>**kwargs</code> just placeholders or do you use exactly <code>*args</code> and <code>**kwargs</code> in the code?</p>\n",
        "answer": "<p><a href=\"http://docs.python.org/tutorial/controlflow.html#arbitrary-argument-lists\" rel=\"noreferrer\">The syntax is the <code>*</code> and <code>**</code></a>.  The names <code>*args</code> and <code>**kwargs</code> are only by convention but there's no hard requirement to use them.</p>\n\n<p>You would use <code>*args</code> when you're not sure how many arguments might be passed to your function, i.e. it allows you pass an arbitrary number of arguments to your function.  For example:</p>\n\n<pre><code>&gt;&gt;&gt; def print_everything(*args):\n        for count, thing in enumerate(args):\n...         print( '{0}. {1}'.format(count, thing))\n...\n&gt;&gt;&gt; print_everything('apple', 'banana', 'cabbage')\n0. apple\n1. banana\n2. cabbage\n</code></pre>\n\n<p>Similarly, <code>**kwargs</code> allows you to handle named arguments that you have not defined in advance:</p>\n\n<pre><code>&gt;&gt;&gt; def table_things(**kwargs):\n...     for name, value in kwargs.items():\n...         print( '{0} = {1}'.format(name, value))\n...\n&gt;&gt;&gt; table_things(apple = 'fruit', cabbage = 'vegetable')\ncabbage = vegetable\napple = fruit\n</code></pre>\n\n<p>You can use these along with named arguments too.  The explicit arguments get values first and then everything else is passed to <code>*args</code> and <code>**kwargs</code>.  The named arguments come first in the list.  For example:</p>\n\n<pre><code>def table_things(titlestring, **kwargs)\n</code></pre>\n\n<p>You can also use both in the same function definition but <code>*args</code> must occur before <code>**kwargs</code>.</p>\n\n<p>You can also use the <code>*</code> and <code>**</code> syntax when calling a function.  For example:</p>\n\n<pre><code>&gt;&gt;&gt; def print_three_things(a, b, c):\n...     print( 'a = {0}, b = {1}, c = {2}'.format(a,b,c))\n...\n&gt;&gt;&gt; mylist = ['aardvark', 'baboon', 'cat']\n&gt;&gt;&gt; print_three_things(*mylist)\na = aardvark, b = baboon, c = cat\n</code></pre>\n\n<p>As you can see in this case it takes the list (or tuple) of items and unpacks it. By this it matches them to the arguments in the function.  Of course, you could have a <code>*</code> both in the function definition and in the function call.</p>\n"
    },
    "70": {
        "question_id": "370357",
        "answer_id": "370363",
        "question": "<p>The following code works as expected in both Python 2.5 and 3.0:</p>\n\n<pre><code>a, b, c = (1, 2, 3)\n\nprint(a, b, c)\n\ndef test():\n    print(a)\n    print(b)\n    print(c)    # (A)\n    #c+=1       # (B)\ntest()\n</code></pre>\n\n<p>However, when I uncomment line <strong>(B)</strong>, I get an <code>UnboundLocalError: 'c' not assigned</code> at line <strong>(A)</strong>. The values of <code>a</code> and <code>b</code> are printed correctly. This has me completely baffled for two reasons:</p>\n\n<ol>\n<li><p>Why is there a runtime error thrown at line <strong>(A)</strong> because of a later statement on line <strong>(B)</strong>?</p></li>\n<li><p>Why are variables <code>a</code> and <code>b</code> printed as expected, while <code>c</code> raises an error?</p></li>\n</ol>\n\n<p>The only explanation I can come up with is that a <strong>local</strong> variable <code>c</code> is created by the assignment <code>c+=1</code>, which takes precedent over the \"global\" variable <code>c</code> even before the local variable is created. Of course, it doesn't make sense for a variable to \"steal\" scope before it exists.</p>\n\n<p>Could someone please explain this behavior?</p>\n",
        "answer": "<p>Python treats variables in functions differently depending on whether you assign values to them from within the function or not.  If a function contains any assignments to a variable, it is treated by default as a local variable.  Therefore, when you uncomment the line, you are trying to reference a local variable before any value has been assigned to it.</p>\n\n<p>If you want the variable <code>c</code> to refer to the global <code>c</code> put</p>\n\n<pre><code>global c\n</code></pre>\n\n<p>as the first line of the function.</p>\n\n<p>As for python 3, there is now</p>\n\n<pre><code>nonlocal c\n</code></pre>\n\n<p>that you can use to refer to the nearest enclosing function scope that has a <code>c</code> variable.</p>\n"
    },
    "71": {
        "question_id": "5036700",
        "answer_id": "5036775",
        "question": "<p>I want to create variables dynamically via a while loop in Python. Does anyone have any creative means of doing this?</p>\n",
        "answer": "<p>Unless there is an overwhelming need to create a mess of variable names, I would just use a dictionary, where you can dynamically create the key names and associate a value to each.</p>\n\n<pre><code>a = {}\nk = 0\nwhile k &lt; 10:\n    &lt;dynamically create key&gt; \n    key = ...\n    &lt;calculate value&gt; \n    value = ...\n    a[key] = value \n    k += 1\n</code></pre>\n\n<p>There are also some interesting data structures in the new 'collections' module that might be applicable:</p>\n\n<p><a href=\"http://docs.python.org/dev/library/collections.html\">http://docs.python.org/dev/library/collections.html</a></p>\n"
    },
    "72": {
        "question_id": "576169",
        "answer_id": "576183",
        "question": "<p>I'm trying to understand the use of <code>super()</code>. From the looks of it, both child classes can be created, just fine. </p>\n\n<p>I'm curious to know about the actual difference between the following 2 child classes.</p>\n\n<pre><code>class Base(object):\n    def __init__(self):\n        print \"Base created\"\n\nclass ChildA(Base):\n    def __init__(self):\n        Base.__init__(self)\n\nclass ChildB(Base):\n    def __init__(self):\n        super(ChildB, self).__init__()\n\nChildA() \nChildB()\n</code></pre>\n",
        "answer": "<p><code>super()</code> lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of <a href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=236275\" rel=\"noreferrer\">fun stuff</a> can happen. See the <a href=\"https://docs.python.org/2/library/functions.html#super\" rel=\"noreferrer\">standard docs on super</a> if you haven't already.</p>\n\n<p>Note that <a href=\"https://docs.python.org/3/library/functions.html#super\" rel=\"noreferrer\">the syntax changed in Python 3.0</a>: you can just say <code>super().__init__()</code> instead of <code>super(ChildB, self).__init__()</code> which IMO is quite a bit nicer. The standard docs also refer to a <a href=\"https://rhettinger.wordpress.com/2011/05/26/super-considered-super/\" rel=\"noreferrer\">guide to using super()</a> which is quite explanatory.</p>\n"
    },
    "73": {
        "question_id": "4706499",
        "answer_id": "4706520",
        "question": "<p>How do you append to the file instead of overwriting it? Is there a special function that appends to the file?</p>\n",
        "answer": "<pre><code>with open(\"test.txt\", \"a\") as myfile:\n    myfile.write(\"appended text\")\n</code></pre>\n"
    },
    "74": {
        "question_id": "19158339",
        "answer_id": "19158418",
        "question": "<p>I was trying to find a good source that explains why the use of <code>global</code> is considered to be bad practice in python (and in programming in general). Can somebody point me to one or explain here?</p>\n",
        "answer": "<p>This has nothing to do with Python; global variables are bad in any programming language.</p>\n\n<p><strong>However, global constants</strong> are not conceptually the same as <strong>global variables</strong>; global constants are perfectly harmless. It's just that in Python there is no enforced difference, only by convention are <code>CONSTANTS_CAPITALIZED</code> and <code>globals_are_not</code>.</p>\n\n<p>The reason they are bad is that they allow functions to have hidden (non-obvious, surprising, hard-to-detect) side effects, leading to an increase in complexity, potentially leading to <a href=\"https://en.wikipedia.org/wiki/Spaghetti_code\" rel=\"noreferrer\">Spaghetti code</a>.</p>\n\n<p>However, sane use of global state is acceptable (as is local state and mutability) even in functional programming, either for algorithm optimization, reduced complexity, caching and memoization, or the practicality of porting structures originating in a predominantly imperative codebase.</p>\n\n<p>All in all, your question can be answered in many ways, so your best bet is to just google \"why are global variables bad\". Some examples:</p>\n\n<ul>\n<li><a href=\"http://c2.com/cgi/wiki?GlobalVariablesAreBad\" rel=\"noreferrer\">http://c2.com/cgi/wiki?GlobalVariablesAreBad</a></li>\n<li><a href=\"https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil\">https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil</a></li>\n<li><a href=\"https://stackoverflow.com/questions/484635/are-global-variables-bad\">Are global variables bad?</a></li>\n</ul>\n\n<p>If you want to go deeper and find out why side effects are all about, and many other enlightening things, you should learn Functional Programming:</p>\n\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Side_effect_(computer_science)\" rel=\"noreferrer\">https://en.wikipedia.org/wiki/Side_effect_(computer_science)</a></li>\n<li><a href=\"https://softwareengineering.stackexchange.com/questions/15269/why-are-side-effects-considered-evil-in-functional-programming\">https://softwareengineering.stackexchange.com/questions/15269/why-are-side-effects-considered-evil-in-functional-programming</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Functional_programming\" rel=\"noreferrer\">https://en.wikipedia.org/wiki/Functional_programming</a></li>\n</ul>\n"
    },
    "75": {
        "question_id": "12423614",
        "answer_id": "12423750",
        "question": "<p>Okay, bear with me on this, I know it's going to look horribly convoluted, but please help me understand what's happening.</p>\n\n<pre><code>from functools import partial\n\nclass Cage(object):\n    def __init__(self, animal):\n        self.animal = animal\n\ndef gotimes(do_the_petting):\n    do_the_petting()\n\ndef get_petters():\n    for animal in ['cow', 'dog', 'cat']:\n        cage = Cage(animal)\n\n        def pet_function():\n            print \"Mary pets the \" + cage.animal + \".\"\n\n        yield (animal, partial(gotimes, pet_function))\n\nfuns = list(get_petters())\n\nfor name, f in funs:\n    print name + \":\", \n    f()\n</code></pre>\n\n<p>Gives:</p>\n\n<pre><code>cow: Mary pets the cat.\ndog: Mary pets the cat.\ncat: Mary pets the cat.\n</code></pre>\n\n<p>So basically, why am I not getting three different animals? Isn't the <code>cage</code> 'packaged' into the local scope of the nested function? If not, how does a call to the nested function look up the local variables?</p>\n\n<p>I know that running into these kind of problems usually means one is 'doing it wrong', but I'd like to understand what happens.</p>\n",
        "answer": "<p>The nested function looks up variables from the parent scope when executed, not when defined.</p>\n\n<p>The function body is compiled, and the 'free' variables (not defined in the function itself by assignment), are verified, then bound as closure cells to the function, with the code using an index to reference each cell. <code>pet_function</code> thus has <em>one</em> free variable (<code>cage</code>) which is then referenced via a closure cell, index 0. The closure itself points to the local variable <code>cage</code> in the <code>get_petters</code> function.</p>\n\n<p>When you actually call the function, that closure is then used to look at the value of <code>cage</code> in the surrounding scope <em>at the time you call the function</em>. Here lies the problem. By the time you call your functions, the <code>get_petters</code> function is already done computing it's results. The <code>cage</code> local variable at some point during that execution was assigned each of the <code>'cow'</code>, <code>'dog'</code>, and <code>'cat'</code> strings, but at the end of the function, <code>cage</code> contains that last value <code>'cat'</code>. Thus, when you call each of the dynamically returned functions, you get the value <code>'cat'</code> printed.</p>\n\n<p>The work-around is to not rely on closures. You can use a <em>partial function</em> instead, create a <em>new function scope</em>, or bind the variable as a <em>default value for a keyword parameter</em>.</p>\n\n<ul>\n<li><p>Partial function example, using <a href=\"http://docs.python.org/library/functools.html#functools.partial\" rel=\"noreferrer\"><code>functools.partial()</code></a>:</p>\n\n<pre><code>from functools import partial\n\ndef pet_function(cage=None):\n    print \"Mary pets the \" + cage.animal + \".\"\n\nyield (animal, partial(gotimes, partial(pet_function, cage=cage)))\n</code></pre></li>\n<li><p>Creating a new scope example:</p>\n\n<pre><code>def scoped_cage(cage=None):\n    def pet_function():\n        print \"Mary pets the \" + cage.animal + \".\"\n    return pet_function\n\nyield (animal, partial(gotimes, scoped_cage(cage)))\n</code></pre></li>\n<li><p>Binding the variable as a default value for a keyword parameter:</p>\n\n<pre><code>def pet_function(cage=cage):\n    print \"Mary pets the \" + cage.animal + \".\"\n\nyield (animal, partial(gotimes, pet_function))\n</code></pre></li>\n</ul>\n\n<p>There is no need to define the <code>scoped_cage</code> function in the loop, compilation only takes place once, not on each iteration of the loop.</p>\n"
    },
    "76": {
        "question_id": "7546050",
        "answer_id": "7557028",
        "question": "<p>I have built my first few scripts with a nice little GUI on them, as the tutorials have shown me, but none of them address what to do for a more complex program. </p>\n\n<p>If you have something with a 'start menu', for your opening screen, and upon user selection you move to a different section of the program and redraw the screen appropriately, what is the elegant way of doing this? </p>\n\n<p>Does one just <code>.destroy()</code> the 'start menu' frame and then create a new one filled with the widgets for another part? And reverse this process when they press the back button?</p>\n",
        "answer": "<p>One way is to stack the frames on top of each other, then you can simply raise one above the other in the stacking order. The one on top will be the one that is visible. This works best if all the frames are the same size, but with a little work you can get it to work with any sized frames.</p>\n\n<p><strong>Note</strong>: for this to work, all of the widgets for a page must have that page (ie: <code>self</code>) or a descendant as a parent (or master, depending on the terminology you prefer). </p>\n\n<p>Here's a bit of a contrived example to show you the general concept:</p>\n\n<pre><code>import tkinter as tk                # python 3\nfrom tkinter import font  as tkfont # python 3\n#import Tkinter as tk     # python 2\n#import tkFont as tkfont  # python 2\n\nclass SampleApp(tk.Tk):\n\n    def __init__(self, *args, **kwargs):\n        tk.Tk.__init__(self, *args, **kwargs)\n\n        self.title_font = tkfont.Font(family='Helvetica', size=18, weight=\"bold\", slant=\"italic\")\n\n        # the container is where we'll stack a bunch of frames\n        # on top of each other, then the one we want visible\n        # will be raised above the others\n        container = tk.Frame(self)\n        container.pack(side=\"top\", fill=\"both\", expand=True)\n        container.grid_rowconfigure(0, weight=1)\n        container.grid_columnconfigure(0, weight=1)\n\n        self.frames = {}\n        for F in (StartPage, PageOne, PageTwo):\n            page_name = F.__name__\n            frame = F(parent=container, controller=self)\n            self.frames[page_name] = frame\n\n            # put all of the pages in the same location;\n            # the one on the top of the stacking order\n            # will be the one that is visible.\n            frame.grid(row=0, column=0, sticky=\"nsew\")\n\n        self.show_frame(\"StartPage\")\n\n    def show_frame(self, page_name):\n        '''Show a frame for the given page name'''\n        frame = self.frames[page_name]\n        frame.tkraise()\n\n\nclass StartPage(tk.Frame):\n\n    def __init__(self, parent, controller):\n        tk.Frame.__init__(self, parent)\n        self.controller = controller\n        label = tk.Label(self, text=\"This is the start page\", font=controller.title_font)\n        label.pack(side=\"top\", fill=\"x\", pady=10)\n\n        button1 = tk.Button(self, text=\"Go to Page One\",\n                            command=lambda: controller.show_frame(\"PageOne\"))\n        button2 = tk.Button(self, text=\"Go to Page Two\",\n                            command=lambda: controller.show_frame(\"PageTwo\"))\n        button1.pack()\n        button2.pack()\n\n\nclass PageOne(tk.Frame):\n\n    def __init__(self, parent, controller):\n        tk.Frame.__init__(self, parent)\n        self.controller = controller\n        label = tk.Label(self, text=\"This is page 1\", font=controller.title_font)\n        label.pack(side=\"top\", fill=\"x\", pady=10)\n        button = tk.Button(self, text=\"Go to the start page\",\n                           command=lambda: controller.show_frame(\"StartPage\"))\n        button.pack()\n\n\nclass PageTwo(tk.Frame):\n\n    def __init__(self, parent, controller):\n        tk.Frame.__init__(self, parent)\n        self.controller = controller\n        label = tk.Label(self, text=\"This is page 2\", font=controller.title_font)\n        label.pack(side=\"top\", fill=\"x\", pady=10)\n        button = tk.Button(self, text=\"Go to the start page\",\n                           command=lambda: controller.show_frame(\"StartPage\"))\n        button.pack()\n\n\nif __name__ == \"__main__\":\n    app = SampleApp()\n    app.mainloop()\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/w1sVH.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/w1sVH.png\" alt=\"start page\"></a> <a href=\"https://i.stack.imgur.com/xH5w5.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/xH5w5.png\" alt=\"page 1\"></a> <a href=\"https://i.stack.imgur.com/339hd.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/339hd.png\" alt=\"page 2\"></a></p>\n\n<p>If you find the concept of creating instance in a class confusing, or if different pages need different arguments during construction, you can explicitly call each class separately. The loop serves mainly to illustrate the point that each class is identical. </p>\n\n<p>For example, to create the classes individually you can remove the loop (<code>for F in (StartPage, ...)</code> with this:</p>\n\n<pre><code>self.frames[\"StartPage\"] = StartPage(parent=container, controller=self)\nself.frames[\"PageOne\"] = PageOne(parent=container, controller=self)\nself.frames[\"PageTwo\"] = PageTwo(parent=container, controller=self)\n\nself.frames[\"StartPage\"].grid(row=0, column=0, sticky=\"nsew\")\nself.frames[\"PageOne\"].grid(row=0, column=0, sticky=\"nsew\")\nself.frames[\"PageTwo\"].grid(row=0, column=0, sticky=\"nsew\")\n</code></pre>\n\n<hr>\n\n<p>Over time people have asked other questions using this code (or an online tutorial that copied this code) as a starting point. You might want to read the answers to these questions:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/32864610/7432\">Understanding parent and controller in Tkinter __init__</a></li>\n<li><a href=\"https://stackoverflow.com/q/34301300/7432\">Tkinter! Understanding how to switch frames</a></li>\n<li><a href=\"https://stackoverflow.com/q/32212408/7432\">How to get variable data from a class</a></li>\n<li><a href=\"https://stackoverflow.com/q/48731097/7432\">Calling functions from a Tkinter Frame to an other</a></li>\n<li><a href=\"https://stackoverflow.com/q/33646605/7432\">How to access variables from different classes in tkinter?</a></li>\n<li><a href=\"https://stackoverflow.com/q/35029188/7432\">How would I make a method which is run every time a frame is shown in tkinter</a></li>\n<li><a href=\"https://stackoverflow.com/q/35991126/7432\">Tkinter Frame Resize</a></li>\n<li><a href=\"https://stackoverflow.com/q/39530107/7432\">Tkinter have code for pages in separate files</a></li>\n<li><a href=\"https://stackoverflow.com/q/45064732/7432\">Refresh a tkinter frame on button press</a></li>\n</ul>\n"
    },
    "77": {
        "question_id": "39980323",
        "answer_id": "39980744",
        "question": "<p>Dictionaries are ordered in Python 3.6 (under the CPython implementation at least) unlike in previous incarnations. This seems like a substantial change, but it's only a short paragraph in the <a href=\"https://docs.python.org/3.6/whatsnew/3.6.html#other-language-changes\" rel=\"noreferrer\">documentation</a>. It is described as a CPython implementation detail rather than a language feature, but also implies this may become standard in the future.</p>\n\n<p>How does the new dictionary implementation perform better than the older one while preserving element order? </p>\n\n<p>Here is the text from the documentation:</p>\n\n<blockquote>\n  <p><code>dict()</code> now uses a \u201ccompact\u201d representation <a href=\"https://morepypy.blogspot.com/2015/01/faster-more-memory-efficient-and-more.html\" rel=\"noreferrer\">pioneered by PyPy</a>. The memory usage of the new dict() is between 20% and 25% smaller compared to Python 3.5. <a href=\"https://www.python.org/dev/peps/pep-0468\" rel=\"noreferrer\">PEP 468</a> (Preserving the order of **kwargs in a function.) is implemented by this. The order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon (this may change in the future, but it is desired to have this new dict implementation in the language for a few releases before changing the language spec to mandate order-preserving semantics for all current and future Python implementations; this also helps preserve backwards-compatibility with older versions of the language where random iteration order is still in effect, e.g. Python 3.5). (Contributed by INADA Naoki in <a href=\"https://bugs.python.org/issue27350\" rel=\"noreferrer\">issue 27350</a>. Idea <a href=\"https://mail.python.org/pipermail/python-dev/2012-December/123028.html\" rel=\"noreferrer\">originally suggested by Raymond Hettinger</a>.)</p>\n</blockquote>\n\n<p>Update December 2017: <code>dict</code>s retaining insertion order is <a href=\"https://mail.python.org/pipermail/python-dev/2017-December/151283.html\" rel=\"noreferrer\">guaranteed</a> for Python 3.7</p>\n",
        "answer": "<blockquote>\n  <p><strong>Are dictionaries ordered in Python 3.6+?</strong></p>\n</blockquote>\n\n<p>They are <strong>insertion ordered</strong><sup><strong>[1]</strong></sup>. As of Python 3.6, for the CPython implementation of Python, dictionaries <em>remember the order of items inserted</em>. <em>This is considered an implementation detail in Python 3.6</em>; you need to use <code>OrderedDict</code> if you want insertion ordering that's <em>guaranteed</em> across other implementations of Python (and other ordered behavior<sup><strong>[1]</strong></sup>).</p>\n\n<p><strong>As of Python 3.7</strong>, this is no longer an implementation detail and instead becomes a language feature. <a href=\"https://mail.python.org/pipermail/python-dev/2017-December/151283.html\" rel=\"noreferrer\">From a python-dev message by GvR</a>:</p>\n\n<blockquote>\n  <p>Make it so. \"Dict keeps insertion order\" is the ruling. Thanks!</p>\n</blockquote>\n\n<p>This simply means that <em>you can depend on it</em>. Other implementations of Python must also offer an insertion ordered dictionary if they wish to be a conforming implementation of Python 3.7.</p>\n\n<hr>\n\n<blockquote>\n  <p><strong>How does the Python <code>3.6</code> dictionary implementation perform better<sup>[2]</sup> than the older one while preserving element order?</strong></p>\n</blockquote>\n\n<p>Essentially, by <em>keeping two arrays</em>. </p>\n\n<ul>\n<li><p>The first array, <a href=\"https://github.com/python/cpython/blob/474ef63e38726d4bcde14f6104984a742c6cb747/Objects/dictobject.c#L551\" rel=\"noreferrer\"><code>dk_entries</code></a>, holds the entries (<a href=\"https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L4\" rel=\"noreferrer\">of type <code>PyDictKeyEntry</code></a>) for the dictionary in the order that they were inserted. Preserving order is achieved by this being an append only array where new items are always inserted at the end (insertion order).</p></li>\n<li><p>The second, <a href=\"https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L70\" rel=\"noreferrer\"><code>dk_indices</code></a>, holds the indices for the <code>dk_entries</code> array (that is, values that indicate the position of the corresponding entry in <code>dk_entries</code>). This array acts as the hash table. When a key is hashed it leads to one of the indices stored in <code>dk_indices</code> and the corresponding entry is fetched by indexing <code>dk_entries</code>. Since only indices are kept, the type of this array depends on the overall size of the dictionary (ranging from type <a href=\"https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L64\" rel=\"noreferrer\"><code>int8_t</code></a>(<code>1</code> byte) to <a href=\"https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L66\" rel=\"noreferrer\"><code>int32_t</code></a>/<a href=\"https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L68\" rel=\"noreferrer\"><code>int64_t</code></a> (<code>4</code>/<code>8</code> bytes) on <code>32</code>/<code>64</code> bit builds) </p></li>\n</ul>\n\n<p>In the previous implementation, a sparse array of type <code>PyDictKeyEntry</code> and size <code>dk_size</code> had to be allocated; unfortunately, it also resulted in a lot of empty space since that array was not allowed to be more than <code>2/3 * dk_size</code> full <a href=\"https://github.com/python/cpython/blob/474ef63e38726d4bcde14f6104984a742c6cb747/Objects/dictobject.c#L375\" rel=\"noreferrer\">for performance reasons</a>. (and the empty space <em>still</em> had <code>PyDictKeyEntry</code> size!). </p>\n\n<p>This is not the case now since only the <em>required</em> entries are stored (those that have been inserted) and a sparse array of type <code>intX_t</code> (<code>X</code> depending on dict size) <code>2/3 * dk_size</code>s full is kept. The empty space changed from type <code>PyDictKeyEntry</code> to <code>intX_t</code>. </p>\n\n<p>So, obviously, creating a sparse array of type <code>PyDictKeyEntry</code> is much more memory demanding than a sparse array for storing <code>int</code>s.</p>\n\n<p>You can see the full conversation <a href=\"https://mail.python.org/pipermail/python-dev/2016-September/146327.html\" rel=\"noreferrer\">on Python-Dev</a> regarding this feature if interested, it is a good read.</p>\n\n<hr>\n\n<p><a href=\"https://mail.python.org/pipermail/python-dev/2012-December/123028.html\" rel=\"noreferrer\">In the original proposal made by Raymond Hettinger</a>, a visualization of the data structures used can be seen which captures the gist of the idea.</p>\n\n<blockquote>\n  <p>For example, the dictionary:</p>\n\n<pre><code>d = {'timmy': 'red', 'barry': 'green', 'guido': 'blue'}\n</code></pre>\n  \n  <p>is currently stored as:</p>\n\n<pre><code>entries = [['--', '--', '--'],\n           [-8522787127447073495, 'barry', 'green'],\n           ['--', '--', '--'],\n           ['--', '--', '--'],\n           ['--', '--', '--'],\n           [-9092791511155847987, 'timmy', 'red'],\n           ['--', '--', '--'],\n           [-6480567542315338377, 'guido', 'blue']]\n</code></pre>\n  \n  <p>Instead, the data should be organized as follows:</p>\n\n<pre><code>indices =  [None, 1, None, None, None, 0, None, 2]\nentries =  [[-9092791511155847987, 'timmy', 'red'],\n            [-8522787127447073495, 'barry', 'green'],\n            [-6480567542315338377, 'guido', 'blue']]\n</code></pre>\n</blockquote>\n\n<p>As you can visually now see, in the original proposal, a lot of space is essentially empty to reduce collisions and make look-ups faster. With the new approach, you reduce the memory required by moving the sparseness where it's really required, in the indices.</p>\n\n<hr>\n\n<p><sub>\n[1]: I say \"insertion ordered\" and not \"ordered\" since, with the existence of OrderedDict, \"ordered\" suggests further behavior that the <code>dict</code> object <em>doesn't provide</em>. OrderedDicts are reversible, provide order sensitive methods and, mainly, provide an order-sensive equality tests (<code>==</code>, <code>!=</code>). <code>dict</code>s currently don't offer any of those behaviors/methods.\n</sub></p>\n\n<hr>\n\n<p><sub>\n[2]: The new dictionary implementations performs better <strong>memory wise</strong> by being designed more compactly; that's the main benefit here. Speed wise, the difference isn't so drastic, there's places where the new dict might introduce slight regressions (<a href=\"http://bugs.python.org/msg275587\" rel=\"noreferrer\">key-lookups, for example</a>) while in others (iteration and resizing come to mind) a performance boost should be present. \n</sub></p>\n\n<p><sub>\nOverall, the performance of the dictionary, especially in real-life situations, improves due to the compactness introduced.<br>\n</sub></p>\n"
    },
    "78": {
        "question_id": "1867861",
        "answer_id": "10982037",
        "question": "<p>I have a dictionary that I declared in a particular order and want to keep it in that order all the time. The keys/values can't really be kept in order based on their value, I just want it in the order that I declared it.</p>\n\n<p>So if I have the dictionary:</p>\n\n<pre><code>d = {'ac': 33, 'gw': 20, 'ap': 102, 'za': 321, 'bs': 10}\n</code></pre>\n\n<p>It isn't in that order if I view it or iterate through it, is there any way to make sure Python will keep the explicit order that I declared the keys/values in?</p>\n",
        "answer": "<pre><code>from collections import OrderedDict\nOrderedDict((word, True) for word in words)\n</code></pre>\n\n<p>contains </p>\n\n<pre><code>OrderedDict([('He', True), ('will', True), ('be', True), ('the', True), ('winner', True)])\n</code></pre>\n\n<p>If the values are <code>True</code> (or any other immutable object), you can also use:</p>\n\n<pre><code>OrderedDict.fromkeys(words, True)\n</code></pre>\n"
    },
    "79": {
        "question_id": "9264763",
        "answer_id": "9264845",
        "question": "<p>What am I doing wrong here?</p>\n\n<pre><code>counter = 0\n\ndef increment():\n  counter += 1\n\nincrement()\n</code></pre>\n\n<p>The above code throws an <code>UnboundLocalError</code>.</p>\n",
        "answer": "<p>Python doesn't have variable declarations, so it has to figure out the <a href=\"http://docs.python.org/3.3/tutorial/classes.html#python-scopes-and-namespaces\">scope</a> of variables itself.  It does so by a simple rule:  If there is an assignment to a variable inside a function, that variable is considered local.<sup><a href=\"http://docs.python.org/3.3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python\">[1]</a></sup>  Thus, the line</p>\n\n<pre><code>counter += 1\n</code></pre>\n\n<p>implicitly makes <code>counter</code> local to <code>increment()</code>.  Trying to execute this line, though, will try to read the value of the local variable <code>counter</code> before it is assigned, resulting in an <a href=\"http://docs.python.org/3.3/library/exceptions.html#UnboundLocalError\"><code>UnboundLocalError</code></a>.<sup><a href=\"http://docs.python.org/3.3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value\">[2]</a></sup></p>\n\n<p>If <code>counter</code> is a global variable, the <a href=\"http://docs.python.org/3.3/reference/simple_stmts.html#the-global-statement\"><code>global</code></a> keyword will help.  If <code>increment()</code> is a local function and <code>counter</code> a local variable, you can use <a href=\"http://docs.python.org/3.3/reference/simple_stmts.html#the-nonlocal-statement\"><code>nonlocal</code></a> in Python 3.x.</p>\n"
    },
    "80": {
        "question_id": "3207219",
        "answer_id": "3207973",
        "question": "<p>How can I list all files of a directory in Python and add them to a <code>list</code>?</p>\n",
        "answer": "<p><a href=\"https://docs.python.org/2/library/os.html#os.listdir\" rel=\"noreferrer\" title=\"os.listdir\"><code>os.listdir()</code></a> will get you everything that's in a directory - files and directories.</p>\n\n<p>If you want <em>just</em> files, you could either filter this down using <a href=\"https://docs.python.org/2/library/os.path.html#module-os.path\" rel=\"noreferrer\"><code>os.path</code></a>:</p>\n\n<pre><code>from os import listdir\nfrom os.path import isfile, join\nonlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]\n</code></pre>\n\n<p>or you could use <a href=\"https://docs.python.org/2/library/os.html#os.walk\" rel=\"noreferrer\" title=\"os.walk\"><code>os.walk()</code></a> which will yield two lists for each directory it visits - splitting into files and dirs for you. If you only want the top directory you can just break the first time it yields</p>\n\n<pre><code>from os import walk\n\nf = []\nfor (dirpath, dirnames, filenames) in walk(mypath):\n    f.extend(filenames)\n    break\n</code></pre>\n"
    },
    "81": {
        "question_id": "2068372",
        "answer_id": "2068548",
        "question": "<p>This is the best algorithm I could come up.</p>\n\n<pre><code>def get_primes(n):\n    numbers = set(range(n, 1, -1))\n    primes = []\n    while numbers:\n        p = numbers.pop()\n        primes.append(p)\n        numbers.difference_update(set(range(p*2, n+1, p)))\n    return primes\n\n&gt;&gt;&gt; timeit.Timer(stmt='get_primes.get_primes(1000000)', setup='import   get_primes').timeit(1)\n1.1499958793645562\n</code></pre>\n\n<p>Can it be made even faster?</p>\n\n<p>This code has a flaw: Since <code>numbers</code> is an unordered set, there is no guarantee that <code>numbers.pop()</code> will remove the lowest number from the set. Nevertheless, it works (at least for me) for some input numbers:</p>\n\n<pre><code>&gt;&gt;&gt; sum(get_primes(2000000))\n142913828922L\n#That's the correct sum of all numbers below 2 million\n&gt;&gt;&gt; 529 in get_primes(1000)\nFalse\n&gt;&gt;&gt; 529 in get_primes(530)\nTrue\n</code></pre>\n",
        "answer": "<p><strong>Warning:</strong> <code>timeit</code> results may vary due to differences in hardware or\nversion of Python.  </p>\n\n<p>Below is a script which compares a number of implementations: \n<UL>\n<LI>ambi_sieve_plain,\n<LI><a href=\"https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\">rwh_primes</a>, \n<LI><a href=\"https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\">rwh_primes1</a>, \n<LI><a href=\"https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\">rwh_primes2</a>, \n<LI><a href=\"https://web.archive.org/web/20080324064651/http://krenzel.info/?p=83\" rel=\"noreferrer\">sieveOfAtkin</a>, \n<LI><a href=\"http://groups.google.com/group/comp.lang.python/msg/f1f10ced88c68c2d\" rel=\"noreferrer\">sieveOfEratosthenes</a>, \n<LI><a href=\"https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/2073279#2073279\">sundaram3</a>,\n<LI><a href=\"http://zerovolt.com/?p=88\" rel=\"noreferrer\">sieve_wheel_30</a>,\n<LI><a href=\"http://tommih.blogspot.com/2009/04/fast-prime-number-generator.html\" rel=\"noreferrer\">ambi_sieve</a> (requires numpy)\n<LI><a href=\"https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\">primesfrom3to</a> (requires numpy)\n<LI><a href=\"https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\">primesfrom2to</a> (requires numpy)\n</UL></p>\n\n<p>Many thanks to <a href=\"https://stackoverflow.com/users/92092/stephan\">stephan</a> for bringing sieve_wheel_30 to my attention.\nCredit goes to <a href=\"https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\">Robert William Hanks</a> for primesfrom2to, primesfrom3to, rwh_primes, rwh_primes1, and rwh_primes2.</p>\n\n<p>Of the plain Python methods tested, <strong>with psyco</strong>, for n=1000000,\n<strong>rwh_primes1</strong> was the fastest tested.</p>\n\n<pre><code>+---------------------+-------+\n| Method              | ms    |\n+---------------------+-------+\n| rwh_primes1         | 43.0  |\n| sieveOfAtkin        | 46.4  |\n| rwh_primes          | 57.4  |\n| sieve_wheel_30      | 63.0  |\n| rwh_primes2         | 67.8  |    \n| sieveOfEratosthenes | 147.0 |\n| ambi_sieve_plain    | 152.0 |\n| sundaram3           | 194.0 |\n+---------------------+-------+\n</code></pre>\n\n<p>Of the plain Python methods tested, <strong>without psyco</strong>, for n=1000000,\n<strong>rwh_primes2</strong> was the fastest.</p>\n\n<pre><code>+---------------------+-------+\n| Method              | ms    |\n+---------------------+-------+\n| rwh_primes2         | 68.1  |\n| rwh_primes1         | 93.7  |\n| rwh_primes          | 94.6  |\n| sieve_wheel_30      | 97.4  |\n| sieveOfEratosthenes | 178.0 |\n| ambi_sieve_plain    | 286.0 |\n| sieveOfAtkin        | 314.0 |\n| sundaram3           | 416.0 |\n+---------------------+-------+\n</code></pre>\n\n<p>Of all the methods tested, <em>allowing numpy</em>, for n=1000000,\n<strong>primesfrom2to</strong> was the fastest tested.</p>\n\n<pre><code>+---------------------+-------+\n| Method              | ms    |\n+---------------------+-------+\n| primesfrom2to       | 15.9  |\n| primesfrom3to       | 18.4  |\n| ambi_sieve          | 29.3  |\n+---------------------+-------+\n</code></pre>\n\n<p>Timings were measured using the command:</p>\n\n<pre><code>python -mtimeit -s\"import primes\" \"primes.{method}(1000000)\"\n</code></pre>\n\n<p>with <code>{method}</code> replaced by each of the method names.</p>\n\n<p>primes.py:</p>\n\n<pre><code>#!/usr/bin/env python\nimport psyco; psyco.full()\nfrom math import sqrt, ceil\nimport numpy as np\n\ndef rwh_primes(n):\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    \"\"\" Returns  a list of primes &lt; n \"\"\"\n    sieve = [True] * n\n    for i in xrange(3,int(n**0.5)+1,2):\n        if sieve[i]:\n            sieve[i*i::2*i]=[False]*((n-i*i-1)/(2*i)+1)\n    return [2] + [i for i in xrange(3,n,2) if sieve[i]]\n\ndef rwh_primes1(n):\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    \"\"\" Returns  a list of primes &lt; n \"\"\"\n    sieve = [True] * (n/2)\n    for i in xrange(3,int(n**0.5)+1,2):\n        if sieve[i/2]:\n            sieve[i*i/2::i] = [False] * ((n-i*i-1)/(2*i)+1)\n    return [2] + [2*i+1 for i in xrange(1,n/2) if sieve[i]]\n\ndef rwh_primes2(n):\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    \"\"\" Input n&gt;=6, Returns a list of primes, 2 &lt;= p &lt; n \"\"\"\n    correction = (n%6&gt;1)\n    n = {0:n,1:n-1,2:n+4,3:n+3,4:n+2,5:n+1}[n%6]\n    sieve = [True] * (n/3)\n    sieve[0] = False\n    for i in xrange(int(n**0.5)/3+1):\n      if sieve[i]:\n        k=3*i+1|1\n        sieve[      ((k*k)/3)      ::2*k]=[False]*((n/6-(k*k)/6-1)/k+1)\n        sieve[(k*k+4*k-2*k*(i&amp;1))/3::2*k]=[False]*((n/6-(k*k+4*k-2*k*(i&amp;1))/6-1)/k+1)\n    return [2,3] + [3*i+1|1 for i in xrange(1,n/3-correction) if sieve[i]]\n\ndef sieve_wheel_30(N):\n    # http://zerovolt.com/?p=88\n    ''' Returns a list of primes &lt;= N using wheel criterion 2*3*5 = 30\n\nCopyright 2009 by zerovolt.com\nThis code is free for non-commercial purposes, in which case you can just leave this comment as a credit for my work.\nIf you need this code for commercial purposes, please contact me by sending an email to: info [at] zerovolt [dot] com.'''\n    __smallp = ( 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\n    61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139,\n    149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\n    229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,\n    313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,\n    409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491,\n    499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\n    601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,\n    691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,\n    809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887,\n    907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997)\n\n    wheel = (2, 3, 5)\n    const = 30\n    if N &lt; 2:\n        return []\n    if N &lt;= const:\n        pos = 0\n        while __smallp[pos] &lt;= N:\n            pos += 1\n        return list(__smallp[:pos])\n    # make the offsets list\n    offsets = (7, 11, 13, 17, 19, 23, 29, 1)\n    # prepare the list\n    p = [2, 3, 5]\n    dim = 2 + N // const\n    tk1  = [True] * dim\n    tk7  = [True] * dim\n    tk11 = [True] * dim\n    tk13 = [True] * dim\n    tk17 = [True] * dim\n    tk19 = [True] * dim\n    tk23 = [True] * dim\n    tk29 = [True] * dim\n    tk1[0] = False\n    # help dictionary d\n    # d[a , b] = c  ==&gt; if I want to find the smallest useful multiple of (30*pos)+a\n    # on tkc, then I need the index given by the product of [(30*pos)+a][(30*pos)+b]\n    # in general. If b &lt; a, I need [(30*pos)+a][(30*(pos+1))+b]\n    d = {}\n    for x in offsets:\n        for y in offsets:\n            res = (x*y) % const\n            if res in offsets:\n                d[(x, res)] = y\n    # another help dictionary: gives tkx calling tmptk[x]\n    tmptk = {1:tk1, 7:tk7, 11:tk11, 13:tk13, 17:tk17, 19:tk19, 23:tk23, 29:tk29}\n    pos, prime, lastadded, stop = 0, 0, 0, int(ceil(sqrt(N)))\n    # inner functions definition\n    def del_mult(tk, start, step):\n        for k in xrange(start, len(tk), step):\n            tk[k] = False\n    # end of inner functions definition\n    cpos = const * pos\n    while prime &lt; stop:\n        # 30k + 7\n        if tk7[pos]:\n            prime = cpos + 7\n            p.append(prime)\n            lastadded = 7\n            for off in offsets:\n                tmp = d[(7, off)]\n                start = (pos + prime) if off == 7 else (prime * (const * (pos + 1 if tmp &lt; 7 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 11\n        if tk11[pos]:\n            prime = cpos + 11\n            p.append(prime)\n            lastadded = 11\n            for off in offsets:\n                tmp = d[(11, off)]\n                start = (pos + prime) if off == 11 else (prime * (const * (pos + 1 if tmp &lt; 11 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 13\n        if tk13[pos]:\n            prime = cpos + 13\n            p.append(prime)\n            lastadded = 13\n            for off in offsets:\n                tmp = d[(13, off)]\n                start = (pos + prime) if off == 13 else (prime * (const * (pos + 1 if tmp &lt; 13 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 17\n        if tk17[pos]:\n            prime = cpos + 17\n            p.append(prime)\n            lastadded = 17\n            for off in offsets:\n                tmp = d[(17, off)]\n                start = (pos + prime) if off == 17 else (prime * (const * (pos + 1 if tmp &lt; 17 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 19\n        if tk19[pos]:\n            prime = cpos + 19\n            p.append(prime)\n            lastadded = 19\n            for off in offsets:\n                tmp = d[(19, off)]\n                start = (pos + prime) if off == 19 else (prime * (const * (pos + 1 if tmp &lt; 19 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 23\n        if tk23[pos]:\n            prime = cpos + 23\n            p.append(prime)\n            lastadded = 23\n            for off in offsets:\n                tmp = d[(23, off)]\n                start = (pos + prime) if off == 23 else (prime * (const * (pos + 1 if tmp &lt; 23 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 29\n        if tk29[pos]:\n            prime = cpos + 29\n            p.append(prime)\n            lastadded = 29\n            for off in offsets:\n                tmp = d[(29, off)]\n                start = (pos + prime) if off == 29 else (prime * (const * (pos + 1 if tmp &lt; 29 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # now we go back to top tk1, so we need to increase pos by 1\n        pos += 1\n        cpos = const * pos\n        # 30k + 1\n        if tk1[pos]:\n            prime = cpos + 1\n            p.append(prime)\n            lastadded = 1\n            for off in offsets:\n                tmp = d[(1, off)]\n                start = (pos + prime) if off == 1 else (prime * (const * pos + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n    # time to add remaining primes\n    # if lastadded == 1, remove last element and start adding them from tk1\n    # this way we don't need an \"if\" within the last while\n    if lastadded == 1:\n        p.pop()\n    # now complete for every other possible prime\n    while pos &lt; len(tk1):\n        cpos = const * pos\n        if tk1[pos]: p.append(cpos + 1)\n        if tk7[pos]: p.append(cpos + 7)\n        if tk11[pos]: p.append(cpos + 11)\n        if tk13[pos]: p.append(cpos + 13)\n        if tk17[pos]: p.append(cpos + 17)\n        if tk19[pos]: p.append(cpos + 19)\n        if tk23[pos]: p.append(cpos + 23)\n        if tk29[pos]: p.append(cpos + 29)\n        pos += 1\n    # remove exceeding if present\n    pos = len(p) - 1\n    while p[pos] &gt; N:\n        pos -= 1\n    if pos &lt; len(p) - 1:\n        del p[pos+1:]\n    # return p list\n    return p\n\ndef sieveOfEratosthenes(n):\n    \"\"\"sieveOfEratosthenes(n): return the list of the primes &lt; n.\"\"\"\n    # Code from: &lt;dickinsm@gmail.com&gt;, Nov 30 2006\n    # http://groups.google.com/group/comp.lang.python/msg/f1f10ced88c68c2d\n    if n &lt;= 2:\n        return []\n    sieve = range(3, n, 2)\n    top = len(sieve)\n    for si in sieve:\n        if si:\n            bottom = (si*si - 3) // 2\n            if bottom &gt;= top:\n                break\n            sieve[bottom::si] = [0] * -((bottom - top) // si)\n    return [2] + [el for el in sieve if el]\n\ndef sieveOfAtkin(end):\n    \"\"\"sieveOfAtkin(end): return a list of all the prime numbers &lt;end\n    using the Sieve of Atkin.\"\"\"\n    # Code by Steve Krenzel, &lt;Sgk284@gmail.com&gt;, improved\n    # Code: https://web.archive.org/web/20080324064651/http://krenzel.info/?p=83\n    # Info: http://en.wikipedia.org/wiki/Sieve_of_Atkin\n    assert end &gt; 0\n    lng = ((end-1) // 2)\n    sieve = [False] * (lng + 1)\n\n    x_max, x2, xd = int(sqrt((end-1)/4.0)), 0, 4\n    for xd in xrange(4, 8*x_max + 2, 8):\n        x2 += xd\n        y_max = int(sqrt(end-x2))\n        n, n_diff = x2 + y_max*y_max, (y_max &lt;&lt; 1) - 1\n        if not (n &amp; 1):\n            n -= n_diff\n            n_diff -= 2\n        for d in xrange((n_diff - 1) &lt;&lt; 1, -1, -8):\n            m = n % 12\n            if m == 1 or m == 5:\n                m = n &gt;&gt; 1\n                sieve[m] = not sieve[m]\n            n -= d\n\n    x_max, x2, xd = int(sqrt((end-1) / 3.0)), 0, 3\n    for xd in xrange(3, 6 * x_max + 2, 6):\n        x2 += xd\n        y_max = int(sqrt(end-x2))\n        n, n_diff = x2 + y_max*y_max, (y_max &lt;&lt; 1) - 1\n        if not(n &amp; 1):\n            n -= n_diff\n            n_diff -= 2\n        for d in xrange((n_diff - 1) &lt;&lt; 1, -1, -8):\n            if n % 12 == 7:\n                m = n &gt;&gt; 1\n                sieve[m] = not sieve[m]\n            n -= d\n\n    x_max, y_min, x2, xd = int((2 + sqrt(4-8*(1-end)))/4), -1, 0, 3\n    for x in xrange(1, x_max + 1):\n        x2 += xd\n        xd += 6\n        if x2 &gt;= end: y_min = (((int(ceil(sqrt(x2 - end))) - 1) &lt;&lt; 1) - 2) &lt;&lt; 1\n        n, n_diff = ((x*x + x) &lt;&lt; 1) - 1, (((x-1) &lt;&lt; 1) - 2) &lt;&lt; 1\n        for d in xrange(n_diff, y_min, -8):\n            if n % 12 == 11:\n                m = n &gt;&gt; 1\n                sieve[m] = not sieve[m]\n            n += d\n\n    primes = [2, 3]\n    if end &lt;= 3:\n        return primes[:max(0,end-2)]\n\n    for n in xrange(5 &gt;&gt; 1, (int(sqrt(end))+1) &gt;&gt; 1):\n        if sieve[n]:\n            primes.append((n &lt;&lt; 1) + 1)\n            aux = (n &lt;&lt; 1) + 1\n            aux *= aux\n            for k in xrange(aux, end, 2 * aux):\n                sieve[k &gt;&gt; 1] = False\n\n    s  = int(sqrt(end)) + 1\n    if s  % 2 == 0:\n        s += 1\n    primes.extend([i for i in xrange(s, end, 2) if sieve[i &gt;&gt; 1]])\n\n    return primes\n\ndef ambi_sieve_plain(n):\n    s = range(3, n, 2)\n    for m in xrange(3, int(n**0.5)+1, 2): \n        if s[(m-3)/2]: \n            for t in xrange((m*m-3)/2,(n&gt;&gt;1)-1,m):\n                s[t]=0\n    return [2]+[t for t in s if t&gt;0]\n\ndef sundaram3(max_n):\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/2073279#2073279\n    numbers = range(3, max_n+1, 2)\n    half = (max_n)//2\n    initial = 4\n\n    for step in xrange(3, max_n+1, 2):\n        for i in xrange(initial, half, step):\n            numbers[i-1] = 0\n        initial += 2*(step+1)\n\n        if initial &gt; half:\n            return [2] + filter(None, numbers)\n\n################################################################################\n# Using Numpy:\ndef ambi_sieve(n):\n    # http://tommih.blogspot.com/2009/04/fast-prime-number-generator.html\n    s = np.arange(3, n, 2)\n    for m in xrange(3, int(n ** 0.5)+1, 2): \n        if s[(m-3)/2]: \n            s[(m*m-3)/2::m]=0\n    return np.r_[2, s[s&gt;0]]\n\ndef primesfrom3to(n):\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    \"\"\" Returns a array of primes, p &lt; n \"\"\"\n    assert n&gt;=2\n    sieve = np.ones(n/2, dtype=np.bool)\n    for i in xrange(3,int(n**0.5)+1,2):\n        if sieve[i/2]:\n            sieve[i*i/2::i] = False\n    return np.r_[2, 2*np.nonzero(sieve)[0][1::]+1]    \n\ndef primesfrom2to(n):\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    \"\"\" Input n&gt;=6, Returns a array of primes, 2 &lt;= p &lt; n \"\"\"\n    sieve = np.ones(n/3 + (n%6==2), dtype=np.bool)\n    sieve[0] = False\n    for i in xrange(int(n**0.5)/3+1):\n        if sieve[i]:\n            k=3*i+1|1\n            sieve[      ((k*k)/3)      ::2*k] = False\n            sieve[(k*k+4*k-2*k*(i&amp;1))/3::2*k] = False\n    return np.r_[2,3,((3*np.nonzero(sieve)[0]+1)|1)]\n\nif __name__=='__main__':\n    import itertools\n    import sys\n\n    def test(f1,f2,num):\n        print('Testing {f1} and {f2} return same results'.format(\n            f1=f1.func_name,\n            f2=f2.func_name))\n        if not all([a==b for a,b in itertools.izip_longest(f1(num),f2(num))]):\n            sys.exit(\"Error: %s(%s) != %s(%s)\"%(f1.func_name,num,f2.func_name,num))\n\n    n=1000000\n    test(sieveOfAtkin,sieveOfEratosthenes,n)\n    test(sieveOfAtkin,ambi_sieve,n)\n    test(sieveOfAtkin,ambi_sieve_plain,n) \n    test(sieveOfAtkin,sundaram3,n)\n    test(sieveOfAtkin,sieve_wheel_30,n)\n    test(sieveOfAtkin,primesfrom3to,n)\n    test(sieveOfAtkin,primesfrom2to,n)\n    test(sieveOfAtkin,rwh_primes,n)\n    test(sieveOfAtkin,rwh_primes1,n)         \n    test(sieveOfAtkin,rwh_primes2,n)\n</code></pre>\n\n<p>Running the script tests that all implementations give the same result.</p>\n"
    },
    "82": {
        "question_id": "2081640",
        "answer_id": "2081708",
        "question": "<p>While asking <a href=\"https://stackoverflow.com/questions/2081622/python-raw-strings-and-unicode-how-to-use-web-for-input-as-regexp-patterns\">this question</a>, I realized I didn't know much about raw strings. For somebody claiming to be a Django trainer, this sucks.</p>\n\n<p>I know what an encoding is, and I know what <code>u''</code> alone does since I get what is Unicode.</p>\n\n<ul>\n<li><p>But what does <code>r''</code> do exactly? What kind of string does it result in?</p></li>\n<li><p>And above all, what the heck does <code>ur''</code> do?</p></li>\n<li><p>Finally, is there any reliable way to go back from a Unicode string to a simple raw string?</p></li>\n<li><p>Ah, and by the way, if your system and your text editor charset are set to UTF-8, does <code>u''</code> actually do anything?</p></li>\n</ul>\n",
        "answer": "<p>There's not really any \"raw <em>string</em>\"; there are raw <em>string literals</em>, which are exactly the string literals marked by an <code>'r'</code> before the opening quote.</p>\n\n<p>A \"raw string literal\" is a slightly different syntax for a string literal, in which a backslash, <code>\\</code>, is taken as meaning \"just a backslash\" (except when it comes right before a quote that would otherwise terminate the literal) -- no \"escape sequences\" to represent newlines, tabs, backspaces, form-feeds, and so on.  In normal string literals, each backslash must be doubled up to avoid being taken as the start of an escape sequence.</p>\n\n<p>This syntax variant exists mostly because the syntax of regular expression patterns is heavy with backslashes (but never at the end, so the \"except\" clause above doesn't matter) and it looks a bit better when you avoid doubling up each of them -- that's all.  It also gained some popularity to express native Windows file paths (with backslashes instead of regular slashes like on other platforms), but that's very rarely needed (since normal slashes mostly work fine on Windows too) and imperfect (due to the \"except\" clause above).</p>\n\n<p><code>r'...'</code> is a byte string (in Python 2.*), <code>ur'...'</code> is a Unicode string (again, in Python 2.*), and any of the other three kinds of quoting also produces exactly the same types of strings (so for example <code>r'...'</code>, <code>r'''...'''</code>, <code>r\"...\"</code>, <code>r\"\"\"...\"\"\"</code> are all byte strings, and so on).</p>\n\n<p>Not sure what you mean by \"going <em>back</em>\" - there is no intrinsically back and forward directions, because there's no raw string <strong>type</strong>, it's just an alternative syntax to express perfectly normal string objects, byte or unicode as they may be.</p>\n\n<p>And yes, in Python 2.*, <code>u'...'</code> <strong>is</strong> of course always distinct from just <code>'...'</code> -- the former is a unicode string, the latter is a byte string. What encoding the literal might be expressed in is a completely orthogonal issue.</p>\n\n<p>E.g., consider (Python 2.6):</p>\n\n<pre><code>&gt;&gt;&gt; sys.getsizeof('ciao')\n28\n&gt;&gt;&gt; sys.getsizeof(u'ciao')\n34\n</code></pre>\n\n<p>The Unicode object of course takes more memory space (very small difference for a very short string, obviously ;-).</p>\n"
    },
    "83": {
        "question_id": "107705",
        "answer_id": "107717",
        "question": "<p>Is output buffering enabled by default in Python's interpreter for <code>sys.stdout</code>?</p>\n\n<p>If the answer is positive, what are all the ways to disable it?</p>\n\n<p>Suggestions so far:</p>\n\n<ol>\n<li>Use the <code>-u</code> command line switch</li>\n<li>Wrap <code>sys.stdout</code> in an object that flushes after every write</li>\n<li>Set <code>PYTHONUNBUFFERED</code> env var</li>\n<li><code>sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)</code></li>\n</ol>\n\n<p>Is there any other way to set some global flag in <code>sys</code>/<code>sys.stdout</code> programmatically during execution?</p>\n",
        "answer": "<p>From <a href=\"http://mail.python.org/pipermail/tutor/2003-November/026645.html\" rel=\"noreferrer\">Magnus Lycka answer on a mailing list</a>:</p>\n\n<blockquote>\n  <p>You can skip buffering for a whole\n  python process using \"python -u\" \n  (or#!/usr/bin/env python -u etc) or by\n  setting the environment variable\n  PYTHONUNBUFFERED.</p>\n  \n  <p>You could also replace sys.stdout with\n  some other stream like wrapper which\n  does a flush after every call.</p>\n\n<pre><code>class Unbuffered(object):\n   def __init__(self, stream):\n       self.stream = stream\n   def write(self, data):\n       self.stream.write(data)\n       self.stream.flush()\n   def writelines(self, datas):\n       self.stream.writelines(datas)\n       self.stream.flush()\n   def __getattr__(self, attr):\n       return getattr(self.stream, attr)\n\nimport sys\nsys.stdout = Unbuffered(sys.stdout)\nprint 'Hello'\n</code></pre>\n</blockquote>\n"
    },
    "84": {
        "question_id": "3061",
        "answer_id": "3071",
        "question": "<p>What is the best way to go about calling a function given a string with the function's name in a Python program.  For example, let's say that I have a module <code>foo</code>, and I have a string whose content is <code>\"bar\"</code>. What is the best way to call <code>foo.bar()</code>?</p>\n\n<p>I need to get the return value of the function, which is why I don't just use <code>eval</code>. I figured out how to do it by using <code>eval</code> to define a temp function that returns the result of that function call, but I'm hoping that there is a more elegant way to do this.</p>\n",
        "answer": "<p>Assuming module <code>foo</code> with method <code>bar</code>:</p>\n\n<pre><code>import foo\nmethod_to_call = getattr(foo, 'bar')\nresult = method_to_call()\n</code></pre>\n\n<p>As far as that goes, lines 2 and 3 can be compressed to:</p>\n\n<pre><code>result = getattr(foo, 'bar')()\n</code></pre>\n\n<p>if that makes more sense for your use case.  You can use <code>getattr</code> in this fashion on class instance bound methods, module-level methods, class methods... the list goes on.</p>\n"
    },
    "85": {
        "question_id": "1912434",
        "answer_id": "1912483",
        "question": "<p>I have many rows in a database that contains xml and I'm trying to write a Python script that will go through those rows and count how many instances of a particular node attribute show up. For instance, my tree looks like:</p>\n\n<pre><code>&lt;foo&gt;\n   &lt;bar&gt;\n      &lt;type foobar=\"1\"/&gt;\n      &lt;type foobar=\"2\"/&gt;\n   &lt;/bar&gt;\n&lt;/foo&gt;\n</code></pre>\n\n<p>How can I access the attributes 1 and 2 in the XML using Python?</p>\n",
        "answer": "<p>I suggest <a href=\"http://docs.python.org/library/xml.etree.elementtree.html\" rel=\"noreferrer\"><code>ElementTree</code></a>.  There are other compatible implementations of the same API, such as <a href=\"http://lxml.de/\" rel=\"noreferrer\"><code>lxml</code></a>, and <code>cElementTree</code> in the Python standard library itself; but, in this context, what they chiefly add is even more speed -- the ease of programming part depends on the API, which <code>ElementTree</code> defines.</p>\n\n<p>First build an Element instance <code>root</code> from the XML, e.g. with the <a href=\"http://docs.python.org/library/xml.etree.elementtree.html#xml.etree.ElementTree.XML\" rel=\"noreferrer\">XML</a> function, or by parsing a file with something like:</p>\n\n<pre><code>import xml.etree.ElementTree as ET\nroot = ET.parse('thefile.xml').getroot()\n</code></pre>\n\n<p>Or any of the many other ways shown at <a href=\"http://docs.python.org/library/xml.etree.elementtree.html\" rel=\"noreferrer\"><code>ElementTree</code></a>. Then do something like:</p>\n\n<pre><code>for type_tag in root.findall('bar/type'):\n    value = type_tag.get('foobar')\n    print(value)\n</code></pre>\n\n<p>And similar, usually pretty simple, code patterns.</p>\n"
    },
    "86": {
        "question_id": "53218931",
        "answer_id": "53218939",
        "question": "<p>I have the following DataFrame where one of the columns is an object (list type cell):</p>\n\n<pre><code>df=pd.DataFrame({'A':[1,2],'B':[[1,2],[1,2]]})\ndf\nOut[458]: \n   A       B\n0  1  [1, 2]\n1  2  [1, 2]\n</code></pre>\n\n<p>My expected output is: </p>\n\n<pre><code>   A  B\n0  1  1\n1  1  2\n3  2  1\n4  2  2\n</code></pre>\n\n<p>What should I do to achieve this?</p>\n\n<hr>\n\n<p>Related question </p>\n\n<p><a href=\"https://stackoverflow.com/questions/27263805/pandas-when-cell-contents-are-lists-create-a-row-for-each-element-in-the-list\">pandas: When cell contents are lists, create a row for each element in the list</a></p>\n\n<p>Good question and answer but only handle one column with list(In my answer the self-def function will work for multiple columns, also the accepted answer is use the most time consuming <code>apply</code> , which is not recommended, check more info <a href=\"https://stackoverflow.com/questions/54432583/when-should-i-ever-want-to-use-pandas-apply-in-my-code\">When should I ever want to use pandas apply() in my code?</a>) </p>\n",
        "answer": "<hr>\n\n<p>As a user with both <code>R</code> and <code>python</code>, I have seen this type of question a couple of times. </p>\n\n<hr>\n\n<p>In R, they have the built-in function from package <code>tidyr</code> called <code>unnest</code>. But in <code>Python</code>(<code>pandas</code>) there is no built-in function for this type of question. </p>\n\n<hr>\n\n<p>I know <code>object</code> columns <code>type</code> always make the data hard to convert with a <code>pandas</code>' function. When I received the data like this , the first thing that came to mind was to 'flatten' or unnest the columns . </p>\n\n<hr>\n\n<p><strong>Method 1</strong> \n<strong><code>apply + pd.Series</code></strong> (easy to understand but in terms of performance not recommended . )</p>\n\n<pre><code>df.set_index('A').B.apply(pd.Series).stack().reset_index(level=0).rename(columns={0:'B'})\nOut[463]: \n   A  B\n0  1  1\n1  1  2\n0  2  1\n1  2  2\n</code></pre>\n\n<hr>\n\n<p><strong>Method 2</strong> using <code>repeat</code> with <code>DataFrame</code> constructor , re-create your dataframe (good at performance, not good at multiple columns )</p>\n\n<pre><code>df=pd.DataFrame({'A':df.A.repeat(df.B.str.len()),'B':np.concatenate(df.B.values)})\ndf\nOut[465]: \n   A  B\n0  1  1\n0  1  2\n1  2  1\n1  2  2\n</code></pre>\n\n<p><strong>Method 2.1</strong> for example besides A we have A.1 .....A.n. If we still use the method(<strong>Method 2</strong>) above it is hard for us to re-create the columns one by one . </p>\n\n<p>Solution : <code>join</code> or <code>merge</code> with the <code>index</code> after 'unnest' the single columns </p>\n\n<pre><code>s=pd.DataFrame({'B':np.concatenate(df.B.values)},index=df.index.repeat(df.B.str.len()))\ns.join(df.drop('B',1),how='left')\nOut[477]: \n   B  A\n0  1  1\n0  2  1\n1  1  2\n1  2  2\n</code></pre>\n\n<p>If you need the column order exactly the same as before, add <code>reindex</code> at the end.  </p>\n\n<pre><code>s.join(df.drop('B',1),how='left').reindex(columns=df.columns)\n</code></pre>\n\n<hr>\n\n<p><strong>Method 3</strong>  recreate the <code>list</code> </p>\n\n<pre><code>pd.DataFrame([[x] + [z] for x, y in df.values for z in y],columns=df.columns)\nOut[488]: \n   A  B\n0  1  1\n1  1  2\n2  2  1\n3  2  2\n</code></pre>\n\n<p><strong><em>If more than two columns</em></strong></p>\n\n<pre><code>s=pd.DataFrame([[x] + [z] for x, y in zip(df.index,df.B) for z in y])\ns.merge(df,left_on=0,right_index=True)\nOut[491]: \n   0  1  A       B\n0  0  1  1  [1, 2]\n1  0  2  1  [1, 2]\n2  1  1  2  [1, 2]\n3  1  2  2  [1, 2]\n</code></pre>\n\n<hr>\n\n<p><strong>Method 4</strong> using <code>reindex</code>  or <code>loc</code></p>\n\n<pre><code>df.reindex(df.index.repeat(df.B.str.len())).assign(B=np.concatenate(df.B.values))\nOut[554]: \n   A  B\n0  1  1\n0  1  2\n1  2  1\n1  2  2\n\n#df.loc[df.index.repeat(df.B.str.len())].assign(B=np.concatenate(df.B.values))\n</code></pre>\n\n<p><strong>Method 5</strong> when the list only contains unique values:</p>\n\n<pre><code>df=pd.DataFrame({'A':[1,2],'B':[[1,2],[3,4]]})\nfrom collections import ChainMap\nd = dict(ChainMap(*map(dict.fromkeys, df['B'], df['A'])))\npd.DataFrame(list(d.items()),columns=df.columns[::-1])\nOut[574]: \n   B  A\n0  1  1\n1  2  1\n2  3  2\n3  4  2\n</code></pre>\n\n<p><strong>Method 6</strong> using <code>numpy</code> for high performance:</p>\n\n<pre><code>newvalues=np.dstack((np.repeat(df.A.values,list(map(len,df.B.values))),np.concatenate(df.B.values)))\npd.DataFrame(data=newvalues[0],columns=df.columns)\n   A  B\n0  1  1\n1  1  2\n2  2  1\n3  2  2\n</code></pre>\n\n<hr>\n\n<p><strong>Method 7</strong>  : using base function <code>itertools</code> <code>cycle</code> and <code>chain</code>: Pure python solution just for fun</p>\n\n<pre><code>from itertools import cycle,chain\nl=df.values.tolist()\nl1=[list(zip([x[0]], cycle(x[1])) if len([x[0]]) &gt; len(x[1]) else list(zip(cycle([x[0]]), x[1]))) for x in l]\npd.DataFrame(list(chain.from_iterable(l1)),columns=df.columns)\n   A  B\n0  1  1\n1  1  2\n2  2  1\n3  2  2\n</code></pre>\n\n<hr>\n\n<p>Special case (two columns type object) </p>\n\n<pre><code>df=pd.DataFrame({'A':[1,2],'B':[[1,2],[3,4]],'C':[[1,2],[3,4]]})\ndf\nOut[592]: \n   A       B       C\n0  1  [1, 2]  [1, 2]\n1  2  [3, 4]  [3, 4]\n</code></pre>\n\n<hr>\n\n<p>Self-def function </p>\n\n<pre><code>def unnesting(df, explode):\n    idx = df.index.repeat(df[explode[0]].str.len())\n    df1 = pd.concat([\n        pd.DataFrame({x: np.concatenate(df[x].values)}) for x in explode], axis=1)\n    df1.index = idx\n\n    return df1.join(df.drop(explode, 1), how='left')\n\n\nunnesting(df,['B','C'])\nOut[609]: \n   B  C  A\n0  1  1  1\n0  2  2  1\n1  3  3  2\n1  4  4  2\n</code></pre>\n\n<hr>\n\n<p><strong><em>Summary :</em></strong> </p>\n\n<p>I am using <code>pandas</code> and <code>python</code> functions for this type of question. If you are worried about the speed of the above solutions, check user3483203's answer , since he is using <code>numpy</code> and most of the time <code>numpy</code> is faster . I recommend <code>Cpython</code> and <a href=\"http://numba.pydata.org/\" rel=\"nofollow noreferrer\"><code>numba</code></a> if speed matters in your case.</p>\n\n<hr>\n\n<p><strong>Update</strong>: All above method is talking about the <strong><em>vertical</em></strong> unnesting and explode , If you do need expend the list <strong><em>horizontal</em></strong>, Check with <code>pd.DataFrame</code> constructor </p>\n\n<pre><code>df.join(pd.DataFrame(df.B.tolist(),index=df.index).add_prefix('B_'))\nOut[33]: \n   A       B       C  B_0  B_1\n0  1  [1, 2]  [1, 2]    1    2\n1  2  [3, 4]  [3, 4]    3    4\n</code></pre>\n\n<hr>\n\n<p>Updated function </p>\n\n<pre><code>def unnesting(df, explode, axis):\n    if axis==1:\n        idx = df.index.repeat(df[explode[0]].str.len())\n        df1 = pd.concat([\n            pd.DataFrame({x: np.concatenate(df[x].values)}) for x in explode], axis=1)\n        df1.index = idx\n\n        return df1.join(df.drop(explode, 1), how='left')\n    else :\n        df1 = pd.concat([\n                         pd.DataFrame(df[x].tolist(), index=df.index).add_prefix(x) for x in explode], axis=1)\n        return df1.join(df.drop(explode, 1), how='left')\n</code></pre>\n\n<p>Test Output </p>\n\n<pre><code>unnesting(df, ['B','C'], axis=0)\nOut[36]: \n   B0  B1  C0  C1  A\n0   1   2   1   2  1\n1   3   4   3   4  2\n</code></pre>\n"
    },
    "87": {
        "question_id": "3294889",
        "answer_id": "3294899",
        "question": "<p>I am a bit puzzled by the following code:</p>\n\n<pre><code>d = {'x': 1, 'y': 2, 'z': 3} \nfor key in d:\n    print key, 'corresponds to', d[key]\n</code></pre>\n\n<p>What I don't understand is the <code>key</code> portion. How does Python recognize that it needs only to read the key from the dictionary? Is <code>key</code> a special word in Python? Or is it simply a variable?</p>\n",
        "answer": "<p><code>key</code> is just a variable name.  </p>\n\n<pre><code>for key in d:\n</code></pre>\n\n<p>will simply loop over the keys in the dictionary, rather than the keys and values.  To loop over both key and value you can use the following:</p>\n\n<p>For Python 2.x:</p>\n\n<pre><code>for key, value in d.iteritems():\n</code></pre>\n\n<p>For Python 3.x:</p>\n\n<pre><code>for key, value in d.items():\n</code></pre>\n\n<p>To test for yourself, change the word <code>key</code> to <code>poop</code>.</p>\n\n<p>For Python 3.x, <code>iteritems()</code> has been replaced with simply <code>items()</code>, which returns a set-like view backed by the dict, like <code>iteritems()</code> but even better. \nThis is also available in 2.7 as <code>viewitems()</code>. </p>\n\n<p>The operation <code>items()</code> will work for both 2 and 3, but in 2 it will return a list of the dictionary's <code>(key, value)</code> pairs, which will not reflect changes to the dict that happen after the <code>items()</code> call. If you want the 2.x behavior in 3.x, you can call <code>list(d.items())</code>.</p>\n"
    },
    "88": {
        "question_id": "9001509",
        "answer_id": "9001529",
        "question": "<p>What would be a nice way to go from <code>{2:3, 1:89, 4:5, 3:0}</code> to <code>{1:89, 2:3, 3:0, 4:5}</code>?<br>\nI checked some posts but they all use the \"sorted\" operator that returns tuples. </p>\n",
        "answer": "<p>Standard Python dictionaries are unordered. Even if you sorted the (key,value) pairs, you wouldn't be able to store them in a <code>dict</code> in a way that would preserve the ordering.</p>\n\n<p>The easiest way is to use <a href=\"http://docs.python.org/library/collections.html#collections.OrderedDict\"><code>OrderedDict</code></a>, which remembers the order in which the elements have been inserted:</p>\n\n<pre><code>In [1]: import collections\n\nIn [2]: d = {2:3, 1:89, 4:5, 3:0}\n\nIn [3]: od = collections.OrderedDict(sorted(d.items()))\n\nIn [4]: od\nOut[4]: OrderedDict([(1, 89), (2, 3), (3, 0), (4, 5)])\n</code></pre>\n\n<p>Never mind the way <code>od</code> is printed out; it'll work as expected:</p>\n\n<pre><code>In [11]: od[1]\nOut[11]: 89\n\nIn [12]: od[3]\nOut[12]: 0\n\nIn [13]: for k, v in od.iteritems(): print k, v\n   ....: \n1 89\n2 3\n3 0\n4 5\n</code></pre>\n\n<h2>Python 3</h2>\n\n<p>For Python 3 users, one needs to use the <code>.items()</code> instead of <code>.iteritems()</code>:</p>\n\n<pre><code>In [13]: for k, v in od.items(): print(k, v)\n   ....: \n1 89\n2 3\n3 0\n4 5\n</code></pre>\n"
    },
    "89": {
        "question_id": "31915018",
        "answer_id": "31915155",
        "question": "<p>The source string is:</p>\n\n<pre><code># Python 3.4.3\ns = r'abc123d, hello 3.1415926, this is my book'\n</code></pre>\n\n<p>and here is my pattern:</p>\n\n<pre><code>pattern = r'-?[0-9]+(\\\\.[0-9]*)?|-?\\\\.[0-9]+'\n</code></pre>\n\n<p>however, <code>re.search</code> can give me correct result:</p>\n\n<pre><code>m = re.search(pattern, s)\nprint(m)  # output: &lt;_sre.SRE_Match object; span=(3, 6), match='123'&gt;\n</code></pre>\n\n<p><code>re.findall</code> just dump out an empty list:</p>\n\n<pre><code>L = re.findall(pattern, s)\nprint(L)  # output: ['', '', '']\n</code></pre>\n\n<p>why can't <code>re.findall</code> give me the expected list:</p>\n\n<pre><code>['123', '3.1415926']\n</code></pre>\n",
        "answer": "<pre><code>s = r'abc123d, hello 3.1415926, this is my book'\nprint re.findall(r'-?[0-9]+(?:\\.[0-9]*)?|-?\\.[0-9]+',s)\n</code></pre>\n\n<p>You dont need to <code>escape</code> twice when you are using <code>raw mode</code>.</p>\n\n<p>Output:<code>['123', '3.1415926']</code></p>\n\n<p>Also the return type will be a list of <code>strings</code>.If you want return type as <code>integers</code> and <code>floats</code> use <code>map</code></p>\n\n<pre><code>import re,ast\ns = r'abc123d, hello 3.1415926, this is my book'\nprint map(ast.literal_eval,re.findall(r'-?[0-9]+(?:\\.[0-9]*)?|-?\\.[0-9]+',s))\n</code></pre>\n\n<p>Output: <code>[123, 3.1415926]</code></p>\n"
    },
    "90": {
        "question_id": "448271",
        "answer_id": "448279",
        "question": "<p>What is <code>__init__.py</code> for in a Python source directory?</p>\n",
        "answer": "<p>It used to be a required part of a package (<a href=\"https://docs.python.org/3/reference/import.html#regular-packages\" rel=\"noreferrer\">old, pre-3.3 \"regular package\"</a>, not <a href=\"https://docs.python.org/3/reference/import.html#namespace-packages\" rel=\"noreferrer\">newer 3.3+ \"namespace package\"</a>).</p>\n\n<p><a href=\"https://docs.python.org/3/reference/import.html#regular-packages\" rel=\"noreferrer\">Here's the documentation.</a></p>\n\n<blockquote>\n  <p>Python defines two types of packages, regular packages and namespace packages. Regular packages are traditional packages as they existed in Python 3.2 and earlier. A regular package is typically implemented as a directory containing an <code>__init__.py</code> file. When a regular package is imported, this <code>__init__.py</code> file is implicitly executed, and the objects it defines are bound to names in the package\u2019s namespace. The <code>__init__.py</code> file can contain the same Python code that any other module can contain, and Python will add some additional attributes to the module when it is imported.</p>\n</blockquote>\n\n<p>But just click the link, it contains an example, more information, and an explanation of namespace packages, the kind of packages without <code>__init__.py</code>.</p>\n"
    },
    "91": {
        "question_id": "5893163",
        "answer_id": "5893946",
        "question": "<p>What is the meaning of <code>_</code> after <code>for</code> in this code?</p>\n\n<pre><code>if tbh.bag:\n   n = 0\n   for _ in tbh.bag.atom_set():\n      n += 1\n</code></pre>\n",
        "answer": "<p><code>_</code> has 3 main conventional uses in Python:</p>\n\n<ol>\n<li>To hold the result of the last executed expression(/statement) in an interactive\ninterpreter session. This precedent was set by the standard CPython\ninterpreter, and other interpreters have followed suit</li>\n<li>For translation lookup in i18n (see the\n<a href=\"https://docs.python.org/3/library/gettext.html#localizing-your-module\" rel=\"nofollow noreferrer\">gettext</a>\ndocumentation for example), as in code like:\n<code>raise forms.ValidationError(_(\"Please enter a correct username\"))</code></li>\n<li>As a general purpose \"throwaway\" variable name to indicate that part\nof a function result is being deliberately ignored (Conceptually, it is being discarded.), as in code like:\n<code>label, has_label, _ = text.partition(':')</code></li>\n</ol>\n\n<p>The latter two purposes can conflict, so it is necessary to avoid using <code>_</code> as a throwaway variable in any code block that also uses it for i18n translation (many folks prefer a double-underscore, <code>__</code>, as their throwaway variable for exactly this reason).</p>\n"
    },
    "92": {
        "question_id": "2295290",
        "answer_id": "2295368",
        "question": "<p>Recently I started playing around with Python and I came around something peculiar in the way closures work. Consider the following code:</p>\n\n<pre><code>adders=[0,1,2,3]\n\nfor i in [0,1,2,3]:\n   adders[i]=lambda a: i+a\n\nprint adders[1](3)\n</code></pre>\n\n<p>It builds a simple array of functions that take a single input and return that input added by a number. The functions are constructed in <code>for</code> loop where the iterator <code>i</code> runs from <code>0</code> to <code>3</code>. For each of these numbers a <code>lambda</code> function is created which captures <code>i</code> and adds it to the function's input. The last line calls the second <code>lambda</code> function with <code>3</code> as a parameter. To my surprise the output was <code>6</code>.</p>\n\n<p>I expected a <code>4</code>. My reasoning was: in Python everything is an object and thus every variable is essential a pointer to it. When creating the <code>lambda</code> closures for <code>i</code>, I expected it to store a pointer to the integer object currently pointed to by <code>i</code>. That means that when <code>i</code> assigned a new integer object it shouldn't effect the previously created closures. Sadly, inspecting the <code>adders</code> array within a debugger shows that it does. All <code>lambda</code> functions refer to the last value of <code>i</code>, <code>3</code>, which results in <code>adders[1](3)</code> returning <code>6</code>.</p>\n\n<p>Which make me wonder about the following:</p>\n\n<ul>\n<li>What do the closures capture exactly?</li>\n<li>What is the most elegant way to convince the <code>lambda</code> functions to capture the current value of <code>i</code> in a way that will not be affected when <code>i</code> changes its value?</li>\n</ul>\n",
        "answer": "<p>Your second question has been answered, but as for your first:</p>\n\n<blockquote>\n  <p>what does the closure capture exactly?</p>\n</blockquote>\n\n<p>Scoping in Python is <strike>dynamic and</strike> lexical. A closure will always remember the name and scope of the variable, not the object it's pointing to. Since all the functions in your example are created in the same scope and use the same variable name, they always refer to the same variable.</p>\n\n<p><strong>EDIT:</strong> Regarding your other question of how to overcome this, there are two ways that come to mind:</p>\n\n<ol>\n<li><p>The most concise, but not strictly equivalent way is the <a href=\"https://stackoverflow.com/a/2295372/181765\">one recommended by Adrien Plisson</a>. Create a lambda with an extra argument, and set the extra argument's default value to the object you want preserved.</p></li>\n<li><p>A little more verbose but less hacky would be to create a new scope each time you create the lambda:</p>\n\n<pre><code>&gt;&gt;&gt; adders = [0,1,2,3]\n&gt;&gt;&gt; for i in [0,1,2,3]:\n...     adders[i] = (lambda b: lambda a: b + a)(i)\n...     \n&gt;&gt;&gt; adders[1](3)\n4\n&gt;&gt;&gt; adders[2](3)\n5\n</code></pre>\n\n<p>The scope here is created using a new function (a lambda, for brevity), which binds its argument, and passing the value you want to bind as the argument. In real code, though, you most likely will have an ordinary function instead of the lambda to create the new scope:</p>\n\n<pre><code>def createAdder(x):\n    return lambda y: y + x\nadders = [createAdder(i) for i in range(4)]\n</code></pre></li>\n</ol>\n"
    },
    "93": {
        "question_id": "3270680",
        "answer_id": "3270689",
        "question": "<p>The following snippet is annotated with the output (<a href=\"http://ideone.com/1z1r0\" rel=\"noreferrer\">as seen on ideone.com</a>):</p>\n\n<pre><code>print \"100\" &lt; \"2\"      # True\nprint \"5\" &gt; \"9\"        # False\n\nprint \"100\" &lt; 2        # False\nprint 100 &lt; \"2\"        # True\n\nprint 5 &gt; \"9\"          # False\nprint \"5\" &gt; 9          # True\n\nprint [] &gt; float('inf') # True\nprint () &gt; []          # True\n</code></pre>\n\n<p>Can someone explain why the output is as such?</p>\n\n<hr>\n\n<h3>Implementation details</h3>\n\n<ul>\n<li>Is this behavior mandated by the language spec, or is it up to implementors?</li>\n<li>Are there differences between any of the major Python implementations?</li>\n<li>Are there differences between versions of the Python language?</li>\n</ul>\n",
        "answer": "<p>From the <a href=\"http://docs.python.org/2/library/stdtypes.html#comparisons\" rel=\"nofollow noreferrer\">python 2 manual</a>:</p>\n\n<blockquote>\n  <p>CPython implementation detail: Objects of different types except numbers are ordered by their type names; objects of the same types that don\u2019t support proper comparison are ordered by their address.</p>\n</blockquote>\n\n<p>When you order two strings or two numeric types the ordering is done in the expected way (lexicographic ordering for string, numeric ordering for integers).</p>\n\n<p>When you order a numeric and a non-numeric type, the numeric type comes first.</p>\n\n<pre><code>&gt;&gt;&gt; 5 &lt; 'foo'\nTrue\n&gt;&gt;&gt; 5 &lt; (1, 2)\nTrue\n&gt;&gt;&gt; 5 &lt; {}\nTrue\n&gt;&gt;&gt; 5 &lt; [1, 2]\nTrue\n</code></pre>\n\n<p>When you order two incompatible types where neither is numeric, they are ordered by the alphabetical order of their typenames:</p>\n\n<pre><code>&gt;&gt;&gt; [1, 2] &gt; 'foo'   # 'list' &lt; 'str' \nFalse\n&gt;&gt;&gt; (1, 2) &gt; 'foo'   # 'tuple' &gt; 'str'\nTrue\n\n&gt;&gt;&gt; class Foo(object): pass\n&gt;&gt;&gt; class Bar(object): pass\n&gt;&gt;&gt; Bar() &lt; Foo()\nTrue\n</code></pre>\n\n<p>One exception is old-style classes that always come before new-style classes.</p>\n\n<pre><code>&gt;&gt;&gt; class Foo: pass           # old-style\n&gt;&gt;&gt; class Bar(object): pass   # new-style\n&gt;&gt;&gt; Bar() &lt; Foo()\nFalse\n</code></pre>\n\n<hr>\n\n<blockquote>\n  <p>Is this behavior mandated by the language spec, or is it up to implementors?</p>\n</blockquote>\n\n<p>There is <a href=\"https://stackoverflow.com/questions/1094961/is-there-a-python-language-specification\">no language specification</a>. The <a href=\"https://docs.python.org/2/reference/expressions.html#value-comparisons\" rel=\"nofollow noreferrer\">language reference</a> says:</p>\n\n<blockquote>\n  <p>Otherwise, objects of different types always compare unequal, and are ordered consistently but arbitrarily. </p>\n</blockquote>\n\n<p>So it is an implementation detail.</p>\n\n<blockquote>\n  <p>Are there differences between any of the major Python implementations?</p>\n</blockquote>\n\n<p>I can't answer this one because I have only used the official CPython implementation, but there are other implementations of Python such as PyPy.</p>\n\n<blockquote>\n  <p>Are there differences between versions of the Python language?</p>\n</blockquote>\n\n<p>In Python 3.x the behaviour has been changed so that attempting to order an integer and a string will raise an error:</p>\n\n<pre><code>&gt;&gt;&gt; '10' &gt; 5\nTraceback (most recent call last):\n  File \"&lt;pyshell#0&gt;\", line 1, in &lt;module&gt;\n    '10' &gt; 5\nTypeError: unorderable types: str() &gt; int()\n</code></pre>\n"
    },
    "94": {
        "question_id": "1247486",
        "answer_id": "1247490",
        "question": "<p>Is there a reason to prefer using <code>map()</code> over list comprehension or vice versa?  Is either of them generally more efficient or considered generally more pythonic than the other?</p>\n",
        "answer": "<p><code>map</code> may be microscopically faster in some cases (when you're NOT making a lambda for the purpose, but using the same function in map and a listcomp). List comprehensions may be faster in other cases and most (not all) pythonistas consider them more direct and clearer.</p>\n\n<p>An example of the tiny speed advantage of map when using exactly the same function:</p>\n\n<pre><code>$ python -mtimeit -s'xs=range(10)' 'map(hex, xs)'\n100000 loops, best of 3: 4.86 usec per loop\n$ python -mtimeit -s'xs=range(10)' '[hex(x) for x in xs]'\n100000 loops, best of 3: 5.58 usec per loop\n</code></pre>\n\n<p>An example of how performance comparison gets completely reversed when map needs a lambda:</p>\n\n<pre><code>$ python -mtimeit -s'xs=range(10)' 'map(lambda x: x+2, xs)'\n100000 loops, best of 3: 4.24 usec per loop\n$ python -mtimeit -s'xs=range(10)' '[x+2 for x in xs]'\n100000 loops, best of 3: 2.32 usec per loop\n</code></pre>\n"
    },
    "95": {
        "question_id": "375427",
        "answer_id": "4896288",
        "question": "<p>I'm using the <a href=\"http://docs.python.org/library/subprocess.html\" rel=\"noreferrer\">subprocess module</a> to start a subprocess and connect to it's output stream (stdout). I want to be able to execute non-blocking reads on its stdout. Is there a way to make .readline non-blocking or to check if there is data on the stream before I invoke <code>.readline</code>? I'd like this to be portable or at least work under Windows and Linux.</p>\n\n<p>here is how I do it for now (It's blocking on the <code>.readline</code> if no data is avaible):</p>\n\n<pre><code>p = subprocess.Popen('myprogram.exe', stdout = subprocess.PIPE)\noutput_str = p.stdout.readline()\n</code></pre>\n",
        "answer": "<p><a href=\"https://stackoverflow.com/questions/375427/non-blocking-read-on-a-stream-in-python/4025909#4025909\"><code>fcntl</code></a>, <a href=\"https://stackoverflow.com/questions/375427/non-blocking-read-on-a-stream-in-python/375511#375511\"><code>select</code></a>, <a href=\"https://stackoverflow.com/questions/375427/non-blocking-read-on-a-stream-in-python/437888#437888\"><code>asyncproc</code></a> won't help in this case.</p>\n\n<p>A reliable way to read a stream without blocking regardless of operating system is to use <a href=\"https://docs.python.org/3/library/queue.html#queue.Queue.get_nowait\" rel=\"noreferrer\"><code>Queue.get_nowait()</code></a>:</p>\n\n<pre><code>import sys\nfrom subprocess import PIPE, Popen\nfrom threading  import Thread\n\ntry:\n    from queue import Queue, Empty\nexcept ImportError:\n    from Queue import Queue, Empty  # python 2.x\n\nON_POSIX = 'posix' in sys.builtin_module_names\n\ndef enqueue_output(out, queue):\n    for line in iter(out.readline, b''):\n        queue.put(line)\n    out.close()\n\np = Popen(['myprogram.exe'], stdout=PIPE, bufsize=1, close_fds=ON_POSIX)\nq = Queue()\nt = Thread(target=enqueue_output, args=(p.stdout, q))\nt.daemon = True # thread dies with the program\nt.start()\n\n# ... do other things here\n\n# read line without blocking\ntry:  line = q.get_nowait() # or q.get(timeout=.1)\nexcept Empty:\n    print('no output yet')\nelse: # got line\n    # ... do something with line\n</code></pre>\n"
    },
    "96": {
        "question_id": "4915361",
        "answer_id": "4915366",
        "question": "<p>What is the difference between <code>raw_input()</code> and <code>input()</code> in python3.x ?</p>\n",
        "answer": "<p>The difference is that <code>raw_input()</code> does not exist in Python 3.x, while <code>input()</code> does.  Actually, the old <code>raw_input()</code> has been renamed to <code>input()</code>, and the old <code>input()</code> is gone, but can easily be simulated by using <code>eval(input())</code>.  (Remember that <code>eval()</code> is evil. try to use safer ways of parsing your input if possible.)</p>\n"
    },
    "97": {
        "question_id": "60208",
        "answer_id": "60211",
        "question": "<p>I want to write a function in Python that returns different fixed values based on the value of an input index.  </p>\n\n<p>In other languages I would use a <code>switch</code> or <code>case</code> statement, but Python does not appear to have a <code>switch</code> statement.  What are the recommended Python solutions in this scenario?</p>\n",
        "answer": "<p>You could use a dictionary:</p>\n\n<pre><code>def f(x):\n    return {\n        'a': 1,\n        'b': 2,\n    }[x]\n</code></pre>\n"
    },
    "98": {
        "question_id": "7961363",
        "answer_id": "7961390",
        "question": "<p>Pretty much I need to write a program to check if a list has any duplicates and if it does it removes them and returns a new list with the items that weren't duplicated/removed. This is what I have but to be honest I do not know what to do.</p>\n\n<pre><code>def remove_duplicates():\n    t = ['a', 'b', 'c', 'd']\n    t2 = ['a', 'c', 'd']\n    for t in t2:\n        t.append(t.remove())\n    return t\n</code></pre>\n",
        "answer": "<p>The common approach to get a unique collection of items is to use a <a href=\"http://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset\" rel=\"noreferrer\"><code>set</code></a>. Sets are <em>unordered</em> collections of <em>distinct</em> objects. To create a set from any iterable, you can simply pass it to the built-in <a href=\"http://docs.python.org/3/library/functions.html#func-set\" rel=\"noreferrer\"><code>set()</code></a> function. If you later need a real list again, you can similarly pass the set to the <a href=\"http://docs.python.org/3/library/functions.html#func-list\" rel=\"noreferrer\"><code>list()</code></a> function.</p>\n\n<p>The following example should cover whatever you are trying to do:</p>\n\n<pre><code>&gt;&gt;&gt; t = [1, 2, 3, 1, 2, 5, 6, 7, 8]\n&gt;&gt;&gt; t\n[1, 2, 3, 1, 2, 5, 6, 7, 8]\n&gt;&gt;&gt; list(set(t))\n[1, 2, 3, 5, 6, 7, 8]\n&gt;&gt;&gt; s = [1, 2, 3]\n&gt;&gt;&gt; list(set(t) - set(s))\n[8, 5, 6, 7]\n</code></pre>\n\n<p>As you can see from the example result, <em>the original order is not maintained</em>. As mentioned above, sets themselves are unordered collections, so the order is lost. When converting a set back to a list, an arbitrary order is created.</p>\n\n<h3>Maintaining order</h3>\n\n<p>If order is important to you, then you will have to use a different mechanism. A very common solution for this is to rely on <a href=\"https://docs.python.org/3/library/collections.html#collections.OrderedDict\" rel=\"noreferrer\"><code>OrderedDict</code></a> to keep the order of keys during insertion:</p>\n\n<pre><code>&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; list(OrderedDict.fromkeys(t))\n[1, 2, 3, 5, 6, 7, 8]\n</code></pre>\n\n<p><a href=\"https://mail.python.org/pipermail/python-dev/2017-December/151283.html\" rel=\"noreferrer\">Starting with Python 3.7</a>, the built-in dictionary is guaranteed to maintain the insertion order as well, so you can also use that directly if you are on Python 3.7 or later (or CPython 3.6):</p>\n\n<pre><code>&gt;&gt;&gt; list(dict.fromkeys(t))\n[1, 2, 3, 5, 6, 7, 8]\n</code></pre>\n\n<p>Note that this has the overhead of creating a dictionary first, and then creating a list from it. If you don\u2019t actually need to preserve the order, you\u2019re better off using a set. Check out <a href=\"https://stackoverflow.com/q/480214/216074\">this question</a> for more details and alternative ways to preserve the order when removing duplicates.</p>\n\n<hr>\n\n<p>Finally note that both the <code>set</code> as well as the <code>OrderedDict</code>/<code>dict</code> solutions require your items to be <em>hashable</em>. This usually means that they have to be immutable. If you have to deal with items that are not hashable (e.g. list objects), then you will have to use a slow approach in which you will basically have to compare every item with every other item in a nested loop.</p>\n"
    },
    "99": {
        "question_id": "2835559",
        "answer_id": "2835672",
        "question": "<p>I have this JSON in a file:</p>\n\n<pre class=\"lang-json prettyprint-override\"><code>{\n    \"maps\": [\n        {\n            \"id\": \"blabla\",\n            \"iscategorical\": \"0\"\n        },\n        {\n            \"id\": \"blabla\",\n            \"iscategorical\": \"0\"\n        }\n    ],\n    \"masks\": [\n        \"id\": \"valore\"\n    ],\n    \"om_points\": \"value\",\n    \"parameters\": [\n        \"id\": \"valore\"\n    ]\n}\n</code></pre>\n\n<p>I wrote this script to print all of the JSON data:</p>\n\n<pre><code>import json\nfrom pprint import pprint\n\nwith open('data.json') as f:\n    data = json.load(f)\n\npprint(data)\n</code></pre>\n\n<p>This program raises an exception, though:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Traceback (most recent call last):\n  File \"&lt;pyshell#1&gt;\", line 5, in &lt;module&gt;\n    data = json.load(f)\n  File \"/usr/lib/python3.5/json/__init__.py\", line 319, in loads\n    return _default_decoder.decode(s)\n  File \"/usr/lib/python3.5/json/decoder.py\", line 339, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/usr/lib/python3.5/json/decoder.py\", line 355, in raw_decode\n    obj, end = self.scan_once(s, idx)\njson.decoder.JSONDecodeError: Expecting ',' delimiter: line 13 column 13 (char 213)\n</code></pre>\n\n<p>How can I parse the JSON and extract its values?</p>\n",
        "answer": "<p>Your data is not valid <a href=\"https://www.json.org/\" rel=\"noreferrer\">JSON</a> format. You have <code>[]</code> when you should have <code>{}</code>:</p>\n\n<ul>\n<li><code>[]</code> are for JSON arrays, which are called <code>list</code> in Python</li>\n<li><code>{}</code> are for JSON objects, which are called <code>dict</code> in Python</li>\n</ul>\n\n<p>Here's how your JSON file should look:</p>\n\n<pre><code>{\n    \"maps\": [\n        {\n            \"id\": \"blabla\",\n            \"iscategorical\": \"0\"\n        },\n        {\n            \"id\": \"blabla\",\n            \"iscategorical\": \"0\"\n        }\n    ],\n    \"masks\": {\n        \"id\": \"valore\"\n    },\n    \"om_points\": \"value\",\n    \"parameters\": {\n        \"id\": \"valore\"\n    }\n}\n</code></pre>\n\n<p>Then you can use your code:</p>\n\n<pre><code>import json\nfrom pprint import pprint\n\nwith open('data.json') as f:\n    data = json.load(f)\n\npprint(data)\n</code></pre>\n\n<p>With data, you can now also find values like so:</p>\n\n<pre><code>data[\"maps\"][0][\"id\"]\ndata[\"masks\"][\"id\"]\ndata[\"om_points\"]\n</code></pre>\n\n<p>Try those out and see if it starts to make sense.</p>\n"
    },
    "100": {
        "question_id": "54867",
        "answer_id": "54873",
        "question": "<p>What is the difference between old style and new style classes in Python?  When should I use one or the other?</p>\n",
        "answer": "<p>From <a href=\"http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes\" rel=\"noreferrer\">http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes</a> :</p>\n\n<blockquote>\n  <p><strong>Up to Python 2.1, old-style classes were the only flavour available to the user.</strong></p>\n  \n  <p>The concept of (old-style) class is unrelated to the concept of type:\n  if <code>x</code> is an instance of an old-style class, then <code>x.__class__</code>\n  designates the class of <code>x</code>, but <code>type(x)</code> is always <code>&lt;type\n  'instance'&gt;</code>. </p>\n  \n  <p>This reflects the fact that all old-style instances, independently of\n  their class, are implemented with a single built-in type, called\n  instance.</p>\n  \n  <p><strong>New-style classes were introduced in Python 2.2 to unify the concepts of class and type</strong>. \n  A new-style class is simply a user-defined type, no more, no less.</p>\n  \n  <p>If x is an instance of a new-style class, then <code>type(x)</code> is typically\n  the same as <code>x.__class__</code> (although this is not guaranteed \u2013 a\n  new-style class instance is permitted to override the value returned\n  for <code>x.__class__</code>).</p>\n  \n  <p><strong>The major motivation for introducing new-style classes is to provide a unified object model with a full meta-model</strong>. </p>\n  \n  <p>It also has a number of immediate benefits, like the ability to\n  subclass most built-in types, or the introduction of \"descriptors\",\n  which enable computed properties.</p>\n  \n  <p><strong>For compatibility reasons, classes are still old-style by default</strong>. </p>\n  \n  <p>New-style classes are created by specifying another new-style class\n  (i.e. a type) as a parent class, or the \"top-level type\" object if no\n  other parent is needed. </p>\n  \n  <p>The behaviour of new-style classes differs from that of old-style\n  classes in a number of important details in addition to what type\n  returns. </p>\n  \n  <p>Some of these changes are fundamental to the new object model, like\n  the way special methods are invoked. Others are \"fixes\" that could not\n  be implemented before for compatibility concerns, like the method\n  resolution order in case of multiple inheritance.</p>\n  \n  <p><strong>Python 3 only has new-style classes</strong>. </p>\n  \n  <p>No matter if you subclass from <code>object</code> or not, classes are new-style\n  in Python 3.</p>\n</blockquote>\n"
    },
    "101": {
        "question_id": "5082452",
        "answer_id": "5082482",
        "question": "<p>Python 2.6 introduced the <a href=\"https://docs.python.org/2/library/stdtypes.html#str.format\" rel=\"noreferrer\"><code>str.format()</code></a> method with a slightly different syntax from the existing <code>%</code> operator. Which is better and for what situations?</p>\n\n<ol>\n<li><p>The following uses each method and has the same outcome, so what is the difference?</p>\n\n<pre><code>#!/usr/bin/python\nsub1 = \"python string!\"\nsub2 = \"an arg\"\n\na = \"i am a %s\" % sub1\nb = \"i am a {0}\".format(sub1)\n\nc = \"with %(kwarg)s!\" % {'kwarg':sub2}\nd = \"with {kwarg}!\".format(kwarg=sub2)\n\nprint a    # \"i am a python string!\"\nprint b    # \"i am a python string!\"\nprint c    # \"with an arg!\"\nprint d    # \"with an arg!\"\n</code></pre></li>\n<li><p>Furthermore when does string formatting occur in Python? For example, if my logging level is set to HIGH will I still take a hit for performing the following <code>%</code> operation? And if so, is there a way to avoid this?</p>\n\n<pre><code>log.debug(\"some debug info: %s\" % some_info)\n</code></pre></li>\n</ol>\n",
        "answer": "<p>To answer your first question... <code>.format</code> just seems more sophisticated in many ways. An annoying thing about <code>%</code> is also how it can either take a variable or a tuple. You'd think the following would always work:</p>\n\n<pre><code>\"hi there %s\" % name\n</code></pre>\n\n<p>yet, if <code>name</code> happens to be <code>(1, 2, 3)</code>, it will throw a <code>TypeError</code>. To guarantee that it always prints, you'd need to do</p>\n\n<pre><code>\"hi there %s\" % (name,)   # supply the single argument as a single-item tuple\n</code></pre>\n\n<p>which is just ugly. <code>.format</code> doesn't have those issues. Also in the second example you gave, the <code>.format</code> example is much cleaner looking.</p>\n\n<p>Why would you not use it? </p>\n\n<ul>\n<li>not knowing about it (me before reading this)</li>\n<li>having to be compatible with Python 2.5</li>\n</ul>\n\n<hr>\n\n<p>To answer your second question, string formatting happens at the same time as any other operation - when the string formatting expression is evaluated. And Python, not being a lazy language, evaluates expressions before calling functions, so in your <code>log.debug</code> example, the expression <code>\"some debug info: %s\"%some_info</code>will first evaluate to, e.g. <code>\"some debug info: roflcopters are active\"</code>, then that string will be passed to <code>log.debug()</code>. </p>\n"
    },
    "102": {
        "question_id": "9942594",
        "answer_id": "9942822",
        "question": "<p>I'm having problems dealing with unicode characters from text fetched from different web pages (on different sites). I am using BeautifulSoup. </p>\n\n<p>The problem is that the error is not always reproducible; it sometimes works with some pages, and sometimes, it barfs by throwing a <code>UnicodeEncodeError</code>. I have tried just about everything I can think of, and yet I have not found anything that works consistently without throwing some kind of Unicode-related error.</p>\n\n<p>One of the sections of code that is causing problems is shown below:</p>\n\n<pre><code>agent_telno = agent.find('div', 'agent_contact_number')\nagent_telno = '' if agent_telno is None else agent_telno.contents[0]\np.agent_info = str(agent_contact + ' ' + agent_telno).strip()\n</code></pre>\n\n<p>Here is a stack trace produced on SOME strings when the snippet above is run:</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"foobar.py\", line 792, in &lt;module&gt;\n    p.agent_info = str(agent_contact + ' ' + agent_telno).strip()\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\xa0' in position 20: ordinal not in range(128)\n</code></pre>\n\n<p>I suspect that this is because some pages (or more specifically, pages from some of the sites) may be encoded, whilst others may be unencoded. All the sites are based in the UK and provide data meant for UK consumption - so there are no issues relating to internalization or dealing with text written in anything other than English.</p>\n\n<p>Does anyone have any ideas as to how to solve this so that I can CONSISTENTLY fix this problem?</p>\n",
        "answer": "<p>You need to read the Python <a href=\"https://docs.python.org/2.7/howto/unicode.html\" rel=\"noreferrer\">Unicode HOWTO</a>. This error is the <a href=\"https://docs.python.org/2.7/howto/unicode.html#the-unicode-type\" rel=\"noreferrer\">very first example</a>.</p>\n\n<p>Basically, stop using <code>str</code> to convert from unicode to encoded text / bytes.</p>\n\n<p>Instead, properly use <a href=\"http://docs.python.org/library/stdtypes.html#str.encode\" rel=\"noreferrer\"><code>.encode()</code></a> to encode the string:</p>\n\n<pre><code>p.agent_info = u' '.join((agent_contact, agent_telno)).encode('utf-8').strip()\n</code></pre>\n\n<p>or work entirely in unicode.</p>\n"
    },
    "103": {
        "question_id": "464864",
        "answer_id": "464882",
        "question": "<p>I have a list with 15 numbers in, and I need to write some code that produces all 32,768 combinations of those numbers. </p>\n\n<p>I've found <a href=\"http://desk.stinkpot.org:8080/tricks/index.php/2008/04/get-all-possible-combinations-of-a-lists-elements-in-python/\" rel=\"noreferrer\">some code</a> (by Googling) that apparently does what I'm looking for, but I found the code fairly opaque and am wary of using it. Plus I have a feeling there must be a more elegant solution.</p>\n\n<p>The only thing that occurs to me would be to just loop through the decimal integers 1\u201332768 and convert those to binary, and use the binary representation as a filter to pick out the appropriate numbers. </p>\n\n<p>Does anyone know of a better way? Using <code>map()</code>, maybe?</p>\n",
        "answer": "<p>Have a look at <a href=\"http://docs.python.org/library/itertools.html#itertools.combinations\" rel=\"noreferrer\">itertools.combinations</a>:</p>\n\n<blockquote>\n<pre><code>itertools.combinations(iterable, r)\n</code></pre>\n  \n  <p>Return r length subsequences of elements from\n  the input iterable.</p>\n  \n  <p>Combinations are emitted in lexicographic sort order. So, if the\n  input iterable is sorted, the\n  combination tuples will be produced in\n  sorted order.</p>\n</blockquote>\n\n<p>Since 2.6, batteries are included!</p>\n"
    },
    "104": {
        "question_id": "5419",
        "answer_id": "5430",
        "question": "<p>When I try to print a Unicode string in a Windows console, I get a <code>UnicodeEncodeError: 'charmap' codec can't encode character ....</code> error.  I assume this is because the Windows console does not accept Unicode-only characters. What's the best way around this? Is there any way I can make Python automatically print a <code>?</code> instead of failing in this situation?</p>\n\n<p><strong>Edit:</strong>  I'm using Python 2.5.</p>\n\n<hr>\n\n<p><strong>Note:</strong> @LasseV.Karlsen answer with the checkmark is sort of outdated (from 2008). Please use the solutions/answers/suggestions below with care!!</p>\n\n<p><a href=\"https://stackoverflow.com/a/32176732/610569\">@JFSebastian answer</a> is more relevant as of today (6 Jan 2016).</p>\n",
        "answer": "<p><strong>Note:</strong> This answer is sort of outdated (from 2008). Please use the solution below with care!!</p>\n\n<hr>\n\n<p>Here is a page that details the problem and a solution (search the page for the text <em>Wrapping sys.stdout into an instance</em>):</p>\n\n<p><a href=\"http://wiki.python.org/moin/PrintFails\" rel=\"noreferrer\">PrintFails - Python Wiki</a></p>\n\n<p>Here's a code excerpt from that page:</p>\n\n<pre><code>$ python -c 'import sys, codecs, locale; print sys.stdout.encoding; \\\n    sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout); \\\n    line = u\"\\u0411\\n\"; print type(line), len(line); \\\n    sys.stdout.write(line); print line'\n  UTF-8\n  &lt;type 'unicode'&gt; 2\n  \u0411\n  \u0411\n\n  $ python -c 'import sys, codecs, locale; print sys.stdout.encoding; \\\n    sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout); \\\n    line = u\"\\u0411\\n\"; print type(line), len(line); \\\n    sys.stdout.write(line); print line' | cat\n  None\n  &lt;type 'unicode'&gt; 2\n  \u0411\n  \u0411\n</code></pre>\n\n<p>There's some more information on that page, well worth a read.</p>\n"
    },
    "105": {
        "question_id": "2846653",
        "answer_id": "28463266",
        "question": "<p>I am trying to understand threading in Python. I've looked at the documentation and examples, but quite frankly, many examples are overly sophisticated and I'm having trouble understanding them.</p>\n\n<p>How do you clearly show tasks being divided for multi-threading?</p>\n",
        "answer": "<p>Since this question was asked in 2010, there has been real simplification in how to do simple multithreading with python with <strong><a href=\"https://docs.python.org/2/library/functions.html#map\" rel=\"noreferrer\">map</a></strong> and <strong><a href=\"https://docs.python.org/2/library/multiprocessing.html\" rel=\"noreferrer\">pool</a></strong>.</p>\n\n<p>The code below comes from an article/blog post that you should definitely check out (no affiliation) - <strong><a href=\"https://chriskiehl.com/article/parallelism-in-one-line\" rel=\"noreferrer\">Parallelism in one line:\nA Better Model for Day to Day Threading Tasks</a></strong>.  I'll summarize below - it ends up being just a few lines of code:</p>\n\n<pre><code>from multiprocessing.dummy import Pool as ThreadPool \npool = ThreadPool(4) \nresults = pool.map(my_function, my_array)\n</code></pre>\n\n<p>Which is the multithreaded version of:</p>\n\n<pre><code>results = []\nfor item in my_array:\n    results.append(my_function(item))\n</code></pre>\n\n<hr>\n\n<p><strong>Description</strong></p>\n\n<blockquote>\n  <p>Map is a cool little function, and the key to easily injecting parallelism into your Python code. For those unfamiliar, map is something lifted from functional languages like Lisp. It is a function which maps another function over a sequence.</p>\n  \n  <p>Map handles the iteration over the sequence for us, applies the function, and stores all of the results in a handy list at the end.</p>\n</blockquote>\n\n<p><img src=\"https://i.stack.imgur.com/Yq37m.png\" alt=\"enter image description here\"></p>\n\n<hr>\n\n<p><strong>Implementation</strong></p>\n\n<blockquote>\n  <p>Parallel versions of the map function are provided by two libraries:multiprocessing, and also its little known, but equally fantastic step child:multiprocessing.dummy.</p>\n</blockquote>\n\n<p><code>multiprocessing.dummy</code> is exactly the same as multiprocessing module, <a href=\"https://docs.python.org/2/library/multiprocessing.html#module-multiprocessing.dummy\" rel=\"noreferrer\">but uses threads instead</a> (<em><a href=\"https://medium.com/@bfortuner/python-multithreading-vs-multiprocessing-73072ce5600b\" rel=\"noreferrer\">an important distinction</a> - use multiple processes for CPU-intensive tasks; threads for (and during) IO</em>):</p>\n\n<blockquote>\n  <p>multiprocessing.dummy replicates the API of multiprocessing but is no more than a wrapper around the threading module.</p>\n</blockquote>\n\n<pre><code>import urllib2 \nfrom multiprocessing.dummy import Pool as ThreadPool \n\nurls = [\n  'http://www.python.org', \n  'http://www.python.org/about/',\n  'http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html',\n  'http://www.python.org/doc/',\n  'http://www.python.org/download/',\n  'http://www.python.org/getit/',\n  'http://www.python.org/community/',\n  'https://wiki.python.org/moin/',\n]\n\n# make the Pool of workers\npool = ThreadPool(4) \n\n# open the urls in their own threads\n# and return the results\nresults = pool.map(urllib2.urlopen, urls)\n\n# close the pool and wait for the work to finish \npool.close() \npool.join() \n</code></pre>\n\n<p>And the timing results:</p>\n\n<pre><code>Single thread:   14.4 seconds\n       4 Pool:   3.1 seconds\n       8 Pool:   1.4 seconds\n      13 Pool:   1.3 seconds\n</code></pre>\n\n<hr>\n\n<p><strong>Passing multiple arguments</strong> (works like this <a href=\"https://stackoverflow.com/a/28975239/2327328\">only in Python 3.3 and later</a>):</p>\n\n<p>To pass multiple arrays:</p>\n\n<pre><code>results = pool.starmap(function, zip(list_a, list_b))\n</code></pre>\n\n<p>or to pass a constant and an array:</p>\n\n<pre><code>results = pool.starmap(function, zip(itertools.repeat(constant), list_a))\n</code></pre>\n\n<p>If you are using an earlier version of Python, you can pass multiple arguments via <a href=\"https://stackoverflow.com/a/5443941/1893275\">this workaround</a>.</p>\n\n<p>(Thanks to <a href=\"https://stackoverflow.com/users/2441026/user136036\">user136036</a> for the helpful comment)</p>\n"
    },
    "106": {
        "question_id": "510357",
        "answer_id": "510364",
        "question": "<p>Is there a way of reading one single character from the user input? For instance, they press one key at the terminal and it is returned (sort of like <code>getch()</code>). I know there's a function in Windows for it, but I'd like something that is cross-platform.</p>\n",
        "answer": "<p>Here's a link to a site that says how you can read a single character in Windows, Linux and OSX: <a href=\"http://code.activestate.com/recipes/134892/\" rel=\"noreferrer\">http://code.activestate.com/recipes/134892/</a></p>\n\n<pre><code>class _Getch:\n    \"\"\"Gets a single character from standard input.  Does not echo to the\nscreen.\"\"\"\n    def __init__(self):\n        try:\n            self.impl = _GetchWindows()\n        except ImportError:\n            self.impl = _GetchUnix()\n\n    def __call__(self): return self.impl()\n\n\nclass _GetchUnix:\n    def __init__(self):\n        import tty, sys\n\n    def __call__(self):\n        import sys, tty, termios\n        fd = sys.stdin.fileno()\n        old_settings = termios.tcgetattr(fd)\n        try:\n            tty.setraw(sys.stdin.fileno())\n            ch = sys.stdin.read(1)\n        finally:\n            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)\n        return ch\n\n\nclass _GetchWindows:\n    def __init__(self):\n        import msvcrt\n\n    def __call__(self):\n        import msvcrt\n        return msvcrt.getch()\n\n\ngetch = _Getch()\n</code></pre>\n"
    },
    "107": {
        "question_id": "72899",
        "answer_id": "73050",
        "question": "<p>I have a list of dictionaries and want each item to be sorted by a specific property values.</p>\n\n<p>Take into consideration the array below,</p>\n\n<pre><code>[{'name':'Homer', 'age':39}, {'name':'Bart', 'age':10}]\n</code></pre>\n\n<p>When sorted by <code>name</code>, should become</p>\n\n<pre><code>[{'name':'Bart', 'age':10}, {'name':'Homer', 'age':39}]\n</code></pre>\n",
        "answer": "<p>It may look cleaner using a key instead a cmp:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>newlist = sorted(list_to_be_sorted, key=lambda k: k['name']) \n</code></pre>\n\n<p>or as J.F.Sebastian and others suggested,</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>from operator import itemgetter\nnewlist = sorted(list_to_be_sorted, key=itemgetter('name')) \n</code></pre>\n\n<p>For completeness (as pointed out in comments by fitzgeraldsteele), add <code>reverse=True</code> to sort descending</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>newlist = sorted(l, key=itemgetter('name'), reverse=True)\n</code></pre>\n"
    },
    "108": {
        "question_id": "72852",
        "answer_id": "73149",
        "question": "<p>Imagine this directory structure:</p>\n\n<pre><code>app/\n   __init__.py\n   sub1/\n      __init__.py\n      mod1.py\n   sub2/\n      __init__.py\n      mod2.py\n</code></pre>\n\n<p>I'm coding <code>mod1</code>, and I need to import something from <code>mod2</code>. How should I do it?  </p>\n\n<p>I tried <code>from ..sub2 import mod2</code> but I'm getting an \"Attempted relative import in non-package\".</p>\n\n<p>I googled around but found only \"<code>sys.path</code> manipulation\" hacks. Isn't there a clean way?  </p>\n\n<hr>\n\n<p>Edit: all my <code>__init__.py</code>'s are currently empty  </p>\n\n<p>Edit2: I'm trying to do this because sub2 contains classes that are shared across sub packages (<code>sub1</code>, <code>subX</code>, etc.).</p>\n\n<p>Edit3: The behaviour I'm looking for is the same as described in <a href=\"http://www.python.org/dev/peps/pep-0366/\" rel=\"noreferrer\">PEP 366</a> (thanks John B)</p>\n",
        "answer": "<p>Everyone seems to want to tell you what you should be doing rather than just answering the question.</p>\n\n<p>The problem is that you're running the module as '__main__' by passing the mod1.py as an argument to the interpreter.</p>\n\n<p>From <a href=\"http://www.python.org/dev/peps/pep-0328/\" rel=\"noreferrer\">PEP 328</a>:</p>\n\n<blockquote>\n  <p>Relative imports use a module's __name__ attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to '__main__') then relative imports are resolved as if the module were a top level module, regardless of where the module is actually located on the file system.</p>\n</blockquote>\n\n<p>In Python 2.6, they're adding the ability to reference modules relative to the main module.  <a href=\"http://python.org/dev/peps/pep-0366/\" rel=\"noreferrer\">PEP 366</a> describes the change.</p>\n\n<p><strong>Update</strong>: According to Nick Coghlan, the recommended alternative is to run the module inside the package using the -m switch.</p>\n"
    },
    "109": {
        "question_id": "47155569",
        "answer_id": "47157281",
        "question": "<p>A colleague of mine handed me a script that is used to collect data from a database and plot it. When I used the script myself, the plots do not look the same, and it has to do with the version of Matplotlib.</p>\n\n<p>The script that does the plotting of the data is quite short:</p>\n\n<pre><code>import matplotlib.pyplot as plt\nimport csv\nimport os\nfrom dateutil import parser\n\ndef plot(outputDir,plotsDir,FS):\n    allfiles = os.listdir(outputDir)\n    flist = []\n    for f in allfiles:\n        if 'csv' in f.lower(): flist.append(f)\n    for f in flist:\n        with open(outputDir + '/' + f, 'rt') as ff:\n            data = list(csv.reader(ff,delimiter=FS))\n        values = [i[2] for i in data[1::]]\n        values = ['NaN' if v is '' else v for v in values]\n        time = [parser.parse(i[1]) for i in data[1::]]\n        plt.xlabel('Time_[UTC]')\n        plt.plot(time, values)\n        plt.xticks(rotation=40)\n        if os.path.isdir(plotsDir) != 1:\n            os.mkdir(plotsDir, 777)\n        plt.savefig('{}/{}_Data.png'.format(plotsDir, f[:-4]), bbox_inches='tight', dpi=160)\n        plt.clf()\n\n\noutputdir = 'C:/Users/matthijsk/Documents/Test'\nplotsdir = outputdir + '/plots'\nfs = ','\nplot(outputdir, plotsdir, fs)\n</code></pre>\n\n<p>When I run it using Matplotlib version 2.1.0, my image looks like this:\n<a href=\"https://i.stack.imgur.com/6ce55.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/6ce55.png\" alt=\"Matplotlib version 2.1.0\"></a>\nWhen I run it using Matplotlib version 2.0.2, it looks the way it is supposed to:\n<a href=\"https://i.stack.imgur.com/X8421.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/X8421.png\" alt=\"Matplotlib version 2.0.2\"></a></p>\n\n<p>The file the script is reading looks like this:</p>\n\n<pre><code>stationNo,dtg(UTC),TT_[\u00b0C],source_TT,quality_TT\n10381,2017-01-01 00:00:00,3.0,ob,na\n10381,2017-01-01 01:00:00,3.0,ob,na\n10381,2017-01-01 02:00:00,2.4,ob,na\n10381,2017-01-01 03:00:00,2.5,ob,na\n10381,2017-01-01 04:00:00,2.5,ob,na\n10381,2017-01-01 05:00:00,2.3,ob,na\n10381,2017-01-01 06:00:00,1.9,ob,na\n10381,2017-01-01 07:00:00,1.0,ob,na\n10381,2017-01-01 08:00:00,0.1,ob,na\n10381,2017-01-01 09:00:00,0.9,ob,na\n</code></pre>\n\n<p>Can anyone explain me what was changed in Matplotlib that caused this? And apparently I'm doing something wrong with the plotting that is causing this. Can anyone notice a mistake?\nI've already tried using</p>\n\n<pre><code>values = [float(value) if value.isnumeric() else None for value in values]\n</code></pre>\n\n<p>But that didn't solve it.\nNote: I'd rather not use any non-standard packages (like Pandas) since it's quite a hassle to get approvement to install such packages.</p>\n",
        "answer": "<p>The data is read in as strings. In matplotlib 2.0 those were automatically converted to floating point numbers such that they can be plotted.</p>\n\n<p>In matplotlib 2.1, <a href=\"https://matplotlib.org/users/prev_whats_new/whats_new_2.1.0.html\" rel=\"nofollow noreferrer\">categorical plots have been introduced</a>. This now allows for something like</p>\n\n<pre><code>plt.plot([\"apple\", \"banana\", \"cherry\"], [2,1,3])\n</code></pre>\n\n<p>While this is of course great for certain applications, it breaks the previous option of plotting strings that are convertable to floats. I guess this if fine, it just gives the user the responsibility to do the conversion himself.</p>\n\n<p>In this case you would want to do this conversion like</p>\n\n<pre><code>values = [None if v is '' else float(v) for v in values]\n</code></pre>\n\n<p>In case you already have a numpy array: <code>np.array(values).astype(float)</code></p>\n\n<p>In general, one can use <code>numpy.loadtxt</code> to read files into float arrays. If the file contains dates, usage of a converter as in <a href=\"https://stackoverflow.com/questions/20625774/reading-a-comma-delimited-file-with-a-date-object-and-a-float-with-python\">reading a comma-delimited file with a date object and a float with Python</a> would be possible. </p>\n\n<p>Another option to read in text files would be <code>pandas.read_csv</code>.</p>\n"
    },
    "110": {
        "question_id": "4789837",
        "answer_id": "4791612",
        "question": "<p>I'm launching a subprocess with the following command:</p>\n\n<pre><code>p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)\n</code></pre>\n\n<p>However, when I try to kill using:</p>\n\n<pre><code>p.terminate()\n</code></pre>\n\n<p>or </p>\n\n<pre><code>p.kill()\n</code></pre>\n\n<p>The command keeps running in the background, so I was wondering how can I actually terminate the process. </p>\n\n<p>Note that when I run the command with:</p>\n\n<pre><code>p = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE)\n</code></pre>\n\n<p>It does terminate successfully when issuing the <code>p.terminate()</code>.</p>\n",
        "answer": "<p>Use a <a href=\"http://en.wikipedia.org/wiki/Process_group\" rel=\"noreferrer\">process group</a> so as to enable sending a signal to all the process in the groups. For that, you should attach a <a href=\"http://pubs.opengroup.org/onlinepubs/009695399/functions/setsid.html\" rel=\"noreferrer\">session id</a> to the parent process of the spawned/child processes, which is a shell in your case. This will make it the group leader of the processes. So now, when a signal is sent to the process group leader, it's transmitted to all of the child processes of this group.</p>\n\n<p>Here's the code:</p>\n\n<pre><code>import os\nimport signal\nimport subprocess\n\n# The os.setsid() is passed in the argument preexec_fn so\n# it's run after the fork() and before  exec() to run the shell.\npro = subprocess.Popen(cmd, stdout=subprocess.PIPE, \n                       shell=True, preexec_fn=os.setsid) \n\nos.killpg(os.getpgid(pro.pid), signal.SIGTERM)  # Send the signal to all the process groups\n</code></pre>\n"
    },
    "111": {
        "question_id": "252703",
        "answer_id": "252711",
        "question": "<p>What's the difference between the list methods <code>append()</code> and <code>extend()</code>?</p>\n",
        "answer": "<p><a href=\"https://docs.python.org/2/library/array.html?#array.array.append\" rel=\"noreferrer\"><code>append</code></a>: Appends object at the end.</p>\n\n<pre><code>x = [1, 2, 3]\nx.append([4, 5])\nprint (x)\n</code></pre>\n\n<p>gives you: <code>[1, 2, 3, [4, 5]]</code></p>\n\n<hr>\n\n<p><a href=\"https://docs.python.org/2/library/array.html?#array.array.extend\" rel=\"noreferrer\"><code>extend</code></a>: Extends list by appending elements from the iterable.</p>\n\n<pre><code>x = [1, 2, 3]\nx.extend([4, 5])\nprint (x)\n</code></pre>\n\n<p>gives you: <code>[1, 2, 3, 4, 5]</code></p>\n"
    },
    "112": {
        "question_id": "4383571",
        "answer_id": "4383597",
        "question": "<p>I have the following folder structure.</p>\n\n<p><code>application/app/folder/file.py</code></p>\n\n<p>and I want to import some functions from <strong><em>file.py</em></strong> in another Python file which resides in</p>\n\n<p><code>application/app2/some_folder/some_file.py</code></p>\n\n<p>I've tried</p>\n\n<p><code>from application.app.folder.file import func_name</code></p>\n\n<p>and some other various attempts but so far I couldn't manage to import properly. How can I do this?</p>\n",
        "answer": "<p>By default, you can't. When importing a file, Python only searches the current directory, the directory that the entry-point script is running from, and <code>sys.path</code> which includes locations such as the package installation directory (it's actually a little more complex than this, but this covers most cases).</p>\n\n<p>However, you can add to the Python path at runtime:</p>\n\n<pre><code># some_file.py\nimport sys\nsys.path.insert(0, '/path/to/application/app/folder')\n\nimport file\n</code></pre>\n"
    },
    "113": {
        "question_id": "931092",
        "answer_id": "931095",
        "question": "<p>There is no built in <code>reverse</code> function for Python's <code>str</code> object. What is the best way of implementing this method?</p>\n\n<p>If supplying a very concise answer, please elaborate on its efficiency. For example, whether the <code>str</code> object is converted to a different object, etc. </p>\n",
        "answer": "<p>How about:</p>\n\n<pre><code>&gt;&gt;&gt; 'hello world'[::-1]\n'dlrow olleh'\n</code></pre>\n\n<p>This is <a href=\"http://docs.python.org/2/whatsnew/2.3.html#extended-slices\" rel=\"noreferrer\">extended slice</a> syntax. It works by doing <code>[begin:end:step]</code> - by leaving begin and end off and specifying a step of -1, it reverses a string.</p>\n"
    },
    "114": {
        "question_id": "6260089",
        "answer_id": "6260097",
        "question": "<p>I've got this piece of code :</p>\n\n<pre><code>numbers = range(1, 50)\n\nfor i in numbers:\n    if i &lt; 20:\n        numbers.remove(i)\n\nprint(numbers)\n</code></pre>\n\n<p>but the result I'm getting is: </p>\n\n<blockquote>\n  <p>[2, 4, 6, 8, 10, 12, 14, 16, 18, 20,\n  21, 22, 23, 24, 25, 26, 27, 28, 29,\n  30, 31, 32, 33, 34, 35, 36, 37, 38,\n  39, 40, 41, 42, 43, 44, 45, 46, 47,\n  48, 49]</p>\n</blockquote>\n\n<p>Of course I'm expecting the numbers below 20 to not appear in the results, I'm assuming I'm doing something wrong with the remove.</p>\n",
        "answer": "<p>You're modifying the list while you iterate over it. That means that the first time through the loop, <code>i == 1</code>, so 1 is removed from the list. Then the <code>for</code> loop goes to the second item in the list, which is not 2, but 3! Then that's removed from the list, and then the <code>for</code> loop goes on to the third item in the list, which is now 5. And so on. Perhaps it's easier to visualize like so, with a ^ pointing to the value of <code>i</code>:</p>\n\n<pre><code>[1, 2, 3, 4, 5, 6...]\n ^\n</code></pre>\n\n<p>That's the state of the list initially; then 1 is removed and the loop goes to the second item in the list:</p>\n\n<pre><code>[2, 3, 4, 5, 6...]\n    ^\n[2, 4, 5, 6...]\n       ^\n</code></pre>\n\n<p>And so on. </p>\n\n<p>There's no good way to alter a list's length while iterating over it. The best you can do is something like this:</p>\n\n<pre><code>numbers = [n for n in numbers if n &gt;= 20]\n</code></pre>\n\n<p>or this, for in-place alteration (the thing in parens is a generator expression, which is implicitly converted into a tuple before slice-assignment):</p>\n\n<pre><code>numbers[:] = (n for in in numbers if n &gt;= 20)\n</code></pre>\n\n<p>If you want to perform an operation on n before removing it, one trick you could try is this:</p>\n\n<pre><code>for i, n in enumerate(numbers):\n    if n &lt; 20 :\n        print \"do something\" \n        numbers[i] = None\nnumbers = [n for n in numbers if n is not None]\n</code></pre>\n"
    },
    "115": {
        "question_id": "14132789",
        "answer_id": "14132912",
        "question": "<p>I've been here:</p>\n\n<ul>\n<li><a href=\"http://www.python.org/dev/peps/pep-0328/\" rel=\"noreferrer\">http://www.python.org/dev/peps/pep-0328/</a></li>\n<li><a href=\"http://docs.python.org/2/tutorial/modules.html#packages\" rel=\"noreferrer\">http://docs.python.org/2/tutorial/modules.html#packages</a></li>\n<li><a href=\"https://stackoverflow.com/questions/10059002/python-packages-relative-imports\">Python packages: relative imports</a></li>\n<li><a href=\"https://stackoverflow.com/questions/9123062/python-relative-import-example-code-does-not-work\">python relative import example code does not work</a></li>\n<li><a href=\"https://stackoverflow.com/questions/8299270/ultimate-answer-to-relative-python-imports\">Ultimate answer to relative python imports</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4175534/relative-imports-in-python\">Relative imports in Python</a></li>\n<li><a href=\"https://stackoverflow.com/questions/13233931/python-disabling-relative-import?rq=1\">Python: Disabling relative import</a></li>\n</ul>\n\n<p>and plenty of URLs that I did not copy, some on SO, some on other sites, back when I thought I'd have the solution quickly.</p>\n\n<p>The forever-recurring question is this: With Windows 7, 32-bit Python 2.7.3, how do I solve this \"Attempted relative import in non-package\" message?  I built an exact replica of the package on pep-0328:</p>\n\n<pre><code>package/\n    __init__.py\n    subpackage1/\n        __init__.py\n        moduleX.py\n        moduleY.py\n    subpackage2/\n        __init__.py\n        moduleZ.py\n    moduleA.py\n</code></pre>\n\n<p>I did make functions named spam and eggs in their appropriate modules.  Naturally, it didn't work.  The answer is apparently in the 4th URL I listed, but it's all alumni to me. There was this response on one of the URLs I visited:</p>\n\n<blockquote>\n  <p>Relative imports use a module's name attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to 'main') then relative imports are resolved as if the module were a top level module, regardless of where the module is actually located on the file system.</p>\n</blockquote>\n\n<p>The above response looks promising, but it's all hieroglyphs to me.  So my question, how do I make Python not return to me \"Attempted relative import in non-package\"? has an answer that involves -m, supposedly.</p>\n\n<p>Can somebody please tell me why Python gives that error message, <em>what it Means by non-package!</em>, why and how do you define a 'package', and <strong>the precise answer put in terms easy enough for a kindergartener to understand</strong>. </p>\n\n<p>Edit: The imports were done from the console.</p>\n",
        "answer": "<p><strong>Script vs. Module</strong></p>\n\n<p>Here's an explanation.  The short version is that there is a big difference between directly running a Python file, and importing that file from somewhere else.  <strong>Just knowing what directory a file is in does not determine what package Python thinks it is in.</strong>  That depends, additionally, on how you load the file into Python (by running or by importing).</p>\n\n<p>There are two ways to load a Python file: as the top-level script, or as a \nmodule.  A file is loaded as the top-level script if you execute it directly, for instance by typing <code>python myfile.py</code> on the command line.  It is loaded as a module if you do <code>python -m myfile</code>, or if it is loaded when an <code>import</code> statement is encountered inside some other file.  There can only be one top-level script at a time; the top-level script is the Python file you ran to start things off.</p>\n\n<p><strong>Naming</strong></p>\n\n<p>When a file is loaded, it is given a name (which is stored in its <code>__name__</code> attribute).  If it was loaded as the top-level script, its name is <code>__main__</code>.  If it was loaded as a module, its name is the filename, preceded by the names of any packages/subpackages of which it is a part, separated by dots.</p>\n\n<p>So for instance in your example:</p>\n\n<pre><code>package/\n    __init__.py\n    subpackage1/\n        __init__.py\n        moduleX.py\n    moduleA.py\n</code></pre>\n\n<p>if you imported <code>moduleX</code> (note: <em>imported</em>, not directly executed), its name would be <code>package.subpackage1.moduleX</code>.  If you imported <code>moduleA</code>, its name would be <code>package.moduleA</code>.  However, if you <em>directly run</em> <code>moduleX</code> from the command line, its name will instead be <code>__main__</code>, and if you directly run <code>moduleA</code> from the command line, its name will be <code>__main__</code>.  When a module is run as the top-level script, it loses its normal name and its name is instead <code>__main__</code>.</p>\n\n<p><strong>Accessing a module NOT through its containing package</strong></p>\n\n<p>There is an additional wrinkle: the module's name depends on whether it was imported \"directly\" from the directory it is in, or imported via a package.  This only makes a difference if you run Python in a directory, and try to import a file in that same directory (or a subdirectory of it).  For instance, if you start the Python interpreter in the directory <code>package/subpackage1</code> and then do <code>import moduleX</code>, the name of <code>moduleX</code> will just be <code>moduleX</code>, and not <code>package.subpackage1.moduleX</code>.  This is because Python adds the current directory to its search path on startup; if it finds the to-be-imported module in the current directory, it will not know that that directory is part of a package, and the package information will not become part of the module's name.</p>\n\n<p>A special case is if you run the interpreter interactively (e.g., just type <code>python</code> and start entering Python code on the fly).  In this case the name of that interactive session is <code>__main__</code>.</p>\n\n<p>Now here is the crucial thing for your error message: <strong>if a module's name has no dots, it is not considered to be part of a package</strong>.  It doesn't matter where the file actually is on disk.  All that matters is what its name is, and its name depends on how you loaded it.</p>\n\n<p>Now look at the quote you included in your question:</p>\n\n<blockquote>\n  <p>Relative imports use a module's name attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to 'main') then relative imports are resolved as if the module were a top level module, regardless of where the module is actually located on the file system.</p>\n</blockquote>\n\n<p><strong>Relative imports...</strong></p>\n\n<p>Relative imports use the module's <em>name</em> to determine where it is in a package.  When you use a relative import like <code>from .. import foo</code>, the dots indicate to step up some number of levels in the package hierarchy.  For instance, if your current module's name is <code>package.subpackage1.moduleX</code>, then <code>..moduleA</code> would mean <code>package.moduleA</code>.  For a <code>from .. import</code> to work, the module's name must have at least as many dots as there are in the <code>import</code> statement.</p>\n\n<p><strong>... are only relative in a package</strong></p>\n\n<p>However, if your module's name is <code>__main__</code>, it is not considered to be in a package.  Its name has no dots, and therefore you cannot use <code>from .. import</code> statements inside it.  If you try to do so, you will get the \"relative-import in non-package\" error.</p>\n\n<p><strong>Scripts can't import relative</strong></p>\n\n<p>What you probably did is you tried to run <code>moduleX</code> or the like from the command line.  When you did this, its name was set to <code>__main__</code>, which means that relative imports within it will fail, because its name does not reveal that it is in a package. Note that this will also happen if you run Python from the same directory where a module is, and then try to import that module, because, as described above, Python will find the module in the current directory \"too early\" without realizing it is part of a package.</p>\n\n<p>Also remember that when you run the interactive interpreter, the \"name\" of that interactive session is always <code>__main__</code>.  Thus <strong>you cannot do relative imports directly from an interactive session</strong>.  Relative imports are only for use within module files.</p>\n\n<p><strong>Two solutions:</strong></p>\n\n<ol>\n<li><p>If you really do want to run <code>moduleX</code> directly, but you still want it to be considered part of a package, you can do <code>python -m package.subpackage1.moduleX</code>.  The <code>-m</code> tells Python to load it as a module, not as the top-level script.</p></li>\n<li><p>Or perhaps you don't actually want to <em>run</em> <code>moduleX</code>, you just want to run some other script, say <code>myfile.py</code>, that <em>uses</em> functions inside <code>moduleX</code>.  If that is the case, put <code>myfile.py</code> <em>somewhere else</em> &ndash; <em>not</em> inside the <code>package</code> directory &ndash; and run it.  If inside <code>myfile.py</code> you do things like <code>from package.moduleA import spam</code>, it will work fine.</p></li>\n</ol>\n\n<p><strong>Notes</strong></p>\n\n<ul>\n<li><p>For either of these solutions, the package directory (<code>package</code> in your example) must be accessible from the Python module search path (<code>sys.path</code>).  If it is not, you will not be able to use anything in the package reliably at all.</p></li>\n<li><p>Since Python 2.6, the module's \"name\" for package-resolution purposes is determined not just by its <code>__name__</code> attributes but also by the <code>__package__</code> attribute.  That's why I'm avoiding using the explicit symbol <code>__name__</code> to refer to the module's \"name\".  Since Python 2.6 a module's \"name\" is effectively <code>__package__ + '.' + __name__</code>, or just <code>__name__</code> if <code>__package__</code> is <code>None</code>.)</p></li>\n</ul>\n"
    },
    "116": {
        "question_id": "437589",
        "answer_id": "437591",
        "question": "<p>I have a long-running Python server and would like to be able to upgrade a service without restarting the server. What's the best way do do this?</p>\n\n<pre><code>if foo.py has changed:\n    unimport foo  &lt;-- How do I do this?\n    import foo\n    myfoo = foo.Foo()\n</code></pre>\n",
        "answer": "<p>You can reload a module when it has already been imported by using the <a href=\"https://docs.python.org/2.7/library/functions.html#reload\" rel=\"noreferrer\"><code>reload</code></a> builtin function:</p>\n\n<pre><code>from importlib import reload  # Python 3.4+ only.\nimport foo\n\nwhile True:\n    # Do some things.\n    if is_changed(foo):\n        foo = reload(foo)\n</code></pre>\n\n<p>In Python 3, <code>reload</code> was moved to the <a href=\"https://docs.python.org/3.2/library/imp.html\" rel=\"noreferrer\"><code>imp</code></a> module. In 3.4, <code>imp</code> was deprecated in favor of <a href=\"https://docs.python.org/3.4/library/importlib.html\" rel=\"noreferrer\"><code>importlib</code></a>, and <a href=\"https://docs.python.org/3.4/library/importlib.html#importlib.reload\" rel=\"noreferrer\"><code>reload</code></a> was added to the latter. When targeting 3 or later, either reference the appropriate module when calling <code>reload</code> or import it.</p>\n\n<p>I think that this is what you want. Web servers like Django's development server use this so that you can see the effects of your code changes without restarting the server process itself.</p>\n\n<p>To quote from the docs:</p>\n\n<blockquote>\n  <p>Python modules\u2019 code is recompiled and\n  the module-level code reexecuted,\n  defining a new set of objects which\n  are bound to names in the module\u2019s\n  dictionary. The init function of\n  extension modules is not called a\n  second time. As with all other objects\n  in Python the old objects are only\n  reclaimed after their reference counts\n  drop to zero. The names in the module\n  namespace are updated to point to any\n  new or changed objects. Other\n  references to the old objects (such as\n  names external to the module) are not\n  rebound to refer to the new objects\n  and must be updated in each namespace\n  where they occur if that is desired.</p>\n</blockquote>\n\n<p>As you noted in your question, you'll have to reconstruct <code>Foo</code> objects if the <code>Foo</code> class resides in the <code>foo</code> module.</p>\n"
    },
    "117": {
        "question_id": "9060653",
        "answer_id": "9060686",
        "question": "<p>Joining a list:</p>\n\n<pre><code>&gt;&gt;&gt; ''.join([ str(_) for _ in xrange(10) ])\n'0123456789'\n</code></pre>\n\n<p><code>join</code> must take an iterable.</p>\n\n<p>Apparently, <code>join</code>'s argument is <code>[ str(_) for _ in xrange(10) ]</code>, and it's a <a href=\"https://en.wikipedia.org/wiki/List_comprehension\" rel=\"noreferrer\">list comprehension</a>.</p>\n\n<p>Look at this:</p>\n\n<pre><code>&gt;&gt;&gt;''.join( str(_) for _ in xrange(10) )\n'0123456789'\n</code></pre>\n\n<p>Now, <code>join</code>'s argument is just <code>str(_) for _ in xrange(10)</code>, no <code>[]</code>, but the result is the same.</p>\n\n<p>Why? Does <code>str(_) for _ in xrange(10)</code> also produce a list or an iterable?</p>\n",
        "answer": "<pre><code>&gt;&gt;&gt;''.join( str(_) for _ in xrange(10) )\n</code></pre>\n\n<p>This is called a <em>generator expression</em>, and is explained in <a href=\"http://www.python.org/dev/peps/pep-0289/\">PEP 289</a>.</p>\n\n<p>The main difference between generator expressions and list comprehensions is that the former don't create the list in memory.</p>\n\n<p>Note that there's a third way to write the expression:</p>\n\n<pre><code>''.join(map(str, xrange(10)))\n</code></pre>\n"
    },
    "118": {
        "question_id": "379906",
        "answer_id": "379910",
        "question": "<p>In Python, how can I parse a numeric string like <code>\"545.2222\"</code> to its corresponding float value, <code>545.2222</code>? Or parse the string <code>\"31\"</code> to an integer, <code>31</code>?</p>\n\n<p>I just want to know how to parse a <em>float</em> <code>str</code> to a <code>float</code>, and (separately) an <em>int</em> <code>str</code> to an <code>int</code>.</p>\n",
        "answer": "<pre><code>&gt;&gt;&gt; a = \"545.2222\"\n&gt;&gt;&gt; float(a)\n545.22220000000004\n&gt;&gt;&gt; int(float(a))\n545\n</code></pre>\n"
    },
    "119": {
        "question_id": "2371436",
        "answer_id": "2371789",
        "question": "<pre><code>stringExp = \"2^4\"\nintVal = int(stringExp)      # Expected value: 16\n</code></pre>\n\n<p>This returns the following error:</p>\n\n<pre><code>Traceback (most recent call last):  \nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: invalid literal for int()\nwith base 10: '2^4'\n</code></pre>\n\n<p>I know that <code>eval</code> can work around this, but isn't there a better and - more importantly - safer method to evaluate a mathematical expression that is being stored in a string?</p>\n",
        "answer": "<p><a href=\"https://github.com/pyparsing/pyparsing\" rel=\"noreferrer\">Pyparsing</a> can be used to parse mathematical expressions. In particular, <a href=\"https://github.com/pyparsing/pyparsing/blob/master/examples/fourFn.py\" rel=\"noreferrer\">fourFn.py</a>\nshows how to parse basic arithmetic expressions. Below, I've rewrapped fourFn into a numeric parser class for easier reuse. </p>\n\n<pre><code>from __future__ import division\nfrom pyparsing import (Literal, CaselessLiteral, Word, Combine, Group, Optional,\n                       ZeroOrMore, Forward, nums, alphas, oneOf)\nimport math\nimport operator\n\n__author__ = 'Paul McGuire'\n__version__ = '$Revision: 0.0 $'\n__date__ = '$Date: 2009-03-20 $'\n__source__ = '''http://pyparsing.wikispaces.com/file/view/fourFn.py\nhttp://pyparsing.wikispaces.com/message/view/home/15549426\n'''\n__note__ = '''\nAll I've done is rewrap Paul McGuire's fourFn.py as a class, so I can use it\nmore easily in other places.\n'''\n\n\nclass NumericStringParser(object):\n    '''\n    Most of this code comes from the fourFn.py pyparsing example\n\n    '''\n\n    def pushFirst(self, strg, loc, toks):\n        self.exprStack.append(toks[0])\n\n    def pushUMinus(self, strg, loc, toks):\n        if toks and toks[0] == '-':\n            self.exprStack.append('unary -')\n\n    def __init__(self):\n        \"\"\"\n        expop   :: '^'\n        multop  :: '*' | '/'\n        addop   :: '+' | '-'\n        integer :: ['+' | '-'] '0'..'9'+\n        atom    :: PI | E | real | fn '(' expr ')' | '(' expr ')'\n        factor  :: atom [ expop factor ]*\n        term    :: factor [ multop factor ]*\n        expr    :: term [ addop term ]*\n        \"\"\"\n        point = Literal(\".\")\n        e = CaselessLiteral(\"E\")\n        fnumber = Combine(Word(\"+-\" + nums, nums) +\n                          Optional(point + Optional(Word(nums))) +\n                          Optional(e + Word(\"+-\" + nums, nums)))\n        ident = Word(alphas, alphas + nums + \"_$\")\n        plus = Literal(\"+\")\n        minus = Literal(\"-\")\n        mult = Literal(\"*\")\n        div = Literal(\"/\")\n        lpar = Literal(\"(\").suppress()\n        rpar = Literal(\")\").suppress()\n        addop = plus | minus\n        multop = mult | div\n        expop = Literal(\"^\")\n        pi = CaselessLiteral(\"PI\")\n        expr = Forward()\n        atom = ((Optional(oneOf(\"- +\")) +\n                 (ident + lpar + expr + rpar | pi | e | fnumber).setParseAction(self.pushFirst))\n                | Optional(oneOf(\"- +\")) + Group(lpar + expr + rpar)\n                ).setParseAction(self.pushUMinus)\n        # by defining exponentiation as \"atom [ ^ factor ]...\" instead of\n        # \"atom [ ^ atom ]...\", we get right-to-left exponents, instead of left-to-right\n        # that is, 2^3^2 = 2^(3^2), not (2^3)^2.\n        factor = Forward()\n        factor &lt;&lt; atom + \\\n            ZeroOrMore((expop + factor).setParseAction(self.pushFirst))\n        term = factor + \\\n            ZeroOrMore((multop + factor).setParseAction(self.pushFirst))\n        expr &lt;&lt; term + \\\n            ZeroOrMore((addop + term).setParseAction(self.pushFirst))\n        # addop_term = ( addop + term ).setParseAction( self.pushFirst )\n        # general_term = term + ZeroOrMore( addop_term ) | OneOrMore( addop_term)\n        # expr &lt;&lt;  general_term\n        self.bnf = expr\n        # map operator symbols to corresponding arithmetic operations\n        epsilon = 1e-12\n        self.opn = {\"+\": operator.add,\n                    \"-\": operator.sub,\n                    \"*\": operator.mul,\n                    \"/\": operator.truediv,\n                    \"^\": operator.pow}\n        self.fn = {\"sin\": math.sin,\n                   \"cos\": math.cos,\n                   \"tan\": math.tan,\n                   \"exp\": math.exp,\n                   \"abs\": abs,\n                   \"trunc\": lambda a: int(a),\n                   \"round\": round,\n                   \"sgn\": lambda a: abs(a) &gt; epsilon and cmp(a, 0) or 0}\n\n    def evaluateStack(self, s):\n        op = s.pop()\n        if op == 'unary -':\n            return -self.evaluateStack(s)\n        if op in \"+-*/^\":\n            op2 = self.evaluateStack(s)\n            op1 = self.evaluateStack(s)\n            return self.opn[op](op1, op2)\n        elif op == \"PI\":\n            return math.pi  # 3.1415926535\n        elif op == \"E\":\n            return math.e  # 2.718281828\n        elif op in self.fn:\n            return self.fn[op](self.evaluateStack(s))\n        elif op[0].isalpha():\n            return 0\n        else:\n            return float(op)\n\n    def eval(self, num_string, parseAll=True):\n        self.exprStack = []\n        results = self.bnf.parseString(num_string, parseAll)\n        val = self.evaluateStack(self.exprStack[:])\n        return val\n</code></pre>\n\n<p>You can use it like this</p>\n\n<pre><code>nsp = NumericStringParser()\nresult = nsp.eval('2^4')\nprint(result)\n# 16.0\n\nresult = nsp.eval('exp(2^4)')\nprint(result)\n# 8886110.520507872\n</code></pre>\n"
    },
    "120": {
        "question_id": "16641119",
        "answer_id": "16641831",
        "question": "<pre><code>list = [1, 2, 3]\nprint list.append(4)   ## NO, does not work, append() returns None\n## Correct pattern:\nlist.append(4)\nprint list  ## [1, 2, 3, 4]\n</code></pre>\n\n<p>I'm learning Python and I'm not sure if this problem is specific to the language and how <code>append</code> is implemented in Python.</p>\n",
        "answer": "<p><code>append</code> is a mutating (destructive) operation (it modifies the list in place instead of of returning a new list). The idiomatic way to do the non-destructive equivalent of <code>append</code> would be</p>\n\n<pre><code>l = [1,2,3]\nprint l + [4] # [1,2,3,4]\nprint l # [1,2,3]\n</code></pre>\n\n<p>to answer your question, my guess is that if <code>append</code> returned the newly modified list, users might think that it was non-destructive, ie they might write code like</p>\n\n<pre><code>m = l.append(\"a\")\nn = l.append(\"b\")\n</code></pre>\n\n<p>and expect <code>n</code> to be <code>[1,2,3,\"b\"]</code></p>\n"
    },
    "121": {
        "question_id": "81584",
        "answer_id": "81609",
        "question": "<p>What IDEs (\"GUIs/editors\") do others use for Python coding?</p>\n",
        "answer": "\n\n<h2>Results</h2>\n\n<p><a href=\"https://docs.google.com/spreadsheets/d/1l3x94P55qoxqYbq5GosWQ7IonZ4vR-4ZyCaImiVmCSk/pubhtml\" rel=\"noreferrer\">Spreadsheet version</a></p>\n\n<p><a href=\"https://docs.google.com/spreadsheets/d/1l3x94P55qoxqYbq5GosWQ7IonZ4vR-4ZyCaImiVmCSk/pubhtml\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/Jrc6C.png\" alt=\"spreadsheet screenshot\"></a></p>\n\n<p>Alternatively, in plain text: (also available as a a <a href=\"https://i.stack.imgur.com/ItVKB.png\" rel=\"noreferrer\">screenshot</a>)</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>                         Bracket Matching -.  .- Line Numbering\n                          Smart Indent -.  |  |  .- UML Editing / Viewing\n         Source Control Integration -.  |  |  |  |  .- Code Folding\n                    Error Markup -.  |  |  |  |  |  |  .- Code Templates\n  Integrated Python Debugging -.  |  |  |  |  |  |  |  |  .- Unit Testing\n    Multi-Language Support -.  |  |  |  |  |  |  |  |  |  |  .- GUI Designer (Qt, Eric, etc)\n   Auto Code Completion -.  |  |  |  |  |  |  |  |  |  |  |  |  .- Integrated DB Support\n     Commercial/Free -.  |  |  |  |  |  |  |  |  |  |  |  |  |  |  .- Refactoring\n   Cross Platform -.  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     \n                  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\nAtom              |Y |F |Y |Y*|Y |Y |Y |Y |Y |Y |  |Y |Y |  |  |  |  |*many plugins\nEditra            |Y |F |Y |Y |  |  |Y |Y |Y |Y |  |Y |  |  |  |  |  |\nEmacs             |Y |F |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |  |  |  |\nEric Ide          |Y |F |Y |  |Y |Y |  |Y |  |Y |  |Y |  |Y |  |  |  |\nGeany             |Y |F |Y*|Y |  |  |  |Y |Y |Y |  |Y |  |  |  |  |  |*very limited\nGedit             |Y |F |Y\u00b9|Y |  |  |  |Y |Y |Y |  |  |Y\u00b2|  |  |  |  |\u00b9with plugin; \u00b2sort of\nIdle              |Y |F |Y |  |Y |  |  |Y |Y |  |  |  |  |  |  |  |  |\nIntelliJ          |Y |CF|Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |\nJEdit             |Y |F |  |Y |  |  |  |  |Y |Y |  |Y |  |  |  |  |  |\nKDevelop          |Y |F |Y*|Y |  |  |Y |Y |Y |Y |  |Y |  |  |  |  |  |*no type inference\nKomodo            |Y |CF|Y |Y |Y |Y |Y |Y |Y |Y |  |Y |Y |Y |  |Y |  |\nNetBeans*         |Y |F |Y |Y |Y |  |Y |Y |Y |Y |Y |Y |Y |Y |  |  |Y |*pre-v7.0\nNotepad++         |W |F |Y |Y |  |Y*|Y*|Y*|Y |Y |  |Y |Y*|  |  |  |  |*with plugin\nPfaide            |W |C |Y |Y |  |  |  |Y |Y |Y |  |Y |Y |  |  |  |  |\nPIDA              |LW|F |Y |Y |  |  |  |Y |Y |Y |  |Y |  |  |  |  |  |VIM based\nPTVS              |W |F |Y |Y |Y |Y |Y |Y |Y |Y |  |Y |  |  |Y*|  |Y |*WPF bsed\nPyCharm           |Y |CF|Y |Y*|Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |*JavaScript\nPyDev (Eclipse)   |Y |F |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |  |  |  |\nPyScripter        |W |F |Y |  |Y |Y |  |Y |Y |Y |  |Y |Y |Y |  |  |  |\nPythonWin         |W |F |Y |  |Y |  |  |Y |Y |  |  |Y |  |  |  |  |  |\nSciTE             |Y |F\u00b9|  |Y |  |Y |  |Y |Y |Y |  |Y |Y |  |  |  |  |\u00b9Mac version is\nScriptDev         |W |C |Y |Y |Y |Y |  |Y |Y |Y |  |Y |Y |  |  |  |  |    commercial\nSpyder            |Y |F |Y |  |Y |Y |  |Y |Y |Y |  |  |  |  |  |  |  |\nSublime Text      |Y |CF|Y |Y |  |Y |Y |Y |Y |Y |  |Y |Y |Y*|  |  |  |extensible w/Python,\nTextMate          |M |F |  |Y |  |  |Y |Y |Y |Y |  |Y |Y |  |  |  |  |    *PythonTestRunner\nUliPad            |Y |F |Y |Y |Y |  |  |Y |Y |  |  |  |Y |Y |  |  |  |\nVim               |Y |F |Y |Y |Y |Y |Y |Y |Y |Y |  |Y |Y |Y |  |  |  |\nVisual Studio     |W |CF|Y |Y |Y |Y |Y |Y |Y |Y |? |Y |? |? |Y |? |Y |\nVisual Studio Code|Y |F |Y |Y |Y |Y |Y |Y |Y |Y |? |Y |? |? |? |? |Y |uses plugins\nWingIde           |Y |C |Y |Y*|Y |Y |Y |Y |Y |Y |  |Y |Y |Y |  |  |  |*support for C\nZeus              |W |C |  |  |  |  |Y |Y |Y |Y |  |Y |Y |  |  |  |  |\n                  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n   Cross Platform -'  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     \n     Commercial/Free -'  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '- Refactoring\n   Auto Code Completion -'  |  |  |  |  |  |  |  |  |  |  |  |  '- Integrated DB Support\n    Multi-Language Support -'  |  |  |  |  |  |  |  |  |  |  '- GUI Designer (Qt, Eric, etc)\n  Integrated Python Debugging -'  |  |  |  |  |  |  |  |  '- Unit Testing\n                    Error Markup -'  |  |  |  |  |  |  '- Code Templates\n         Source Control Integration -'  |  |  |  |  '- Code Folding\n                          Smart Indent -'  |  |  '- UML Editing / Viewing\n                         Bracket Matching -'  '- Line Numbering\n</code></pre>\n\n<hr>\n\n<p>Acronyms used:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code> L  - Linux\n W  - Windows\n M  - Mac\n C  - Commercial\n F  - Free\n CF - Commercial with Free limited edition\n ?  - To be confirmed\n</code></pre>\n\n<p>I don't mention basics like syntax highlighting as I expect these by default.</p>\n\n<hr>\n\n<p>This is a just dry list reflecting your feedback and comments, I am not advocating any of these tools. I will keep updating this list as you keep posting your answers.</p>\n\n<p><strong><em>PS. Can you help me to add features of the above editors to the list (like auto-complete, debugging, etc.)?</em></strong></p>\n\n<p>We have a comprehensive wiki page for this question <a href=\"https://wiki.python.org/moin/IntegratedDevelopmentEnvironments\" rel=\"noreferrer\">https://wiki.python.org/moin/IntegratedDevelopmentEnvironments</a></p>\n\n<p><a href=\"https://docs.google.com/spreadsheets/d/1l3x94P55qoxqYbq5GosWQ7IonZ4vR-4ZyCaImiVmCSk/edit#gid=0&amp;fvid=1960281650\" rel=\"noreferrer\" title=\"Submit edits to the spreadsheet\">Submit edits to the spreadsheet</a></p>\n"
    },
    "122": {
        "question_id": "17778372",
        "answer_id": "17778390",
        "question": "<p>I have this function that calls itself:</p>\n\n<pre><code>def get_input():\n    my_var = input('Enter \"a\" or \"b\": ')\n\n    if my_var != \"a\" and my_var != \"b\":\n        print('You didn\\'t type \"a\" or \"b\". Try again.')\n        get_input()\n    else:\n        return my_var\n\nprint('got input:', get_input())\n</code></pre>\n\n<p>Now, if I input just \"a\" or \"b\", everything works fine:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Type \"a\" or \"b\": a\ngot input: a\n</code></pre>\n\n<p>But, if I type something else and then \"a\" or \"b\", I get this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Type \"a\" or \"b\": purple\nYou didn't type \"a\" or \"b\". Try again.\nType \"a\" or \"b\": a\ngot input: None\n</code></pre>\n\n<p>I don't know why <code>get_input()</code> is returning <code>None</code>, since it should only return <code>my_var</code>. Where is this <code>None</code> coming from and how do I fix my function?</p>\n",
        "answer": "<p>It is returning <code>None</code> because when you recursively call it:</p>\n\n<pre><code>if my_var != \"a\" and my_var != \"b\":\n    print('You didn\\'t type \"a\" or \"b\". Try again.')\n    get_input()\n</code></pre>\n\n<p>..you don't return the value.  </p>\n\n<p>So while the recursion does happen, the return value gets discarded, and then you fall off the end of the function.  Falling off the end of the function means that python implicitly returns <code>None</code>, just like this:</p>\n\n<pre><code>&gt;&gt;&gt; def f(x):\n...     pass\n&gt;&gt;&gt; print(f(20))\nNone\n</code></pre>\n\n<p>So, instead of just <em>calling</em> <code>get_input()</code> in your <code>if</code> statement, you need to <code>return</code> it:</p>\n\n<pre><code>if my_var != \"a\" and my_var != \"b\":\n    print('You didn\\'t type \"a\" or \"b\". Try again.')\n    return get_input()\n</code></pre>\n"
    },
    "123": {
        "question_id": "522563",
        "answer_id": "522578",
        "question": "<p>How do I access the index itself for a list like the following?</p>\n\n<pre><code>ints = [8, 23, 45, 12, 78]\n</code></pre>\n\n<p>When I loop through it using a <code>for</code> loop, how do I access the loop index, from 1 to 5 in this case?</p>\n",
        "answer": "<p>Using an additional state variable, such as an index variable (which you would normally use in languages such as C or PHP), is considered non-pythonic.</p>\n\n<p>The better option is to use the built-in function <a href=\"https://docs.python.org/3/library/functions.html#enumerate\" rel=\"noreferrer\" title=\"enumerate\"><code>enumerate()</code></a>, available in both Python 2 and 3:</p>\n\n<pre><code>for idx, val in enumerate(ints):\n    print(idx, val)\n</code></pre>\n\n<p>Check out <a href=\"https://www.python.org/dev/peps/pep-0279/\" rel=\"noreferrer\" title=\"PEP 279\">PEP 279</a> for more.</p>\n"
    },
    "124": {
        "question_id": "4700614",
        "answer_id": "4700674",
        "question": "<p>I have a series of 20 plots (not subplots) to be made in a single figure.  I want the legend to be outside of the box.  At the same time, I do not want to change the axes, as the size of the figure gets reduced.  Kindly help me for the following queries:</p>\n\n<ol>\n<li>I want to keep the legend box outside the plot area. (I want the legend to be outside at the right side of the plot area).</li>\n<li>Is there anyway that I reduce the font size of the text inside the legend box, so that the size of the legend box will be small.</li>\n</ol>\n",
        "answer": "<p>You can make the legend text smaller by creating font properties:</p>\n\n<pre><code>from matplotlib.font_manager import FontProperties\n\nfontP = FontProperties()\nfontP.set_size('small')\nlegend([plot1], \"title\", prop=fontP) \n# or add prop=fontP to whatever legend() call you already have\n</code></pre>\n"
    },
    "125": {
        "question_id": "455612",
        "answer_id": "455634",
        "question": "<p>I want <code>a</code> to be rounded to <em>13.95</em>.</p>\n\n<pre><code>&gt;&gt;&gt; a\n13.949999999999999\n&gt;&gt;&gt; round(a, 2)\n13.949999999999999\n</code></pre>\n\n<p>The <a href=\"https://docs.python.org/2/library/functions.html#round\" rel=\"noreferrer\"><code>round</code></a> function does not work the way I expected.</p>\n",
        "answer": "<p>You are running into the old problem with floating point numbers that all numbers cannot be represented. The command line is just showing you the full floating point form from memory.</p>\n\n<p>In floating point your rounded version is the same number. Since computers are binary, they store floating point numbers as an integer and then divide it by a power of two so 13.95 will be represented in a similar fashion to 125650429603636838/(2**53).</p>\n\n<p>Double precision numbers have 53 bits (16 digits) of precision and regular floats have 24 bits (8 digits) of precision. The <a href=\"http://docs.python.org/tutorial/floatingpoint.html\" rel=\"noreferrer\">floating point in Python uses double precision</a> to store the values.</p>\n\n<p>For example,</p>\n\n<pre><code>  &gt;&gt;&gt; 125650429603636838/(2**53)\n  13.949999999999999\n\n  &gt;&gt;&gt; 234042163/(2**24)\n  13.949999988079071\n\n  &gt;&gt;&gt; a=13.946\n  &gt;&gt;&gt; print(a)\n  13.946\n  &gt;&gt;&gt; print(\"%.2f\" % a)\n  13.95\n  &gt;&gt;&gt; round(a,2)\n  13.949999999999999\n  &gt;&gt;&gt; print(\"%.2f\" % round(a,2))\n  13.95\n  &gt;&gt;&gt; print(\"{0:.2f}\".format(a))\n  13.95\n  &gt;&gt;&gt; print(\"{0:.2f}\".format(round(a,2)))\n  13.95\n  &gt;&gt;&gt; print(\"{0:.15f}\".format(round(a,2)))\n  13.949999999999999\n</code></pre>\n\n<p>If you are after only two decimal places as in currency then you have a couple of better choices: 1) Use integers and store values in cents, not dollars and then divide by 100 to convert to dollars. 2) Or use a fixed point number like <a href=\"http://docs.python.org/library/decimal.html\" rel=\"noreferrer\">decimal</a>.</p>\n"
    },
    "126": {
        "question_id": "1534210",
        "answer_id": "1534343",
        "question": "<p>I have a Debian system currently running with python 2.5.4. I got virtualenv properly installed, everything is working fine. Is there a possibility that I can use a virtualenv with a different version of Python?</p>\n\n<p>I compiled Python 2.6.2 and would like to use it with some virtualenv. Is it enough to overwrite the binary file? Or do I have to change something in respect to the libraries?</p>\n",
        "answer": "<p>Just use the <code>--python</code> (or short <code>-p</code>) option when creating your virtualenv instance to specify the Python executable you want to use, e.g.:</p>\n\n<pre><code>virtualenv --python=/usr/bin/python2.6 &lt;path/to/new/virtualenv/&gt;\n</code></pre>\n\n<p>N.B. For <strong>Python 3.3</strong> or later, refer to The Aelfinn's <a href=\"https://stackoverflow.com/a/39713544/1450294\">answer</a> below.</p>\n"
    },
    "127": {
        "question_id": "3323001",
        "answer_id": "3323013",
        "question": "<p>I have this tail recursive function here:</p>\n\n<pre><code>def fib(n, sum):\n    if n &lt; 1:\n        return sum\n    else:\n        return fib(n-1, sum+n)\n\nc = 998\nprint(fib(c, 0))\n</code></pre>\n\n<p>It works up to n=997, then it just breaks and spits a \"maximum recursion depth exceeded in comparison\" <code>RuntimeError</code>. Is this just a stack overflow? Is there a way to get around it?</p>\n",
        "answer": "<p>It is a guard against a stack overflow, yes. Python (or rather, the CPython implementation) doesn't optimize tail recursion, and unbridled recursion causes stack overflows. You can change the recursion limit with <a href=\"http://docs.python.org/library/sys.html#sys.setrecursionlimit\" rel=\"noreferrer\"><code>sys.setrecursionlimit</code></a>, but doing so is dangerous -- the standard limit is a little conservative, but Python stackframes can be quite big.</p>\n\n<p>Python isn't a functional language and tail recursion is not a particularly efficient technique. Rewriting the algorithm iteratively, if possible, is generally a better idea.</p>\n"
    },
    "128": {
        "question_id": "13905741",
        "answer_id": "13913933",
        "question": "<p>How do you access other class variables from a list comprehension within the class definition?  The following works in Python 2 but fails in Python 3:</p>\n\n<pre><code>class Foo:\n    x = 5\n    y = [x for i in range(1)]\n</code></pre>\n\n<p>Python 3.2 gives the error:</p>\n\n<pre><code>NameError: global name 'x' is not defined\n</code></pre>\n\n<p>Trying <code>Foo.x</code> doesn't work either.  Any ideas on how to do this in Python 3?</p>\n\n<p>A slightly more complicated motivating example:</p>\n\n<pre><code>from collections import namedtuple\nclass StateDatabase:\n    State = namedtuple('State', ['name', 'capital'])\n    db = [State(*args) for args in [\n        ['Alabama', 'Montgomery'],\n        ['Alaska', 'Juneau'],\n        # ...\n    ]]\n</code></pre>\n\n<p>In this example, <code>apply()</code> would have been a decent workaround, but it is sadly removed from Python 3.</p>\n",
        "answer": "<p><em>Class scope and list, set or dictionary comprehensions, as well as generator expressions do not mix.</em></p>\n\n<h2>The why; or, the official word on this</h2>\n\n<p>In Python 3, list comprehensions were given a proper scope (local namespace) of their own, to prevent their local variables bleeding over into the surrounding scope (see <a href=\"https://stackoverflow.com/q/4198906\">Python list comprehension rebind names even after scope of comprehension. Is this right?</a>). That's great when using such a list comprehension in a module or in a function, but in classes, scoping is a little, uhm, <em>strange</em>.</p>\n\n<p>This is documented in <a href=\"http://www.python.org/dev/peps/pep-0227/\" rel=\"noreferrer\">pep 227</a>:</p>\n\n<blockquote>\n  <p>Names in class scope are not accessible.  Names are resolved in\n      the innermost enclosing function scope.  If a class definition\n      occurs in a chain of nested scopes, the resolution process skips\n      class definitions.</p>\n</blockquote>\n\n<p>and in the <a href=\"http://docs.python.org/3/reference/compound_stmts.html#class-definitions\" rel=\"noreferrer\"><code>class</code> compound statement documentation</a>:</p>\n\n<blockquote>\n  <p>The class\u2019s suite is then executed in a new execution frame (see section <a href=\"http://docs.python.org/3/reference/executionmodel.html#naming\" rel=\"noreferrer\"><em>Naming and binding</em></a>), using a newly created local namespace and the original global namespace. (Usually, the suite contains only function definitions.) When the class\u2019s suite finishes execution, <strong>its execution frame is discarded but its local namespace is saved</strong>. <a href=\"http://docs.python.org/3/reference/compound_stmts.html#id8\" rel=\"noreferrer\">[4]</a> A class object is then created using the inheritance list for the base classes and the saved local namespace for the attribute dictionary.</p>\n</blockquote>\n\n<p>Emphasis mine; the execution frame is the temporary scope.</p>\n\n<p>Because the scope is repurposed as the attributes on a class object, allowing it to be used as a nonlocal scope as well leads to undefined behaviour; what would happen if a class method referred to <code>x</code> as a nested scope variable, then manipulates <code>Foo.x</code> as well, for example? More importantly, what would that mean for subclasses of <code>Foo</code>? Python <em>has</em> to treat a class scope differently as it is very different from a function scope.</p>\n\n<p>Last, but definitely not least, the linked <a href=\"http://docs.python.org/3/reference/executionmodel.html#naming\" rel=\"noreferrer\">Naming and binding</a> section in the Execution model documentation mentions class scopes explicitly:</p>\n\n<blockquote>\n  <p>The scope of names defined in a class block is limited to the class block; it does not extend to the code blocks of methods \u2013 this includes comprehensions and generator expressions since they are implemented using a function scope. This means that the following will fail:</p>\n\n<pre><code>class A:\n     a = 42\n     b = list(a + i for i in range(10))\n</code></pre>\n</blockquote>\n\n<p>So, to summarize: you cannot access the class scope from functions, list comprehensions or generator expressions enclosed in that scope; they act as if that scope does not exist. In Python 2, list comprehensions were implemented using a shortcut, but in Python 3 they got their own function scope (as they should have had all along) and thus your example breaks. Other comprehension types have their own scope regardless of Python version, so a similar example with a set or dict comprehension would break in Python 2.</p>\n\n<pre><code># Same error, in Python 2 or 3\ny = {x: x for i in range(1)}\n</code></pre>\n\n<h2>The (small) exception; or, why one part <em>may</em> still work</h2>\n\n<p>There's one part of a comprehension or generator expression that executes in the surrounding scope, regardless of Python version. That would be the expression for the outermost iterable. In your example, it's the <code>range(1)</code>:</p>\n\n<pre><code>y = [x for i in range(1)]\n#               ^^^^^^^^\n</code></pre>\n\n<p>Thus, using <code>x</code> in that expression would not throw an error:</p>\n\n<pre><code># Runs fine\ny = [i for i in range(x)]\n</code></pre>\n\n<p>This only applies to the outermost iterable; if a comprehension has multiple <code>for</code> clauses, the iterables for inner <code>for</code> clauses are evaluated in the comprehension's scope:</p>\n\n<pre><code># NameError\ny = [i for i in range(1) for j in range(x)]\n</code></pre>\n\n<p>This design decision was made in order to throw an error at genexp creation time instead of iteration time when creating the outermost iterable of a generator expression throws an error, or when the outermost iterable turns out not to be iterable. Comprehensions share this behavior for consistency.</p>\n\n<h2>Looking under the hood; or, way more detail than you ever wanted</h2>\n\n<p>You can see this all in action using the <a href=\"http://docs.python.org/3/library/dis.html\" rel=\"noreferrer\"><code>dis</code> module</a>. I'm using Python 3.3 in the following examples, because it adds <a href=\"http://docs.python.org/3/whatsnew/3.3.html#pep-3155-qualified-name-for-classes-and-functions\" rel=\"noreferrer\">qualified names</a> that neatly identify the code objects we want to inspect. The bytecode produced is otherwise functionally identical to Python 3.2.</p>\n\n<p>To <em>create</em> a class, Python essentially takes the whole suite that makes up the class body (so everything indented one level deeper than the <code>class &lt;name&gt;:</code> line), and executes that as if it were a function:</p>\n\n<pre><code>&gt;&gt;&gt; import dis\n&gt;&gt;&gt; def foo():\n...     class Foo:\n...         x = 5\n...         y = [x for i in range(1)]\n...     return Foo\n... \n&gt;&gt;&gt; dis.dis(foo)\n  2           0 LOAD_BUILD_CLASS     \n              1 LOAD_CONST               1 (&lt;code object Foo at 0x10a436030, file \"&lt;stdin&gt;\", line 2&gt;) \n              4 LOAD_CONST               2 ('Foo') \n              7 MAKE_FUNCTION            0 \n             10 LOAD_CONST               2 ('Foo') \n             13 CALL_FUNCTION            2 (2 positional, 0 keyword pair) \n             16 STORE_FAST               0 (Foo) \n\n  5          19 LOAD_FAST                0 (Foo) \n             22 RETURN_VALUE         \n</code></pre>\n\n<p>The first <code>LOAD_CONST</code> there loads a code object for the <code>Foo</code> class body, then makes that into a function, and calls it. The <em>result</em> of that call is then used to create the namespace of the class, its <code>__dict__</code>. So far so good.</p>\n\n<p>The thing to note here is that the bytecode contains a nested code object; in Python, class definitions, functions, comprehensions and generators all are represented as code objects that contain not only bytecode, but also structures that represent local variables, constants, variables taken from globals, and variables taken from the nested scope. The compiled bytecode refers to those structures and the python interpreter knows how to access those given the bytecodes presented.</p>\n\n<p>The important thing to remember here is that Python creates these structures at compile time; the <code>class</code> suite is a code object (<code>&lt;code object Foo at 0x10a436030, file \"&lt;stdin&gt;\", line 2&gt;</code>) that is already compiled.</p>\n\n<p>Let's inspect that code object that creates the class body itself; code objects have a <code>co_consts</code> structure:</p>\n\n<pre><code>&gt;&gt;&gt; foo.__code__.co_consts\n(None, &lt;code object Foo at 0x10a436030, file \"&lt;stdin&gt;\", line 2&gt;, 'Foo')\n&gt;&gt;&gt; dis.dis(foo.__code__.co_consts[1])\n  2           0 LOAD_FAST                0 (__locals__) \n              3 STORE_LOCALS         \n              4 LOAD_NAME                0 (__name__) \n              7 STORE_NAME               1 (__module__) \n             10 LOAD_CONST               0 ('foo.&lt;locals&gt;.Foo') \n             13 STORE_NAME               2 (__qualname__) \n\n  3          16 LOAD_CONST               1 (5) \n             19 STORE_NAME               3 (x) \n\n  4          22 LOAD_CONST               2 (&lt;code object &lt;listcomp&gt; at 0x10a385420, file \"&lt;stdin&gt;\", line 4&gt;) \n             25 LOAD_CONST               3 ('foo.&lt;locals&gt;.Foo.&lt;listcomp&gt;') \n             28 MAKE_FUNCTION            0 \n             31 LOAD_NAME                4 (range) \n             34 LOAD_CONST               4 (1) \n             37 CALL_FUNCTION            1 (1 positional, 0 keyword pair) \n             40 GET_ITER             \n             41 CALL_FUNCTION            1 (1 positional, 0 keyword pair) \n             44 STORE_NAME               5 (y) \n             47 LOAD_CONST               5 (None) \n             50 RETURN_VALUE         \n</code></pre>\n\n<p>The above bytecode creates the class body. The function is executed and the resulting <code>locals()</code> namespace, containing <code>x</code> and <code>y</code> is used to create the class (except that it doesn't work because <code>x</code> isn't defined as a global). Note that after storing <code>5</code> in <code>x</code>, it loads another code object; that's the list comprehension; it is wrapped in a function object just like the class body was; the created function takes a positional argument, the <code>range(1)</code> iterable to use for its looping code, cast to an iterator. As shown in the bytecode, <code>range(1)</code> is evaluated in the class scope.</p>\n\n<p>From this you can see that the only difference between a code object for a function or a generator, and a code object for a comprehension is that the latter is executed <em>immediately</em> when the parent code object is executed; the bytecode simply creates a function on the fly and executes it in a few small steps.</p>\n\n<p>Python 2.x uses inline bytecode there instead, here is output from Python 2.7:</p>\n\n<pre><code>  2           0 LOAD_NAME                0 (__name__)\n              3 STORE_NAME               1 (__module__)\n\n  3           6 LOAD_CONST               0 (5)\n              9 STORE_NAME               2 (x)\n\n  4          12 BUILD_LIST               0\n             15 LOAD_NAME                3 (range)\n             18 LOAD_CONST               1 (1)\n             21 CALL_FUNCTION            1\n             24 GET_ITER            \n        &gt;&gt;   25 FOR_ITER                12 (to 40)\n             28 STORE_NAME               4 (i)\n             31 LOAD_NAME                2 (x)\n             34 LIST_APPEND              2\n             37 JUMP_ABSOLUTE           25\n        &gt;&gt;   40 STORE_NAME               5 (y)\n             43 LOAD_LOCALS         \n             44 RETURN_VALUE        \n</code></pre>\n\n<p>No code object is loaded, instead a <code>FOR_ITER</code> loop is run inline. So in Python 3.x, the list generator was given a proper code object of its own, which means it has its own scope.</p>\n\n<p>However, the comprehension was compiled together with the rest of the python source code when the module or script was first loaded by the interpreter, and the compiler does <em>not</em> consider a class suite a valid scope. Any referenced variables in a list comprehension must look in the scope <em>surrounding</em> the class definition, recursively. If the variable wasn't found by the compiler, it marks it as a global. Disassembly of the list comprehension code object shows that <code>x</code> is indeed loaded as a global:</p>\n\n<pre><code>&gt;&gt;&gt; foo.__code__.co_consts[1].co_consts\n('foo.&lt;locals&gt;.Foo', 5, &lt;code object &lt;listcomp&gt; at 0x10a385420, file \"&lt;stdin&gt;\", line 4&gt;, 'foo.&lt;locals&gt;.Foo.&lt;listcomp&gt;', 1, None)\n&gt;&gt;&gt; dis.dis(foo.__code__.co_consts[1].co_consts[2])\n  4           0 BUILD_LIST               0 \n              3 LOAD_FAST                0 (.0) \n        &gt;&gt;    6 FOR_ITER                12 (to 21) \n              9 STORE_FAST               1 (i) \n             12 LOAD_GLOBAL              0 (x) \n             15 LIST_APPEND              2 \n             18 JUMP_ABSOLUTE            6 \n        &gt;&gt;   21 RETURN_VALUE         \n</code></pre>\n\n<p>This chunk of bytecode loads the first argument passed in (the <code>range(1)</code> iterator), and just like the Python 2.x version uses <code>FOR_ITER</code> to loop over it and create its output.</p>\n\n<p>Had we defined <code>x</code> in the <code>foo</code> function instead, <code>x</code> would be a cell variable (cells refer to nested scopes):</p>\n\n<pre><code>&gt;&gt;&gt; def foo():\n...     x = 2\n...     class Foo:\n...         x = 5\n...         y = [x for i in range(1)]\n...     return Foo\n... \n&gt;&gt;&gt; dis.dis(foo.__code__.co_consts[2].co_consts[2])\n  5           0 BUILD_LIST               0 \n              3 LOAD_FAST                0 (.0) \n        &gt;&gt;    6 FOR_ITER                12 (to 21) \n              9 STORE_FAST               1 (i) \n             12 LOAD_DEREF               0 (x) \n             15 LIST_APPEND              2 \n             18 JUMP_ABSOLUTE            6 \n        &gt;&gt;   21 RETURN_VALUE         \n</code></pre>\n\n<p>The <code>LOAD_DEREF</code> will indirectly load <code>x</code> from the code object cell objects:</p>\n\n<pre><code>&gt;&gt;&gt; foo.__code__.co_cellvars               # foo function `x`\n('x',)\n&gt;&gt;&gt; foo.__code__.co_consts[2].co_cellvars  # Foo class, no cell variables\n()\n&gt;&gt;&gt; foo.__code__.co_consts[2].co_consts[2].co_freevars  # Refers to `x` in foo\n('x',)\n&gt;&gt;&gt; foo().y\n[2]\n</code></pre>\n\n<p>The actual referencing looks the value up from the current frame data structures, which were initialized from a function object's <code>.__closure__</code> attribute. Since the function created for the comprehension code object is discarded again, we do not get to inspect that function's closure. To see a closure in action, we'd have to inspect a nested function instead:</p>\n\n<pre><code>&gt;&gt;&gt; def spam(x):\n...     def eggs():\n...         return x\n...     return eggs\n... \n&gt;&gt;&gt; spam(1).__code__.co_freevars\n('x',)\n&gt;&gt;&gt; spam(1)()\n1\n&gt;&gt;&gt; spam(1).__closure__\n&gt;&gt;&gt; spam(1).__closure__[0].cell_contents\n1\n&gt;&gt;&gt; spam(5).__closure__[0].cell_contents\n5\n</code></pre>\n\n<p>So, to summarize:</p>\n\n<ul>\n<li>List comprehensions get their own code objects in Python 3, and there is no difference between code objects for functions, generators or comprehensions; comprehension code objects are wrapped in a temporary function object and called immediately.</li>\n<li>Code objects are created at compile time, and any non-local variables are marked as either global or as free variables, based on the nested scopes of the code. The class body is <em>not</em> considered a scope for looking up those variables.</li>\n<li>When executing the code, Python has only to look into the globals, or the closure of the currently executing object. Since the compiler didn't include the class body as a scope, the temporary function namespace is not considered.</li>\n</ul>\n\n<h2>A workaround; or, what to do about it</h2>\n\n<p>If you were to create an explicit scope for the <code>x</code> variable, like in a function, you <em>can</em> use class-scope variables for a list comprehension:</p>\n\n<pre><code>&gt;&gt;&gt; class Foo:\n...     x = 5\n...     def y(x):\n...         return [x for i in range(1)]\n...     y = y(x)\n... \n&gt;&gt;&gt; Foo.y\n[5]\n</code></pre>\n\n<p>The 'temporary' <code>y</code> function can be called directly; we replace it when we do with its return value. Its scope <em>is</em> considered when resolving <code>x</code>:</p>\n\n<pre><code>&gt;&gt;&gt; foo.__code__.co_consts[1].co_consts[2]\n&lt;code object y at 0x10a5df5d0, file \"&lt;stdin&gt;\", line 4&gt;\n&gt;&gt;&gt; foo.__code__.co_consts[1].co_consts[2].co_cellvars\n('x',)\n</code></pre>\n\n<p>Of course, people reading your code will scratch their heads over this a little; you may want to put a big fat comment in there explaining why you are doing this.</p>\n\n<p>The best work-around is to just use <code>__init__</code> to create an instance variable instead:</p>\n\n<pre><code>def __init__(self):\n    self.y = [self.x for i in range(1)]\n</code></pre>\n\n<p>and avoid all the head-scratching, and questions to explain yourself. For your own concrete example, I would not even store the <code>namedtuple</code> on the class; either use the output directly (don't store the generated class at all), or use a global:</p>\n\n<pre><code>from collections import namedtuple\nState = namedtuple('State', ['name', 'capital'])\n\nclass StateDatabase:\n    db = [State(*args) for args in [\n       ('Alabama', 'Montgomery'),\n       ('Alaska', 'Juneau'),\n       # ...\n    ]]\n</code></pre>\n"
    },
    "129": {
        "question_id": "9189172",
        "answer_id": "9189193",
        "question": "<p>I try to do a simple string replacement, but I don't know why it doesn't seem to work:</p>\n\n<pre class=\"lang-python prettyprint-override\"><code>X = \"hello world\"\nX.replace(\"hello\", \"goodbye\")\n</code></pre>\n\n<p>I want to change the word <code>hello</code> to <code>goodbye</code>, thus it should change the string <code>\"hello world\"</code> to <code>\"goodbye world\"</code>. But X just remains <code>\"hello world\"</code>. Why is my code not working?</p>\n",
        "answer": "<p>This is because <strong>strings are immutable in Python</strong>.</p>\n\n<p>Which means that <code>X.replace(\"hello\",\"goodbye\")</code> returns <strong>a copy of <code>X</code> with replacements made</strong>. Because of that you need replace this line:</p>\n\n<pre><code>X.replace(\"hello\", \"goodbye\")\n</code></pre>\n\n<p>with this line:</p>\n\n<pre><code>X = X.replace(\"hello\", \"goodbye\")\n</code></pre>\n\n<p>More broadly, <strong>this is true for all Python string methods that change a string's content \"in-place\"</strong>, e.g. <code>replace</code>,<code>strip</code>,<code>translate</code>,<code>lower</code>/<code>upper</code>,<code>join</code>,...</p>\n\n<p><strong>You must assign their output to something if you want to use it</strong> and not throw it away, e.g.</p>\n\n<pre><code>X  = X.strip(' \\t')\nX2 = X.translate(...)\nY  = X.lower()\nZ  = X.upper()\nA  = X.join(':')\nB  = X.capitalize()\nC  = X.casefold()\n</code></pre>\n\n<p>and so on.</p>\n"
    },
    "130": {
        "question_id": "3277367",
        "answer_id": "3277407",
        "question": "<p>I'm pretty much new in Python object oriented programming and I have trouble\nunderstanding the <code>super()</code> function (new style classes) especially when it comes to multiple inheritance.</p>\n\n<p>For example if you have something like:</p>\n\n<pre><code>class First(object):\n    def __init__(self):\n        print \"first\"\n\nclass Second(object):\n    def __init__(self):\n        print \"second\"\n\nclass Third(First, Second):\n    def __init__(self):\n        super(Third, self).__init__()\n        print \"that's it\"\n</code></pre>\n\n<p>What I don't get is: will the <code>Third()</code> class inherit both constructor methods? If yes, then which one will be run with super() and why?</p>\n\n<p>And what if you want to run the other one? I know it has something to do with Python method resolution order (<a href=\"http://en.wikipedia.org/wiki/C3_linearization\" rel=\"noreferrer\">MRO</a>). </p>\n",
        "answer": "<p>This is detailed with a reasonable amount of detail by Guido himself in his blog post <a href=\"http://python-history.blogspot.com/2010/06/method-resolution-order.html\" rel=\"noreferrer\">Method Resolution Order</a> (including two earlier attempts).</p>\n\n<p>In your example, <code>Third()</code> will call <code>First.__init__</code>. Python looks for each attribute in the class's parents as they are listed left to right. In this case, we are looking for <code>__init__</code>. So, if you define</p>\n\n<pre><code>class Third(First, Second):\n    ...\n</code></pre>\n\n<p>Python will start by looking at <code>First</code>, and, if <code>First</code> doesn't have the attribute, then it will look at <code>Second</code>.</p>\n\n<p>This situation becomes more complex when inheritance starts crossing paths (for example if <code>First</code> inherited from <code>Second</code>). Read the link above for more details, but, in a nutshell, Python will try to maintain the order in which each class appears on the inheritance list, starting with the child class itself.</p>\n\n<p>So, for instance, if you had:</p>\n\n<pre><code>class First(object):\n    def __init__(self):\n        print \"first\"\n\nclass Second(First):\n    def __init__(self):\n        print \"second\"\n\nclass Third(First):\n    def __init__(self):\n        print \"third\"\n\nclass Fourth(Second, Third):\n    def __init__(self):\n        super(Fourth, self).__init__()\n        print \"that's it\"\n</code></pre>\n\n<p>the MRO would be <code>[Fourth, Second, Third, First].</code></p>\n\n<p>By the way: if Python cannot find a coherent method resolution order, it'll raise an exception, instead of falling back to behavior which might surprise the user.</p>\n\n<p>Edited to add an example of an ambiguous MRO:</p>\n\n<pre><code>class First(object):\n    def __init__(self):\n        print \"first\"\n\nclass Second(First):\n    def __init__(self):\n        print \"second\"\n\nclass Third(First, Second):\n    def __init__(self):\n        print \"third\"\n</code></pre>\n\n<p>Should <code>Third</code>'s MRO be <code>[First, Second]</code> or <code>[Second, First]</code>? There's no obvious expectation, and Python will raise an error:</p>\n\n<pre><code>TypeError: Error when calling the metaclass bases\n    Cannot create a consistent method resolution order (MRO) for bases Second, First\n</code></pre>\n\n<p><strong>Edit:</strong> I see several people arguing that the examples above lack <code>super()</code> calls, so let me explain: The point of the examples is to show how the MRO is constructed. They are <strong>not</strong> intended to print \"first\\nsecond\\third\" or whatever. You can \u2013 and should, of course, play around with the example, add <code>super()</code> calls, see what happens, and gain a deeper understanding of Python's inheritance model. But my goal here is to keep it simple and show how the MRO is built. And it is built as I explained:</p>\n\n<pre><code>&gt;&gt;&gt; Fourth.__mro__\n(&lt;class '__main__.Fourth'&gt;,\n &lt;class '__main__.Second'&gt;, &lt;class '__main__.Third'&gt;,\n &lt;class '__main__.First'&gt;,\n &lt;type 'object'&gt;)\n</code></pre>\n"
    },
    "131": {
        "question_id": "354038",
        "answer_id": "354130",
        "question": "<p>What is the best possible way to check if a string can be represented as a number in Python? </p>\n\n<p>The function I currently have right now is:</p>\n\n<pre><code>def is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n</code></pre>\n\n<p>Which, not only is ugly and slow, seems clunky. However I haven't found a better method because calling <code>float</code> in the main function is even worse. </p>\n",
        "answer": "<blockquote>\n  <p>Which, not only is ugly and slow</p>\n</blockquote>\n\n<p>I'd dispute both.</p>\n\n<p>A regex or other string parsing method would be uglier and slower.  </p>\n\n<p>I'm not sure that anything much could be faster than the above.  It calls the function and returns.  Try/Catch doesn't introduce much overhead because the most common exception is caught without an extensive search of stack frames.</p>\n\n<p>The issue is that any numeric conversion function has two kinds of results</p>\n\n<ul>\n<li>A number, if the number is valid</li>\n<li>A status code (e.g., via errno) or exception to show that no valid number could be parsed.</li>\n</ul>\n\n<p>C (as an example) hacks around this a number of ways.  Python lays it out clearly and explicitly.</p>\n\n<p>I think your code for doing this is perfect.</p>\n"
    },
    "132": {
        "question_id": "36932",
        "answer_id": "1695250",
        "question": "<p>I'm mainly a C# developer, but I'm currently working on a project in Python.</p>\n\n<p>How can I represent the equivalent of an Enum in Python?  </p>\n",
        "answer": "<p>Enums have been added to Python 3.4 as described in <a href=\"http://www.python.org/dev/peps/pep-0435/\" rel=\"noreferrer\">PEP 435</a>.  It has also been <a href=\"https://pypi.python.org/pypi/enum34\" rel=\"noreferrer\">backported to 3.3, 3.2, 3.1, 2.7, 2.6, 2.5, and 2.4</a> on pypi.  </p>\n\n<p>For more advanced Enum techniques try the <a href=\"https://pypi.python.org/pypi/aenum\" rel=\"noreferrer\">aenum library</a> (2.7, 3.3+, same author as <code>enum34</code>. Code is not perfectly compatible between py2 and py3, e.g. you'll need <a href=\"https://stackoverflow.com/a/25982264/57461\"><code>__order__</code> in python 2</a>).</p>\n\n<ul>\n<li>To use <code>enum34</code>, do <code>$ pip install enum34</code></li>\n<li>To use <code>aenum</code>, do <code>$ pip install aenum</code></li>\n</ul>\n\n<p>Installing <code>enum</code> (no numbers) will install a completely different and incompatible version.</p>\n\n<hr>\n\n<pre><code>from enum import Enum     # for enum34, or the stdlib version\n# from aenum import Enum  # for the aenum version\nAnimal = Enum('Animal', 'ant bee cat dog')\n\nAnimal.ant  # returns &lt;Animal.ant: 1&gt;\nAnimal['ant']  # returns &lt;Animal.ant: 1&gt; (string lookup)\nAnimal.ant.name  # returns 'ant' (inverse lookup)\n</code></pre>\n\n<p>or equivalently:</p>\n\n<pre><code>class Animal(Enum):\n    ant = 1\n    bee = 2\n    cat = 3\n    dog = 4\n</code></pre>\n\n<hr>\n\n<p>In earlier versions, one way of accomplishing enums is:</p>\n\n<pre><code>def enum(**enums):\n    return type('Enum', (), enums)\n</code></pre>\n\n<p>which is used like so:</p>\n\n<pre><code>&gt;&gt;&gt; Numbers = enum(ONE=1, TWO=2, THREE='three')\n&gt;&gt;&gt; Numbers.ONE\n1\n&gt;&gt;&gt; Numbers.TWO\n2\n&gt;&gt;&gt; Numbers.THREE\n'three'\n</code></pre>\n\n<p>You can also easily support automatic enumeration with something like this:</p>\n\n<pre><code>def enum(*sequential, **named):\n    enums = dict(zip(sequential, range(len(sequential))), **named)\n    return type('Enum', (), enums)\n</code></pre>\n\n<p>and used like so:</p>\n\n<pre><code>&gt;&gt;&gt; Numbers = enum('ZERO', 'ONE', 'TWO')\n&gt;&gt;&gt; Numbers.ZERO\n0\n&gt;&gt;&gt; Numbers.ONE\n1\n</code></pre>\n\n<p>Support for converting the values back to names can be added this way:</p>\n\n<pre><code>def enum(*sequential, **named):\n    enums = dict(zip(sequential, range(len(sequential))), **named)\n    reverse = dict((value, key) for key, value in enums.iteritems())\n    enums['reverse_mapping'] = reverse\n    return type('Enum', (), enums)\n</code></pre>\n\n<p>This overwrites anything with that name, but it is useful for rendering your enums in output.  It will throw KeyError if the reverse mapping doesn't exist.  With the first example:</p>\n\n<pre><code>&gt;&gt;&gt; Numbers.reverse_mapping['three']\n'THREE'\n</code></pre>\n"
    },
    "133": {
        "question_id": "230751",
        "answer_id": "230774",
        "question": "<p>How do I force Python's print function to output to the screen?</p>\n\n<p><sub>This is not a duplicate of <a href=\"https://stackoverflow.com/questions/107705/python-output-buffering\">Disable output buffering</a> - the linked question is attempting unbuffered output, while this is more general. The top answers in that question are too powerful or involved for this one (they're not good answers for this), and this question can be found on Google by a relative newbie.</sub></p>\n",
        "answer": "<pre><code>import sys\nsys.stdout.flush()\n</code></pre>\n\n<p><code>print</code> by default prints to <code>sys.stdout</code>.</p>\n\n<h3>References</h3>\n\n<p>Python 2</p>\n\n<ul>\n<li><a href=\"https://docs.python.org/2/reference/simple_stmts.html#the-print-statement\" rel=\"noreferrer\">The <code>print</code> statement</a></li>\n<li><a href=\"https://docs.python.org/2/library/sys.html#sys.stdout\" rel=\"noreferrer\"><code>sys.stdout</code></a></li>\n<li><a href=\"https://docs.python.org/2/library/stdtypes.html#file-objects\" rel=\"noreferrer\">File Objects</a></li>\n</ul>\n\n<p>Python 3</p>\n\n<ul>\n<li><a href=\"https://docs.python.org/3/library/functions.html#print\" rel=\"noreferrer\"><code>print()</code></a></li>\n<li><a href=\"https://docs.python.org/3/library/sys.html#sys.stdout\" rel=\"noreferrer\"><code>sys.stdout</code></a></li>\n<li><a href=\"https://docs.python.org/3/glossary.html#term-file-object\" rel=\"noreferrer\">file object - Glossary</a></li>\n<li><a href=\"https://docs.python.org/3/library/io.html#io.IOBase.flush\" rel=\"noreferrer\"><code>io.IOBase.flush()</code></a> (<code>sys.stdout</code> inherits the <code>flush</code> method from <code>io.IOBase</code>)</li>\n</ul>\n"
    },
    "134": {
        "question_id": "6822725",
        "answer_id": "6822773",
        "question": "<p>I need a rolling window (aka sliding window) iterable over a sequence/iterator/generator.  Default Python iteration can be considered a special case, where the window length is 1.  I'm currently using the following code.  Does anyone have a more Pythonic, less verbose, or more efficient method for doing this?</p>\n\n<pre><code>def rolling_window(seq, window_size):\n    it = iter(seq)\n    win = [it.next() for cnt in xrange(window_size)] # First window\n    yield win\n    for e in it: # Subsequent windows\n        win[:-1] = win[1:]\n        win[-1] = e\n        yield win\n\nif __name__==\"__main__\":\n    for w in rolling_window(xrange(6), 3):\n        print w\n\n\"\"\"Example output:\n\n   [0, 1, 2]\n   [1, 2, 3]\n   [2, 3, 4]\n   [3, 4, 5]\n\"\"\"\n</code></pre>\n",
        "answer": "<p>There's one in an old version of the Python docs with <a href=\"http://docs.python.org/release/2.3.5/lib/itertools-example.html\" rel=\"noreferrer\"><code>itertools</code> examples</a>:</p>\n\n<pre><code>from itertools import islice\n\ndef window(seq, n=2):\n    \"Returns a sliding window (of width n) over data from the iterable\"\n    \"   s -&gt; (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   \"\n    it = iter(seq)\n    result = tuple(islice(it, n))\n    if len(result) == n:\n        yield result\n    for elem in it:\n        result = result[1:] + (elem,)\n        yield result\n</code></pre>\n\n<p>The one from the docs is a little more succinct and uses <code>itertools</code> to greater effect I imagine.</p>\n"
    },
    "135": {
        "question_id": "492519",
        "answer_id": "494273",
        "question": "<p>I'm calling a function in Python which I know may stall and force me to restart the script. </p>\n\n<p>How do I call the function or what do I wrap it in so that if it takes longer than 5 seconds the script cancels it and does something else?</p>\n",
        "answer": "<p>You may use the <a href=\"http://docs.python.org/library/signal.html\" rel=\"noreferrer\">signal</a> package if you are running on UNIX:</p>\n\n<pre><code>In [1]: import signal\n\n# Register an handler for the timeout\nIn [2]: def handler(signum, frame):\n   ...:     print \"Forever is over!\"\n   ...:     raise Exception(\"end of time\")\n   ...: \n\n# This function *may* run for an indetermined time...\nIn [3]: def loop_forever():\n   ...:     import time\n   ...:     while 1:\n   ...:         print \"sec\"\n   ...:         time.sleep(1)\n   ...:         \n   ...:         \n\n# Register the signal function handler\nIn [4]: signal.signal(signal.SIGALRM, handler)\nOut[4]: 0\n\n# Define a timeout for your function\nIn [5]: signal.alarm(10)\nOut[5]: 0\n\nIn [6]: try:\n   ...:     loop_forever()\n   ...: except Exception, exc: \n   ...:     print exc\n   ....: \nsec\nsec\nsec\nsec\nsec\nsec\nsec\nsec\nForever is over!\nend of time\n\n# Cancel the timer if the function returned before timeout\n# (ok, mine won't but yours maybe will :)\nIn [7]: signal.alarm(0)\nOut[7]: 0\n</code></pre>\n\n<p>10 seconds after the call <code>alarm.alarm(10)</code>, the handler is called. This raises an exception that you can intercept from the regular Python code.</p>\n\n<p>This module doesn't play well with threads (but then, who does?)</p>\n\n<p><strong>Note that</strong> since we raise an exception when timeout happens, it may end up caught and ignored inside the function, for example of one such function:</p>\n\n<pre><code>def loop_forever():\n    while 1:\n        print 'sec'\n        try:\n            time.sleep(10)\n        except:\n            continue\n</code></pre>\n"
    },
    "136": {
        "question_id": "743806",
        "answer_id": "743823",
        "question": "<p>I want my Python function to split a sentence (input) and store each word in a list. My current code splits the sentence, but does not store the words as a list. How do I do that?</p>\n\n<pre><code>def split_line(text):\n\n    # split the text\n    words = text.split()\n\n    # for each word in the line:\n    for word in words:\n\n        # print the word\n        print(words)\n</code></pre>\n",
        "answer": "<pre><code>text.split()\n</code></pre>\n\n<p>This should be enough to store each word in a list.  <code>words</code> is already a list of the words from the sentence, so there is no need for the loop.</p>\n\n<p>Second, it might be a typo, but you have your loop a little messed up. If you really did want to use append, it would be:</p>\n\n<pre><code>words.append(word)\n</code></pre>\n\n<p>not </p>\n\n<pre><code>word.append(words)\n</code></pre>\n"
    },
    "137": {
        "question_id": "34835951",
        "answer_id": "34835952",
        "question": "<p>I have the following code:</p>\n\n<pre><code>[x**2 for x in range(10)]\n</code></pre>\n\n<p>When I run it in the Python Shell, it returns:</p>\n\n<pre><code>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n</code></pre>\n\n<p>I've searched and it seems this is called a <em>list comprehension</em>, but how does it work? </p>\n",
        "answer": "<p><a href=\"https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions\" rel=\"noreferrer\">From <strong>the documentation</strong>:</a></p>\n\n<blockquote>\n  <p>List comprehensions provide a concise way to create lists. Common applications are to make new lists where each element is the result of some operations applied to each member of another sequence or iterable, or to create a subsequence of those elements that satisfy a certain condition.</p>\n</blockquote>\n\n<hr>\n\n<p>About your question, the list comprehension does the same thing as the following \"plain\" Python code:</p>\n\n<pre><code>&gt;&gt;&gt; l = [] \n&gt;&gt;&gt; for x in range(10):\n...     l.append(x**2)\n&gt;&gt;&gt; l\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n</code></pre>\n\n<p>How do you write it in one line? Hmm...we can...probably...use <a href=\"https://docs.python.org/3/library/functions.html#map\" rel=\"noreferrer\"><code>map()</code></a> with <a href=\"https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions\" rel=\"noreferrer\"><code>lambda</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; list(map(lambda x: x**2, range(10)))\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n</code></pre>\n\n<p>But isn't it clearer and simpler to just use a list comprehension?</p>\n\n<pre><code>&gt;&gt;&gt; [x**2 for x in range(10)]\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n</code></pre>\n\n<hr>\n\n<p>Basically, we can do anything with <code>x</code>. Not only <code>x**2</code>. For example, run a method of <code>x</code>:</p>\n\n<pre><code>&gt;&gt;&gt; [x.strip() for x in ('foo\\n', 'bar\\n', 'baz\\n')]\n['foo', 'bar', 'baz']\n</code></pre>\n\n<p>Or use <code>x</code> as another function's argument:</p>\n\n<pre><code>&gt;&gt;&gt; [int(x) for x in ('1', '2', '3')]\n[1, 2, 3]\n</code></pre>\n\n<p>We can also, for example, use <code>x</code> as the key of a <code>dict</code> object. Let's see:</p>\n\n<pre><code>&gt;&gt;&gt; d = {'foo': '10', 'bar': '20', 'baz': '30'}\n&gt;&gt;&gt; [d[x] for x in ['foo', 'baz']]\n['10', '30']\n</code></pre>\n\n<p>How about a combination?  </p>\n\n<pre><code>&gt;&gt;&gt; d = {'foo': '10', 'bar': '20', 'baz': '30'}\n&gt;&gt;&gt; [int(d[x].rstrip('0')) for x in ['foo', 'baz']]\n[1, 3]\n</code></pre>\n\n<p>And so on.</p>\n\n<hr>\n\n<p>You can also use <code>if</code> or <code>if...else</code> in a list comprehension. For example, you only want odd numbers in <code>range(10)</code>. You can do:</p>\n\n<pre><code>&gt;&gt;&gt; l = []\n&gt;&gt;&gt; for x in range(10):\n...     if x%2:\n...         l.append(x)\n&gt;&gt;&gt; l\n[1, 3, 5, 7, 9]\n</code></pre>\n\n<p>Ah that's too complex. What about the following version?</p>\n\n<pre><code>&gt;&gt;&gt; [x for x in range(10) if x%2]\n[1, 3, 5, 7, 9]\n</code></pre>\n\n<p>To use an <code>if...else</code> ternary expression, you need put the <code>if ... else ...</code> after <code>x</code>, <strong>not</strong> after <code>range(10)</code>:</p>\n\n<pre><code>&gt;&gt;&gt; [i if i%2 != 0 else None for i in range(10)]\n[None, 1, None, 3, None, 5, None, 7, None, 9]\n</code></pre>\n\n<hr>\n\n<p>Have you heard about <a href=\"https://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions\" rel=\"noreferrer\"><strong>nested list comprehension</strong></a>? You can put <em>two or more <code>for</code>s in one list comprehension</em>. For example:</p>\n\n<pre><code>&gt;&gt;&gt; [i for x in [[1, 2, 3], [4, 5, 6]] for i in x]\n[1, 2, 3, 4, 5, 6]\n\n&gt;&gt;&gt; [j for x in [[[1, 2], [3]], [[4, 5], [6]]] for i in x for j in i]\n[1, 2, 3, 4, 5, 6]\n</code></pre>\n\n<p>Let's talk about the first part, <code>for x in [[1, 2, 3], [4, 5, 6]]</code> which gives <code>[1, 2, 3]</code> and <code>[4, 5, 6]</code>. Then, <code>for i in x</code> gives <code>1</code>, <code>2</code>, <code>3</code> and <code>4</code>, <code>5</code>, <code>6</code>. </p>\n\n<p><strong>Warning:</strong> You always need put <code>for x in [[1, 2, 3], [4, 5, 6]]</code> <strong>before</strong> <code>for i in x</code>:</p>\n\n<pre><code>&gt;&gt;&gt; [j for j in x for x in [[1, 2, 3], [4, 5, 6]]]\nTraceback (most recent call last):\n  File \"&lt;input&gt;\", line 1, in &lt;module&gt;\nNameError: name 'x' is not defined\n</code></pre>\n\n<hr>\n\n<p>We also have <em>set comprehensions</em>, <em>dict comprehensions</em>, and <em>generator expressions</em>.</p>\n\n<p><strong>set comprehensions</strong> and list comprehensions are basically the same, but the former returns a <em>set</em> instead of a <em>list</em>:</p>\n\n<pre><code>&gt;&gt;&gt; {x for x in [1, 1, 2, 3, 3, 1]}\n{1, 2, 3}\n</code></pre>\n\n<p>It's the same as:</p>\n\n<pre><code>&gt;&gt;&gt; set([i for i in [1, 1, 2, 3, 3, 1]])\n{1, 2, 3}\n</code></pre>\n\n<p>A <a href=\"https://www.python.org/dev/peps/pep-0274/\" rel=\"noreferrer\"><strong>dict comprehension</strong></a> <em>looks like</em> a set comprehension, but it uses <code>{key: value for key, value in ...}</code> or <code>{i: i for i in ...}</code> instead of  <code>{i for i in ...}</code>.</p>\n\n<p>For example:</p>\n\n<pre><code>&gt;&gt;&gt; {i: i**2 for i in range(5)}\n{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\n</code></pre>\n\n<p>And it equals:</p>\n\n<pre><code>&gt;&gt;&gt; d = {}\n&gt;&gt;&gt; for i in range(5):\n...     d[i] = i**2\n&gt;&gt;&gt; d\n{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\n</code></pre>\n\n<p>Does <code>(i for i in range(5))</code> give a <em>tuple</em>? No!, it's a <a href=\"https://www.python.org/dev/peps/pep-0289/\" rel=\"noreferrer\"><strong>generator expression</strong></a>. Which returns a <strong>generator</strong>:</p>\n\n<pre><code>&gt;&gt;&gt; (i for i in range(5))\n&lt;generator object &lt;genexpr&gt; at 0x7f52703fbca8&gt;\n</code></pre>\n\n<p>It's the same as:</p>\n\n<pre><code>&gt;&gt;&gt; def gen():\n...     for i in range(5):\n...         yield i\n&gt;&gt;&gt; gen()\n&lt;generator object gen at 0x7f5270380db0&gt;\n</code></pre>\n\n<p>And you can use it as a generator:</p>\n\n<pre><code>&gt;&gt;&gt; gen = (i for i in range(5))\n&gt;&gt;&gt; next(gen)\n0\n&gt;&gt;&gt; next(gen)\n1\n&gt;&gt;&gt; list(gen)\n[2, 3, 4]\n&gt;&gt;&gt; next(gen)\nTraceback (most recent call last):\n  File \"&lt;input&gt;\", line 1, in &lt;module&gt;\nStopIteration\n</code></pre>\n\n<p><strong>Note:</strong> If you use a list comprehension <em>inside a function</em>, you don't need the <code>[]</code> if that function could loop over a generator. For example, <a href=\"https://docs.python.org/3/library/functions.html#sum\" rel=\"noreferrer\"><code>sum()</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; sum(i**2 for i in range(5))\n30\n</code></pre>\n\n<p><strong>Related</strong> (about generators): <a href=\"https://stackoverflow.com/questions/1756096/understanding-generators-in-python\">Understanding Generators in Python</a>.</p>\n"
    },
    "138": {
        "question_id": "209840",
        "answer_id": "209854",
        "question": "<p>Imagine that you have:</p>\n\n<pre><code>keys = ['name', 'age', 'food']\nvalues = ['Monty', 42, 'spam']\n</code></pre>\n\n<p>What is the simplest way to produce the following dictionary?</p>\n\n<pre><code>a_dict = {'name' : 'Monty', 'age' : 42, 'food' : 'spam'}\n</code></pre>\n",
        "answer": "<p>Like this:</p>\n\n<pre><code>&gt;&gt;&gt; keys = ['a', 'b', 'c']\n&gt;&gt;&gt; values = [1, 2, 3]\n&gt;&gt;&gt; dictionary = dict(zip(keys, values))\n&gt;&gt;&gt; print(dictionary)\n{'a': 1, 'b': 2, 'c': 3}\n</code></pre>\n\n<p>Voila :-)  The pairwise <code>dict</code> constructor and <code>zip</code> function are awesomely useful: <a href=\"https://docs.python.org/3/library/functions.html#func-dict\" rel=\"noreferrer\">https://docs.python.org/3/library/functions.html#func-dict</a></p>\n"
    },
    "139": {
        "question_id": "4760215",
        "answer_id": "4760517",
        "question": "<p>I want to write a function that will execute a shell command and return its output <strong>as a string</strong>, no matter, is it an error or success message. I just want to get the same result that I would have gotten with the command line.</p>\n\n<p>What would be a code example that would do such a thing?</p>\n\n<p>For example:</p>\n\n<pre><code>def run_command(cmd):\n    # ??????\n\nprint run_command('mysqladmin create test -uroot -pmysqladmin12')\n# Should output something like:\n# mysqladmin: CREATE DATABASE failed; error: 'Can't create database 'test'; database exists'\n</code></pre>\n",
        "answer": "<p>The answer to this question depends on the version of Python you're using. The simplest approach is to use the <a href=\"https://docs.python.org/3/library/subprocess.html#subprocess.check_output\" rel=\"noreferrer\"><code>subprocess.check_output</code></a> function:</p>\n\n<pre><code>&gt;&gt;&gt; subprocess.check_output(['ls', '-l'])\nb'total 0\\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\\n'\n</code></pre>\n\n<p><code>check_output</code> runs a single program that takes only arguments as input.<sup>1</sup> It returns the result exactly as printed to <code>stdout</code>. If you need to write input to <code>stdin</code>, skip ahead to the <code>run</code> or <code>Popen</code> sections. If you want to execute complex shell commands, see the note on <code>shell=True</code> at the end of this answer.</p>\n\n<p>The <code>check_output</code> function works on almost all versions of Python still in wide use (2.7+).<sup>2</sup> But for more recent versions, it is no longer the recommended approach.</p>\n\n<h3>Modern versions of Python (3.5 or higher): <code>run</code></h3>\n\n<p>If you're using <strong>Python 3.5</strong> or higher, and <strong>do not need backwards compatibility</strong>, the <a href=\"https://docs.python.org/3/library/subprocess.html#using-the-subprocess-module\" rel=\"noreferrer\">new <code>run</code> function</a> is recommended. It provides a very general, high-level API for the <code>subprocess</code> module. To capture the output of a program, pass the <code>subprocess.PIPE</code> flag to the <code>stdout</code> keyword argument. Then access the <code>stdout</code> attribute of the returned <a href=\"https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess\" rel=\"noreferrer\"><code>CompletedProcess</code></a> object:</p>\n\n<pre><code>&gt;&gt;&gt; import subprocess\n&gt;&gt;&gt; result = subprocess.run(['ls', '-l'], stdout=subprocess.PIPE)\n&gt;&gt;&gt; result.stdout\nb'total 0\\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\\n'\n</code></pre>\n\n<p>The return value is a <code>bytes</code> object, so if you want a proper string, you'll need to <code>decode</code> it. Assuming the called process returns a UTF-8-encoded string:</p>\n\n<pre><code>&gt;&gt;&gt; result.stdout.decode('utf-8')\n'total 0\\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\\n'\n</code></pre>\n\n<p>This can all be compressed to a one-liner:</p>\n\n<pre><code>&gt;&gt;&gt; subprocess.run(['ls', '-l'], stdout=subprocess.PIPE).stdout.decode('utf-8')\n'total 0\\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\\n'\n</code></pre>\n\n<p>If you want to pass input to the process's <code>stdin</code>, pass a <code>bytes</code> object to the <code>input</code> keyword argument:</p>\n\n<pre><code>&gt;&gt;&gt; cmd = ['awk', 'length($0) &gt; 5']\n&gt;&gt;&gt; input = 'foo\\nfoofoo\\n'.encode('utf-8')\n&gt;&gt;&gt; result = subprocess.run(cmd, stdout=subprocess.PIPE, input=input)\n&gt;&gt;&gt; result.stdout.decode('utf-8')\n'foofoo\\n'\n</code></pre>\n\n<p>You can capture errors by passing <code>stderr=subprocess.PIPE</code> (capture to <code>result.stderr</code>) or <code>stderr=subprocess.STDOUT</code> (capture to <code>result.stdout</code> along with regular output). When security is not a concern, you can also run more complex shell commands by passing <code>shell=True</code> as described in the notes below.</p>\n\n<p>This adds just a bit of complexity, compared to the old way of doing things. But I think it's worth the payoff: now you can do almost anything you need to do with the <code>run</code> function alone.</p>\n\n<h3>Older versions of Python (2.7-3.4): <code>check_output</code></h3>\n\n<p>If you are using an older version of Python, or need modest backwards compatibility, you can probably use the <code>check_output</code> function as briefly described above. It has been available since Python 2.7.</p>\n\n<pre><code>subprocess.check_output(*popenargs, **kwargs)  \n</code></pre>\n\n<p>It takes takes the same arguments as <code>Popen</code> (see below), and returns a string containing the program's output. The beginning of this answer has a more detailed usage example. In Python 3.5 and greater, <code>check_output</code> is equivalent to executing <code>run</code> with <code>check=True</code> and <code>stdout=PIPE</code>, and returning just the <code>stdout</code> attribute. </p>\n\n<p>You can pass <code>stderr=subprocess.STDOUT</code> to ensure that error messages are included in the returned output -- but in some versions of Python passing <code>stderr=subprocess.PIPE</code> to <code>check_output</code> can cause <a href=\"https://docs.python.org/2/library/subprocess.html#subprocess.check_output\" rel=\"noreferrer\">deadlocks</a>. When security is not a concern, you can also run more complex shell commands by passing <code>shell=True</code> as described in the notes below.</p>\n\n<p>If you need to pipe from <code>stderr</code> or pass input to the process, <code>check_output</code> won't be up to the task. See the <code>Popen</code> examples below in that case. </p>\n\n<h3>Complex applications &amp; legacy versions of Python (2.6 and below): <code>Popen</code></h3>\n\n<p>If you need deep backwards compatibility, or if you need more sophisticated functionality than <code>check_output</code> provides, you'll have to work directly with <code>Popen</code> objects, which encapsulate the low-level API for subprocesses. </p>\n\n<p>The <code>Popen</code> constructor accepts either <strong>a single command</strong> without arguments, or <strong>a list</strong> containing a command as its first item, followed by any number of arguments, each as a separate item in the list. <a href=\"https://docs.python.org/3/library/shlex.html\" rel=\"noreferrer\"><code>shlex.split</code></a> can help parse strings into appropriately formatted lists. <code>Popen</code> objects also accept a <a href=\"https://docs.python.org/3/library/subprocess.html#subprocess.Popen\" rel=\"noreferrer\">host of different arguments</a> for process IO management and low-level configuration. </p>\n\n<p>To send input and capture output, <code>communicate</code> is almost always the preferred method. As in:</p>\n\n<pre><code>output = subprocess.Popen([\"mycmd\", \"myarg\"], \n                          stdout=subprocess.PIPE).communicate()[0]\n</code></pre>\n\n<p>Or </p>\n\n<pre><code>&gt;&gt;&gt; import subprocess\n&gt;&gt;&gt; p = subprocess.Popen(['ls', '-a'], stdout=subprocess.PIPE, \n...                                    stderr=subprocess.PIPE)\n&gt;&gt;&gt; out, err = p.communicate()\n&gt;&gt;&gt; print out\n.\n..\nfoo\n</code></pre>\n\n<p>If you set <code>stdin=PIPE</code>, <code>communicate</code> also allows you to pass data to the process via <code>stdin</code>:</p>\n\n<pre><code>&gt;&gt;&gt; cmd = ['awk', 'length($0) &gt; 5']\n&gt;&gt;&gt; p = subprocess.Popen(cmd, stdout=subprocess.PIPE,\n...                           stderr=subprocess.PIPE,\n...                           stdin=subprocess.PIPE)\n&gt;&gt;&gt; out, err = p.communicate('foo\\nfoofoo\\n')\n&gt;&gt;&gt; print out\nfoofoo\n</code></pre>\n\n<p>Note <a href=\"https://stackoverflow.com/a/21867841/577088\">Aaron Hall's answer</a>, which indicates that on some systems, you may need to set <code>stdout</code>, <code>stderr</code>, and <code>stdin</code> all to <code>PIPE</code> (or <code>DEVNULL</code>) to get <code>communicate</code> to work at all.</p>\n\n<p>In some rare cases, you may need complex, real-time output capturing. <a href=\"https://stackoverflow.com/a/4760274/577088\">Vartec</a>'s answer suggests a way forward, but methods other than <code>communicate</code> are prone to deadlocks if not used carefully.</p>\n\n<p>As with all the above functions, when security is not a concern, you can run more complex shell commands by passing <code>shell=True</code>.</p>\n\n<h3>Notes</h3>\n\n<p><strong>1. Running shell commands: the <code>shell=True</code> argument</strong></p>\n\n<p>Normally, each call to <code>run</code>, <code>check_output</code>, or the <code>Popen</code> constructor executes a <em>single program</em>. That means no fancy bash-style pipes. If you want to run complex shell commands, you can pass <code>shell=True</code>, which all three functions support.</p>\n\n<p>However, doing so raises <a href=\"https://docs.python.org/3/library/subprocess.html#security-considerations\" rel=\"noreferrer\">security concerns</a>. If you're doing anything more than light scripting, you might be better off calling each process separately, and passing the output from each as an input to the next, via</p>\n\n<pre><code>run(cmd, [stdout=etc...], input=other_output)\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>Popen(cmd, [stdout=etc...]).communicate(other_output)\n</code></pre>\n\n<p>The temptation to directly connect pipes is strong; resist it. Otherwise, you'll likely see deadlocks or have to do hacky things like <a href=\"https://stackoverflow.com/questions/6341451/piping-together-several-subprocesses\">this</a>.</p>\n\n<p><strong>2. Unicode considerations</strong></p>\n\n<p><code>check_output</code> returns a string in Python 2, but a <code>bytes</code> object in Python 3. It's worth taking a moment to <a href=\"https://docs.python.org/3/howto/unicode.html\" rel=\"noreferrer\">learn about unicode</a> if you haven't already.</p>\n"
    },
    "140": {
        "question_id": "265960",
        "answer_id": "266162",
        "question": "<p>It seems like there should be a simpler way than:</p>\n\n<pre><code>import string\ns = \"string. With. Punctuation?\" # Sample string \nout = s.translate(string.maketrans(\"\",\"\"), string.punctuation)\n</code></pre>\n\n<p>Is there?</p>\n",
        "answer": "<p>From an efficiency perspective, you're not going to beat </p>\n\n<pre><code>s.translate(None, string.punctuation)\n</code></pre>\n\n<p>For higher versions of Python use the following code:</p>\n\n<pre><code>s.translate(str.maketrans('', '', string.punctuation))\n</code></pre>\n\n<p>It's performing raw string operations in C with a lookup table - there's not much that will beat that but writing your own C code.</p>\n\n<p>If speed isn't a worry, another option though is:</p>\n\n<pre><code>exclude = set(string.punctuation)\ns = ''.join(ch for ch in s if ch not in exclude)\n</code></pre>\n\n<p>This is faster than s.replace with each char, but won't perform as well as non-pure python approaches such as regexes or string.translate, as you can see from the below timings.  For this type of problem, doing it at as low a level as possible pays off.</p>\n\n<p>Timing code:</p>\n\n<pre><code>import re, string, timeit\n\ns = \"string. With. Punctuation\"\nexclude = set(string.punctuation)\ntable = string.maketrans(\"\",\"\")\nregex = re.compile('[%s]' % re.escape(string.punctuation))\n\ndef test_set(s):\n    return ''.join(ch for ch in s if ch not in exclude)\n\ndef test_re(s):  # From Vinko's solution, with fix.\n    return regex.sub('', s)\n\ndef test_trans(s):\n    return s.translate(table, string.punctuation)\n\ndef test_repl(s):  # From S.Lott's solution\n    for c in string.punctuation:\n        s=s.replace(c,\"\")\n    return s\n\nprint \"sets      :\",timeit.Timer('f(s)', 'from __main__ import s,test_set as f').timeit(1000000)\nprint \"regex     :\",timeit.Timer('f(s)', 'from __main__ import s,test_re as f').timeit(1000000)\nprint \"translate :\",timeit.Timer('f(s)', 'from __main__ import s,test_trans as f').timeit(1000000)\nprint \"replace   :\",timeit.Timer('f(s)', 'from __main__ import s,test_repl as f').timeit(1000000)\n</code></pre>\n\n<p>This gives the following results:</p>\n\n<pre><code>sets      : 19.8566138744\nregex     : 6.86155414581\ntranslate : 2.12455511093\nreplace   : 28.4436721802\n</code></pre>\n"
    },
    "141": {
        "question_id": "6269765",
        "answer_id": "6269785",
        "question": "<p>Apparently, the following is valid syntax</p>\n\n<pre><code>my_string = b'The string'\n</code></pre>\n\n<p>I would like to know:</p>\n\n<ol>\n<li>What does this <code>b</code> character in front of the string mean?</li>\n<li>What are the effects of using it?</li>\n<li>What are appropriate situations to use it?</li>\n</ol>\n\n<p>I found a <a href=\"https://stackoverflow.com/q/4749442/346561\">related question</a> right here on SO, but that question is about PHP though, and it states the <code>b</code> is used to indicate the string is binary, as opposed to Unicode, which was needed for code to be compatible from version of PHP &lt; 6, when migrating to PHP 6. I don't think this applies to Python.</p>\n\n<p>I did find <a href=\"http://docs.python.org/tutorial/introduction.html#unicode-strings\" rel=\"noreferrer\">this documentation</a> on the Python site about using a <code>u</code> character in the same syntax to specify a string as Unicode. Unfortunately, it doesn't mention the <strong>b</strong> character anywhere in that document.</p>\n\n<p>Also, just out of curiosity, are there more symbols than the <code>b</code> and <code>u</code> that do other things?</p>\n",
        "answer": "<p>To quote <a href=\"https://docs.python.org/2/reference/lexical_analysis.html#string-literals\" rel=\"noreferrer\">the Python 2.x documentation</a>:</p>\n\n<blockquote>\n  <p>A prefix of 'b' or 'B' is ignored in\n  Python 2; it indicates that the\n  literal should become a bytes literal\n  in Python 3 (e.g. when code is\n  automatically converted with 2to3). A\n  'u' or 'b' prefix may be followed by\n  an 'r' prefix.</p>\n</blockquote>\n\n<p>The <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals\" rel=\"noreferrer\">Python 3 documentation</a> states:</p>\n\n<blockquote>\n  <p>Bytes literals are always prefixed with 'b' or 'B'; they produce an instance of the bytes type instead of the str type. They may only contain ASCII characters; bytes with a numeric value of 128 or greater must be expressed with escapes.</p>\n</blockquote>\n"
    },
    "142": {
        "question_id": "4675728",
        "answer_id": "4675744",
        "question": "<p>How do I redirect stdout to an arbitrary file in Python?</p>\n\n<p>When a long-running Python script (e.g, web application) is started from within the ssh session and backgounded, and the ssh session is closed, the application will raise IOError and fail the moment it tries to write to stdout. I needed to find a way to make the application and modules output to a file rather than stdout to prevent failure due to IOError. Currently, I employ nohup to redirect output to a file, and that gets the job done, but I was wondering if there was a way to do it without using nohup, out of curiosity.</p>\n\n<p>I have already tried <code>sys.stdout = open('somefile', 'w')</code>, but this does not seem to prevent some external modules from still outputting to terminal (or maybe the <code>sys.stdout = ...</code> line did not fire at all). I know it should work from simpler scripts I've tested on, but I also didn't have time yet to test on a web application yet.</p>\n",
        "answer": "<p>If you want to do the redirection within the Python script, set <code>sys.stdout</code> to an file object does the trick:</p>\n\n<pre><code>import sys\nsys.stdout = open('file', 'w')\nprint('test')\n</code></pre>\n\n<p>A far more common method is to use shell redirection when executing (same on Windows and Linux):</p>\n\n<pre><code>$ python foo.py &gt; file\n</code></pre>\n"
    },
    "143": {
        "question_id": "4693120",
        "answer_id": "4693385",
        "question": "<p>What I understand from reading the documentation is that Python has a separate namespace for functions, and if I want to use a global variable in that function, I need to use <code>global</code>.</p>\n\n<p>I'm using Python 2.7 and I tried this little test</p>\n\n<pre><code>&gt;&gt;&gt; sub = ['0', '0', '0', '0']\n&gt;&gt;&gt; def getJoin():\n...     return '.'.join(sub)\n...\n&gt;&gt;&gt; getJoin()\n'0.0.0.0'\n</code></pre>\n\n<p>It seems things are working fine even without <code>global</code>. I was able to access global variable without any problem.</p>\n\n<p>Am I missing anything? Also, following is from Python documentation:</p>\n\n<blockquote>\n  <p>Names listed in a global statement\n  must not be defined as formal\n  parameters or in a for loop control\n  target, class definition, function\n  definition, or import statement.</p>\n</blockquote>\n\n<p>While formal parameters and class definition make sense to me, I'm not able to understand the restriction on for loop control target and function definition.</p>\n",
        "answer": "<p>The keyword <code>global</code> is only useful to change or create global variables in a local context, although creating global variables is seldom considered a good solution.</p>\n\n<pre><code>def bob():\n    me = \"locally defined\"    # Defined only in local context\n    print me\n\nbob()\nprint me     # Asking for a global variable\n</code></pre>\n\n<p>The above will give you:</p>\n\n<pre><code>locally defined\nTraceback (most recent call last):\n  File \"file.py\", line 9, in &lt;module&gt;\n    print me\nNameError: name 'me' is not defined\n</code></pre>\n\n<p>While if you use the <code>global</code> statement, the variable will become available \"outside\" the scope of the function, effectively becoming a global variable.</p>\n\n<pre><code>def bob():\n    global me\n    me = \"locally defined\"   # Defined locally but declared as global\n    print me\n\nbob()\nprint me     # Asking for a global variable\n</code></pre>\n\n<p>So the above code will give you:</p>\n\n<pre><code>locally defined\nlocally defined\n</code></pre>\n\n<p>In addition, due to the nature of python, you could also use <code>global</code> to declare functions, classes or other objects in a local context. Although I would advise against it since it causes nightmares if something goes wrong or needs debugging.</p>\n"
    },
    "144": {
        "question_id": "2715847",
        "answer_id": "2716032",
        "question": "<p>I'm using Python's <code>subprocess.communicate()</code> to read stdout from a process that runs for about a minute. </p>\n\n<p>How can I print out each line of that process's <code>stdout</code> in a streaming fashion, so that I can see the output as it's generated, but still block on the process terminating before continuing? </p>\n\n<p><code>subprocess.communicate()</code> appears to give all the output at once.</p>\n",
        "answer": "<p><strong>Please note, I think <a href=\"https://stackoverflow.com/a/17698359/190597\">J.F. Sebastian's method (below)</a> is better.</strong></p>\n\n<hr>\n\n<p>Here is an simple example (with no checking for errors): </p>\n\n<pre><code>import subprocess\nproc = subprocess.Popen('ls',\n                       shell=True,\n                       stdout=subprocess.PIPE,\n                       )\nwhile proc.poll() is None:\n    output = proc.stdout.readline()\n    print output,\n</code></pre>\n\n<p>If <code>ls</code> ends too fast, then the while loop may end before you've read all the data.</p>\n\n<p>You can catch the remainder in stdout this way:</p>\n\n<pre><code>output = proc.communicate()[0]\nprint output,\n</code></pre>\n"
    },
    "145": {
        "question_id": "39922986",
        "answer_id": "39923012",
        "question": "<p>I am using this data frame:</p>\n\n<pre><code>Fruit   Date      Name  Number\nApples  10/6/2016 Bob    7\nApples  10/6/2016 Bob    8\nApples  10/6/2016 Mike   9\nApples  10/7/2016 Steve 10\nApples  10/7/2016 Bob    1\nOranges 10/7/2016 Bob    2\nOranges 10/6/2016 Tom   15\nOranges 10/6/2016 Mike  57\nOranges 10/6/2016 Bob   65\nOranges 10/7/2016 Tony   1\nGrapes  10/7/2016 Bob    1\nGrapes  10/7/2016 Tom   87\nGrapes  10/7/2016 Bob   22\nGrapes  10/7/2016 Bob   12\nGrapes  10/7/2016 Tony  15\n</code></pre>\n\n<p>I want to aggregate this by name and then by fruit to get a total number of fruit per name.</p>\n\n<pre><code>Bob,Apples,16 ( for example )\n</code></pre>\n\n<p>I tried grouping by Name and Fruit but how do I get the total number of fruit.</p>\n",
        "answer": "<p>use the <code>sum()</code> method</p>\n\n<pre><code>df.groupby(['Fruit','Name']).sum()\n\nOut[31]: \n               Number\nFruit   Name         \nApples  Bob        16\n        Mike        9\n        Steve      10\nGrapes  Bob        35\n        Tom        87\n        Tony       15\nOranges Bob        67\n        Mike       57\n        Tom        15\n        Tony        1\n</code></pre>\n"
    },
    "146": {
        "question_id": "2958684",
        "answer_id": "2958717",
        "question": "<p>I was trying to normalize a set of numbers from -100 to 0 to a range of 10-100 and was having problems only to notice that even with no variables at all, this does not evaluate the way I would expect it to:</p>\n\n<pre><code>&gt;&gt;&gt; (20-10) / (100-10)\n0\n</code></pre>\n\n<p>Float division doesn't work either:</p>\n\n<pre><code>&gt;&gt;&gt; float((20-10) / (100-10))\n0.0\n</code></pre>\n\n<p>If either side of the division is cast to a float it will work:</p>\n\n<pre><code>&gt;&gt;&gt; (20-10) / float((100-10))\n0.1111111111111111\n</code></pre>\n\n<p>Each side in the first example is evaluating as an int which means the final answer will be cast to an int. Since 0.111 is less than .5, it rounds to 0.  It is not transparent in my opinion, but I guess that's the way it is.</p>\n\n<p>What is the explanation?</p>\n",
        "answer": "<p>You're using Python 2.x, where integer divisions will truncate instead of becoming a floating point number.</p>\n\n<pre><code>&gt;&gt;&gt; 1 / 2\n0\n</code></pre>\n\n<p>You should make one of them a <code>float</code>:</p>\n\n<pre><code>&gt;&gt;&gt; float(10 - 20) / (100 - 10)\n-0.1111111111111111\n</code></pre>\n\n<p>or <code>from __future__ import division</code>, which the forces <code>/</code> to adopt Python 3.x's behavior that always returns a float.</p>\n\n<pre><code>&gt;&gt;&gt; from __future__ import division\n&gt;&gt;&gt; (10 - 20) / (100 - 10)\n-0.1111111111111111\n</code></pre>\n"
    },
    "147": {
        "question_id": "16424091",
        "answer_id": "16424553",
        "question": "<p>This code works:</p>\n\n<pre><code>import tkinter\n\nroot = tkinter.Tk()\ncanvas = tkinter.Canvas(root)\ncanvas.grid(row = 0, column = 0)\nphoto = tkinter.PhotoImage(file = './test.gif')\ncanvas.create_image(0, 0, image=photo)\nroot.mainloop()\n</code></pre>\n\n<p>It shows me the image.</p>\n\n<p>Now, this code compiles but it doesn't show me the image, and I don't know why, because it's the same code, in a class:</p>\n\n<pre><code>import tkinter\n\nclass Test:\n    def __init__(self, master):\n        canvas = tkinter.Canvas(master)\n        canvas.grid(row = 0, column = 0)\n        photo = tkinter.PhotoImage(file = './test.gif')\n        canvas.create_image(0, 0, image=photo)\n\nroot = tkinter.Tk()\ntest = Test(root)\nroot.mainloop()\n</code></pre>\n",
        "answer": "<p>The variable <code>photo</code> is a local variable which gets garbage collected after the class is instantiated. Save a reference to the photo, for example:</p>\n\n<pre><code>self.photo = tkinter.PhotoImage(...)\n</code></pre>\n\n<p>If you do a Google search on \"tkinter image doesn't display\", the first result is this:</p>\n\n<p><a href=\"http://effbot.org/pyfaq/why-do-my-tkinter-images-not-appear.htm\" rel=\"noreferrer\">http://effbot.org/pyfaq/why-do-my-tkinter-images-not-appear.htm</a></p>\n"
    },
    "148": {
        "question_id": "287871",
        "answer_id": "287944",
        "question": "<p>How can I output colored text to the terminal, in Python?\nWhat is the best Unicode symbol to represent a solid block?</p>\n",
        "answer": "<p>This somewhat depends on what platform you are on. The most common way to do this is by printing ANSI escape sequences. For a simple example, here's some python code from the <a href=\"https://svn.blender.org/svnroot/bf-blender/trunk/blender/build_files/scons/tools/bcolors.py\" rel=\"noreferrer\">blender build scripts</a>:</p>\n\n<pre><code>class bcolors:\n    HEADER = '\\033[95m'\n    OKBLUE = '\\033[94m'\n    OKGREEN = '\\033[92m'\n    WARNING = '\\033[93m'\n    FAIL = '\\033[91m'\n    ENDC = '\\033[0m'\n    BOLD = '\\033[1m'\n    UNDERLINE = '\\033[4m'\n</code></pre>\n\n<p>To use code like this, you can do something like </p>\n\n<pre><code>print bcolors.WARNING + \"Warning: No active frommets remain. Continue?\" \n      + bcolors.ENDC\n</code></pre>\n\n<p>This will work on unixes including OS X, linux and windows (provided you use <a href=\"https://github.com/adoxa/ansicon\" rel=\"noreferrer\">ANSICON</a>, or in Windows 10 provided you enable <a href=\"https://msdn.microsoft.com/en-us/library/mt638032\" rel=\"noreferrer\">VT100 emulation</a>). There are ansi codes for setting the color, moving the cursor, and more.</p>\n\n<p>If you are going to get complicated with this (and it sounds like you are if you are writing a game), you should look into the \"curses\" module, which handles a lot of the complicated parts of this for you. The <a href=\"http://docs.python.org/howto/curses.html\" rel=\"noreferrer\" title=\"Python Curses howto\">Python Curses HowTO</a> is a good introduction.</p>\n\n<p>If you are not using extended ASCII (i.e. not on a PC), you are stuck with the ascii characters below 127, and '#' or '@' is probably your best bet for a block. If you can ensure your terminal is using a IBM <a href=\"http://telecom.tbi.net/asc-ibm.html\" rel=\"noreferrer\">extended ascii character set</a>, you have many more options. Characters 176, 177, 178 and 219 are the \"block characters\".</p>\n\n<p>Some modern text-based programs, such as \"Dwarf Fortress\", emulate text mode in a graphical mode, and use images of the classic PC font. You can find some of these bitmaps that you can use on the <a href=\"http://dwarffortresswiki.org/DF2014:Tilesets\" rel=\"noreferrer\">Dwarf Fortress Wiki</a> see (<a href=\"http://dwarffortresswiki.org/Tileset_repository\" rel=\"noreferrer\">user-made tilesets</a>).</p>\n\n<p>The <a href=\"http://en.wikipedia.org/wiki/TMDC\" rel=\"noreferrer\" title=\"text mode demo contest\">Text Mode Demo Contest</a> has more resources for doing graphics in text mode.</p>\n\n<p>Hmm.. I think got a little carried away on this answer. I am in the midst of planning an epic text-based adventure game, though. Good luck with your colored text!</p>\n"
    },
    "149": {
        "question_id": "744373",
        "answer_id": "744403",
        "question": "<p>What will happen if two modules import each other?</p>\n\n<p>To generalize the problem, what about the cyclic imports in Python?</p>\n",
        "answer": "<p>There was a really good discussion on this over at <a href=\"http://groups.google.com/group/comp.lang.python/browse_thread/thread/1d80a1c6db2b867c\" rel=\"noreferrer\">comp.lang.python</a> last year. It answers your question pretty thoroughly.</p>\n\n<blockquote>\n  <p>Imports are pretty straightforward really. Just remember the following:</p>\n  \n  <p>'import' and 'from xxx import yyy' are executable statements. They execute\n  when the running program reaches that line.</p>\n  \n  <p>If a module is not in sys.modules, then an import creates the new module\n  entry in sys.modules and then executes the code in the module. It does not\n  return control to the calling module until the execution has completed.</p>\n  \n  <p>If a module does exist in sys.modules then an import simply returns that\n  module whether or not it has completed executing. That is the reason why\n  cyclic imports may return modules which appear to be partly empty.</p>\n  \n  <p>Finally, the executing script runs in a module named __main__, importing\n  the script under its own name will create a new module unrelated to\n  __main__.</p>\n  \n  <p>Take that lot together and you shouldn't get any surprises when importing\n  modules. </p>\n</blockquote>\n"
    },
    "150": {
        "question_id": "207000",
        "answer_id": "207128",
        "question": "<p>Is there any meaningful distinction between:</p>\n\n<pre><code>class A(object):\n    foo = 5   # some default value\n</code></pre>\n\n<p>vs.</p>\n\n<pre><code>class B(object):\n    def __init__(self, foo=5):\n        self.foo = foo\n</code></pre>\n\n<p>If you're creating a lot of instances, is there any difference in performance or space requirements for the two styles? When you read the code, do you consider the meaning of the two styles to be significantly different?</p>\n",
        "answer": "<p>Beyond performance considerations, there is a significant <em>semantic</em> difference.  In the class attribute case, there is just one object referred to.  In the instance-attribute-set-at-instantiation, there can be multiple objects referred to.  For instance</p>\n\n<pre><code>&gt;&gt;&gt; class A: foo = []\n&gt;&gt;&gt; a, b = A(), A()\n&gt;&gt;&gt; a.foo.append(5)\n&gt;&gt;&gt; b.foo\n[5]\n&gt;&gt;&gt; class A:\n...  def __init__(self): self.foo = []\n&gt;&gt;&gt; a, b = A(), A()\n&gt;&gt;&gt; a.foo.append(5)\n&gt;&gt;&gt; b.foo    \n[]\n</code></pre>\n"
    },
    "151": {
        "question_id": "988228",
        "answer_id": "988251",
        "question": "<p>How can I convert the <code>str</code> representation of a <code>dict</code>, such as the following string, into a <code>dict</code>?</p>\n\n<pre><code>s = \"{'muffin' : 'lolz', 'foo' : 'kitty'}\"\n</code></pre>\n\n<p>I prefer not to use <code>eval</code>. What else can I use?</p>\n\n<p>The main reason for this, is one of my coworkers classes he wrote, converts all input into strings. I'm not in the mood to go and modify his classes, to deal with this issue.</p>\n",
        "answer": "<p>Starting in Python 2.6 you can use the built-in <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\" rel=\"noreferrer\"><code>ast.literal_eval</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; import ast\n&gt;&gt;&gt; ast.literal_eval(\"{'muffin' : 'lolz', 'foo' : 'kitty'}\")\n{'muffin': 'lolz', 'foo': 'kitty'}\n</code></pre>\n\n<p>This is safer than using <code>eval</code>.  As its own docs say:</p>\n\n<pre>\n>>> help(ast.literal_eval)\nHelp on function literal_eval in module ast:\n\nliteral_eval(node_or_string)\n    Safely evaluate an expression node or a string containing a Python\n    expression.  The string or node provided may only consist of the following\n    Python literal structures: strings, numbers, tuples, lists, dicts, booleans,\n    and None.\n</pre>\n\n<p>For example:</p>\n\n<pre><code>&gt;&gt;&gt; eval(\"shutil.rmtree('mongo')\")\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n  File \"/opt/Python-2.6.1/lib/python2.6/shutil.py\", line 208, in rmtree\n    onerror(os.listdir, path, sys.exc_info())\n  File \"/opt/Python-2.6.1/lib/python2.6/shutil.py\", line 206, in rmtree\n    names = os.listdir(path)\nOSError: [Errno 2] No such file or directory: 'mongo'\n&gt;&gt;&gt; ast.literal_eval(\"shutil.rmtree('mongo')\")\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/opt/Python-2.6.1/lib/python2.6/ast.py\", line 68, in literal_eval\n    return _convert(node_or_string)\n  File \"/opt/Python-2.6.1/lib/python2.6/ast.py\", line 67, in _convert\n    raise ValueError('malformed string')\nValueError: malformed string\n</code></pre>\n"
    },
    "152": {
        "question_id": "3085696",
        "answer_id": "3092341",
        "question": "<p>I am using Python to parse entries from a log file, and display the entry contents using Tkinter and so far it's been excellent. The output is a grid of label widgets, but sometimes there are more rows than can be displayed on the screen. I'd like to add a scrollbar, which looks like it should be very easy, but I can't figure it out.</p>\n\n<p>The documentation implies that only the List, Textbox, Canvas and Entry widgets support the scrollbar interface. None of these appear to be suitable for displaying a grid of widgets. It's possible to put arbitrary widgets in a Canvas widget, but you appear to have to use absolute co-ordinates, so I wouldn't be able to use the grid layout manager?</p>\n\n<p>I've tried putting the widget grid into a Frame, but that doesn't seem to support the scrollbar interface, so this doesn't work:</p>\n\n<pre><code>mainframe = Frame(root, yscrollcommand=scrollbar.set)\n</code></pre>\n\n<p>Can anyone suggest a way round this limitation? I'd hate to have to rewrite in PyQt and increase my executable image size by so much, just to add a scrollbar!</p>\n",
        "answer": "<h2>Overview</h2>\n\n<p>You can only associate scrollbars with a few widgets, and the root widget and <code>Frame</code> aren't part of that group of widgets. </p>\n\n<p>The most common solution is to create a canvas widget and associate the scrollbars with that widget. Then, into that canvas embed the frame that contains your label widgets. Determine the width/height of the frame and feed that into the canvas <code>scrollregion</code> option so that the scrollregion exactly matches the size of the frame.</p>\n\n<p>Drawing the text items directly on the canvas isn't very hard, so you might want to reconsider that approach if the frame-embedded-in-a-canvas solution seems too complex. Since you're creating a grid, the coordinates of each text item is going to be very easy to compute, especially if each row is the same height (which it probably is if you're using a single font).</p>\n\n<p>For drawing directly on the canvas, just figure out the line height of the font you're using (and there are commands for that). Then, each y coordinate is <code>row*(lineheight+spacing)</code>. The x coordinate will be a fixed number based on the widest item in each column. If you give everything a tag for the column it is in, you can adjust the x coordinate and width of all items in a column with a single command.</p>\n\n<h2>Object-oriented solution</h2>\n\n<p>Here's an example of the frame-embedded-in-canvas solution, using an object-oriented approach:</p>\n\n<pre><code>import tkinter as tk\n\nclass Example(tk.Frame):\n    def __init__(self, root):\n\n        tk.Frame.__init__(self, root)\n        self.canvas = tk.Canvas(root, borderwidth=0, background=\"#ffffff\")\n        self.frame = tk.Frame(self.canvas, background=\"#ffffff\")\n        self.vsb = tk.Scrollbar(root, orient=\"vertical\", command=self.canvas.yview)\n        self.canvas.configure(yscrollcommand=self.vsb.set)\n\n        self.vsb.pack(side=\"right\", fill=\"y\")\n        self.canvas.pack(side=\"left\", fill=\"both\", expand=True)\n        self.canvas.create_window((4,4), window=self.frame, anchor=\"nw\", \n                                  tags=\"self.frame\")\n\n        self.frame.bind(\"&lt;Configure&gt;\", self.onFrameConfigure)\n\n        self.populate()\n\n    def populate(self):\n        '''Put in some fake data'''\n        for row in range(100):\n            tk.Label(self.frame, text=\"%s\" % row, width=3, borderwidth=\"1\", \n                     relief=\"solid\").grid(row=row, column=0)\n            t=\"this is the second column for row %s\" %row\n            tk.Label(self.frame, text=t).grid(row=row, column=1)\n\n    def onFrameConfigure(self, event):\n        '''Reset the scroll region to encompass the inner frame'''\n        self.canvas.configure(scrollregion=self.canvas.bbox(\"all\"))\n\nif __name__ == \"__main__\":\n    root=tk.Tk()\n    Example(root).pack(side=\"top\", fill=\"both\", expand=True)\n    root.mainloop()\n</code></pre>\n\n<h2>Procedural solution</h2>\n\n<p>Here is a solution that doesn't use objects:</p>\n\n<pre><code>import tkinter as tk\n\ndef populate(frame):\n    '''Put in some fake data'''\n    for row in range(100):\n        tk.Label(frame, text=\"%s\" % row, width=3, borderwidth=\"1\", \n                 relief=\"solid\").grid(row=row, column=0)\n        t=\"this is the second column for row %s\" %row\n        tk.Label(frame, text=t).grid(row=row, column=1)\n\ndef onFrameConfigure(canvas):\n    '''Reset the scroll region to encompass the inner frame'''\n    canvas.configure(scrollregion=canvas.bbox(\"all\"))\n\nroot = tk.Tk()\ncanvas = tk.Canvas(root, borderwidth=0, background=\"#ffffff\")\nframe = tk.Frame(canvas, background=\"#ffffff\")\nvsb = tk.Scrollbar(root, orient=\"vertical\", command=canvas.yview)\ncanvas.configure(yscrollcommand=vsb.set)\n\nvsb.pack(side=\"right\", fill=\"y\")\ncanvas.pack(side=\"left\", fill=\"both\", expand=True)\ncanvas.create_window((4,4), window=frame, anchor=\"nw\")\n\nframe.bind(\"&lt;Configure&gt;\", lambda event, canvas=canvas: onFrameConfigure(canvas))\n\npopulate(frame)\n\nroot.mainloop()\n</code></pre>\n\n<p><strong>Note:</strong> to make this work in python 2.x, use <code>Tkinter</code> rather than <code>tkinter</code> in the import statement</p>\n"
    },
    "153": {
        "question_id": "82831",
        "answer_id": "82852",
        "question": "<p>How do I see if a file exists or not, without using the <a href=\"https://docs.python.org/3.6/reference/compound_stmts.html#try\" rel=\"noreferrer\"><code>try</code></a> statement?</p>\n",
        "answer": "<p>If the reason you're checking is so you can do something like <code>if file_exists: open_it()</code>, it's safer to use a <code>try</code> around the attempt to open it. Checking and then opening risks the file being deleted or moved or something between when you check and when you try to open it.</p>\n\n<p>If you're not planning to open the file immediately, you can use <a href=\"https://docs.python.org/library/os.path.html#os.path.isfile\" rel=\"noreferrer\"><code>os.path.isfile</code></a></p>\n\n<blockquote>\n  <p>Return <code>True</code> if path is an existing regular file. This follows symbolic links, so both <a href=\"https://docs.python.org/library/os.path.html#os.path.islink\" rel=\"noreferrer\">islink()</a> and <a href=\"https://docs.python.org/library/os.path.html#os.path.isfile\" rel=\"noreferrer\">isfile()</a> can be true for the same path.</p>\n</blockquote>\n\n<pre><code>import os.path\nos.path.isfile(fname) \n</code></pre>\n\n<p>if you need to be sure it's a file.</p>\n\n<p>Starting with Python 3.4, the <a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_file\" rel=\"noreferrer\"><code>pathlib</code> module</a> offers an object-oriented approach (backported to <code>pathlib2</code> in Python 2.7):</p>\n\n<pre><code>from pathlib import Path\n\nmy_file = Path(\"/path/to/file\")\nif my_file.is_file():\n    # file exists\n</code></pre>\n\n<p>To check a directory, do:</p>\n\n<pre><code>if my_file.is_dir():\n    # directory exists\n</code></pre>\n\n<p>To check whether a <code>Path</code> object exists independently of whether is it a file or directory, use <code>exists()</code>:</p>\n\n<pre><code>if my_file.exists():\n    # path exists\n</code></pre>\n\n<p>You can also use <code>resolve(strict=True)</code> in a <code>try</code> block:</p>\n\n<pre><code>try:\n    my_abs_path = my_file.resolve(strict=True)\nexcept FileNotFoundError:\n    # doesn't exist\nelse:\n    # exists\n</code></pre>\n"
    },
    "154": {
        "question_id": "1009860",
        "answer_id": "1009864",
        "question": "<p>I am originally a C programmer. I have seen numerous tricks and \"hacks\" to read many different arguments. </p>\n\n<p>What are some of the ways Python programmers can do this?</p>\n\n<h3>Related</h3>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/20063/whats-the-best-way-to-grab-parse-command-line-arguments-passed-to-a-python-scrip\">What\u2019s the best way to grab/parse command line arguments passed to a Python script?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/362426/implementing-a-command-action-parameter-style-command-line-interfaces\">Implementing a \u201c[command] [action] [parameter]\u201d style command-line interfaces?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/567879/how-can-i-process-command-line-arguments-in-python\">How can I process command line arguments in Python?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/642648/how-do-i-format-positional-argument-help-using-pythons-optparse\">How do I format positional argument help using Python\u2019s optparse?</a></li>\n</ul>\n",
        "answer": "<p>The canonical solution in the standard library is <code>argparse</code> (<a href=\"https://docs.python.org/3/library/argparse.html\" rel=\"noreferrer\">docs</a>):</p>\n\n<p>Here is an example:</p>\n\n<pre><code>from argparse import ArgumentParser\n\nparser = ArgumentParser()\nparser.add_argument(\"-f\", \"--file\", dest=\"filename\",\n                    help=\"write report to FILE\", metavar=\"FILE\")\nparser.add_argument(\"-q\", \"--quiet\",\n                    action=\"store_false\", dest=\"verbose\", default=True,\n                    help=\"don't print status messages to stdout\")\n\nargs = parser.parse_args()\n</code></pre>\n\n<p><code>argparse</code> supports (among other things):</p>\n\n<ul>\n<li>Multiple options in any order.</li>\n<li>Short and long options.</li>\n<li>Default values.</li>\n<li>Generation of a usage help message.</li>\n</ul>\n"
    },
    "155": {
        "question_id": "301134",
        "answer_id": "301146",
        "question": "<p>I'm writing a Python application that takes as a command as an argument, for example:</p>\n\n<pre><code>$ python myapp.py command1\n</code></pre>\n\n<p>I want the application to be extensible, that is, to be able to add new modules that implement new commands without having to change the main application source. The tree looks something like:</p>\n\n<pre><code>myapp/\n    __init__.py\n    commands/\n        __init__.py\n        command1.py\n        command2.py\n    foo.py\n    bar.py\n</code></pre>\n\n<p>So I want the application to find the available command modules at runtime and execute the appropriate one.</p>\n\n<p>Python defines an <strong>__import__</strong> function, which takes a string for a module name:</p>\n\n<blockquote>\n  <p>__import__(name, globals=None, locals=None, fromlist=(), level=0)</p>\n  \n  <p>The function imports the module name, potentially using the given globals and locals to determine how to interpret the name in a package context. The fromlist gives the names of objects or submodules that should be imported from the module given by name. </p>\n  \n  <p>Source: <a href=\"https://docs.python.org/3/library/functions.html#__import__\" rel=\"noreferrer\">https://docs.python.org/3/library/functions.html#<strong>import</strong></a></p>\n</blockquote>\n\n<p>So currently I have something like:</p>\n\n<pre><code>command = sys.argv[1]\ntry:\n    command_module = __import__(\"myapp.commands.%s\" % command, fromlist=[\"myapp.commands\"])\nexcept ImportError:\n    # Display error message\n\ncommand_module.run()\n</code></pre>\n\n<p>This works just fine, I'm just wondering if there is possibly a more idiomatic way to accomplish what we are doing with this code.</p>\n\n<p>Note that I specifically don't want to get in to using eggs or extension points. This is not an open-source project and I don't expect there to be \"plugins\". The point is to simplify the main application code and remove the need to modify it each time a new command module is added.</p>\n",
        "answer": "<p>With Python older than 2.7/3.1, that's pretty much how you do it. </p>\n\n<p>For newer versions, see <code>importlib.import_module</code> for <a href=\"https://docs.python.org/2/library/importlib.html#importlib.import_module\" rel=\"noreferrer\">Python 2</a> and and <a href=\"https://docs.python.org/3/library/importlib.html#importlib.import_module\" rel=\"noreferrer\">Python 3</a>.</p>\n\n<p>You can use <code>exec</code> if you want to as well.</p>\n\n<p>Or using <code>__import__</code> you can import a list of modules by doing this:</p>\n\n<pre><code>&gt;&gt;&gt; moduleNames = ['sys', 'os', 're', 'unittest'] \n&gt;&gt;&gt; moduleNames\n['sys', 'os', 're', 'unittest']\n&gt;&gt;&gt; modules = map(__import__, moduleNames)\n</code></pre>\n\n<p>Ripped straight from <a href=\"http://web.archive.org/web/20120315061111/http://www.diveintopython.net/functional_programming/dynamic_import.html\" rel=\"noreferrer\">Dive Into Python</a>.</p>\n"
    },
    "156": {
        "question_id": "3906137",
        "answer_id": "3906148",
        "question": "<p>For an exercise I'm doing, I'm trying to read the contents of a given file twice using the <code>read()</code> method. Strangely, when I call it the second time, it doesn't seem to return the file content as a string?</p>\n\n<p>Here's the code</p>\n\n<pre><code>f = f.open()\n\n# get the year\nmatch = re.search(r'Popularity in (\\d+)', f.read())\n\nif match:\n  print match.group(1)\n\n# get all the names\nmatches = re.findall(r'&lt;td&gt;(\\d+)&lt;/td&gt;&lt;td&gt;(\\w+)&lt;/td&gt;&lt;td&gt;(\\w+)&lt;/td&gt;', f.read())\n\nif matches:\n  # matches is always None\n</code></pre>\n\n<p>Of course I know that this is not the most efficient or best way, this is not the point here. The point is, why can't I call <code>read()</code> twice? Do I have to reset the file handle? Or close / reopen the file in order to do that?</p>\n",
        "answer": "<p>Calling <code>read()</code> reads through the entire file and leaves the read cursor at the end of the file (with nothing more to read). If you are looking to read a certain number of lines at a time you could use  <code>readline()</code>, <code>readlines()</code> or iterate through lines with <code>for line in handle:</code>.</p>\n\n<p>To answer your question directly, once a file has been read, with <code>read()</code> you can use <code>seek(0)</code> to return the read cursor to the start of the file (docs are <a href=\"http://docs.python.org/2.4/lib/bltin-file-objects.html\" rel=\"noreferrer\">here</a>). If you know the file isn't going to be too large, you can also save the <code>read()</code> output to a variable, using it in your findall expressions.</p>\n\n<p>Ps. Dont forget to close the file after you are done with it ;)</p>\n"
    },
    "157": {
        "question_id": "3044580",
        "answer_id": "3044626",
        "question": "<p>I am trying to understand the advantages of <a href=\"http://docs.python.org/library/multiprocessing\" rel=\"noreferrer\">multiprocessing</a> over <a href=\"http://docs.python.org/library/threading\" rel=\"noreferrer\">threading</a>. I know that <strong>multiprocessing</strong> gets around the Global Interpreter Lock, but what other advantages are there, and can <strong>threading</strong> not do the same thing?</p>\n",
        "answer": "<p>The <code>threading</code> module uses threads, the <code>multiprocessing</code> module uses processes. The difference is that threads run in the same memory space, while processes have separate memory. This makes it a bit harder to share objects between processes with multiprocessing. Since threads use the same memory, precautions have to be taken or two threads will write to the same memory at the same time. This is what the global interpreter lock is for.</p>\n\n<p>Spawning processes is a bit slower than spawning threads. Once they are running, there is not much difference.</p>\n"
    },
    "158": {
        "question_id": "1769403",
        "answer_id": "1769475",
        "question": "<p>What are the uses for <code>**kwargs</code> in Python?</p>\n\n<p>I know you can do an <code>objects.filter</code> on a table and pass in a <code>**kwargs</code> argument. &nbsp;</p>\n\n<p>Can I also do this for specifying time deltas i.e. <code>timedelta(hours = time1)</code>? </p>\n\n<p>How exactly does it work? Is it classes as 'unpacking'? Like <code>a,b=1,2</code>?</p>\n",
        "answer": "<p>You can use <code>**kwargs</code> to let your functions take an arbitrary number of keyword arguments (\"kwargs\" means \"keyword arguments\"):</p>\n\n<pre><code>&gt;&gt;&gt; def print_keyword_args(**kwargs):\n...     # kwargs is a dict of the keyword args passed to the function\n...     for key, value in kwargs.iteritems():\n...         print \"%s = %s\" % (key, value)\n... \n&gt;&gt;&gt; print_keyword_args(first_name=\"John\", last_name=\"Doe\")\nfirst_name = John\nlast_name = Doe\n</code></pre>\n\n<p>You can also use the <code>**kwargs</code> syntax when calling functions by constructing a dictionary of keyword arguments and passing it to your function:</p>\n\n<pre><code>&gt;&gt;&gt; kwargs = {'first_name': 'Bobby', 'last_name': 'Smith'}\n&gt;&gt;&gt; print_keyword_args(**kwargs)\nfirst_name = Bobby\nlast_name = Smith\n</code></pre>\n\n<p>The <a href=\"http://docs.python.org/tutorial/controlflow.html#keyword-arguments\" rel=\"noreferrer\">Python Tutorial</a> contains a good explanation of how it works, along with some nice examples.</p>\n\n<p>&lt;--Update--></p>\n\n<p>For people using Python 3, instead of iteritems(), use items()</p>\n"
    },
    "159": {
        "question_id": "1682567",
        "answer_id": "1682601",
        "question": "<p>Is there a reason being <code>list.append</code> evaluating to false? Or is it just the C convention of returning 0 when successful that comes into play?</p>\n\n<pre><code>&gt;&gt;&gt; u = []\n&gt;&gt;&gt; not u.append(6)\nTrue\n</code></pre>\n",
        "answer": "<p>Most Python methods that mutate a container in-place return <code>None</code> -- an application of the principle of <a href=\"http://en.wikipedia.org/wiki/Command-query_separation\" rel=\"noreferrer\">Command-query separation</a>.  (Python's always reasonably pragmatic about things, so a few mutators do return a usable value when getting it otherwise would be expensive or a mess -- the <code>pop</code> method is a good example of this pragmatism -- but those are definitely the exception, not the rule, and there's no reason to make <code>append</code> an exception).</p>\n"
    },
    "160": {
        "question_id": "8049520",
        "answer_id": "26440563",
        "question": "<p>I'm trying to develop a simple web scraper. I want to extract text without the HTML code. In fact, I achieve this goal, but I have seen that in some pages where JavaScript is loaded I didn't obtain good results.</p>\n\n<p>For example, if some JavaScript code adds some text, I can't see it, because when I call </p>\n\n<pre><code>response = urllib2.urlopen(request)\n</code></pre>\n\n<p>I get the original text without the added one (because JavaScript is executed in the client).</p>\n\n<p>So, I'm looking for some ideas to solve this problem. </p>\n",
        "answer": "<p>EDIT 30/Dec/2017: This answer appears in top results of Google searches, so I decided to update it. The old answer is still at the end.</p>\n\n<p>dryscape isn't maintained anymore and the library dryscape developers recommend is Python 2 only. I have found using Selenium's python library with Phantom JS as a web driver fast enough and easy to get the work done.</p>\n\n<p>Once you have installed <a href=\"http://phantomjs.org/download.html\" rel=\"noreferrer\">Phantom JS</a>, make sure the <code>phantomjs</code> binary is available in the current path:</p>\n\n<pre><code>phantomjs --version\n# result:\n2.1.1\n</code></pre>\n\n<h1>Example</h1>\n\n<p>To give an example, I created a sample page with following HTML code. (<a href=\"http://avi.im/stuff/js-or-no-js.html\" rel=\"noreferrer\">link</a>):</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;Javascript scraping test&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;p id='intro-text'&gt;No javascript support&lt;/p&gt;\n  &lt;script&gt;\n     document.getElementById('intro-text').innerHTML = 'Yay! Supports javascript';\n  &lt;/script&gt; \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>without javascript it says: <code>No javascript support</code> and with javascript: <code>Yay! Supports javascript</code></p>\n\n<h1>Scraping without JS support:</h1>\n\n<pre><code>import requests\nfrom bs4 import BeautifulSoup\nresponse = requests.get(my_url)\nsoup = BeautifulSoup(response.text)\nsoup.find(id=\"intro-text\")\n# Result:\n&lt;p id=\"intro-text\"&gt;No javascript support&lt;/p&gt;\n</code></pre>\n\n<h1>Scraping with JS support:</h1>\n\n<pre><code>from selenium import webdriver\ndriver = webdriver.PhantomJS()\ndriver.get(my_url)\np_element = driver.find_element_by_id(id_='intro-text')\nprint(p_element.text)\n# result:\n'Yay! Supports javascript'\n</code></pre>\n\n<hr>\n\n<p>You can also use Python library <a href=\"https://github.com/niklasb/dryscrape\" rel=\"noreferrer\">dryscrape</a> to scrape javascript driven websites. </p>\n\n<h1>Scraping with JS support:</h1>\n\n<pre><code>import dryscrape\nfrom bs4 import BeautifulSoup\nsession = dryscrape.Session()\nsession.visit(my_url)\nresponse = session.body()\nsoup = BeautifulSoup(response)\nsoup.find(id=\"intro-text\")\n# Result:\n&lt;p id=\"intro-text\"&gt;Yay! Supports javascript&lt;/p&gt;\n</code></pre>\n"
    },
    "161": {
        "question_id": "12680754",
        "answer_id": "12681217",
        "question": "<p>I have a <code>pandas dataframe</code> in which one column of text strings contains comma-separated values. I want to split each CSV field and create a new row per entry (assume that CSV are clean and need only be split on ','). For example, <code>a</code> should become <code>b</code>:</p>\n\n<pre><code>In [7]: a\nOut[7]: \n    var1  var2\n0  a,b,c     1\n1  d,e,f     2\n\nIn [8]: b\nOut[8]: \n  var1  var2\n0    a     1\n1    b     1\n2    c     1\n3    d     2\n4    e     2\n5    f     2\n</code></pre>\n\n<p>So far, I have tried various simple functions, but the <code>.apply</code> method seems to only accept one row as return value when it is used on an axis, and I can't get <code>.transform</code> to work. Any suggestions would be much appreciated!</p>\n\n<p>Example data: </p>\n\n<pre><code>from pandas import DataFrame\nimport numpy as np\na = DataFrame([{'var1': 'a,b,c', 'var2': 1},\n               {'var1': 'd,e,f', 'var2': 2}])\nb = DataFrame([{'var1': 'a', 'var2': 1},\n               {'var1': 'b', 'var2': 1},\n               {'var1': 'c', 'var2': 1},\n               {'var1': 'd', 'var2': 2},\n               {'var1': 'e', 'var2': 2},\n               {'var1': 'f', 'var2': 2}])\n</code></pre>\n\n<p>I know this won't work because we lose DataFrame meta-data by going through numpy, but it should give you a sense of what I tried to do: </p>\n\n<pre><code>def fun(row):\n    letters = row['var1']\n    letters = letters.split(',')\n    out = np.array([row] * len(letters))\n    out['var1'] = letters\na['idx'] = range(a.shape[0])\nz = a.groupby('idx')\nz.transform(fun)\n</code></pre>\n",
        "answer": "<p>How about something like this:</p>\n\n<pre><code>In [55]: pd.concat([Series(row['var2'], row['var1'].split(','))              \n                    for _, row in a.iterrows()]).reset_index()\nOut[55]: \n  index  0\n0     a  1\n1     b  1\n2     c  1\n3     d  2\n4     e  2\n5     f  2\n</code></pre>\n\n<p>Then you just have to rename the columns</p>\n"
    },
    "162": {
        "question_id": "2087370",
        "answer_id": "2087433",
        "question": "<p>I'm parsing some HTML with Beautiful Soup 3, but it contains HTML entities which Beautiful Soup 3 doesn't automatically decode for me:</p>\n\n<pre><code>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup\n\n&gt;&gt;&gt; soup = BeautifulSoup(\"&lt;p&gt;&amp;pound;682m&lt;/p&gt;\")\n&gt;&gt;&gt; text = soup.find(\"p\").string\n\n&gt;&gt;&gt; print text\n&amp;pound;682m\n</code></pre>\n\n<p>How can I decode the HTML entities in <code>text</code> to get <code>\"\u00a3682m\"</code> instead of <code>\"&amp;pound;682m\"</code>.</p>\n",
        "answer": "<h3>Python 3.4+</h3>\n\n<p>Use <a href=\"https://docs.python.org/3/library/html.html#html.unescape\" rel=\"nofollow noreferrer\"><code>html.unescape()</code></a>:</p>\n\n<pre><code>import html\nprint(html.unescape('&amp;pound;682m'))\n</code></pre>\n\n<p>FYI <code>html.parser.HTMLParser.unescape</code> is deprecated, and <a href=\"https://github.com/python/cpython/blob/3.5/Lib/html/parser.py#L466-L470\" rel=\"nofollow noreferrer\">was supposed to be removed in 3.5</a>, although it was left in by mistake. It will be removed from the language soon.</p>\n\n<hr>\n\n<h3>Python 2.6-3.3</h3>\n\n<p>You can use <code>HTMLParser.unescape()</code> from the standard library:</p>\n\n<ul>\n<li>For Python 2.6-2.7 it's in <a href=\"https://docs.python.org/2/library/htmlparser.html\" rel=\"nofollow noreferrer\"><code>HTMLParser</code></a></li>\n<li>For Python 3 it's in <a href=\"https://docs.python.org/3/library/html.parser.html\" rel=\"nofollow noreferrer\"><code>html.parser</code></a></li>\n</ul>\n\n<pre><code>&gt;&gt;&gt; try:\n...     # Python 2.6-2.7 \n...     from HTMLParser import HTMLParser\n... except ImportError:\n...     # Python 3\n...     from html.parser import HTMLParser\n... \n&gt;&gt;&gt; h = HTMLParser()\n&gt;&gt;&gt; print(h.unescape('&amp;pound;682m'))\n\u00a3682m\n</code></pre>\n\n<p>You can also use the <a href=\"https://pythonhosted.org/six/\" rel=\"nofollow noreferrer\"><code>six</code></a> compatibility library to simplify the import:</p>\n\n<pre><code>&gt;&gt;&gt; from six.moves.html_parser import HTMLParser\n&gt;&gt;&gt; h = HTMLParser()\n&gt;&gt;&gt; print(h.unescape('&amp;pound;682m'))\n\u00a3682m\n</code></pre>\n"
    },
    "163": {
        "question_id": "972",
        "answer_id": "2982",
        "question": "<p>I've read that it is possible to add a method to an existing object (i.e., not in the class definition) in Python. </p>\n\n<p>I understand that it's not always good to do so. But how might one do this?</p>\n",
        "answer": "<p>In Python, there is a difference between functions and bound methods.</p>\n\n<pre><code>&gt;&gt;&gt; def foo():\n...     print \"foo\"\n...\n&gt;&gt;&gt; class A:\n...     def bar( self ):\n...         print \"bar\"\n...\n&gt;&gt;&gt; a = A()\n&gt;&gt;&gt; foo\n&lt;function foo at 0x00A98D70&gt;\n&gt;&gt;&gt; a.bar\n&lt;bound method A.bar of &lt;__main__.A instance at 0x00A9BC88&gt;&gt;\n&gt;&gt;&gt;\n</code></pre>\n\n<p>Bound methods have been \"bound\" (how descriptive) to an instance, and that instance will be passed as the first argument whenever the method is called.</p>\n\n<p>Callables that are attributes of a class (as opposed to an instance) are still unbound, though, so you can modify the class definition whenever you want:</p>\n\n<pre><code>&gt;&gt;&gt; def fooFighters( self ):\n...     print \"fooFighters\"\n...\n&gt;&gt;&gt; A.fooFighters = fooFighters\n&gt;&gt;&gt; a2 = A()\n&gt;&gt;&gt; a2.fooFighters\n&lt;bound method A.fooFighters of &lt;__main__.A instance at 0x00A9BEB8&gt;&gt;\n&gt;&gt;&gt; a2.fooFighters()\nfooFighters\n</code></pre>\n\n<p>Previously defined instances are updated as well (as long as they haven't overridden the attribute themselves):</p>\n\n<pre><code>&gt;&gt;&gt; a.fooFighters()\nfooFighters\n</code></pre>\n\n<p>The problem comes when you want to attach a method to a single instance:</p>\n\n<pre><code>&gt;&gt;&gt; def barFighters( self ):\n...     print \"barFighters\"\n...\n&gt;&gt;&gt; a.barFighters = barFighters\n&gt;&gt;&gt; a.barFighters()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: barFighters() takes exactly 1 argument (0 given)\n</code></pre>\n\n<p>The function is not automatically bound when it's attached directly to an instance:</p>\n\n<pre><code>&gt;&gt;&gt; a.barFighters\n&lt;function barFighters at 0x00A98EF0&gt;\n</code></pre>\n\n<p>To bind it, we can use the <a href=\"http://docs.python.org/library/types.html?highlight=methodtype#module-types\" rel=\"noreferrer\">MethodType function in the types module</a>:</p>\n\n<pre><code>&gt;&gt;&gt; import types\n&gt;&gt;&gt; a.barFighters = types.MethodType( barFighters, a )\n&gt;&gt;&gt; a.barFighters\n&lt;bound method ?.barFighters of &lt;__main__.A instance at 0x00A9BC88&gt;&gt;\n&gt;&gt;&gt; a.barFighters()\nbarFighters\n</code></pre>\n\n<p>This time other instances of the class have not been affected:</p>\n\n<pre><code>&gt;&gt;&gt; a2.barFighters()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: A instance has no attribute 'barFighters'\n</code></pre>\n\n<p>More information can be found by reading about <a href=\"http://users.rcn.com/python/download/Descriptor.htm\" rel=\"noreferrer\">descriptors</a> and <a href=\"http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html\" rel=\"noreferrer\">metaclass</a> <a href=\"http://www.gnosis.cx/publish/programming/metaclass_2.html\" rel=\"noreferrer\">programming</a>.</p>\n"
    },
    "164": {
        "question_id": "8777753",
        "answer_id": "8778548",
        "question": "<p>I am dealing with dates in Python and I need to convert them to UTC timestamps to be used\ninside Javascript. The following code does not work:</p>\n\n<pre><code>&gt;&gt;&gt; d = datetime.date(2011,01,01)\n&gt;&gt;&gt; datetime.datetime.utcfromtimestamp(time.mktime(d.timetuple()))\ndatetime.datetime(2010, 12, 31, 23, 0)\n</code></pre>\n\n<p>Converting the date object first to datetime also does not help. I tried the example at this <a href=\"http://www.reddit.com/r/Python/comments/hkw9u/create_utc_timestamp_for_given_date\" rel=\"noreferrer\">link</a> from, but:</p>\n\n<pre><code>from pytz import utc, timezone\nfrom datetime import datetime\nfrom time import mktime\ninput_date = datetime(year=2011, month=1, day=15)\n</code></pre>\n\n<p>and now either:</p>\n\n<pre><code>mktime(utc.localize(input_date).utctimetuple())\n</code></pre>\n\n<p>or</p>\n\n<pre><code>mktime(timezone('US/Eastern').localize(input_date).utctimetuple())\n</code></pre>\n\n<p>does work.</p>\n\n<p>So general question: how can I get a date converted to seconds since epoch according to UTC?</p>\n",
        "answer": "<p>If <code>d = date(2011, 1, 1)</code> is in UTC:</p>\n\n<pre><code>&gt;&gt;&gt; from datetime import datetime, date\n&gt;&gt;&gt; import calendar\n&gt;&gt;&gt; timestamp1 = calendar.timegm(d.timetuple())\n&gt;&gt;&gt; datetime.utcfromtimestamp(timestamp1)\ndatetime.datetime(2011, 1, 1, 0, 0)\n</code></pre>\n\n<p>If <code>d</code> is in local timezone:</p>\n\n<pre><code>&gt;&gt;&gt; import time\n&gt;&gt;&gt; timestamp2 = time.mktime(d.timetuple()) # DO NOT USE IT WITH UTC DATE\n&gt;&gt;&gt; datetime.fromtimestamp(timestamp2)\ndatetime.datetime(2011, 1, 1, 0, 0)\n</code></pre>\n\n<p><code>timestamp1</code> and <code>timestamp2</code> may differ if midnight in the local timezone is not the same time instance as midnight in UTC.</p>\n\n<p><code>mktime()</code> may return a wrong result if <code>d</code> corresponds to an <a href=\"https://stackoverflow.com/questions/12165691/python-datetime-with-timezone-to-epoch/12166400#comment39565270_12166400\">ambiguous local time (e.g., during DST transition)</a> or if <code>d</code> is a past(future) date when the utc offset might have been different <em>and</em> the C <code>mktime()</code> has no access to <a href=\"http://www.iana.org/time-zones/repository/tz-link.html\" rel=\"noreferrer\">the tz database</a> on the given platform. You could <a href=\"https://stackoverflow.com/a/17365806/4279\">use <code>pytz</code> module (e.g., via <code>tzlocal.get_localzone()</code>) to get access to the tz database on all platforms</a>. Also, <a href=\"https://stackoverflow.com/questions/28949623/python-datetime-and-utc-offset-conversion-ignoring-timezone-daylight-savings/28950133#comment46155743_28950133\"><code>utcfromtimestamp()</code> may fail and <code>mktime()</code> may return non-POSIX timestamp if <code>\"right\"</code> timezone is used</a>.</p>\n\n<hr>\n\n<p>To convert <code>datetime.date</code> object that represents date in UTC without <code>calendar.timegm()</code>:</p>\n\n<pre><code>DAY = 24*60*60 # POSIX day in seconds (exact value)\ntimestamp = (utc_date.toordinal() - date(1970, 1, 1).toordinal()) * DAY\ntimestamp = (utc_date - date(1970, 1, 1)).days * DAY\n</code></pre>\n\n<h2>How can I get a date converted to seconds since epoch according to UTC?</h2>\n\n<p>To convert <code>datetime.datetime</code> (not <code>datetime.date</code>) object that already represents time in UTC to the corresponding POSIX timestamp (a <code>float</code>).</p>\n\n<h3>Python 3.3+</h3>\n\n<p><a href=\"http://docs.python.org/3.3/library/datetime#datetime.datetime.timestamp\" rel=\"noreferrer\"><code>datetime.timestamp()</code></a>:</p>\n\n<pre><code>from datetime import timezone\n\ntimestamp = dt.replace(tzinfo=timezone.utc).timestamp()\n</code></pre>\n\n<p>Note: It is necessary to supply <code>timezone.utc</code> explicitly otherwise <code>.timestamp()</code> assume that your naive datetime object is in local timezone.</p>\n\n<h3>Python 3 (&lt; 3.3)</h3>\n\n<p>From the docs for <a href=\"http://docs.python.org/dev/library/datetime#datetime.datetime.utcfromtimestamp\" rel=\"noreferrer\"><code>datetime.utcfromtimestamp()</code></a>:</p>\n\n<blockquote>\n  <p>There is no method to obtain the timestamp from a datetime instance,\n  but POSIX timestamp corresponding to a datetime instance dt can be\n  easily calculated as follows. For a naive dt:</p>\n</blockquote>\n\n<pre><code>timestamp = (dt - datetime(1970, 1, 1)) / timedelta(seconds=1)\n</code></pre>\n\n<blockquote>\n  <p>And for an aware dt:</p>\n</blockquote>\n\n<pre><code>timestamp = (dt - datetime(1970,1,1, tzinfo=timezone.utc)) / timedelta(seconds=1)\n</code></pre>\n\n<p>Interesting read: <a href=\"http://www.ucolick.org/~sla/leapsecs/epochtime.html\" rel=\"noreferrer\">Epoch time vs. time of day</a> on the difference between <em>What time is it?</em> and <em>How many seconds have elapsed?</em></p>\n\n<p>See also: <a href=\"http://bugs.python.org/issue2736\" rel=\"noreferrer\">datetime needs an \"epoch\" method</a></p>\n\n<h3>Python 2</h3>\n\n<p>To adapt the above code for Python 2:</p>\n\n<pre><code>timestamp = (dt - datetime(1970, 1, 1)).total_seconds()\n</code></pre>\n\n<p>where <a href=\"http://docs.python.org/library/datetime.html#datetime.timedelta.total_seconds\" rel=\"noreferrer\"><code>timedelta.total_seconds()</code></a> is equivalent to <code>(td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / 10**6</code> computed with true division enabled.</p>\n\n<h3><a href=\"http://ideone.com/rvH9u\" rel=\"noreferrer\">Example</a></h3>\n\n<pre><code>from __future__ import division\nfrom datetime import datetime, timedelta\n\ndef totimestamp(dt, epoch=datetime(1970,1,1)):\n    td = dt - epoch\n    # return td.total_seconds()\n    return (td.microseconds + (td.seconds + td.days * 86400) * 10**6) / 10**6 \n\nnow = datetime.utcnow()\nprint now\nprint totimestamp(now)\n</code></pre>\n\n<p>Beware of <a href=\"http://bugs.python.org/issue8644\" rel=\"noreferrer\">floating-point issues</a>.</p>\n\n<h3>Output</h3>\n\n<pre><code>2012-01-08 15:34:10.022403\n1326036850.02\n</code></pre>\n\n<h2>How to convert an aware <code>datetime</code> object to POSIX timestamp</h2>\n\n<pre><code>assert dt.tzinfo is not None and dt.utcoffset() is not None\ntimestamp = dt.timestamp() # Python 3.3+\n</code></pre>\n\n<p>On Python 3:</p>\n\n<pre><code>from datetime import datetime, timedelta, timezone\n\nepoch = datetime(1970, 1, 1, tzinfo=timezone.utc)\ntimestamp = (dt - epoch) / timedelta(seconds=1)\ninteger_timestamp = (dt - epoch) // timedelta(seconds=1)\n</code></pre>\n\n<p>On Python 2:</p>\n\n<pre><code># utc time = local time              - utc offset\nutc_naive  = dt.replace(tzinfo=None) - dt.utcoffset()\ntimestamp = (utc_naive - datetime(1970, 1, 1)).total_seconds()\n</code></pre>\n"
    },
    "165": {
        "question_id": "606191",
        "answer_id": "606199",
        "question": "<p>I'm using this code to get standard output from an external program:</p>\n\n<pre><code>&gt;&gt;&gt; from subprocess import *\n&gt;&gt;&gt; command_stdout = Popen(['ls', '-l'], stdout=PIPE).communicate()[0]\n</code></pre>\n\n<p>The communicate() method returns an array of bytes:</p>\n\n<pre><code>&gt;&gt;&gt; command_stdout\nb'total 0\\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1\\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2\\n'\n</code></pre>\n\n<p>However, I'd like to work with the output as a normal Python string. So that I could print it like this:</p>\n\n<pre><code>&gt;&gt;&gt; print(command_stdout)\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2\n</code></pre>\n\n<p>I thought that's what the <a href=\"http://docs.python.org/3.0/library/binascii.html?highlight=b2a#binascii.b2a_qp\" rel=\"noreferrer\">binascii.b2a_qp()</a> method is for, but when I tried it, I got the same byte array again:</p>\n\n<pre><code>&gt;&gt;&gt; binascii.b2a_qp(command_stdout)\nb'total 0\\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1\\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2\\n'\n</code></pre>\n\n<p>Does anybody know how to convert the bytes value back to string? I mean, using the \"batteries\" instead of doing it manually. And I'd like it to be ok with Python 3.</p>\n",
        "answer": "<p>You need to decode the bytes object to produce a string:</p>\n\n<pre><code>&gt;&gt;&gt; b\"abcde\"\nb'abcde'\n\n# utf-8 is used here because it is a very common encoding, but you\n# need to use the encoding your data is actually in.\n&gt;&gt;&gt; b\"abcde\".decode(\"utf-8\") \n'abcde'\n</code></pre>\n"
    },
    "166": {
        "question_id": "9884132",
        "answer_id": "9884259",
        "question": "<p>What is the most basic definition of \"iterable\", \"iterator\" and \"iteration\" in Python?</p>\n\n<p>I have read multiple definitions but I am unable to identify the exact meaning as it still won't sink in.</p>\n\n<p>Can someone please help me with the 3 definitions in layman terms?</p>\n",
        "answer": "<p><strong>Iteration</strong> is a general term for taking each item of something, one after another. Any time you use a loop, explicit or implicit, to go over a group of items, that is iteration.</p>\n\n<p>In Python, <strong>iterable</strong> and <strong>iterator</strong> have specific meanings.</p>\n\n<p>An <strong>iterable</strong> is an object that has an <code>__iter__</code> method which returns an <strong>iterator</strong>, or which defines a <code>__getitem__</code> method that can take sequential indexes starting from zero (and raises an <code>IndexError</code> when the indexes are no longer valid). So an <strong>iterable</strong> is an object that you can get an <strong>iterator</strong> from.</p>\n\n<p>An <strong>iterator</strong> is an object with a <code>next</code> (Python 2) or <code>__next__</code> (Python 3) method. </p>\n\n<p>Whenever you use a <code>for</code> loop, or <code>map</code>, or a list comprehension, etc. in Python, the <code>next</code> method is called automatically to get each item from the <strong>iterator</strong>, thus going through the process of <strong>iteration</strong>.</p>\n\n<p>A good place to start learning would be the <a href=\"https://docs.python.org/3/tutorial/classes.html#iterators\">iterators section of the tutorial</a> and the <a href=\"https://docs.python.org/dev/library/stdtypes.html#iterator-types\">iterator types section of the standard types page</a>. After you understand the basics, try the <a href=\"https://docs.python.org/dev/howto/functional.html#iterators\">iterators section of the Functional Programming HOWTO</a>.</p>\n"
    },
    "167": {
        "question_id": "4295799",
        "answer_id": "4296097",
        "question": "<p>Thanks to some help from people here, I was able to get my code for Tasmanian camels puzzle working. However, it is horribly slow (I think. I'm not sure because this is my first program in Python). The example run in the bottom of the code takes a long time to be solved in my machine:</p>\n\n<pre><code>dumrat@dumrat:~/programming/python$ time python camels.py\n[['F', 'F', 'F', 'G', 'B', 'B', 'B'], ['F', 'F', 'G', 'F', 'B', 'B', 'B'],\n ['F', 'F', 'B', 'F', 'G', 'B', 'B'], ['F', 'F', 'B', 'F', 'B', 'G', 'B'],\n ['F', 'F', 'B', 'G', 'B', 'F', 'B'], ['F', 'G', 'B', 'F', 'B', 'F', 'B'],\n ['G', 'F', 'B', 'F', 'B', 'F', 'B'], ['B', 'F', 'G', 'F', 'B', 'F', 'B'],\n ['B', 'F', 'B', 'F', 'G', 'F', 'B'], ['B', 'F', 'B', 'F', 'B', 'F', 'G'],\n ['B', 'F', 'B', 'F', 'B', 'G', 'F'], ['B', 'F', 'B', 'G', 'B', 'F', 'F'],\n ['B', 'G', 'B', 'F', 'B', 'F', 'F'], ['B', 'B', 'G', 'F', 'B', 'F', 'F'],\n ['B', 'B', 'B', 'F', 'G', 'F', 'F']]\n\nreal    0m20.883s\nuser    0m20.549s\nsys    0m0.020s\n</code></pre>\n\n<p>Here's the code:</p>\n\n<pre><code>import Queue\n\nfCamel = 'F'\nbCamel = 'B'\ngap = 'G'\n\ndef solution(formation):\n    return len([i for i in formation[formation.index(fCamel) + 1:]\n                if i == bCamel]) == 0\n\ndef heuristic(formation):\n    fCamels, score = 0, 0\n    for i in formation:\n        if i == fCamel:\n            fCamels += 1;\n        elif i == bCamel:\n            score += fCamels;\n        else:\n            pass\n    return score\n\ndef getneighbors (formation):\n    igap = formation.index(gap)\n    res = []\n    # AB_CD --&gt; A_BCD | ABC_D | B_ACD | ABD_C\n    def genn(i,j):\n        temp = list(formation)\n        temp[i], temp[j] = temp[j], temp[i]\n        res.append(temp)\n\n    if(igap &gt; 0):\n        genn(igap, igap-1)\n    if(igap &gt; 1):\n        genn(igap, igap-2)\n    if igap &lt; len(formation) - 1:\n        genn(igap, igap+1)\n    if igap &lt; len(formation) - 2:\n        genn(igap, igap+2)\n\n    return res\n\nclass node:\n    def __init__(self, a, g, p):\n        self.arrangement = a\n        self.g = g\n        self.parent = p\n\ndef astar (formation, heuristicf, solutionf, genneighbors):\n\n    openlist = Queue.PriorityQueue()\n    openlist.put((heuristicf(formation), node(formation, 0, None)))\n    closedlist = []\n\n    while 1:\n        try:\n            f, current = openlist.get()\n        except IndexError:\n            current = None\n\n        if current is None:\n            print \"No solution found\"\n            return None;\n\n        if solutionf(current.arrangement):\n            path = []\n            cp = current\n            while cp != None:\n                path.append(cp.arrangement)\n                cp = cp.parent\n            path.reverse()\n            return path\n\n        #arr = current.arrangement\n        closedlist.append(current)\n        neighbors = genneighbors(current.arrangement)\n\n        for neighbor in neighbors:\n            if neighbor in closedlist:\n                pass\n            else:\n                openlist.put((current.g + heuristicf(neighbor),\n                             node(neighbor, current.g + 1, current)))\n\n        #sorted(openlist, cmp = lambda x, y : x.f &gt; y.f)\n\ndef solve(formation):\n    return astar(formation, heuristic, solution, getneighbors)\n\nprint solve([fCamel, fCamel, fCamel, gap, bCamel, bCamel, bCamel])\n#print solve([fCamel, fCamel, fCamel, fCamel, gap, bCamel, bCamel, bCamel, bCamel])\n</code></pre>\n\n<p>That is just for 3 camels each. I wanted to do this for 4 at least. That test case is still running (It's been about 5 minutes now :(). I'll update this if and when it finishes.</p>\n\n<p>What should I do to improve this code? (Mostly performance-wise, but any other suggestions are welcome also).</p>\n",
        "answer": "<p>I've been tripped up by this before too.  The bottleneck here is actually <code>if neighbor in closedlist</code>.</p>\n\n<p>The <code>in</code> statement is so easy to use, you forget that it's linear search, and when you're doing linear searches on lists, it can add up fast.  What you can do is convert closedlist into a <code>set</code> object.  This keeps hashes of its items so the <code>in</code> operator is much more efficient than for lists.  However, lists aren't hashable items, so you will have to change your configurations into tuples instead of lists.</p>\n\n<p>If the order of <code>closedlist</code> is crucial to the algorithm, you could use a set for the <code>in</code> operator and keep an parallel list around for your results.</p>\n\n<p>I tried a simple implementation of this including aaronasterling's namedtuple trick and it performed in 0.2 sec for your first example and 2.1 sec for your second, but I haven't tried verifying the results for the second longer one.</p>\n"
    },
    "168": {
        "question_id": "1059559",
        "answer_id": "1059596",
        "question": "<p>I think what I want to do is a fairly common task but I've found no reference on the web. I have text with punctuation, and I want a list of the words. </p>\n\n<pre><code>\"Hey, you - what are you doing here!?\"\n</code></pre>\n\n<p>should be</p>\n\n<pre><code>['hey', 'you', 'what', 'are', 'you', 'doing', 'here']\n</code></pre>\n\n<p>But Python's <code>str.split()</code> only works with one argument, so I have all words with the punctuation after I split with whitespace. Any ideas?</p>\n",
        "answer": "<p>A case where regular expressions are justified:</p>\n\n<pre><code>import re\nDATA = \"Hey, you - what are you doing here!?\"\nprint re.findall(r\"[\\w']+\", DATA)\n# Prints ['Hey', 'you', 'what', 'are', 'you', 'doing', 'here']\n</code></pre>\n"
    },
    "169": {
        "question_id": "902408",
        "answer_id": "902417",
        "question": "<p>Ok so I'm not that experienced in Python.</p>\n\n<p>I have the following Python code: </p>\n\n<pre><code>cursor.execute(\"INSERT INTO table VALUES var1, var2, var3,\")\n</code></pre>\n\n<p>where <code>var1</code> is an integer, <code>var2</code> &amp; <code>var3</code> are strings.</p>\n\n<p>How can I write the variable names without python including them as part of the query text?</p>\n",
        "answer": "<pre><code>cursor.execute(\"INSERT INTO table VALUES (%s, %s, %s)\", (var1, var2, var3))\n</code></pre>\n\n<p>Note that the parameters are passed as a tuple.</p>\n\n<p>The database API does proper escaping and quoting of variables. Be careful not to use the string formatting operator (<code>%</code>), because</p>\n\n<ol>\n<li>it does not do any escaping or quoting.</li>\n<li>it is prone to Uncontrolled string format attacks e.g. <a href=\"http://en.wikipedia.org/wiki/SQL_injection\" rel=\"noreferrer\">SQL injection</a>.</li>\n</ol>\n"
    },
    "170": {
        "question_id": "176918",
        "answer_id": "176921",
        "question": "<p>For a list <code>[\"foo\", \"bar\", \"baz\"]</code> and an item in the list <code>\"bar\"</code>, how do I get its index (1) in Python?</p>\n",
        "answer": "<pre><code>&gt;&gt;&gt; [\"foo\", \"bar\", \"baz\"].index(\"bar\")\n1\n</code></pre>\n\n<p>Reference: <a href=\"http://docs.python.org/2/tutorial/datastructures.html#more-on-lists\" rel=\"noreferrer\">Data Structures > More on Lists</a></p>\n\n<h1>Caveats follow</h1>\n\n<p>Note that while this is perhaps the cleanest way to answer the question <em>as asked</em>, <code>index</code> is a rather weak component of the <code>list</code> API, and I can't remember the last time I used it in anger. It's been pointed out to me in the comments that because this answer is heavily referenced, it should be made more complete. Some caveats about <code>list.index</code> follow. It is probably worth initially taking a look at the docstring for it:</p>\n\n<pre><code>&gt;&gt;&gt; print(list.index.__doc__)\nL.index(value, [start, [stop]]) -&gt; integer -- return first index of value.\nRaises ValueError if the value is not present.\n</code></pre>\n\n<h2>Linear time-complexity in list length</h2>\n\n<p>An <code>index</code> call checks every element of the list in order, until it finds a match. If your list is long, and you don't know roughly where in the list it occurs, this search could become a bottleneck. In that case, you should consider a different data structure. Note that if you know roughly where to find the match, you can give <code>index</code> a hint. For instance, in this snippet, <code>l.index(999_999, 999_990, 1_000_000)</code> is roughly five orders of magnitude faster than straight <code>l.index(999_999)</code>, because the former only has to search 10 entries, while the latter searches a million:</p>\n\n<pre><code>&gt;&gt;&gt; import timeit\n&gt;&gt;&gt; timeit.timeit('l.index(999_999)', setup='l = list(range(0, 1_000_000))', number=1000)\n9.356267921015387\n&gt;&gt;&gt; timeit.timeit('l.index(999_999, 999_990, 1_000_000)', setup='l = list(range(0, 1_000_000))', number=1000)\n0.0004404920036904514\n</code></pre>\n\n<h2>Only returns the index of the <em>first match</em> to its argument</h2>\n\n<p>A call to <code>index</code> searches through the list in order until it finds a match, and <em>stops there.</em> If you expect to need indices of more matches, you should use a list comprehension, or generator expression.</p>\n\n<pre><code>&gt;&gt;&gt; [1, 1].index(1)\n0\n&gt;&gt;&gt; [i for i, e in enumerate([1, 2, 1]) if e == 1]\n[0, 2]\n&gt;&gt;&gt; g = (i for i, e in enumerate([1, 2, 1]) if e == 1)\n&gt;&gt;&gt; next(g)\n0\n&gt;&gt;&gt; next(g)\n2\n</code></pre>\n\n<p>Most places where I once would have used <code>index</code>, I now use a list comprehension or generator expression because they're more generalizable. So if you're considering reaching for <code>index</code>, take a look at these excellent python features.</p>\n\n<h2>Throws if element not present in list</h2>\n\n<p>A call to <code>index</code> results in a <code>ValueError</code> if the item's not present.</p>\n\n<pre><code>&gt;&gt;&gt; [1, 1].index(2)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: 2 is not in list\n</code></pre>\n\n<p>If the item might not be present in the list, you should either </p>\n\n<ol>\n<li>Check for it first with <code>item in my_list</code> (clean, readable approach), or</li>\n<li>Wrap the <code>index</code> call in a <code>try/except</code> block which catches <code>ValueError</code> (probably faster, at least when the list to search is long, and the item is usually present.)</li>\n</ol>\n"
    },
    "171": {
        "question_id": "17330160",
        "answer_id": "17330273",
        "question": "<p>I would like to understand how the built-in function <code>property</code> works. What confuses me is that <code>property</code> can also be used as a decorator, but it only takes arguments when used as a built-in function and not when used as a decorator.</p>\n\n<p>This example is from the <a href=\"http://docs.python.org/2/library/functions.html#property\">documentation</a>:</p>\n\n<pre><code>class C(object):\n    def __init__(self):\n        self._x = None\n\n    def getx(self):\n        return self._x\n    def setx(self, value):\n        self._x = value\n    def delx(self):\n        del self._x\n    x = property(getx, setx, delx, \"I'm the 'x' property.\")\n</code></pre>\n\n<p><code>property</code>'s arguments are <code>getx</code>, <code>setx</code>, <code>delx</code> and a doc string.</p>\n\n<p>In the code below <code>property</code> is used as decorator. The object of it is the <code>x</code> function, but in the code above there is no place for an object function in the arguments.</p>\n\n<pre><code>class C(object):\n    def __init__(self):\n        self._x = None\n\n    @property\n    def x(self):\n        \"\"\"I'm the 'x' property.\"\"\"\n        return self._x\n\n    @x.setter\n    def x(self, value):\n        self._x = value\n\n    @x.deleter\n    def x(self):\n        del self._x\n</code></pre>\n\n<p>And, how are the <code>x.setter</code> and <code>x.deleter</code> decorators created?\nI am confused.</p>\n",
        "answer": "<p>The <code>property()</code> function returns a special <a href=\"http://docs.python.org/2/howto/descriptor.html\" rel=\"noreferrer\">descriptor object</a>:</p>\n\n<pre><code>&gt;&gt;&gt; property()\n&lt;property object at 0x10ff07940&gt;\n</code></pre>\n\n<p>It is this object that has <em>extra</em> methods:</p>\n\n<pre><code>&gt;&gt;&gt; property().getter\n&lt;built-in method getter of property object at 0x10ff07998&gt;\n&gt;&gt;&gt; property().setter\n&lt;built-in method setter of property object at 0x10ff07940&gt;\n&gt;&gt;&gt; property().deleter\n&lt;built-in method deleter of property object at 0x10ff07998&gt;\n</code></pre>\n\n<p>These act as decorators <em>too</em>. They return a new property object:</p>\n\n<pre><code>&gt;&gt;&gt; property().getter(None)\n&lt;property object at 0x10ff079f0&gt;\n</code></pre>\n\n<p>that is a copy of the old object, but with one of the functions replaced.</p>\n\n<p>Remember, that the <code>@decorator</code> syntax is just syntactic sugar; the syntax:</p>\n\n<pre><code>@property\ndef foo(self): return self._foo\n</code></pre>\n\n<p>really means the same thing as</p>\n\n<pre><code>def foo(self): return self._foo\nfoo = property(foo)\n</code></pre>\n\n<p>so <code>foo</code> the function is replaced by <code>property(foo)</code>, which we saw above is a special object. Then when you use <code>@foo.setter()</code>, what you are doing is call that <code>property().setter</code> method I showed you above, which returns a new copy of the property, but this time with the setter function replaced with the decorated method.</p>\n\n<p>The following sequence also creates a full-on property, by using those decorator methods.</p>\n\n<p>First we create some functions and a <code>property</code> object with just a getter:</p>\n\n<pre><code>&gt;&gt;&gt; def getter(self): print 'Get!'\n... \n&gt;&gt;&gt; def setter(self, value): print 'Set to {!r}!'.format(value)\n... \n&gt;&gt;&gt; def deleter(self): print 'Delete!'\n... \n&gt;&gt;&gt; prop = property(getter)\n&gt;&gt;&gt; prop.fget is getter\nTrue\n&gt;&gt;&gt; prop.fset is None\nTrue\n&gt;&gt;&gt; prop.fdel is None\nTrue\n</code></pre>\n\n<p>Next we use the <code>.setter()</code> method to add a setter:</p>\n\n<pre><code>&gt;&gt;&gt; prop = prop.setter(setter)\n&gt;&gt;&gt; prop.fget is getter\nTrue\n&gt;&gt;&gt; prop.fset is setter\nTrue\n&gt;&gt;&gt; prop.fdel is None\nTrue\n</code></pre>\n\n<p>Last we add a deleter with the <code>.deleter()</code> method:</p>\n\n<pre><code>&gt;&gt;&gt; prop = prop.deleter(deleter)\n&gt;&gt;&gt; prop.fget is getter\nTrue\n&gt;&gt;&gt; prop.fset is setter\nTrue\n&gt;&gt;&gt; prop.fdel is deleter\nTrue\n</code></pre>\n\n<p>Last but not least, the <code>property</code> object acts as a <a href=\"http://docs.python.org/2/reference/datamodel.html#implementing-descriptors\" rel=\"noreferrer\">descriptor object</a>, so it has <a href=\"http://docs.python.org/2/reference/datamodel.html#object.__get__\" rel=\"noreferrer\"><code>.__get__()</code></a>, <a href=\"http://docs.python.org/2/reference/datamodel.html#object.__set__\" rel=\"noreferrer\"><code>.__set__()</code></a> and <a href=\"http://docs.python.org/2/reference/datamodel.html#object.__delete__\" rel=\"noreferrer\"><code>.__delete__()</code></a> methods to hook into instance attribute getting, setting and deleting:</p>\n\n<pre><code>&gt;&gt;&gt; class Foo(object): pass\n... \n&gt;&gt;&gt; prop.__get__(Foo(), Foo)\nGet!\n&gt;&gt;&gt; prop.__set__(Foo(), 'bar')\nSet to 'bar'!\n&gt;&gt;&gt; prop.__delete__(Foo())\nDelete!\n</code></pre>\n\n<p>The Descriptor Howto includes a <a href=\"http://docs.python.org/2/howto/descriptor.html#properties\" rel=\"noreferrer\">pure python sample implementation</a> of the <code>property()</code> type:</p>\n\n<blockquote>\n<pre><code>class Property(object):\n    \"Emulate PyProperty_Type() in Objects/descrobject.c\"\n\n    def __init__(self, fget=None, fset=None, fdel=None, doc=None):\n        self.fget = fget\n        self.fset = fset\n        self.fdel = fdel\n        if doc is None and fget is not None:\n            doc = fget.__doc__\n        self.__doc__ = doc\n\n    def __get__(self, obj, objtype=None):\n        if obj is None:\n            return self\n        if self.fget is None:\n            raise AttributeError(\"unreadable attribute\")\n        return self.fget(obj)\n\n    def __set__(self, obj, value):\n        if self.fset is None:\n            raise AttributeError(\"can't set attribute\")\n        self.fset(obj, value)\n\n    def __delete__(self, obj):\n        if self.fdel is None:\n            raise AttributeError(\"can't delete attribute\")\n        self.fdel(obj)\n\n    def getter(self, fget):\n        return type(self)(fget, self.fset, self.fdel, self.__doc__)\n\n    def setter(self, fset):\n        return type(self)(self.fget, fset, self.fdel, self.__doc__)\n\n    def deleter(self, fdel):\n        return type(self)(self.fget, self.fset, fdel, self.__doc__)\n</code></pre>\n</blockquote>\n"
    },
    "172": {
        "question_id": "2429511",
        "answer_id": "2429517",
        "question": "<p>It seems to me like the files run the same without that line.</p>\n",
        "answer": "<p>If you have several versions of Python installed, <code>/usr/bin/env</code> will ensure the interpreter used is the first one on your environment's <code>$PATH</code>. The alternative would be to hardcode something like <code>#!/usr/bin/python</code>; that's ok, but less flexible.</p>\n\n<p>In Unix, an <em>executable</em> file that's meant to be interpreted can indicate what interpreter to use by having a <code>#!</code> at the start of the first line, followed by the interpreter (and any flags it may need).</p>\n\n<p>If you're talking about other platforms, of course, this rule does not apply (but that \"shebang line\" does no harm, and will help if you ever copy that script to a platform <em>with</em> a Unix base, such as Linux, Mac, etc).</p>\n"
    },
    "173": {
        "question_id": "261638",
        "answer_id": "261645",
        "question": "<p>I am developing a piece of software in Python that will be distributed to my employer's customers. My employer wants to limit the usage of the software with a time restricted license file.</p>\n\n<p>If we distribute the .py files or even .pyc files it will be easy to (decompile and) remove the code that checks the license file.</p>\n\n<p>Another aspect is that my employer does not want the code to be read by our customers, fearing that the code may be stolen or at least the \"novel ideas\".</p>\n\n<p>Is there a good way to handle this problem? Preferably with an off-the-shelf solution.</p>\n\n<p>The software will run on Linux systems (so I don't think py2exe will do the trick).</p>\n",
        "answer": "<p>Python, being a byte-code-compiled interpreted language, is very difficult to lock down.  Even if you use a exe-packager like <a href=\"http://py2exe.org\" rel=\"noreferrer\">py2exe</a>, the layout of the executable is well-known, and the Python byte-codes are well understood.</p>\n\n<p>Usually in cases like this, you have to make a tradeoff.  How important is it really to protect the code?  Are there real secrets in there (such as a key for symmetric encryption of bank transfers), or are you just being paranoid?  Choose the language that lets you develop the best product quickest, and be realistic about how valuable your novel ideas are.</p>\n\n<p>If you decide you really need to enforce the license check securely, write it as a small C extension so that the license check code can be extra-hard (but not impossible!) to reverse engineer, and leave the bulk of your code in Python.</p>\n"
    },
    "174": {
        "question_id": "17466561",
        "answer_id": "17470842",
        "question": "<p>The following is the overall structure of my typical python tkinter program.</p>\n\n<pre><code>def funA():\n    def funA1():\n        def funA12():\n            # stuff\n\n    def funA2():\n        # stuff\n\ndef funB():\n    def funB1():\n        # stuff\n\n    def funB2():\n        # stuff\n\ndef funC():\n    def funC1():\n        # stuff\n\n    def funC2():\n        # stuff\n\n\nroot = tk.Tk()\n\nbutton1 = tk.Button(root, command=funA)\nbutton1.pack()\nbutton2 = tk.Button(root, command=funB)\nbutton2.pack()\nbutton3 = tk.Button(root, command=funC)\nbutton3.pack()\n</code></pre>\n\n<p><code>funA</code> <code>funB</code> and <code>funC</code> will bring up another <code>Toplevel</code> windows with widgets when user click on button 1, 2, 3.  </p>\n\n<p>I am wondering if this is the right way to write a python tkinter program? Sure, it will work even if I write this way, but is it the best way? It sounds stupid but when I see the codes other people written, their code is not messed up with bunch of functions and mostly they have classes.</p>\n\n<p>Is there any specific structure that we should follow as good practice? How should I plan before start writing a python program?</p>\n\n<p>I know there is no such thing as best practice in programming and I am not asking for it either. I just want some advice and explanations to keep me on the right direction as I am learning Python by myself.</p>\n",
        "answer": "<p>I advocate an object oriented approach. This is the template that I start out with:</p>\n\n<pre><code># Use Tkinter for python 2, tkinter for python 3\nimport tkinter as tk\n\nclass MainApplication(tk.Frame):\n    def __init__(self, parent, *args, **kwargs):\n        tk.Frame.__init__(self, parent, *args, **kwargs)\n        self.parent = parent\n\n        &lt;create the rest of your GUI here&gt;\n\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    MainApplication(root).pack(side=\"top\", fill=\"both\", expand=True)\n    root.mainloop()\n</code></pre>\n\n<p>The important things to notice are:</p>\n\n<ul>\n<li><p><strong>I don't use a wildcard import.</strong> I import the package as \"tk\", which requires that I prefix all commands with <code>tk.</code>. This prevents global namespace pollution, plus it makes the code completely obvious when you are using Tkinter classes, ttk classes, or some of your own. </p></li>\n<li><p><strong>The main application is a class</strong>. This gives you a private namespace for all of your callbacks and private functions, and just generally makes it easier to organize your code. In a procedural style you have to code top-down, defining functions before using them, etc. With this method you don't since you don't actually create the main window until the very last step. I prefer inheriting from <code>tk.Frame</code> just because I typically start by creating a frame, but it is by no means necessary. </p></li>\n</ul>\n\n<p>If your app has additional toplevel windows, I recommend making each of those a separate class, inheriting from <code>tk.Toplevel</code>. This gives you all of the same advantages mentioned above -- the windows are atomic, they have their own namespace, and the code is well organized. Plus, it makes it easy to put each into its own module once the code starts to get large. </p>\n\n<p>Finally, you might want to consider using classes for every major portion of your interface. For example, if you're creating an app with a toolbar, a navigation pane, a statusbar, and a main area, you could make each one of those classes. This makes your main code quite small and easy to understand:</p>\n\n<pre><code>class Navbar(tk.Frame): ...\nclass Toolbar(tk.Frame): ...\nclass Statusbar(tk.Frame): ...\nclass Main(tk.Frame): ...\n\nclass MainApplication(tk.Frame):\n    def __init__(self, parent, *args, **kwargs):\n        tk.Frame.__init__(self, parent, *args, **kwargs)\n        self.statusbar = Statusbar(self, ...)\n        self.toolbar = Toolbar(self, ...)\n        self.navbar = Navbar(self, ...)\n        self.main = Main(self, ...)\n\n        self.statusbar.pack(side=\"bottom\", fill=\"x\")\n        self.toolbar.pack(side=\"top\", fill=\"x\")\n        self.navbar.pack(side=\"left\", fill=\"y\")\n        self.main.pack(side=\"right\", fill=\"both\", expand=True)\n</code></pre>\n\n<p>Since all of those instances share a common parent, the parent effectively becomes the \"controller\" part of a model-view-controller architecture. So, for example, the main window could place something on the statusbar by calling <code>self.parent.statusbar.set(\"Hello, world\")</code>. This allows you to define a simple interface between the components, helping to keep coupling to a minimun. </p>\n"
    },
    "175": {
        "question_id": "17299581",
        "answer_id": "17299676",
        "question": "<p>in this code I am trying to create a function anti_vowel that will remove all vowels (aeiouAEIOU) from a string. I think it <em>should</em> work ok, but when I run it, the sample text \"Hey look Words!\" is returned as \"Hy lk Words!\". It  \"forgets\" to remove the last 'o'. How can this be?</p>\n\n<pre><code>text = \"Hey look Words!\"\n\ndef anti_vowel(text):\n\n    textlist = list(text)\n\n    for char in textlist:\n        if char.lower() in 'aeiou':\n            textlist.remove(char)\n\n    return \"\".join(textlist)\n\nprint anti_vowel(text)\n</code></pre>\n",
        "answer": "<p>You're modifying the list you're iterating over, which is bound to result in some unintuitive behavior. Instead, make a copy of the list so you don't remove elements from what you're iterating through.</p>\n\n<pre><code>for char in textlist[:]: #shallow copy of the list\n    # etc\n</code></pre>\n\n<hr>\n\n<p>To clarify the behavior you're seeing, check this out. Put <code>print char, textlist</code> at the beginning of your (original) loop. You'd expect, perhaps, that this would print out your string vertically, alongside the list, but what you'll actually get is this:</p>\n\n<pre><code>H ['H', 'e', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\ne ['H', 'e', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\n  ['H', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!'] # !\nl ['H', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\no ['H', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\nk ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!'] # Problem!!\n  ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\nW ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\no ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!'] \nd ['H', 'y', ' ', 'l', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\ns ['H', 'y', ' ', 'l', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\n! ['H', 'y', ' ', 'l', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\nHy lk Words!\n</code></pre>\n\n<p>So what's going on? The nice <code>for x in y</code> loop in Python is really just syntactic sugar: it still accesses list elements by index. So when you remove elements from the list while iterating over it, you start skipping values (as you can see above). As a result, you never see the second <code>o</code> in <code>\"look\"</code>; you skip over it because the index has advanced \"past\" it when you deleted the previous element. Then, when you get to the <code>o</code> in <code>\"Words\"</code>, you go to remove the first occurrence of <code>'o'</code>, which is the one you skipped before.</p>\n\n<hr>\n\n<p>As others have mentioned, list comprehensions are probably an even better (cleaner, clearer) way to do this. Make use of the fact that Python strings are iterable:</p>\n\n<pre><code>def remove_vowels(text): # function names should start with verbs! :)\n    return ''.join(ch for ch in text if ch.lower() not in 'aeiou')\n</code></pre>\n"
    },
    "176": {
        "question_id": "5458048",
        "answer_id": "5458807",
        "question": "<p>I'm building a Python application and don't want to force my clients to install Python and modules. I also want to make my application closed-source.</p>\n\n<p>So, is there a way to compile Python scripts to standalone executables?</p>\n",
        "answer": "<p>You can use <a href=\"http://www.py2exe.org/\">py2exe</a> as already answered and use <a href=\"http://cython.org/\">cython</a> to convert your key <code>.py</code> files in <code>.pyc</code>, C compiled files, like <code>.dll</code> in Windows and <code>.so</code> in linux, much harder to revert than common <code>.pyo</code> and <code>.pyc</code> files (and also gain in performance!)</p>\n"
    },
    "177": {
        "question_id": "182197",
        "answer_id": "182247",
        "question": "<p>I have a log file being written by another process which I want to watch for changes. Each time a change occurs I'd like to read the new data in to do some processing on it.</p>\n\n<p>What's the best way to do this? I was hoping there'd be some sort of hook from the PyWin32 library. I've found the <code>win32file.FindNextChangeNotification</code> function but have no idea how to ask it to watch a specific file.</p>\n\n<p>If anyone's done anything like this I'd be really grateful to hear how...</p>\n\n<p><strong>[Edit]</strong> I should have mentioned that I was after a solution that doesn't require polling.</p>\n\n<p><strong>[Edit]</strong> Curses! It seems this doesn't work over a mapped network drive. I'm guessing windows doesn't 'hear' any updates to the file the way it does on a local disk.</p>\n",
        "answer": "<p>Have you already looked at the documentation available on <a href=\"http://timgolden.me.uk/python/win32_how_do_i/watch_directory_for_changes.html\" rel=\"noreferrer\">http://timgolden.me.uk/python/win32_how_do_i/watch_directory_for_changes.html</a>? If you only need it to work under Windows the 2nd example seems to be exactly what you want (if you exchange the path of the directory with the one of the file you want to watch). </p>\n\n<p>Otherwise, polling will probably be the only really platform-independent option.</p>\n\n<p><strong>Note:</strong> I haven't tried any of these solutions.</p>\n"
    },
    "178": {
        "question_id": "13081532",
        "answer_id": "13089975",
        "question": "<p>I have a function that analyzes a CSV file with Pandas and produces a dict with summary information. I want to return the results as a response from a Flask view. How do I return a JSON response?</p>\n\n<pre><code>@app.route(\"/summary\")\ndef summary():\n    d = make_summary()\n    # send it back as json\n</code></pre>\n",
        "answer": "<p>Pass the summary data to the <a href=\"http://flask.pocoo.org/docs/latest/api/#flask.json.jsonify\" rel=\"noreferrer\"><code>jsonify</code></a> function, which returns a JSON response.</p>\n\n<pre><code>from flask import jsonify\n\n@app.route('/summary')\ndef summary():\n    d = make_summary()\n    return jsonify(d)\n</code></pre>\n\n<p>As of Flask 0.11, you can pass any JSON-serializable type, not just dict, as the top level object.</p>\n"
    },
    "179": {
        "question_id": "8056130",
        "answer_id": "8059504",
        "question": "<p>I'm confused on what an immutable type is. I know the <code>float</code> object is considered to be immutable, with this type of example from my book:</p>\n\n<pre><code>class RoundFloat(float):\n    def __new__(cls, val):\n        return float.__new__(cls, round(val, 2))\n</code></pre>\n\n<p>Is this considered to be immutable because of the class structure / hierarchy?, meaning <code>float</code> is at the top of the class and is its own method call. Similar to this type of example (even though my book says <code>dict</code> is mutable):</p>\n\n<pre><code>class SortedKeyDict(dict):\n    def __new__(cls, val):\n        return dict.__new__(cls, val.clear())\n</code></pre>\n\n<p>Whereas something mutable has methods inside the class, with this type of example:</p>\n\n<pre><code>class SortedKeyDict_a(dict):\n    def example(self):\n        return self.keys()\n</code></pre>\n\n<hr>\n\n<p>Also, for the last <code>class(SortedKeyDict_a)</code>, if I pass this type of set to it:</p>\n\n<pre><code>d = (('zheng-cai', 67), ('hui-jun', 68),('xin-yi', 2))\n</code></pre>\n\n<p>without calling the <code>example</code> method, it returns a dictionary. The <code>SortedKeyDict</code> with <code>__new__</code> flags it as an error. I tried passing integers to the <code>RoundFloat</code> class with <code>__new__</code> and it flagged no errors.</p>\n",
        "answer": "<p>What? Floats are immutable? But can't I do</p>\n\n<pre><code>x = 5.0\nx += 7.0\nprint x # 12.0\n</code></pre>\n\n<p>Doesn't that \"mut\" x?</p>\n\n<p>Well you agree strings are immutable right? But you can do the same thing.</p>\n\n<pre><code>s = 'foo'\ns += 'bar'\nprint s # foobar\n</code></pre>\n\n<p>The value of the variable changes, but it changes by changing what the variable refers to. A mutable type can change that way, and it can <em>also</em> change \"in place\".</p>\n\n<p>Here is the difference.</p>\n\n<pre><code>x = something # immutable type\nprint x\nfunc(x)\nprint x # prints the same thing\n\nx = something # mutable type\nprint x\nfunc(x)\nprint x # might print something different\n\nx = something # immutable type\ny = x\nprint x\n# some statement that operates on y\nprint x # prints the same thing\n\nx = something # mutable type\ny = x\nprint x\n# some statement that operates on y\nprint x # might print something different\n</code></pre>\n\n<p>Concrete examples</p>\n\n<pre><code>x = 'foo'\ny = x\nprint x # foo\ny += 'bar'\nprint x # foo\n\nx = [1, 2, 3]\ny = x\nprint x # [1, 2, 3]\ny += [3, 2, 1]\nprint x # [1, 2, 3, 3, 2, 1]\n\ndef func(val):\n    val += 'bar'\n\nx = 'foo'\nprint x # foo\nfunc(x)\nprint x # foo\n\ndef func(val):\n    val += [3, 2, 1]\n\nx = [1, 2, 3]\nprint x # [1, 2, 3]\nfunc(x)\nprint x # [1, 2, 3, 3, 2, 1]\n</code></pre>\n"
    },
    "180": {
        "question_id": "6159900",
        "answer_id": "6160082",
        "question": "<p>I'm used to doing <code>print &gt;&gt;f, \"hi there\"</code></p>\n\n<p>However, it seems that <code>print &gt;&gt;</code> is getting deprecated. What is the recommended way to do the line above?</p>\n\n<p><b>Update</b>:\nRegarding all those answers with <code>\"\\n\"</code>...is this universal or Unix-specific? IE, should I be doing <code>\"\\r\\n\"</code> on Windows?</p>\n",
        "answer": "<p>This should be as simple as:</p>\n\n<pre><code>with open('somefile.txt', 'a') as the_file:\n    the_file.write('Hello\\n')\n</code></pre>\n\n<p>From The Documentation:</p>\n\n<blockquote>\n  <p>Do not use <code>os.linesep</code> as a line terminator when writing files opened in text mode (the default); use a single '\\n' instead, on all platforms.</p>\n</blockquote>\n\n<p>Some useful reading:</p>\n\n<ul>\n<li><a href=\"http://docs.python.org/reference/compound_stmts.html#the-with-statement\" rel=\"noreferrer\">The <code>with</code> statement</a></li>\n<li><a href=\"http://docs.python.org/library/functions.html?highlight=open#open\" rel=\"noreferrer\"><code>open()</code></a>\n\n<ul>\n<li>'a' is for append, or use</li>\n<li>'w' to write with truncation</li>\n</ul></li>\n<li><a href=\"http://docs.python.org/library/os.html\" rel=\"noreferrer\"><code>os</code></a> (particularly <a href=\"http://docs.python.org/library/os.html?highlight=os.linesep#os.linesep\" rel=\"noreferrer\"><code>os.linesep</code></a>)</li>\n</ul>\n"
    },
    "181": {
        "question_id": "4289331",
        "answer_id": "4289557",
        "question": "<p>I would extract all the numbers contained in a string. Which is the better suited for the purpose, regular expressions or the <code>isdigit()</code> method?</p>\n\n<p>Example:</p>\n\n<pre><code>line = \"hello 12 hi 89\"\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>[12, 89]\n</code></pre>\n",
        "answer": "<p>If you only want to extract only positive integers, try the following:</p>\n\n<pre><code>&gt;&gt;&gt; str = \"h3110 23 cat 444.4 rabbit 11 2 dog\"\n&gt;&gt;&gt; [int(s) for s in str.split() if s.isdigit()]\n[23, 11, 2]\n</code></pre>\n\n<p>I would argue that this is better than the regex example for three reasons.  First,  you don't need another module; secondly, it's more readable because you don't need to parse the regex mini-language; and third, it is faster (and thus likely more pythonic):</p>\n\n<pre><code>python -m timeit -s \"str = 'h3110 23 cat 444.4 rabbit 11 2 dog' * 1000\" \"[s for s in str.split() if s.isdigit()]\"\n100 loops, best of 3: 2.84 msec per loop\n\npython -m timeit -s \"import re\" \"str = 'h3110 23 cat 444.4 rabbit 11 2 dog' * 1000\" \"re.findall('\\\\b\\\\d+\\\\b', str)\"\n100 loops, best of 3: 5.66 msec per loop\n</code></pre>\n\n<p>This will not recognize floats, negative integers, or integers in hexadecimal format.  If you can't accept these limitations, <a href=\"https://stackoverflow.com/questions/4289331/python-extract-numbers-of-a-string/4289415#4289415\">slim's answer below</a> will do the trick.</p>\n"
    },
    "182": {
        "question_id": "1450393",
        "answer_id": "1454400",
        "question": "<p>I'm trying to do some of the <a href=\"http://en.wikipedia.org/wiki/Code_golf\" rel=\"noreferrer\">code golf</a> challenges, but they all require the input to be taken from <code>stdin</code>. How do I get that in Python?</p>\n",
        "answer": "<p>You could use the <a href=\"http://docs.python.org/library/fileinput.html\" rel=\"noreferrer\"><code>fileinput</code></a> module:</p>\n\n<pre><code>import fileinput\n\nfor line in fileinput.input():\n    pass\n</code></pre>\n\n<p><a href=\"http://docs.python.org/library/fileinput.html\" rel=\"noreferrer\"><code>fileinput</code></a> will loop through all the lines in the input specified as file names given in command-line arguments, or the standard input if no arguments are provided.</p>\n\n<p>Note: <code>line</code> will contain a trailing newline; to remove it use <code>line.rstrip()</code></p>\n"
    },
    "183": {
        "question_id": "474528",
        "answer_id": "474543",
        "question": "<p>I want to repeatedly execute a function in Python every 60 seconds forever (just like an <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSTimer_Class/Reference/NSTimer.html\" rel=\"noreferrer\">NSTimer</a> in Objective C). This code will run as a daemon and is effectively like calling the python script every minute using a cron, but without requiring that to be set up by the user.</p>\n\n<p>In <a href=\"https://stackoverflow.com/questions/373335/suggestions-for-a-cron-like-scheduler-in-python\">this question about a cron implemented in Python</a>, the solution appears to effectively just <a href=\"http://docs.python.org/library/time.html#time.sleep\" rel=\"noreferrer\">sleep()</a> for x seconds. I don't need such advanced functionality so perhaps something like this would work</p>\n\n<pre><code>while True:\n    # Code executed here\n    time.sleep(60)\n</code></pre>\n\n<p>Are there any foreseeable problems with this code?</p>\n",
        "answer": "<p>Use the <a href=\"http://docs.python.org/library/sched.html\" rel=\"noreferrer\">sched</a> module, which implements a general purpose event scheduler.</p>\n\n<pre><code>import sched, time\ns = sched.scheduler(time.time, time.sleep)\ndef do_something(sc): \n    print \"Doing stuff...\"\n    # do your stuff\n    s.enter(60, 1, do_something, (sc,))\n\ns.enter(60, 1, do_something, (s,))\ns.run()\n</code></pre>\n"
    },
    "184": {
        "question_id": "15705630",
        "answer_id": "15705958",
        "question": "<p>I hope I can find help for my question. I am searching for a solution for the following problem:</p>\n\n<p>I have a dataFrame like:</p>\n\n<pre><code> Sp  Mt Value  count\n0  MM1  S1   a      **3**\n1  MM1  S1   n      2\n2  MM1  S3   cb     5\n3  MM2  S3   mk      **8**\n4  MM2  S4   bg     **10**\n5  MM2  S4   dgd      1\n6  MM4  S2  rd     2\n7  MM4  S2   cb      2\n8  MM4  S2   uyi      **7**\n</code></pre>\n\n<p>My objective is to get the result rows whose count is max between the groups, like :</p>\n\n<pre><code>0  MM1  S1   a      **3**\n1 3  MM2  S3   mk      **8**\n4  MM2  S4   bg     **10** \n8  MM4  S2   uyi      **7**\n</code></pre>\n\n<p>Somebody knows how can I do it in pandas or in python?</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>I didn't give more details for my question. For my problem, I want to group by ['Sp','Mt'].  Let take a second example like this :</p>\n\n<pre><code>   Sp   Mt   Value  count\n4  MM2  S4   bg     10\n5  MM2  S4   dgd    1\n6  MM4  S2   rd     2\n7  MM4  S2   cb     8\n8  MM4  S2   uyi    8\n</code></pre>\n\n<p>For the above example, I want to get ALL the rows where count equals max in each group e.g :</p>\n\n<pre><code>MM2  S4   bg     10\nMM4  S2   cb     8\nMM4  S2   uyi    8\n</code></pre>\n",
        "answer": "<pre><code>In [1]: df\nOut[1]:\n    Sp  Mt Value  count\n0  MM1  S1     a      3\n1  MM1  S1     n      2\n2  MM1  S3    cb      5\n3  MM2  S3    mk      8\n4  MM2  S4    bg     10\n5  MM2  S4   dgd      1\n6  MM4  S2    rd      2\n7  MM4  S2    cb      2\n8  MM4  S2   uyi      7\n\nIn [2]: df.groupby(['Mt'], sort=False)['count'].max()\nOut[2]:\nMt\nS1     3\nS3     8\nS4    10\nS2     7\nName: count\n</code></pre>\n\n<p>To get the indices of the original DF you can do:</p>\n\n<pre><code>In [3]: idx = df.groupby(['Mt'])['count'].transform(max) == df['count']\n\nIn [4]: df[idx]\nOut[4]:\n    Sp  Mt Value  count\n0  MM1  S1     a      3\n3  MM2  S3    mk      8\n4  MM2  S4    bg     10\n8  MM4  S2   uyi      7\n</code></pre>\n\n<p>Note that if you have multiple max values per group, all will be returned.</p>\n\n<p><strong>Update</strong></p>\n\n<p>On a hail mary chance that this is what the OP is requesting:</p>\n\n<pre><code>In [5]: df['count_max'] = df.groupby(['Mt'])['count'].transform(max)\n\nIn [6]: df\nOut[6]:\n    Sp  Mt Value  count  count_max\n0  MM1  S1     a      3          3\n1  MM1  S1     n      2          3\n2  MM1  S3    cb      5          8\n3  MM2  S3    mk      8          8\n4  MM2  S4    bg     10         10\n5  MM2  S4   dgd      1         10\n6  MM4  S2    rd      2          7\n7  MM4  S2    cb      2          7\n8  MM4  S2   uyi      7          7\n</code></pre>\n"
    },
    "185": {
        "question_id": "2953834",
        "answer_id": "2953843",
        "question": "<p>What is the best way to represent a Windows directory, for example <code>\"C:\\meshes\\as\"</code>? I have been trying to modify a script but it never works because I can't seem to get the directory right, I assume because of the <code>'\\'</code> acting as escape character?</p>\n",
        "answer": "<p>you can use always:</p>\n\n<pre><code>'C:/mydir'\n</code></pre>\n\n<p>this works both in linux and windows.\nOther posibility is</p>\n\n<pre><code>'C:\\\\mydir'\n</code></pre>\n\n<p>if you have problems with some names you can also try raw string literals:</p>\n\n<pre><code>r'C:\\mydir'\n</code></pre>\n\n<p>however best practice is to use the <code>os.path</code> module functions that always select the correct configuration for your OS:</p>\n\n<pre><code>os.path.join(mydir, myfile)\n</code></pre>\n\n<p>From python 3.4 you can also use the <a href=\"https://docs.python.org/3/library/pathlib.html#operators\" rel=\"noreferrer\">pathlib</a> module. This is equivelent to the above:</p>\n\n<pre><code>pathlib.Path(mydir, myfile)\n</code></pre>\n\n<p>or</p>\n\n<pre><code>pathlib.Path(mydir) / myfile\n</code></pre>\n"
    },
    "186": {
        "question_id": "136097",
        "answer_id": "1669524",
        "question": "<p>What is the difference between a function decorated with <a href=\"http://docs.python.org/library/functions.html#staticmethod\" rel=\"noreferrer\"><code>@staticmethod</code></a> and one decorated with <a href=\"http://docs.python.org/library/functions.html#classmethod\" rel=\"noreferrer\"><code>@classmethod</code></a>?</p>\n",
        "answer": "<p>Maybe a bit of example code will help: Notice the difference in the call signatures of <code>foo</code>, <code>class_foo</code> and <code>static_foo</code>:</p>\n\n<pre><code>class A(object):\n    def foo(self, x):\n        print \"executing foo(%s, %s)\" % (self, x)\n\n    @classmethod\n    def class_foo(cls, x):\n        print \"executing class_foo(%s, %s)\" % (cls, x)\n\n    @staticmethod\n    def static_foo(x):\n        print \"executing static_foo(%s)\" % x    \n\na = A()\n</code></pre>\n\n<p>Below is the usual way an object instance calls a method. The object instance, <code>a</code>, is implicitly passed as the first argument.</p>\n\n<pre><code>a.foo(1)\n# executing foo(&lt;__main__.A object at 0xb7dbef0c&gt;,1)\n</code></pre>\n\n<hr>\n\n<p><strong>With classmethods</strong>, the class of the object instance is implicitly passed as the first argument instead of <code>self</code>.</p>\n\n<pre><code>a.class_foo(1)\n# executing class_foo(&lt;class '__main__.A'&gt;,1)\n</code></pre>\n\n<p>You can also call <code>class_foo</code> using the class. In fact, if you define something to be\na classmethod, it is probably because you intend to call it from the class rather than from a class instance. <code>A.foo(1)</code> would have raised a TypeError, but <code>A.class_foo(1)</code> works just fine:</p>\n\n<pre><code>A.class_foo(1)\n# executing class_foo(&lt;class '__main__.A'&gt;,1)\n</code></pre>\n\n<p>One use people have found for class methods is to create <a href=\"https://stackoverflow.com/a/1950927/190597\">inheritable alternative constructors</a>.</p>\n\n<hr>\n\n<p><strong>With staticmethods</strong>, neither <code>self</code> (the object instance) nor  <code>cls</code> (the class) is implicitly passed as the first argument. They behave like plain functions except that you can call them from an instance or the class:</p>\n\n<pre><code>a.static_foo(1)\n# executing static_foo(1)\n\nA.static_foo('hi')\n# executing static_foo(hi)\n</code></pre>\n\n<p>Staticmethods are used to group functions which have some logical connection with a class to the class.</p>\n\n<hr>\n\n<p><code>foo</code> is just a function, but when you call <code>a.foo</code> you don't just get the function,\nyou get a \"partially applied\" version of the function with the object instance <code>a</code> bound as the first argument to the function. <code>foo</code> expects 2 arguments, while <code>a.foo</code> only expects 1 argument.</p>\n\n<p><code>a</code> is bound to <code>foo</code>. That is what is meant by the term \"bound\" below:</p>\n\n<pre><code>print(a.foo)\n# &lt;bound method A.foo of &lt;__main__.A object at 0xb7d52f0c&gt;&gt;\n</code></pre>\n\n<p>With <code>a.class_foo</code>, <code>a</code> is not bound to <code>class_foo</code>, rather the class <code>A</code> is bound to <code>class_foo</code>.</p>\n\n<pre><code>print(a.class_foo)\n# &lt;bound method type.class_foo of &lt;class '__main__.A'&gt;&gt;\n</code></pre>\n\n<p>Here, with a staticmethod, even though it is a method, <code>a.static_foo</code> just returns\na good 'ole function with no arguments bound. <code>static_foo</code> expects 1 argument, and\n<code>a.static_foo</code> expects 1 argument too.</p>\n\n<pre><code>print(a.static_foo)\n# &lt;function static_foo at 0xb7d479cc&gt;\n</code></pre>\n\n<p>And of course the same thing happens when you call <code>static_foo</code> with the class <code>A</code> instead.</p>\n\n<pre><code>print(A.static_foo)\n# &lt;function static_foo at 0xb7d479cc&gt;\n</code></pre>\n"
    },
    "187": {
        "question_id": "22676",
        "answer_id": "22682",
        "question": "<p>I have a small utility that I use to download a MP3 from a website on a schedule and then builds/updates a podcast XML file which I've obviously added to iTunes.</p>\n\n<p>The text processing that creates/updates the XML file is written in Python. I use wget inside a Windows <code>.bat</code> file to download the actual MP3 however. I would prefer to have the entire utility written in Python though.</p>\n\n<p>I struggled though to find a way to actually down load the file in Python, thus why I resorted to <code>wget</code>.</p>\n\n<p>So, how do I download the file using Python?</p>\n",
        "answer": "<p>In Python 2, use urllib2 which comes with the standard library.</p>\n\n<pre><code>import urllib2\nresponse = urllib2.urlopen('http://www.example.com/')\nhtml = response.read()\n</code></pre>\n\n<p>This is the most basic way to use the library, minus any error handling.  You can also do more complex stuff such as changing headers.  The documentation can be found <a href=\"http://docs.python.org/2/library/urllib2.html\" rel=\"noreferrer\">here.</a></p>\n"
    },
    "188": {
        "question_id": "20001229",
        "answer_id": "20001283",
        "question": "<p>I'm trying to build a simple API using Flask, in which I now want to read some POSTed JSON. I do the post with the <a href=\"https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm\" rel=\"noreferrer\">PostMan Chrome extension</a>, and the JSON I post is simply <code>{\"text\":\"lalala\"}</code>. I try to read the JSON using the following method:</p>\n\n<pre><code>@app.route('/api/add_message/&lt;uuid&gt;', methods=['GET', 'POST'])\ndef add_message(uuid):\n    content = request.json\n    print content\n    return uuid\n</code></pre>\n\n<p>On the browser it correctly returns the uuid I put in the GET, but on the console, it just prints out <code>None</code> (where I expect it to print out the <code>{\"text\":\"lalala\"}</code>. Does anybody know how I can get the posted JSON from within the Flask method? </p>\n",
        "answer": "<p>First of all, the <code>.json</code> attribute is a property that delegates to the <a href=\"http://flask.pocoo.org/docs/api/#flask.Request.get_json\" rel=\"noreferrer\"><code>request.get_json()</code> method</a>, which documents why you see <code>None</code> here. </p>\n\n<p>You need to set the request content type to <code>application/json</code> for the <code>.json</code> property and <code>.get_json()</code> method (with no arguments) to work as either will produce <code>None</code> otherwise. See the <a href=\"http://flask.pocoo.org/docs/api/#flask.Request.json\" rel=\"noreferrer\">Flask <code>Request</code> documentation</a>:</p>\n\n<blockquote>\n  <p>This will contain the parsed JSON data if the mimetype indicates JSON (<em>application/json</em>, see <a href=\"http://flask.pocoo.org/docs/1.0/api/#flask.Request.is_json\" rel=\"noreferrer\"><code>is_json()</code></a>), otherwise it will be <code>None</code>.</p>\n</blockquote>\n\n<p>You can tell <code>request.get_json()</code> to skip the content type requirement by passing it the <code>force=True</code> keyword argument.</p>\n\n<p>Note that if an <em>exception</em> is raised at this point (possibly resulting in a 400 Bad Request response), your JSON <em>data</em> is invalid. It is in some way malformed; you may want to check it with a JSON validator.</p>\n"
    },
    "189": {
        "question_id": "3964681",
        "answer_id": "3964691",
        "question": "<p>How can I find all the files in a directory having the extension <code>.txt</code> in python?</p>\n",
        "answer": "<p>You can use <a href=\"https://docs.python.org/2/library/glob.html\" rel=\"noreferrer\"><code>glob</code></a>:</p>\n\n<pre><code>import glob, os\nos.chdir(\"/mydir\")\nfor file in glob.glob(\"*.txt\"):\n    print(file)\n</code></pre>\n\n<p>or simply <a href=\"https://docs.python.org/2/library/os.html#os.listdir\" rel=\"noreferrer\"><code>os.listdir</code></a>:</p>\n\n<pre><code>import os\nfor file in os.listdir(\"/mydir\"):\n    if file.endswith(\".txt\"):\n        print(os.path.join(\"/mydir\", file))\n</code></pre>\n\n<p>or if you want to traverse directory, use <a href=\"https://docs.python.org/2/library/os.html#os.walk\" rel=\"noreferrer\"><code>os.walk</code></a>:</p>\n\n<pre><code>import os\nfor root, dirs, files in os.walk(\"/mydir\"):\n    for file in files:\n        if file.endswith(\".txt\"):\n             print(os.path.join(root, file))\n</code></pre>\n"
    },
    "190": {
        "question_id": "4256107",
        "answer_id": "4256153",
        "question": "<p>On my local machine, I run a python script which contains this line</p>\n\n<pre><code>bashCommand = \"cwm --rdf test.rdf --ntriples &gt; test.nt\"\nos.system(bashCommand)\n</code></pre>\n\n<p>This works fine.</p>\n\n<p>Then I run the same code on a server and I get the following error message</p>\n\n<pre><code>'import site' failed; use -v for traceback\nTraceback (most recent call last):\nFile \"/usr/bin/cwm\", line 48, in &lt;module&gt;\nfrom swap import  diag\nImportError: No module named swap\n</code></pre>\n\n<p>So what I did then is I inserted a <code>print bashCommand</code> which prints me than the command in the terminal before it runs it with <code>os.system()</code>.</p>\n\n<p>Of course, I get again the error (caused by <code>os.system(bashCommand)</code>) but before that error it prints the command in the terminal. Then I just copied that output and did a copy paste into the terminal and hit enter and it works...</p>\n\n<p>Does anyone have a clue what's going on?</p>\n",
        "answer": "<p>Don't use <code>os.system</code>. It has been deprecated in favor of <a href=\"http://docs.python.org/library/subprocess.html\" rel=\"noreferrer\">subprocess</a>. From the <a href=\"https://docs.python.org/3/library/subprocess.html\" rel=\"noreferrer\">docs</a>: \"This module intends to replace several older modules and functions: <code>os.system</code>, <code>os.spawn</code>\".</p>\n\n<p>Like in your case:</p>\n\n<pre><code>bashCommand = \"cwm --rdf test.rdf --ntriples &gt; test.nt\"\nimport subprocess\nprocess = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)\noutput, error = process.communicate()\n</code></pre>\n"
    },
    "191": {
        "question_id": "372885",
        "answer_id": "622308",
        "question": "<p>How do I connect to a MySQL database using a python program?</p>\n",
        "answer": "\n\n<h2>Connecting to MYSQL with Python 2 in three steps</h2>\n\n<p><strong>1 - Setting</strong></p>\n\n<p>You must install a MySQL driver before doing anything. Unlike PHP, Only the SQLite driver is installed by default with Python. The most used package to do so is <a href=\"http://pypi.python.org/pypi/MySQL-python/\" rel=\"noreferrer\">MySQLdb</a> but it's hard to install it using easy_install. Please note MySQLdb only supports Python 2.</p>\n\n<p>For Windows user, you can get an <a href=\"http://sourceforge.net/project/showfiles.php?group_id=22307\" rel=\"noreferrer\">exe of MySQLdb</a>. </p>\n\n<p>For Linux, this is a casual package (python-mysqldb). (You can use <code>sudo apt-get install python-mysqldb</code> (for debian based distros), <code>yum install MySQL-python</code> (for rpm-based), or <code>dnf install python-mysql</code> (for modern fedora distro) in command line to download.)</p>\n\n<p>For Mac, you can <a href=\"https://stackoverflow.com/questions/1448429/how-to-install-mysqldb-python-data-access-library-to-mysql-on-mac-os-x#1448476\">install MySQLdb using Macport</a>.</p>\n\n<p><strong>2 - Usage</strong></p>\n\n<p>After installing, Reboot. This is not mandatory, But it will prevent me from answering 3 or 4 other questions in this post if something goes wrong. So please reboot.</p>\n\n<p>Then it is just like using any other package :</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>#!/usr/bin/python\nimport MySQLdb\n\ndb = MySQLdb.connect(host=\"localhost\",    # your host, usually localhost\n                     user=\"john\",         # your username\n                     passwd=\"megajonhy\",  # your password\n                     db=\"jonhydb\")        # name of the data base\n\n# you must create a Cursor object. It will let\n#  you execute all the queries you need\ncur = db.cursor()\n\n# Use all the SQL you like\ncur.execute(\"SELECT * FROM YOUR_TABLE_NAME\")\n\n# print all the first cell of all the rows\nfor row in cur.fetchall():\n    print row[0]\n\ndb.close()\n</code></pre>\n\n<p>Of course, there are thousand of possibilities and options; this is a very basic example. You will have to look at the documentation. <a href=\"http://www.mikusa.com/python-mysql-docs/\" rel=\"noreferrer\">A good starting point</a>.</p>\n\n<p><strong>3 - More advanced usage</strong></p>\n\n<p>Once you know how it works, You may want to use an <a href=\"https://en.wikipedia.org/wiki/Object-Relational_Mapping\" rel=\"noreferrer\">ORM</a> to avoid writing SQL manually and manipulate your tables as they were Python objects. The most famous ORM in the Python community is <a href=\"http://www.sqlalchemy.org/\" rel=\"noreferrer\">SQLAlchemy</a>. </p>\n\n<p>I strongly advise you to use it: your life is going to be much easier.</p>\n\n<p>I recently discovered another jewel in the Python world: <a href=\"http://peewee.readthedocs.org/en/latest/index.html\" rel=\"noreferrer\">peewee</a>. It's a very lite ORM, really easy and fast to setup then use. It makes my day for small projects or stand alone apps, Where using big tools like SQLAlchemy or Django is overkill :</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import peewee\nfrom peewee import *\n\ndb = MySQLDatabase('jonhydb', user='john', passwd='megajonhy')\n\nclass Book(peewee.Model):\n    author = peewee.CharField()\n    title = peewee.TextField()\n\n    class Meta:\n        database = db\n\nBook.create_table()\nbook = Book(author=\"me\", title='Peewee is cool')\nbook.save()\nfor book in Book.filter(author=\"me\"):\n    print book.title\n</code></pre>\n\n<p>This example works out of the box. Nothing other than having peewee (<code>pip install peewee</code>) is required.</p>\n"
    },
    "192": {
        "question_id": "3437059",
        "answer_id": "3437070",
        "question": "<p>I'm looking for a <code>string.contains</code> or <code>string.indexof</code> method in Python.</p>\n\n<p>I want to do:</p>\n\n<pre><code>if not somestring.contains(\"blah\"):\n   continue\n</code></pre>\n",
        "answer": "<p>You can use the <a href=\"https://docs.python.org/reference/expressions.html#membership-test-details\" rel=\"noreferrer\"><code>in</code> operator</a>:</p>\n\n<pre><code>if \"blah\" not in somestring: \n    continue\n</code></pre>\n"
    },
    "193": {
        "question_id": "1756096",
        "answer_id": "1756156",
        "question": "<p>I am reading the Python cookbook at the moment and am currently looking at generators. I'm finding it hard to get my head round.</p>\n\n<p>As I come from a Java background, is there a Java equivalent? The book was speaking about 'Producer / Consumer', however when I hear that I think of threading.</p>\n\n<p>What is a generator and why would you use it? Without quoting any books, obviously (unless you can find a decent, simplistic answer direct from a book). Perhaps with examples, if you're feeling generous!</p>\n",
        "answer": "<p><strong>Note: this post assumes Python 3.x syntax.</strong><sup>&dagger;</sup></p>\n\n<p>A <a href=\"http://www.python.org/dev/peps/pep-0255/\" rel=\"noreferrer\">generator</a> is simply a function which returns an object on which you can call <code>next</code>, such that for every call it returns some value, until it raises a <code>StopIteration</code> exception, signaling that all values have been generated. Such an object is called an <em>iterator</em>.</p>\n\n<p>Normal functions return a single value using <code>return</code>, just like in Java. In Python, however, there is an alternative, called <code>yield</code>. Using <code>yield</code> anywhere in a function makes it a generator. Observe this code:</p>\n\n<pre><code>&gt;&gt;&gt; def myGen(n):\n...     yield n\n...     yield n + 1\n... \n&gt;&gt;&gt; g = myGen(6)\n&gt;&gt;&gt; next(g)\n6\n&gt;&gt;&gt; next(g)\n7\n&gt;&gt;&gt; next(g)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nStopIteration\n</code></pre>\n\n<p>As you can see, <code>myGen(n)</code> is a function which yields <code>n</code> and <code>n + 1</code>. Every call to <a href=\"http://docs.python.org/3/library/functions.html#next\" rel=\"noreferrer\"><code>next</code></a> yields a single value, until all values have been yielded. <code>for</code> loops call <code>next</code> in the background, thus:</p>\n\n<pre><code>&gt;&gt;&gt; for n in myGen(6):\n...     print(n)\n... \n6\n7\n</code></pre>\n\n<p>Likewise there are <a href=\"http://www.python.org/dev/peps/pep-0289/\" rel=\"noreferrer\"><em>generator expressions</em></a>, which provide a means to succinctly describe certain common types of generators:</p>\n\n<pre><code>&gt;&gt;&gt; g = (n for n in range(3, 5))\n&gt;&gt;&gt; next(g)\n3\n&gt;&gt;&gt; next(g)\n4\n&gt;&gt;&gt; next(g)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nStopIteration\n</code></pre>\n\n<p>Note that generator expressions are much like <a href=\"http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions\" rel=\"noreferrer\"><em>list comprehensions</em></a>:</p>\n\n<pre><code>&gt;&gt;&gt; lc = [n for n in range(3, 5)]\n&gt;&gt;&gt; lc\n[3, 4]\n</code></pre>\n\n<p>Observe that a generator object is generated <em>once</em>, but its code is <em>not</em> run all at once. Only calls to <code>next</code> actually execute (part of) the code. Execution of the code in a generator stops once a <code>yield</code> statement has been reached, upon which it returns a value. The next call to <code>next</code> then causes execution to continue in the state in which the generator was left after the last <code>yield</code>. This is a fundamental difference with regular functions: those always start execution at the \"top\" and discard their state upon returning a value.</p>\n\n<p>There are more things to be said about this subject. It is e.g. possible to <code>send</code> data back into a generator (<a href=\"http://docs.python.org/3/reference/expressions.html#yield-expressions\" rel=\"noreferrer\">reference</a>). But that is something I suggest you do not look into until you understand the basic concept of a generator.</p>\n\n<p>Now you may ask: why use generators? There are a couple of good reasons:</p>\n\n<ul>\n<li>Certain concepts can be described much more succinctly using generators.</li>\n<li>Instead of creating a function which returns a list of values, one can write a generator which generates the values on the fly. This means that no list needs to be constructed, meaning that the resulting code is more memory efficient. In this way one can even describe data streams which would simply be too large to fit in memory.</li>\n<li><p>Generators allow for a natural way to describe <em>infinite</em> streams. Consider for example the <a href=\"http://en.wikipedia.org/wiki/Fibonacci_number\" rel=\"noreferrer\">Fibonacci numbers</a>:</p>\n\n<pre><code>&gt;&gt;&gt; def fib():\n...     a, b = 0, 1\n...     while True:\n...         yield a\n...         a, b = b, a + b\n... \n&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; list(itertools.islice(fib(), 10))\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n</code></pre>\n\n<p>This code uses <a href=\"http://docs.python.org/3/library/itertools.html#itertools.islice\" rel=\"noreferrer\"><code>itertools.islice</code></a> to take a finite number of elements from an infinite stream. You are advised to have a good look at the functions in the <a href=\"http://docs.python.org/3/library/itertools.html\" rel=\"noreferrer\"><code>itertools</code></a> module, as they are essential tools for writing advanced generators with great ease.</p></li>\n</ul>\n\n<hr>\n\n<p>&nbsp;&nbsp;<sup>&dagger;</sup> <strong>About Python &lt;=2.6:</strong> in the above examples <code>next</code> is a function which calls the method <code>__next__</code> on the given object. In Python &lt;=2.6 one uses a slightly different technique, namely <code>o.next()</code> instead of <code>next(o)</code>. Python 2.7 has <code>next()</code> call <code>.next</code> so you need not use the following in 2.7:</p>\n\n<pre><code>&gt;&gt;&gt; g = (n for n in range(3, 5))\n&gt;&gt;&gt; g.next()\n3\n</code></pre>\n"
    },
    "194": {
        "question_id": "5466451",
        "answer_id": "5466478",
        "question": "<pre><code>x = \" \\{ Hello \\} {0} \"\nprint x.format(42)\n</code></pre>\n\n<p>gives me : <code>Key Error: Hello\\\\</code></p>\n\n<p>I want to print the output: <code>{Hello} 42</code></p>\n",
        "answer": "<p>You need to double the <code>{{</code> and <code>}}</code>:</p>\n\n<pre><code>&gt;&gt;&gt; x = \" {{ Hello }} {0} \"\n&gt;&gt;&gt; print x.format(42)\n' { Hello } 42 '\n</code></pre>\n\n<p>Here's the relevant part of the <a href=\"http://docs.python.org/library/string.html#formatstrings\">Python documentation for format string syntax</a>:</p>\n\n<blockquote>\n  <p>Format strings contain \u201creplacement fields\u201d surrounded by curly braces <code>{}</code>. Anything that is not contained in braces is considered literal text, which is copied unchanged to the output. If you need to include a brace character in the literal text, it can be escaped by doubling: <code>{{</code> and <code>}}</code>.</p>\n</blockquote>\n"
    },
    "195": {
        "question_id": "183853",
        "answer_id": "183870",
        "question": "<p>Is there a benefit to using one over the other? In Python 2, they both seem to return the same results:</p>\n\n<pre><code>&gt;&gt;&gt; 6/3\n2\n&gt;&gt;&gt; 6//3\n2\n</code></pre>\n",
        "answer": "<p>In Python 3.0, <code>5 / 2</code> will return <code>2.5</code> and <code>5 // 2</code> will return <code>2</code>.  The former is floating point division, and the latter is floor division, sometimes also called integer division.</p>\n\n<p>In Python 2.2 or later in the 2.x line, there is no difference for integers unless you perform a <code>from __future__ import division</code>, which causes Python 2.x to adopt the behavior of 3.0</p>\n\n<p>Regardless of the future import, <code>5.0 // 2</code> will return <code>2.0</code> since that's the floor division result of the operation.</p>\n\n<p>You can find a detailed description at <a href=\"https://docs.python.org/whatsnew/2.2.html#pep-238-changing-the-division-operator\" rel=\"noreferrer\">https://docs.python.org/whatsnew/2.2.html#pep-238-changing-the-division-operator</a></p>\n"
    },
    "196": {
        "question_id": "2386714",
        "answer_id": "2386740",
        "question": "<p>It is recommended to not to use <code>import *</code> in Python. </p>\n\n<p>Can anyone please share the reason for that, so that I can avoid it doing next time?</p>\n",
        "answer": "<ul>\n<li><p>Because it puts a lot of stuff into your namespace (might shadow some other object from previous import and you won't know about it). </p></li>\n<li><p>Because you don't know exactly what is imported and can't easily find from which module a certain thing was imported (readability). </p></li>\n<li><p>Because you can't use cool tools like <code>pyflakes</code> to statically detect errors in your code.</p></li>\n</ul>\n"
    },
    "197": {
        "question_id": "890128",
        "answer_id": "890188",
        "question": "<p>I'm trying to figure out Python lambdas.  Is lambda one of those \"interesting\" language items that in real life should be forgotten? </p>\n\n<p>I'm sure there are some edge cases where it might be needed, but given the obscurity of it, the potential of it being redefined in future releases (my assumption based on the various definitions of it) and the reduced coding clarity - should it be avoided?  </p>\n\n<p>This reminds me of overflowing (buffer overflow) of C types - pointing to the top variable and overloading to set the other field values.  It feels like sort of a techie showmanship but maintenance coder nightmare.</p>\n",
        "answer": "<p>Are you talking about <a href=\"https://docs.python.org/3.5/tutorial/controlflow.html#lambda-expressions\" rel=\"noreferrer\">lambda functions</a>? Like</p>\n\n<pre><code>lambda x: x**2 + 2*x - 5\n</code></pre>\n\n<p>Those things are actually quite useful.  Python supports a style of programming called <em>functional programming</em> where you can pass functions to other functions to do stuff. Example:</p>\n\n<pre><code>mult3 = filter(lambda x: x % 3 == 0, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n</code></pre>\n\n<p>sets <code>mult3</code> to <code>[3, 6, 9]</code>, those elements of the original list that are multiples of 3. This is shorter (and, one could argue, clearer) than</p>\n\n<pre><code>def filterfunc(x):\n    return x % 3 == 0\nmult3 = filter(filterfunc, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n</code></pre>\n\n<p>Of course, in this particular case, you could do the same thing as a list comprehension:</p>\n\n<pre><code>mult3 = [x for x in [1, 2, 3, 4, 5, 6, 7, 8, 9] if x % 3 == 0]\n</code></pre>\n\n<p>(or even as <code>range(3,10,3)</code>), but there are many other, more sophisticated use cases where you can't use a list comprehension and a lambda function may be the shortest way to write something out.</p>\n\n<ul>\n<li><p>Returning a function from another function</p>\n\n<pre><code>&gt;&gt;&gt; def transform(n):\n...     return lambda x: x + n\n...\n&gt;&gt;&gt; f = transform(3)\n&gt;&gt;&gt; f(4)\n7\n</code></pre>\n\n<p>This is often used to create function wrappers, such as Python's decorators.</p></li>\n<li><p>Combining elements of an iterable sequence with <code>reduce()</code></p>\n\n<pre><code>&gt;&gt;&gt; reduce(lambda a, b: '{}, {}'.format(a, b), [1, 2, 3, 4, 5, 6, 7, 8, 9])\n'1, 2, 3, 4, 5, 6, 7, 8, 9'\n</code></pre></li>\n<li><p>Sorting by an alternate key</p>\n\n<pre><code>&gt;&gt;&gt; sorted([1, 2, 3, 4, 5, 6, 7, 8, 9], key=lambda x: abs(5-x))\n[5, 4, 6, 3, 7, 2, 8, 1, 9]\n</code></pre></li>\n</ul>\n\n<p>I use lambda functions on a regular basis. It took me a while to get used to them, but eventually I came to understand that they're a very valuable part of the language.</p>\n"
    },
    "198": {
        "question_id": "1720421",
        "answer_id": "1720432",
        "question": "<p>How do I concatenate two lists in Python?</p>\n\n<p>Example:</p>\n\n<pre><code>listone = [1, 2, 3]\nlisttwo = [4, 5, 6]\n</code></pre>\n\n<p>Expected outcome:</p>\n\n<pre><code>&gt;&gt;&gt; joinedlist\n[1, 2, 3, 4, 5, 6]\n</code></pre>\n",
        "answer": "<p>You can use the <code>+</code> operator to combine them:</p>\n\n<pre><code>listone = [1,2,3]\nlisttwo = [4,5,6]\n\njoinedlist = listone + listtwo\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&gt;&gt;&gt; joinedlist\n[1,2,3,4,5,6]\n</code></pre>\n"
    },
    "199": {
        "question_id": "3768895",
        "answer_id": "3768975",
        "question": "<p>How to make a Python class serializable?  </p>\n\n<p>A simple class:</p>\n\n<pre><code>class FileItem:\n    def __init__(self, fname):\n        self.fname = fname\n</code></pre>\n\n<p>What should I do to be able to get output of:</p>\n\n<pre><code>json.dumps()\n</code></pre>\n\n<p>Without an error (<code>FileItem instance at ... is not JSON serializable</code>)</p>\n",
        "answer": "<p>Do you have an idea about the expected output? For e.g. will this do?</p>\n\n<pre><code>&gt;&gt;&gt; f  = FileItem(\"/foo/bar\")\n&gt;&gt;&gt; magic(f)\n'{\"fname\": \"/foo/bar\"}'\n</code></pre>\n\n<p>In that case you can merely call <code>json.dumps(f.__dict__)</code>. </p>\n\n<p>If you want more customized output then you will have to subclass <a href=\"https://docs.python.org/2/library/json.html#json.JSONEncoder\" rel=\"noreferrer\"><code>JSONEncoder</code></a> and implement your own custom serialization. </p>\n\n<p>For a trivial example, see below.</p>\n\n<pre><code>&gt;&gt;&gt; from json import JSONEncoder\n&gt;&gt;&gt; class MyEncoder(JSONEncoder):\n        def default(self, o):\n            return o.__dict__    \n\n&gt;&gt;&gt; MyEncoder().encode(f)\n'{\"fname\": \"/foo/bar\"}'\n</code></pre>\n\n<p>Then you pass this class into the <a href=\"https://docs.python.org/2/library/json.html#json.JSONDecoder\" rel=\"noreferrer\"><code>json.dumps()</code></a> method as <code>cls</code> kwarg:</p>\n\n<pre><code>json.dumps(cls=MyEncoder)\n</code></pre>\n\n<p>If you also want to decode then you'll have to supply a custom <code>object_hook</code> to the <a href=\"https://docs.python.org/2/library/json.html#json.JSONDecoder\" rel=\"noreferrer\"><code>JSONDecoder</code></a> class. For e.g.</p>\n\n<pre><code>&gt;&gt;&gt; def from_json(json_object):\n        if 'fname' in json_object:\n            return FileItem(json_object['fname'])\n&gt;&gt;&gt; f = JSONDecoder(object_hook = from_json).decode('{\"fname\": \"/foo/bar\"}')\n&gt;&gt;&gt; f\n&lt;__main__.FileItem object at 0x9337fac&gt;\n&gt;&gt;&gt; \n</code></pre>\n"
    },
    "200": {
        "question_id": "127803",
        "answer_id": "15228038",
        "question": "<p>I need to parse <a href=\"https://tools.ietf.org/html/rfc3339\" rel=\"noreferrer\">RFC 3339</a> strings like <code>\"2008-09-03T20:56:35.450686Z\"</code> into Python's <code>datetime</code> type.</p>\n\n<p>I have found <a href=\"https://docs.python.org/library/datetime.html#datetime.datetime.strptime\" rel=\"noreferrer\"><code>strptime</code></a> in the Python standard library, but it is not very convenient.</p>\n\n<p>What is the best way to do this?</p>\n",
        "answer": "<p>The <em>python-dateutil</em> package can parse not only RFC 3339 datetime strings like the one in the question, but also other <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" rel=\"noreferrer\">ISO 8601</a> date and time strings  that don't comply with RFC 3339 (such as ones with no UTC offset, or ones that represent only a date).</p>\n\n<pre><code>&gt;&gt;&gt; import dateutil.parser\n&gt;&gt;&gt; dateutil.parser.parse('2008-09-03T20:56:35.450686Z') # RFC 3339 format\ndatetime.datetime(2008, 9, 3, 20, 56, 35, 450686, tzinfo=tzutc())\n&gt;&gt;&gt; dateutil.parser.parse('2008-09-03T20:56:35.450686') # ISO 8601 extended format\ndatetime.datetime(2008, 9, 3, 20, 56, 35, 450686)\n&gt;&gt;&gt; dateutil.parser.parse('20080903T205635.450686') # ISO 8601 basic format\ndatetime.datetime(2008, 9, 3, 20, 56, 35, 450686)\n&gt;&gt;&gt; dateutil.parser.parse('20080903') # ISO 8601 basic format, date only\ndatetime.datetime(2008, 9, 3, 0, 0)\n</code></pre>\n\n<hr>\n\n<p>Be warned that the <code>dateutil.parser</code> is intentionally hacky: it tries to guess the format and makes inevitable assumptions (customizable by hand only) in ambiguous cases. So ONLY use it if you need to parse input of unknown format and are okay to tolerate occasional misreads. (thanks <a href=\"https://stackoverflow.com/users/648265/ivan-pozdeev\">ivan_pozdeev</a>)</p>\n\n<p>The Pypi name is <a href=\"https://pypi.python.org/pypi/python-dateutil\" rel=\"noreferrer\"><code>python-dateutil</code></a>, not <code>dateutil</code> (thanks <a href=\"https://stackoverflow.com/users/1174169/cod3monk3y\">code3monk3y</a>):</p>\n\n<pre><code>pip install python-dateutil\n</code></pre>\n\n<p>If you're using Python 3.7, have a look at <a href=\"https://stackoverflow.com/a/49784038/247696\">this answer</a> about <code>datetime.datetime.fromisoformat</code>.</p>\n"
    },
    "201": {
        "question_id": "14262433",
        "answer_id": "14268804",
        "question": "<p>I have tried to puzzle out an answer to this question for many months while learning pandas.  I use SAS for my day-to-day work and it is great for it's out-of-core support.  However, SAS is horrible as a piece of software for numerous other reasons.</p>\n\n<p>One day I hope to replace my use of SAS with python and pandas, but I currently lack an out-of-core workflow for large datasets.  I'm not talking about \"big data\" that requires a distributed network, but rather files too large to fit in memory but small enough to fit on a hard-drive.</p>\n\n<p>My first thought is to use <code>HDFStore</code> to hold large datasets on disk and pull only the pieces I need into dataframes for analysis.  Others have mentioned MongoDB as an easier to use alternative.  My question is this:</p>\n\n<p>What are some best-practice workflows for accomplishing the following:</p>\n\n<ol>\n<li>Loading flat files into a permanent, on-disk database structure</li>\n<li>Querying that database to retrieve data to feed into a pandas data structure</li>\n<li>Updating the database after manipulating pieces in pandas</li>\n</ol>\n\n<p>Real-world examples would be much appreciated, especially from anyone who uses pandas on \"large data\".</p>\n\n<p>Edit -- an example of how I would like this to work:</p>\n\n<ol>\n<li>Iteratively import a large flat-file and store it in a permanent, on-disk database structure.  These files are typically too large to fit in memory.</li>\n<li>In order to use Pandas, I would like to read subsets of this data (usually just a few columns at a time) that can fit in memory.</li>\n<li>I would create new columns by performing various operations on the selected columns.</li>\n<li>I would then have to append these new columns into the database structure.</li>\n</ol>\n\n<p>I am trying to find a best-practice way of performing these steps. Reading links about pandas and pytables it seems that appending a new column could be a problem.</p>\n\n<p>Edit -- Responding to Jeff's questions specifically:</p>\n\n<ol>\n<li>I am building consumer credit risk models. The kinds of data include phone, SSN and address characteristics; property values; derogatory information like criminal records, bankruptcies, etc... The datasets I use every day have nearly 1,000 to 2,000 fields on average of mixed data types: continuous, nominal and ordinal variables of both numeric and character data.  I rarely append rows, but I do perform many operations that create new columns.</li>\n<li>Typical operations involve combining several columns using conditional logic into a new, compound column. For example, <code>if var1 &gt; 2 then newvar = 'A' elif var2 = 4 then newvar = 'B'</code>.  The result of these operations is a new column for every record in my dataset.</li>\n<li>Finally, I would like to append these new columns into the on-disk data structure.  I would repeat step 2, exploring the data with crosstabs and descriptive statistics trying to find interesting, intuitive relationships to model.</li>\n<li>A typical project file is usually about 1GB.  Files are organized into such a manner where a row consists of a record of consumer data.  Each row has the same number of columns for every record.  This will always be the case.</li>\n<li>It's pretty rare that I would subset by rows when creating a new column.  However, it's pretty common for me to subset on rows when creating reports or generating descriptive statistics.  For example, I might want to create a simple frequency for a specific line of business, say Retail credit cards.  To do this, I would select only those records where the line of business = retail in addition to whichever columns I want to report on.  When creating new columns, however, I would pull all rows of data and only the columns I need for the operations.</li>\n<li>The modeling process requires that I analyze every column, look for interesting relationships with some outcome variable, and create new compound columns that describe those relationships.  The columns that I explore are usually done in small sets.  For example, I will focus on a set of say 20 columns just dealing with property values and observe how they relate to defaulting on a loan.  Once those are explored and new columns are created, I then move on to another group of columns, say college education, and repeat the process.  What I'm doing is creating candidate variables that explain the relationship between my data and some outcome.  At the very end of this process, I apply some learning techniques that create an equation out of those compound columns.</li>\n</ol>\n\n<p>It is rare that I would ever add rows to the dataset.  I will nearly always be creating new columns (variables or features in statistics/machine learning parlance).</p>\n",
        "answer": "<p>I routinely use tens of gigabytes of data in just this fashion\ne.g. I have tables on disk that I read via queries, create data and append back.</p>\n\n<p>It's worth reading <a href=\"http://pandas-docs.github.io/pandas-docs-travis/io.html#hdf5-pytables\">the docs</a> and <a href=\"https://groups.google.com/forum/m/?fromgroups#!topic/pydata/cmw1F3OFJSc\">late in this thread</a> for several suggestions for how to store your data.</p>\n\n<p>Details which will affect how you store your data, like:<br>\n<em>Give as much detail as you can; and I can help you develop a structure.</em></p>\n\n<ol>\n<li>Size of data, # of rows, columns, types of columns; are you appending\nrows, or just columns? </li>\n<li>What will typical operations look like. E.g. do a query on columns to select a bunch of rows and specific columns, then do an operation (in-memory), create new columns, save these.<br>\n(Giving a toy example could enable us to offer more specific recommendations.)</li>\n<li>After that processing, then what do you do? Is step 2 ad hoc, or repeatable?</li>\n<li>Input flat files: how many, rough total size in Gb. How are these organized e.g. by records? Does each one contains different fields, or do they have some records per file with all of the fields in each file?</li>\n<li>Do you ever select subsets of rows (records) based on criteria (e.g. select the rows with field A > 5)? and then do something, or do you just select fields A, B, C with all of the records (and then do something)?</li>\n<li>Do you 'work on' all of your columns (in groups), or are there a good proportion that you may only use for reports (e.g. you want to keep the data around, but don't need to pull in that column explicity until final results time)?</li>\n</ol>\n\n<h2>Solution</h2>\n\n<p><em>Ensure you have <a href=\"http://pandas.pydata.org/getpandas.html\">pandas at least <code>0.10.1</code></a> installed.</em></p>\n\n<p>Read <a href=\"http://pandas-docs.github.io/pandas-docs-travis/io.html#iterating-through-files-chunk-by-chunk\">iterating files chunk-by-chunk</a> and <a href=\"http://pandas-docs.github.io/pandas-docs-travis/io.html#multiple-table-queries\">multiple table queries</a>.</p>\n\n<p>Since pytables is optimized to operate on row-wise (which is what you query on), we will create a table for each group of fields. This way it's easy to select a small group of fields (which will work with a big table, but it's more efficient to do it this way... I think I may be able to fix this limitation in the future... this is more intuitive anyhow):<br>\n(The following is pseudocode.)</p>\n\n<pre><code>import numpy as np\nimport pandas as pd\n\n# create a store\nstore = pd.HDFStore('mystore.h5')\n\n# this is the key to your storage:\n#    this maps your fields to a specific group, and defines \n#    what you want to have as data_columns.\n#    you might want to create a nice class wrapping this\n#    (as you will want to have this map and its inversion)  \ngroup_map = dict(\n    A = dict(fields = ['field_1','field_2',.....], dc = ['field_1',....,'field_5']),\n    B = dict(fields = ['field_10',......        ], dc = ['field_10']),\n    .....\n    REPORTING_ONLY = dict(fields = ['field_1000','field_1001',...], dc = []),\n\n)\n\ngroup_map_inverted = dict()\nfor g, v in group_map.items():\n    group_map_inverted.update(dict([ (f,g) for f in v['fields'] ]))\n</code></pre>\n\n<p>Reading in the files and creating the storage (essentially doing what <code>append_to_multiple</code> does):</p>\n\n<pre><code>for f in files:\n   # read in the file, additional options hmay be necessary here\n   # the chunksize is not strictly necessary, you may be able to slurp each \n   # file into memory in which case just eliminate this part of the loop \n   # (you can also change chunksize if necessary)\n   for chunk in pd.read_table(f, chunksize=50000):\n       # we are going to append to each table by group\n       # we are not going to create indexes at this time\n       # but we *ARE* going to create (some) data_columns\n\n       # figure out the field groupings\n       for g, v in group_map.items():\n             # create the frame for this group\n             frame = chunk.reindex(columns = v['fields'], copy = False)    \n\n             # append it\n             store.append(g, frame, index=False, data_columns = v['dc'])\n</code></pre>\n\n<p>Now you have all of the tables in the file (actually you could store them in separate files if you wish, you would prob have to add the filename to the group_map, but probably this isn't necessary).</p>\n\n<p>This is how you get columns and create new ones:</p>\n\n<pre><code>frame = store.select(group_that_I_want)\n# you can optionally specify:\n# columns = a list of the columns IN THAT GROUP (if you wanted to\n#     select only say 3 out of the 20 columns in this sub-table)\n# and a where clause if you want a subset of the rows\n\n# do calculations on this frame\nnew_frame = cool_function_on_frame(frame)\n\n# to 'add columns', create a new group (you probably want to\n# limit the columns in this new_group to be only NEW ones\n# (e.g. so you don't overlap from the other tables)\n# add this info to the group_map\nstore.append(new_group, new_frame.reindex(columns = new_columns_created, copy = False), data_columns = new_columns_created)\n</code></pre>\n\n<p>When you are ready for post_processing:</p>\n\n<pre><code># This may be a bit tricky; and depends what you are actually doing.\n# I may need to modify this function to be a bit more general:\nreport_data = store.select_as_multiple([groups_1,groups_2,.....], where =['field_1&gt;0', 'field_1000=foo'], selector = group_1)\n</code></pre>\n\n<p>About data_columns, you don't actually need to define <strong>ANY</strong> data_columns; they allow you to sub-select rows based on the column. E.g. something like:</p>\n\n<pre><code>store.select(group, where = ['field_1000=foo', 'field_1001&gt;0'])\n</code></pre>\n\n<p>They may be most interesting to you in the final report generation stage (essentially a data column is segregated from other columns, which might impact efficiency somewhat if you define a lot).</p>\n\n<p>You also might want to:</p>\n\n<ul>\n<li>create a function which takes a list of fields, looks up the groups in the groups_map, then selects these and concatenates the results so you get the resulting frame (this is essentially what select_as_multiple does). <em>This way the structure would be pretty transparent to you.</em></li>\n<li>indexes on certain data columns (makes row-subsetting much faster).</li>\n<li>enable compression.</li>\n</ul>\n\n<p>Let me know when you have questions!</p>\n"
    },
    "202": {
        "question_id": "626759",
        "answer_id": "626871",
        "question": "<p>What's the difference?</p>\n\n<p>What are the advantages / disadvantages of tuples / lists?</p>\n",
        "answer": "<p>Apart from tuples being immutable there is also a semantic distinction that should guide their usage. Tuples are heterogeneous data structures (i.e., their entries have different meanings), while lists are homogeneous sequences. <strong>Tuples have structure, lists have order.</strong> </p>\n\n<p>Using this distinction makes code more explicit and understandable.</p>\n\n<p>One example would be pairs of page and line number to reference locations in a book, e.g.:</p>\n\n<pre><code>my_location = (42, 11)  # page number, line number\n</code></pre>\n\n<p>You can then use this as a key in a dictionary to store notes on locations. A list on the other hand could be used to store multiple locations. Naturally one might want to add or remove locations from the list, so it makes sense that lists are mutable. On the other hand it doesn't make sense to add or remove items from an existing location - hence tuples are immutable.</p>\n\n<p>There might be situations where you want to change items within an existing location tuple, for example when iterating through the lines of a page. But tuple immutability forces you to create a new location tuple for each new value. This seems inconvenient on the face of it, but using immutable data like this is a cornerstone of value types and functional programming techniques, which can have substantial advantages.</p>\n\n<p>There are some interesting articles on this issue, e.g. <a href=\"http://jtauber.com/blog/2006/04/15/python_tuples_are_not_just_constant_lists/\" rel=\"noreferrer\">\"Python Tuples are Not Just Constant Lists\"</a> or <a href=\"http://news.e-scribe.com/397\" rel=\"noreferrer\">\"Understanding tuples vs. lists in Python\"</a>. The official Python documentation <a href=\"http://docs.python.org/2/tutorial/datastructures.html#tuples-and-sequences\" rel=\"noreferrer\">also mentions this</a></p>\n\n<blockquote>\n  <p>\"Tuples are immutable, and usually contain an heterogeneous sequence ...\".</p>\n</blockquote>\n\n<p>In a statically typed language like <em>Haskell</em> the values in a tuple generally have different types and the length of the tuple must be fixed. In a list the values all have the same type and the length is not fixed. So the difference is very obvious.</p>\n\n<p>Finally there is the <a href=\"http://docs.python.org/dev/library/collections.html#collections.namedtuple\" rel=\"noreferrer\">namedtuple</a> in Python, which makes sense because a tuple is already supposed to have structure. This underlines the idea that tuples are a light-weight alternative to classes and instances.</p>\n"
    },
    "203": {
        "question_id": "279237",
        "answer_id": "6098238",
        "question": "<p>How do I import a Python module given its relative path?</p>\n\n<p>For example, if <code>dirFoo</code> contains <code>Foo.py</code> and <code>dirBar</code>, and <code>dirBar</code> contains <code>Bar.py</code>, how do I import <code>Bar.py</code> into <code>Foo.py</code>?</p>\n\n<p>Here's a visual representation:</p>\n\n<pre><code>dirFoo\\\n    Foo.py\n    dirBar\\\n        Bar.py\n</code></pre>\n\n<p><code>Foo</code> wishes to include <code>Bar</code>, but restructuring the folder hierarchy is not an option.</p>\n",
        "answer": "<p>Assuming that both your directories are real Python packages (do have the <code>__init__.py</code> file inside them), here is a safe solution for inclusion of modules relatively to the location of the script.</p>\n\n<p>I assume that you want to do this, because you need to include a set of modules with your script. I use this in production in several products and works in many special scenarios like: scripts called from another directory or executed with python execute instead of opening a new interpreter.</p>\n\n<pre><code> import os, sys, inspect\n # realpath() will make your script run, even if you symlink it :)\n cmd_folder = os.path.realpath(os.path.abspath(os.path.split(inspect.getfile( inspect.currentframe() ))[0]))\n if cmd_folder not in sys.path:\n     sys.path.insert(0, cmd_folder)\n\n # Use this if you want to include modules from a subfolder\n cmd_subfolder = os.path.realpath(os.path.abspath(os.path.join(os.path.split(inspect.getfile( inspect.currentframe() ))[0],\"subfolder\")))\n if cmd_subfolder not in sys.path:\n     sys.path.insert(0, cmd_subfolder)\n\n # Info:\n # cmd_folder = os.path.dirname(os.path.abspath(__file__)) # DO NOT USE __file__ !!!\n # __file__ fails if the script is called in different ways on Windows.\n # __file__ fails if someone does os.chdir() before.\n # sys.argv[0] also fails, because it doesn't not always contains the path.\n</code></pre>\n\n<p>As a bonus, this approach does let you force Python to use your module instead of the ones installed on the system.</p>\n\n<p>Warning! I don't really know what is happening when current module is inside an <code>egg</code> file. It probably fails too.</p>\n"
    },
    "204": {
        "question_id": "1466000",
        "answer_id": "1466036",
        "question": "<p>In the python built-in <a href=\"http://docs.python.org/library/functions.html#open\" rel=\"noreferrer\">open</a> function, what is the exact difference between the modes <code>w</code>, <code>a</code>, <code>w+</code>, <code>a+</code>, and <code>r+</code>?</p>\n\n<p>In particular, the documentation implies that all of these will allow writing to the file, and says that it opens the files for \"appending\", \"writing\", and \"updating\" specifically, but does not define what these terms mean.</p>\n",
        "answer": "<p>The opening modes are exactly the same as those for the C standard library function <strong><code>fopen()</code></strong>.</p>\n\n<p><a href=\"http://www.manpagez.com/man/3/fopen/\" rel=\"noreferrer\">The BSD <code>fopen</code> manpage</a> defines them as follows:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code> The argument mode points to a string beginning with one of the following\n sequences (Additional characters may follow these sequences.):\n\n ``r''   Open text file for reading.  The stream is positioned at the\n         beginning of the file.\n\n ``r+''  Open for reading and writing.  The stream is positioned at the\n         beginning of the file.\n\n ``w''   Truncate file to zero length or create text file for writing.\n         The stream is positioned at the beginning of the file.\n\n ``w+''  Open for reading and writing.  The file is created if it does not\n         exist, otherwise it is truncated.  The stream is positioned at\n         the beginning of the file.\n\n ``a''   Open for writing.  The file is created if it does not exist.  The\n         stream is positioned at the end of the file.  Subsequent writes\n         to the file will always end up at the then current end of file,\n         irrespective of any intervening fseek(3) or similar.\n\n ``a+''  Open for reading and writing.  The file is created if it does not\n         exist.  The stream is positioned at the end of the file.  Subse-\n         quent writes to the file will always end up at the then current\n         end of file, irrespective of any intervening fseek(3) or similar.\n</code></pre>\n"
    },
    "205": {
        "question_id": "5595425",
        "answer_id": "33024979",
        "question": "<p>It's well known that comparing floats for equality is a little fiddly due to rounding and precision issues.</p>\n\n<p>For example:\n<a href=\"https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/\" rel=\"noreferrer\">https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/</a></p>\n\n<p>What is the recommended way to deal with this in Python?</p>\n\n<p>Surely there is a standard library function for this somewhere?</p>\n",
        "answer": "<p>Python 3.5 adds the <a href=\"https://docs.python.org/3/whatsnew/3.5.html#pep-485-a-function-for-testing-approximate-equality\" rel=\"noreferrer\"><code>math.isclose</code> and <code>cmath.isclose</code> functions</a> as described in <a href=\"http://www.python.org/dev/peps/pep-0485\" rel=\"noreferrer\">PEP 485</a>.</p>\n\n<p>If you're using an earlier version of Python, the equivalent function is given in the <a href=\"https://www.python.org/dev/peps/pep-0485/#proposed-implementation\" rel=\"noreferrer\">documentation</a>.</p>\n\n<pre><code>def isclose(a, b, rel_tol=1e-09, abs_tol=0.0):\n    return abs(a-b) &lt;= max(rel_tol * max(abs(a), abs(b)), abs_tol)\n</code></pre>\n\n<p><code>rel_tol</code> is a relative tolerance, it is multiplied by the greater of the magnitudes of the two arguments; as the values get larger, so does the allowed difference between them while still considering them equal.</p>\n\n<p><code>abs_tol</code> is an absolute tolerance that is applied as-is in all cases. If the difference is less than either of those tolerances, the values are considered equal.</p>\n"
    },
    "206": {
        "question_id": "16970982",
        "answer_id": "44069948",
        "question": "<p>I need to find unique rows in a <code>numpy.array</code>.</p>\n\n<p>For example:</p>\n\n<pre><code>&gt;&gt;&gt; a # I have\narray([[1, 1, 1, 0, 0, 0],\n       [0, 1, 1, 1, 0, 0],\n       [0, 1, 1, 1, 0, 0],\n       [1, 1, 1, 0, 0, 0],\n       [1, 1, 1, 1, 1, 0]])\n&gt;&gt;&gt; new_a # I want to get to\narray([[1, 1, 1, 0, 0, 0],\n       [0, 1, 1, 1, 0, 0],\n       [1, 1, 1, 1, 1, 0]])\n</code></pre>\n\n<p>I know that i can create a set and loop over the array, but I am looking for an efficient pure <code>numpy</code> solution. I believe that there is a way to set data type to void and then I could just use <code>numpy.unique</code>, but I couldn't figure out how to make it work.</p>\n",
        "answer": "<p>As of NumPy 1.13, one can simply choose the axis for selection of unique values in any N-dim array. To get unique rows, one can do:</p>\n\n<p><code>unique_rows = np.unique(original_array, axis=0)</code></p>\n"
    },
    "207": {
        "question_id": "1549801",
        "answer_id": "1549854",
        "question": "<p>What are the differences between these two code fragments?\nUsing <code>type()</code>:</p>\n\n<pre><code>import types\n\nif type(a) is types.DictType:\n    do_something()\nif type(b) in types.StringTypes:\n    do_something_else()\n</code></pre>\n\n<p>Using <code>isinstance()</code>:</p>\n\n<pre><code>if isinstance(a, dict):\n    do_something()\nif isinstance(b, str) or isinstance(b, unicode):\n    do_something_else()\n</code></pre>\n",
        "answer": "<p>To summarize the contents of other (already good!) answers, <code>isinstance</code> caters for inheritance (an instance of a derived class <em>is an</em> instance of a base class, too), while checking for equality of <code>type</code> does not (it demands identity of types and rejects instances of subtypes, AKA subclasses).</p>\n\n<p>Normally, in Python, you want your code to support inheritance, of course (since inheritance is so handy, it would be bad to stop code using yours from using it!), so <code>isinstance</code> is less bad than checking identity of <code>type</code>s because it seamlessly supports inheritance.</p>\n\n<p>It's not that <code>isinstance</code> is <em>good</em>, mind you\u2014it's just <em>less bad</em> than checking equality of types.  The normal, Pythonic, preferred solution is almost invariably \"duck typing\": try using the argument <em>as if</em> it was of a certain desired type, do it in a <code>try</code>/<code>except</code> statement catching all exceptions that could arise if the argument was not in fact of that type (or any other type nicely duck-mimicking it;-), and in the <code>except</code> clause, try something else (using the argument \"as if\" it was of some other type).</p>\n\n<p><code>basestring</code> <strong>is</strong>, however, quite a special case\u2014a builtin type that exists <strong>only</strong> to let you use <code>isinstance</code> (both <code>str</code> and <code>unicode</code> subclass <code>basestring</code>). Strings are sequences (you could loop over them, index them, slice them, ...), but you generally want to treat them as \"scalar\" types\u2014it's somewhat incovenient (but a reasonably frequent use case) to treat all kinds of strings (and maybe other scalar types, i.e., ones you can't loop on) one way, all containers (lists, sets, dicts, ...) in another way, and <code>basestring</code> plus <code>isinstance</code> helps you do that\u2014the overall structure of this idiom is something like:</p>\n\n<pre><code>if isinstance(x, basestring)\n  return treatasscalar(x)\ntry:\n  return treatasiter(iter(x))\nexcept TypeError:\n  return treatasscalar(x)\n</code></pre>\n\n<p>You could say that <code>basestring</code> is an <em>Abstract Base Class</em> (\"ABC\")\u2014it offers no concrete functionality to subclasses, but rather exists as a \"marker\", mainly for use with <code>isinstance</code>. The concept is obviously a growing one in Python, since <a href=\"http://www.python.org/dev/peps/pep-3119/\" rel=\"noreferrer\">PEP 3119</a>, which introduces a generalization of it, was accepted and has been implemented starting with Python 2.6 and 3.0.</p>\n\n<p>The PEP makes it clear that, while ABCs can often substitute for duck typing, there is generally no big pressure to do that (see <a href=\"http://www.python.org/dev/peps/pep-3119/#abcs-vs-duck-typing\" rel=\"noreferrer\">here</a>). ABCs as implemented in recent Python versions do however offer extra goodies: <code>isinstance</code> (and <code>issubclass</code>) can now mean more than just \"[an instance of] a derived class\" (in particular, any class can be \"registered\" with an ABC so that it will show as a subclass, and its instances as instances of the ABC); and ABCs can also offer extra convenience to actual subclasses in a very natural way via Template Method design pattern applications (see <a href=\"http://en.wikipedia.org/wiki/Template_method_pattern\" rel=\"noreferrer\">here</a> and <a href=\"http://www.catonmat.net/blog/learning-python-design-patterns-through-video-lectures/\" rel=\"noreferrer\">here</a> [[part II]] for more on the TM DP, in general and specifically in Python, independent of ABCs).</p>\n\n<p>For the underlying mechanics of ABC support as offered in Python 2.6, see <a href=\"http://docs.python.org/library/abc.html\" rel=\"noreferrer\">here</a>; for their 3.1 version, very similar, see <a href=\"http://docs.python.org/3.1/library/abc.html\" rel=\"noreferrer\">here</a>.  In both versions, standard library module <a href=\"http://docs.python.org/3.1/library/collections.html#module-collections\" rel=\"noreferrer\">collections</a> (that's the 3.1 version\u2014for the very similar 2.6 version, see <a href=\"http://docs.python.org/library/collections.html#module-collections\" rel=\"noreferrer\">here</a>) offers several useful ABCs.</p>\n\n<p>For the purpose of this answer, the key thing to retain about ABCs (beyond an arguably more natural placement for TM DP functionality, compared to the classic Python alternative of mixin classes such as <a href=\"http://docs.python.org/library/userdict.html?highlight=userdict#UserDict.DictMixin\" rel=\"noreferrer\">UserDict.DictMixin</a>) is that they make <code>isinstance</code> (and <code>issubclass</code>) much more attractive and pervasive (in Python 2.6 and going forward) than they used to be (in 2.5 and before), and therefore, by contrast, make checking type equality an even worse practice in recent Python versions than it already used to be.</p>\n"
    },
    "208": {
        "question_id": "1747817",
        "answer_id": "1747827",
        "question": "<p>I like the Python list comprehension syntax.</p>\n\n<p>Can it be used to create dictionaries too? For example, by iterating over pairs of keys and values:</p>\n\n<pre><code>mydict = {(k,v) for (k,v) in blah blah blah}  # doesn't work\n</code></pre>\n",
        "answer": "<p>From Python 2.7 and 3 onwards, you should just use the <a href=\"http://www.python.org/dev/peps/pep-0274/\" rel=\"noreferrer\">dict comprehension syntax</a>:</p>\n\n<pre><code>{key: value for (key, value) in iterable}\n</code></pre>\n\n<p>In Python 2.6 and earlier, the <code>dict</code> built-in can receive an iterable of key/value pairs, so you can pass it a list comprehension or generator expression. For example:</p>\n\n<pre><code>dict((key, func(key)) for key in keys)\n</code></pre>\n\n<p>However if you already have iterable(s) of keys and/or vals, you needn't use a comprehension at all - it's simplest just call the <code>dict</code> built-in directly:</p>\n\n<pre><code># consumed from any iterable yielding pairs of keys/vals\ndict(pairs)\n\n# \"zipped\" from two separate iterables of keys/vals\ndict(zip(list_of_keys, list_of_values))\n</code></pre>\n"
    },
    "209": {
        "question_id": "436220",
        "answer_id": "436299",
        "question": "<p>I received some text that is encoded, but I don't know what charset was used. Is there a way to determine the encoding of a text file using Python? <a href=\"https://stackoverflow.com/questions/90838/how-can-i-detect-the-encoding-codepage-of-a-text-file\">How can I detect the encoding/codepage of a text file</a> deals with C#.</p>\n",
        "answer": "<p>Correctly detecting the encoding all times is <strong>impossible</strong>.</p>\n\n<p>(From chardet FAQ:)</p>\n\n<blockquote>\n  <p>However, some encodings are optimized\n  for specific languages, and languages\n  are not random. Some character\n  sequences pop up all the time, while\n  other sequences make no sense. A\n  person fluent in English who opens a\n  newspaper and finds \u201ctxzqJv 2!dasd0a\n  QqdKjvz\u201d will instantly recognize that\n  that isn't English (even though it is\n  composed entirely of English letters).\n  By studying lots of \u201ctypical\u201d text, a\n  computer algorithm can simulate this\n  kind of fluency and make an educated\n  guess about a text's language.</p>\n</blockquote>\n\n<p>There is the <a href=\"http://pypi.python.org/pypi/chardet\" rel=\"noreferrer\">chardet</a> library that uses that study to try to detect encoding. chardet is a port of the auto-detection code in Mozilla. </p>\n\n<p>You can also use <a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/#unicode-dammit\" rel=\"noreferrer\">UnicodeDammit</a>. It will try the following methods:</p>\n\n<ul>\n<li>An encoding discovered in the document itself: for instance, in an XML declaration or (for HTML documents) an http-equiv META tag. If Beautiful Soup finds this kind of encoding within the document, it parses the document again from the beginning and gives the new encoding a try. The only exception is if you explicitly specified an encoding, and that encoding actually worked: then it will ignore any encoding it finds in the document.</li>\n<li>An encoding sniffed by looking at the first few bytes of the file. If an encoding is detected at this stage, it will be one of the UTF-* encodings, EBCDIC, or ASCII.</li>\n<li>An encoding sniffed by the <a href=\"http://pypi.python.org/pypi/chardet\" rel=\"noreferrer\">chardet</a> library, if you have it installed.</li>\n<li>UTF-8</li>\n<li>Windows-1252 </li>\n</ul>\n"
    },
    "210": {
        "question_id": "3012488",
        "answer_id": "3012921",
        "question": "<p>I came across the Python <code>with</code> statement for the first time today.  I've been using Python lightly for several months and didn't even know of its existence!  Given its somewhat obscure status, I thought it would be worth asking:</p>\n\n<ol>\n<li>What is the Python <code>with</code> statement\ndesigned to be used for?   </li>\n<li>What do\nyou use it for? </li>\n<li>Are there any\ngotchas I need to be aware of, or\ncommon anti-patterns associated with\nits use?  Any cases where it is better use <code>try..finally</code> than <code>with</code>?</li>\n<li>Why isn't it used more widely?</li>\n<li>Which standard library classes are compatible with it?</li>\n</ol>\n",
        "answer": "<ol>\n<li><p>I believe this has already been answered by other users before me, so I only add it for the sake of completeness: the <code>with</code> statement simplifies exception handling by encapsulating common preparation and cleanup tasks in so-called <a href=\"http://docs.python.org/release/2.5.2/lib/typecontextmanager.html\" rel=\"noreferrer\">context managers</a>. More details can be found in <a href=\"http://www.python.org/dev/peps/pep-0343/\" rel=\"noreferrer\">PEP 343</a>. For instance, the <code>open</code> statement is a context manager in itself, which lets you open a file, keep it open as long as the execution is in the context of the <code>with</code> statement where you used it, and close it as soon as you leave the context, no matter whether you have left it because of an exception or during regular control flow. The <code>with</code> statement can thus be used in ways similar to the <a href=\"http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization\" rel=\"noreferrer\">RAII pattern</a> in C++: some resource is acquired by the <code>with</code> statement and released when you leave the <code>with</code> context.</p></li>\n<li><p>Some examples are: opening files using <code>with open(filename) as fp:</code>, acquiring locks using <code>with lock:</code> (where <code>lock</code> is an instance of <code>threading.Lock</code>). You can also construct your own context managers using the <code>contextmanager</code> decorator from <code>contextlib</code>. For instance, I often use this when I have to change the current directory temporarily and then return to where I was:</p>\n\n<pre><code>from contextlib import contextmanager\nimport os\n\n@contextmanager\ndef working_directory(path):\n    current_dir = os.getcwd()\n    os.chdir(path)\n    try:\n        yield\n    finally:\n        os.chdir(current_dir)\n\nwith working_directory(\"data/stuff\"):\n    # do something within data/stuff\n# here I am back again in the original working directory\n</code></pre>\n\n<p>Here's another example that temporarily redirects <code>sys.stdin</code>, <code>sys.stdout</code> and <code>sys.stderr</code> to some other file handle and restores them later:</p>\n\n<pre><code>from contextlib import contextmanager\nimport sys\n\n@contextmanager\ndef redirected(**kwds):\n    stream_names = [\"stdin\", \"stdout\", \"stderr\"]\n    old_streams = {}\n    try:\n        for sname in stream_names:\n            stream = kwds.get(sname, None)\n            if stream is not None and stream != getattr(sys, sname):\n                old_streams[sname] = getattr(sys, sname)\n                setattr(sys, sname, stream)\n        yield\n    finally:\n        for sname, stream in old_streams.iteritems():\n            setattr(sys, sname, stream)\n\nwith redirected(stdout=open(\"/tmp/log.txt\", \"w\")):\n     # these print statements will go to /tmp/log.txt\n     print \"Test entry 1\"\n     print \"Test entry 2\"\n# back to the normal stdout\nprint \"Back to normal stdout again\"\n</code></pre>\n\n<p>And finally, another example that creates a temporary folder and cleans it up when leaving the context:</p>\n\n<pre><code>from tempfile import mkdtemp\nfrom shutil import rmtree\n\n@contextmanager\ndef temporary_dir(*args, **kwds):\n    name = mkdtemp(*args, **kwds)\n    try:\n        yield name\n    finally:\n        shutil.rmtree(name)\n\nwith temporary_dir() as dirname:\n    # do whatever you want\n</code></pre></li>\n</ol>\n"
    },
    "211": {
        "question_id": "36921951",
        "answer_id": "36922103",
        "question": "<p>Having issue filtering my result dataframe with an <code>or</code> condition. I want my result <code>df</code> to extract all column <code>var</code> values that are above 0.25 and below -0.25. </p>\n\n<p>This logic below gives me an ambiguous truth value however it work when I split this filtering in two separate operations. What is happening here? not sure where to use the suggested <code>a.empty(), a.bool(), a.item(),a.any() or a.all()</code>.</p>\n\n<pre><code> result = result[(result['var']&gt;0.25) or (result['var']&lt;-0.25)]\n</code></pre>\n",
        "answer": "<p>The <code>or</code> and <code>and</code> python statements require <code>truth</code>-values. For <code>pandas</code> these are considered ambiguous so you should use \"bitwise\" <code>|</code> (or) or <code>&amp;</code> (and) operations:</p>\n\n<pre><code>result = result[(result['var']&gt;0.25) | (result['var']&lt;-0.25)]\n</code></pre>\n\n<p>These are overloaded for these kind of datastructures to yield the element-wise <code>or</code> (or <code>and</code>).</p>\n\n<hr>\n\n<p>Just to add some more explanation to this statement:</p>\n\n<p>The exception is thrown when you want to get the <code>bool</code> of a <code>pandas.Series</code>:</p>\n\n<pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; x = pd.Series([1])\n&gt;&gt;&gt; bool(x)\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n</code></pre>\n\n<p>What you hit was a place where the operator <strong>implicitly</strong> converted the operands to <code>bool</code> (you used <code>or</code> but it also happens for <code>and</code>, <code>if</code> and <code>while</code>):</p>\n\n<pre><code>&gt;&gt;&gt; x or x\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n&gt;&gt;&gt; x and x\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n&gt;&gt;&gt; if x:\n...     print('fun')\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n&gt;&gt;&gt; while x:\n...     print('fun')\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n</code></pre>\n\n<p>Besides these 4 statements there are several python functions that hide some <code>bool</code> calls (like <code>any</code>, <code>all</code>, <code>filter</code>, ...) these are normally not problematic with <code>pandas.Series</code> but for completeness I wanted to mention these.</p>\n\n<hr>\n\n<p>In your case the exception isn't really helpful, because it doesn't mention the <strong>right alternatives</strong>. For <code>and</code> and <code>or</code> you can use (if you want element-wise comparisons):</p>\n\n<ul>\n<li><p><a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_or.html\"><code>numpy.logical_or</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; np.logical_or(x, y)\n</code></pre>\n\n<p>or simply the <code>|</code> operator:</p>\n\n<pre><code>&gt;&gt;&gt; x | y\n</code></pre></li>\n<li><p><a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_and.html\"><code>numpy.logical_and</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; np.logical_and(x, y)\n</code></pre>\n\n<p>or simply the <code>&amp;</code> operator:</p>\n\n<pre><code>&gt;&gt;&gt; x &amp; y\n</code></pre></li>\n</ul>\n\n<p>If you're using the operators then make sure you set your parenthesis correctly because of <a href=\"https://docs.python.org/reference/expressions.html#operator-precedence\">the operator precedence</a>.</p>\n\n<p>There are <a href=\"https://docs.scipy.org/doc/numpy/reference/routines.logic.html\">several logical numpy functions</a> which <em>should</em> work on <code>pandas.Series</code>.</p>\n\n<hr>\n\n<p>The alternatives mentioned in the Exception are more suited if you encountered it when doing <code>if</code> or <code>while</code>. I'll shortly explain each of these:</p>\n\n<ul>\n<li><p>If you want to check if your Series is <strong>empty</strong>:</p>\n\n<pre><code>&gt;&gt;&gt; x = pd.Series([])\n&gt;&gt;&gt; x.empty\nTrue\n&gt;&gt;&gt; x = pd.Series([1])\n&gt;&gt;&gt; x.empty\nFalse\n</code></pre>\n\n<p>Python normally interprets the <code>len</code>gth of containers (like <code>list</code>, <code>tuple</code>, ...) as truth-value if it has no explicit boolean interpretation. So if you want the python-like check, you could do: <code>if x.size</code> or <code>if not x.empty</code> instead of <code>if x</code>.</p></li>\n<li><p>If your <code>Series</code> contains <strong>one and only one</strong> boolean value:</p>\n\n<pre><code>&gt;&gt;&gt; x = pd.Series([100])\n&gt;&gt;&gt; (x &gt; 50).bool()\nTrue\n&gt;&gt;&gt; (x &lt; 50).bool()\nFalse\n</code></pre></li>\n<li><p>If you want to check the <strong>first and only item</strong> of your Series (like <code>.bool()</code> but works even for not boolean contents):</p>\n\n<pre><code>&gt;&gt;&gt; x = pd.Series([100])\n&gt;&gt;&gt; x.item()\n100\n</code></pre></li>\n<li><p>If you want to check if <strong>all</strong> or <strong>any</strong> item is not-zero, not-empty or not-False:</p>\n\n<pre><code>&gt;&gt;&gt; x = pd.Series([0, 1, 2])\n&gt;&gt;&gt; x.all()   # because one element is zero\nFalse\n&gt;&gt;&gt; x.any()   # because one (or more) elements are non-zero\nTrue\n</code></pre></li>\n</ul>\n"
    },
    "212": {
        "question_id": "625083",
        "answer_id": "625098",
        "question": "<p>I'm learning the Python programming language and I've came across something I don't fully understand. </p>\n\n<p>In a method like:</p>\n\n<pre><code>def method(self, blah):\n    def __init__(?):\n        ....\n    ....\n</code></pre>\n\n<p>What does <code>self</code> do?  What is it meant to be?  Is it mandatory?</p>\n\n<p>What does the <code>__init__</code> method do?  Why is it necessary? (etc.)</p>\n\n<p>I think they might be OOP constructs, but I don't know very much.</p>\n",
        "answer": "<p>In this code:</p>\n\n<pre><code>class A(object):\n    def __init__(self):\n        self.x = 'Hello'\n\n    def method_a(self, foo):\n        print self.x + ' ' + foo\n</code></pre>\n\n<p>... the <code>self</code> variable represents the instance of the object itself.  Most object-oriented languages pass this as a hidden parameter to the methods defined on an object; Python does not.  You have to declare it explicitly.  When you create an instance of the <code>A</code> class and call its methods, it will be passed automatically, as in ...</p>\n\n<pre><code>a = A()               # We do not pass any argument to the __init__ method\na.method_a('Sailor!') # We only pass a single argument\n</code></pre>\n\n<p>The <code>__init__</code> method is roughly what represents a constructor in Python.  When you call <code>A()</code> Python creates an object for you, and passes it as the first parameter to the <code>__init__</code> method.  Any additional parameters (e.g., <code>A(24, 'Hello')</code>) will also get passed as arguments--in this case causing an exception to be raised, since the constructor isn't expecting them.</p>\n"
    },
    "213": {
        "question_id": "332289",
        "answer_id": "638443",
        "question": "<p>How do you change the size of figure drawn with matplotlib?</p>\n",
        "answer": "<p><a href=\"https://matplotlib.org/api/_as_gen/matplotlib.pyplot.figure.html#matplotlib.pyplot.figure\" rel=\"noreferrer\">figure</a> tells you the call signature:</p>\n\n<pre><code>from matplotlib.pyplot import figure\nfigure(num=None, figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')\n</code></pre>\n\n<p><code>figure(figsize=(1,1))</code> would create an inch-by-inch image, which would be 80-by-80 pixels unless you also give a different dpi argument.</p>\n"
    },
    "214": {
        "question_id": "519633",
        "answer_id": "519653",
        "question": "<p>I have a very big file 4GB and when I try to read it my computer hangs.\nSo I want to read it piece by piece and after processing each piece store the processed piece into another file and read next piece.</p>\n\n<p>Is there any method to <code>yield</code> these pieces ?</p>\n\n<p>I would love to have a <strong>lazy method</strong>.</p>\n",
        "answer": "<p>To write a lazy function, just use <a href=\"http://docs.python.org/tutorial/classes.html#generators\" rel=\"noreferrer\"><code>yield</code></a>:</p>\n\n<pre><code>def read_in_chunks(file_object, chunk_size=1024):\n    \"\"\"Lazy function (generator) to read a file piece by piece.\n    Default chunk size: 1k.\"\"\"\n    while True:\n        data = file_object.read(chunk_size)\n        if not data:\n            break\n        yield data\n\n\nf = open('really_big_file.dat')\nfor piece in read_in_chunks(f):\n    process_data(piece)\n</code></pre>\n\n<hr>\n\n<p>Another option would be to use <a href=\"http://docs.python.org/library/functions.html#iter\" rel=\"noreferrer\"><code>iter</code></a> and a helper function:</p>\n\n<pre><code>f = open('really_big_file.dat')\ndef read1k():\n    return f.read(1024)\n\nfor piece in iter(read1k, ''):\n    process_data(piece)\n</code></pre>\n\n<hr>\n\n<p>If the file is line-based, the file object is already a lazy generator of lines:</p>\n\n<pre><code>for line in open('really_big_file.dat'):\n    process_data(line)\n</code></pre>\n"
    },
    "215": {
        "question_id": "38982807",
        "answer_id": "38982989",
        "question": "<p>Setting up Flask with uWSGI and Nginx is quite difficult, and even with buildout scripts it takes quite some time, and has to be recorded to instructions to be reproduced later.</p>\n\n<p>If I don't plan a big load on server (it's hidden from public), does it make sense to run it without uWSGI? (Flask can listen to a port. Can Nginx just forward requests?)</p>\n\n<p>Does it make sense to not use even Nginx, just running bare flask app on a port?</p>\n",
        "answer": "<p>When you \"run Flask\" you are actually running Werkzeug's development WSGI server, and passing your Flask app as the WSGI callable.</p>\n\n<p>The development server is not intended for use in production.  It is not designed to be particularly efficient, stable, or secure.</p>\n\n<p>Replace the Werkzeug dev server with a production-ready WSGI server such as Gunicorn or uWSGI when moving to production, no matter where the app will be available.</p>\n\n<hr>\n\n<p>The answer is similar for \"should I use a web server\".  WSGI servers happen to have HTTP servers but they will not be as good as a dedicated production HTTP server (Nginx, Apache, etc.).</p>\n\n<hr>\n\n<p>Flask <a href=\"http://flask.pocoo.org/docs/dev/deploying/\" rel=\"noreferrer\">documents</a> how to deploy in various ways. Many hosting providers also have documentation about deploying Python or Flask.</p>\n"
    },
    "216": {
        "question_id": "21406057",
        "answer_id": "21406866",
        "question": "<p>I am trying to debug a view in my Flask app that is return a 500 status with the error <code>TypeError: 'bool' object is not callable</code> in the traceback. The view calls <code>login_user</code> from Flask-Login then returns <code>True</code> to indicate that the login was successful.</p>\n\n<p>I have debugged until <code>app_iter = app(environ, start_response)</code> and the <code>app</code> is now a boolean with the value <code>True</code> rather than the Flask app object.</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"D:\\Python27\\lib\\site-packages\\flask\\app.py\", line 1836, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"D:\\Python27\\lib\\site-packages\\flask\\app.py\", line 1820, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"D:\\Python27\\lib\\site-packages\\flask\\app.py\", line 1403, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"D:\\Python27\\lib\\site-packages\\flask\\app.py\", line 1817, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"D:\\Python27\\lib\\site-packages\\flask\\app.py\", line 1478, in full_dispatch_request\n    response = self.make_response(rv)\n  File \"D:\\Python27\\lib\\site-packages\\flask\\app.py\", line 1577, in make_response\n    rv = self.response_class.force_type(rv, request.environ)\n  File \"D:\\Python27\\lib\\site-packages\\werkzeug\\wrappers.py\", line 824, in force_type\n    response = BaseResponse(*_run_wsgi_app(response, environ))\n  File \"D:\\Python27\\lib\\site-packages\\werkzeug\\wrappers.py\", line 57, in _run_wsgi_app\n    return _run_wsgi_app(*args)\n  File \"D:\\Python27\\lib\\site-packages\\werkzeug\\test.py\", line 854, in run_wsgi_app\n    app_iter = app(environ, start_response)\nTypeError: 'bool' object is not callable\n</code></pre>\n\n\n\n<pre><code>@app.route('/login', methods=['POST'])\ndef login():\n    username = request.form['username']\n    user = User.query.filter_by(username=username).first()\n\n    if user:\n        login_user(user)\n        return True\n\n    return False\n</code></pre>\n",
        "answer": "<p>In Flask, a view must return one of the following:</p>\n\n<ul>\n<li>a string</li>\n<li>a <code>Response</code> object (or subclass)</li>\n<li>a tuple of <code>(string, status, headers)</code> or <code>(string, status)</code></li>\n<li>a valid WSGI application</li>\n</ul>\n\n<p>Flask tests for the first 3 options, and if they don't fit, assumes it is the fourth. You returned True somewhere, and it is being treated as a WSGI application instead.</p>\n\n<p>See <a href=\"http://flask.pocoo.org/docs/quickstart/#about-responses\">About Responses</a> in the documentation.</p>\n"
    },
    "217": {
        "question_id": "16476924",
        "answer_id": "16476974",
        "question": "<p>I have a <code>DataFrame</code> from pandas:</p>\n\n<pre><code>import pandas as pd\ninp = [{'c1':10, 'c2':100}, {'c1':11,'c2':110}, {'c1':12,'c2':120}]\ndf = pd.DataFrame(inp)\nprint df\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>   c1   c2\n0  10  100\n1  11  110\n2  12  120\n</code></pre>\n\n<p>Now I want to iterate over the rows of this frame. For every row I want to be able to access its elements (values in cells) by the name of the columns. For example:</p>\n\n<pre><code>for row in df.rows:\n   print row['c1'], row['c2']\n</code></pre>\n\n<p>Is it possible to do that in pandas?</p>\n\n<p>I found this <a href=\"https://stackoverflow.com/questions/7837722/what-is-the-most-efficient-way-to-loop-through-dataframes-with-pandas\">similar question</a>. But it does not give me the answer I need. For example, it is suggested there to use:</p>\n\n<pre><code>for date, row in df.T.iteritems():\n</code></pre>\n\n<p>or</p>\n\n<pre><code>for row in df.iterrows():\n</code></pre>\n\n<p>But I do not understand what the <code>row</code> object is and how I can work with it.</p>\n",
        "answer": "<p><a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows\" rel=\"noreferrer\">DataFrame.iterrows</a> is a generator which yield both index and row</p>\n\n<pre><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame([{'c1':10, 'c2':100}, {'c1':11,'c2':110}, {'c1':12,'c2':120}])\n</code></pre>\n\n<p></p>\n\n<pre><code>for index, row in df.iterrows():\n    print(row['c1'], row['c2'])\n\nOutput: \n   10 100\n   11 110\n   12 120\n</code></pre>\n"
    },
    "218": {
        "question_id": "33759623",
        "answer_id": "50852627",
        "question": "<p>After you train a model in Tensorflow: </p>\n\n<ol>\n<li>How do you save the trained model?</li>\n<li>How do you later restore this saved model?</li>\n</ol>\n",
        "answer": "<h1>Docs</h1>\n\n<p>They built an exhaustive and useful tutorial -> <a href=\"https://www.tensorflow.org/guide/saved_model\" rel=\"noreferrer\">https://www.tensorflow.org/guide/saved_model</a></p>\n\n<p>From the docs:</p>\n\n<h3>Save</h3>\n\n<pre><code># Create some variables.\nv1 = tf.get_variable(\"v1\", shape=[3], initializer = tf.zeros_initializer)\nv2 = tf.get_variable(\"v2\", shape=[5], initializer = tf.zeros_initializer)\n\ninc_v1 = v1.assign(v1+1)\ndec_v2 = v2.assign(v2-1)\n\n# Add an op to initialize the variables.\ninit_op = tf.global_variables_initializer()\n\n# Add ops to save and restore all the variables.\nsaver = tf.train.Saver()\n\n# Later, launch the model, initialize the variables, do some work, and save the\n# variables to disk.\nwith tf.Session() as sess:\n  sess.run(init_op)\n  # Do some work with the model.\n  inc_v1.op.run()\n  dec_v2.op.run()\n  # Save the variables to disk.\n  save_path = saver.save(sess, \"/tmp/model.ckpt\")\n  print(\"Model saved in path: %s\" % save_path)\n</code></pre>\n\n<h3>Restore</h3>\n\n<pre><code>tf.reset_default_graph()\n\n# Create some variables.\nv1 = tf.get_variable(\"v1\", shape=[3])\nv2 = tf.get_variable(\"v2\", shape=[5])\n\n# Add ops to save and restore all the variables.\nsaver = tf.train.Saver()\n\n# Later, launch the model, use the saver to restore variables from disk, and\n# do some work with the model.\nwith tf.Session() as sess:\n  # Restore variables from disk.\n  saver.restore(sess, \"/tmp/model.ckpt\")\n  print(\"Model restored.\")\n  # Check the values of the variables\n  print(\"v1 : %s\" % v1.eval())\n  print(\"v2 : %s\" % v2.eval())\n</code></pre>\n\n<h1>Tensorflow 2</h1>\n\n<p>This is still beta so I'd advise against for now. If you still want to go down that road here is the <a href=\"https://www.tensorflow.org/alpha/guide/saved_model\" rel=\"noreferrer\"><code>tf.saved_model</code> usage guide</a></p>\n\n<h1>Tensorflow &lt; 2</h1>\n\n<h2><code>simple_save</code></h2>\n\n<p>Many good answer, for completeness I'll add my 2 cents: <strong><a href=\"https://www.tensorflow.org/programmers_guide/saved_model\" rel=\"noreferrer\">simple_save</a></strong>. Also a standalone code example using the <code>tf.data.Dataset</code> API.</p>\n\n<p>Python 3 ; Tensorflow <strong>1.7</strong></p>\n\n<pre><code>import tensorflow as tf\nfrom tensorflow.python.saved_model import tag_constants\n\nwith tf.Graph().as_default():\n    with tf.Session as sess:\n        ...\n\n        # Saving\n        inputs = {\n            \"batch_size_placeholder\": batch_size_placeholder,\n            \"features_placeholder\": features_placeholder,\n            \"labels_placeholder\": labels_placeholder,\n        }\n        outputs = {\"prediction\": model_output}\n        tf.saved_model.simple_save(\n            sess, 'path/to/your/location/', inputs, outputs\n        )\n</code></pre>\n\n<p>Restoring:</p>\n\n<pre><code>graph = tf.Graph()\nwith restored_graph.as_default():\n    with tf.Session as sess:\n        tf.saved_model.loader.load(\n            sess,\n            [tag_constants.SERVING],\n        'path/to/your/location/',\n        )\n        batch_size_placeholder = graph.get_tensor_by_name('batch_size_placeholder:0')\n        features_placeholder = graph.get_tensor_by_name('features_placeholder:0')\n        labels_placeholder = graph.get_tensor_by_name('labels_placeholder:0')\n        prediction = restored_graph.get_tensor_by_name('dense/BiasAdd:0')\n\n        sess.run(prediction, feed_dict={\n            batch_size_placeholder: some_value,\n            features_placeholder: some_other_value,\n            labels_placeholder: another_value\n        })\n</code></pre>\n\n<h1>Standalone example</h1>\n\n<p><strong><a href=\"http://vict0rsch.github.io/2018/05/17/restore-tf-model-dataset/\" rel=\"noreferrer\">Original blog post</a></strong></p>\n\n<p>The following code generates random data for the sake of the demonstration.</p>\n\n<ol>\n<li>We start by creating the placeholders. They will hold the data at runtime. From them, we create the <code>Dataset</code> and then its <code>Iterator</code>. We get the iterator's generated tensor, called <code>input_tensor</code> which will serve as input to our model.</li>\n<li>The model itself is built from <code>input_tensor</code>: a GRU-based bidirectional RNN followed by a dense classifier. Because why not.</li>\n<li>The loss is a <code>softmax_cross_entropy_with_logits</code>, optimized with <code>Adam</code>. After 2 epochs (of 2 batches each), we save the \"trained\" model with <code>tf.saved_model.simple_save</code>. If you run the code as is, then the model will be saved in a folder called <code>simple/</code> in your current working directory.</li>\n<li>In a new graph, we then restore the saved model with <code>tf.saved_model.loader.load</code>. We grab the placeholders and logits with <code>graph.get_tensor_by_name</code> and the <code>Iterator</code> initializing operation with <code>graph.get_operation_by_name</code>.</li>\n<li>Lastly we run an inference for both batches in the dataset, and check that the saved and restored model both yield the same values. They do!</li>\n</ol>\n\n<p>Code:</p>\n\n<pre><code>import os\nimport shutil\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.python.saved_model import tag_constants\n\n\ndef model(graph, input_tensor):\n    \"\"\"Create the model which consists of\n    a bidirectional rnn (GRU(10)) followed by a dense classifier\n\n    Args:\n        graph (tf.Graph): Tensors' graph\n        input_tensor (tf.Tensor): Tensor fed as input to the model\n\n    Returns:\n        tf.Tensor: the model's output layer Tensor\n    \"\"\"\n    cell = tf.nn.rnn_cell.GRUCell(10)\n    with graph.as_default():\n        ((fw_outputs, bw_outputs), (fw_state, bw_state)) = tf.nn.bidirectional_dynamic_rnn(\n            cell_fw=cell,\n            cell_bw=cell,\n            inputs=input_tensor,\n            sequence_length=[10] * 32,\n            dtype=tf.float32,\n            swap_memory=True,\n            scope=None)\n        outputs = tf.concat((fw_outputs, bw_outputs), 2)\n        mean = tf.reduce_mean(outputs, axis=1)\n        dense = tf.layers.dense(mean, 5, activation=None)\n\n        return dense\n\n\ndef get_opt_op(graph, logits, labels_tensor):\n    \"\"\"Create optimization operation from model's logits and labels\n\n    Args:\n        graph (tf.Graph): Tensors' graph\n        logits (tf.Tensor): The model's output without activation\n        labels_tensor (tf.Tensor): Target labels\n\n    Returns:\n        tf.Operation: the operation performing a stem of Adam optimizer\n    \"\"\"\n    with graph.as_default():\n        with tf.variable_scope('loss'):\n            loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(\n                    logits=logits, labels=labels_tensor, name='xent'),\n                    name=\"mean-xent\"\n                    )\n        with tf.variable_scope('optimizer'):\n            opt_op = tf.train.AdamOptimizer(1e-2).minimize(loss)\n        return opt_op\n\n\nif __name__ == '__main__':\n    # Set random seed for reproducibility\n    # and create synthetic data\n    np.random.seed(0)\n    features = np.random.randn(64, 10, 30)\n    labels = np.eye(5)[np.random.randint(0, 5, (64,))]\n\n    graph1 = tf.Graph()\n    with graph1.as_default():\n        # Random seed for reproducibility\n        tf.set_random_seed(0)\n        # Placeholders\n        batch_size_ph = tf.placeholder(tf.int64, name='batch_size_ph')\n        features_data_ph = tf.placeholder(tf.float32, [None, None, 30], 'features_data_ph')\n        labels_data_ph = tf.placeholder(tf.int32, [None, 5], 'labels_data_ph')\n        # Dataset\n        dataset = tf.data.Dataset.from_tensor_slices((features_data_ph, labels_data_ph))\n        dataset = dataset.batch(batch_size_ph)\n        iterator = tf.data.Iterator.from_structure(dataset.output_types, dataset.output_shapes)\n        dataset_init_op = iterator.make_initializer(dataset, name='dataset_init')\n        input_tensor, labels_tensor = iterator.get_next()\n\n        # Model\n        logits = model(graph1, input_tensor)\n        # Optimization\n        opt_op = get_opt_op(graph1, logits, labels_tensor)\n\n        with tf.Session(graph=graph1) as sess:\n            # Initialize variables\n            tf.global_variables_initializer().run(session=sess)\n            for epoch in range(3):\n                batch = 0\n                # Initialize dataset (could feed epochs in Dataset.repeat(epochs))\n                sess.run(\n                    dataset_init_op,\n                    feed_dict={\n                        features_data_ph: features,\n                        labels_data_ph: labels,\n                        batch_size_ph: 32\n                    })\n                values = []\n                while True:\n                    try:\n                        if epoch &lt; 2:\n                            # Training\n                            _, value = sess.run([opt_op, logits])\n                            print('Epoch {}, batch {} | Sample value: {}'.format(epoch, batch, value[0]))\n                            batch += 1\n                        else:\n                            # Final inference\n                            values.append(sess.run(logits))\n                            print('Epoch {}, batch {} | Final inference | Sample value: {}'.format(epoch, batch, values[-1][0]))\n                            batch += 1\n                    except tf.errors.OutOfRangeError:\n                        break\n            # Save model state\n            print('\\nSaving...')\n            cwd = os.getcwd()\n            path = os.path.join(cwd, 'simple')\n            shutil.rmtree(path, ignore_errors=True)\n            inputs_dict = {\n                \"batch_size_ph\": batch_size_ph,\n                \"features_data_ph\": features_data_ph,\n                \"labels_data_ph\": labels_data_ph\n            }\n            outputs_dict = {\n                \"logits\": logits\n            }\n            tf.saved_model.simple_save(\n                sess, path, inputs_dict, outputs_dict\n            )\n            print('Ok')\n    # Restoring\n    graph2 = tf.Graph()\n    with graph2.as_default():\n        with tf.Session(graph=graph2) as sess:\n            # Restore saved values\n            print('\\nRestoring...')\n            tf.saved_model.loader.load(\n                sess,\n                [tag_constants.SERVING],\n                path\n            )\n            print('Ok')\n            # Get restored placeholders\n            labels_data_ph = graph2.get_tensor_by_name('labels_data_ph:0')\n            features_data_ph = graph2.get_tensor_by_name('features_data_ph:0')\n            batch_size_ph = graph2.get_tensor_by_name('batch_size_ph:0')\n            # Get restored model output\n            restored_logits = graph2.get_tensor_by_name('dense/BiasAdd:0')\n            # Get dataset initializing operation\n            dataset_init_op = graph2.get_operation_by_name('dataset_init')\n\n            # Initialize restored dataset\n            sess.run(\n                dataset_init_op,\n                feed_dict={\n                    features_data_ph: features,\n                    labels_data_ph: labels,\n                    batch_size_ph: 32\n                }\n\n            )\n            # Compute inference for both batches in dataset\n            restored_values = []\n            for i in range(2):\n                restored_values.append(sess.run(restored_logits))\n                print('Restored values: ', restored_values[i][0])\n\n    # Check if original inference and restored inference are equal\n    valid = all((v == rv).all() for v, rv in zip(values, restored_values))\n    print('\\nInferences match: ', valid)\n</code></pre>\n\n<p>This will print:</p>\n\n<pre><code>$ python3 save_and_restore.py\n\nEpoch 0, batch 0 | Sample value: [-0.13851789 -0.3087595   0.12804556  0.20013677 -0.08229901]\nEpoch 0, batch 1 | Sample value: [-0.00555491 -0.04339041 -0.05111827 -0.2480045  -0.00107776]\nEpoch 1, batch 0 | Sample value: [-0.19321944 -0.2104792  -0.00602257  0.07465433  0.11674127]\nEpoch 1, batch 1 | Sample value: [-0.05275984  0.05981954 -0.15913513 -0.3244143   0.10673307]\nEpoch 2, batch 0 | Final inference | Sample value: [-0.26331693 -0.13013336 -0.12553    -0.04276478  0.2933622 ]\nEpoch 2, batch 1 | Final inference | Sample value: [-0.07730117  0.11119192 -0.20817074 -0.35660955  0.16990358]\n\nSaving...\nINFO:tensorflow:Assets added to graph.\nINFO:tensorflow:No assets to write.\nINFO:tensorflow:SavedModel written to: b'/some/path/simple/saved_model.pb'\nOk\n\nRestoring...\nINFO:tensorflow:Restoring parameters from b'/some/path/simple/variables/variables'\nOk\nRestored values:  [-0.26331693 -0.13013336 -0.12553    -0.04276478  0.2933622 ]\nRestored values:  [-0.07730117  0.11119192 -0.20817074 -0.35660955  0.16990358]\n\nInferences match:  True\n</code></pre>\n"
    },
    "219": {
        "question_id": "492387",
        "answer_id": "492399",
        "question": "<p>When I compile the Python code below, I get </p>\n\n<blockquote>\n  <p>IndentationError: unindent does not match any outer indentation level</p>\n</blockquote>\n\n<hr>\n\n<pre><code>import sys\n\ndef Factorial(n): # Return factorial\n    result = 1\n    for i in range (1,n):\n        result = result * i\n    print \"factorial is \",result\n    return result\n</code></pre>\n\n<p>Why?</p>\n",
        "answer": "<p>Other posters are probably correct...there might be spaces mixed in with your tabs. Try doing a search &amp; replace to replace all tabs with a few spaces.</p>\n\n<p>Try this:</p>\n\n<pre><code>import sys\n\ndef Factorial(n): # return factorial\n    result = 1\n    for i in range (1,n):\n        result = result * i\n    print \"factorial is \",result\n    return result\n\nprint Factorial(10)\n</code></pre>\n"
    },
    "220": {
        "question_id": "575196",
        "answer_id": "575337",
        "question": "<p>I'm trying to understand Python's approach to variable scope. In this example, why is <code>f()</code> able to alter the value of <code>x</code>, as perceived within <code>main()</code>, but not the value of <code>n</code>?</p>\n\n<pre><code>def f(n, x):\n    n = 2\n    x.append(4)\n    print('In f():', n, x)\n\ndef main():\n    n = 1\n    x = [0,1,2,3]\n    print('Before:', n, x)\n    f(n, x)\n    print('After: ', n, x)\n\nmain()\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>Before: 1 [0, 1, 2, 3]\nIn f(): 2 [0, 1, 2, 3, 4]\nAfter:  1 [0, 1, 2, 3, 4]\n</code></pre>\n",
        "answer": "<p>Some answers contain the word \"copy\" in a context of a function call. I find it confusing.</p>\n\n<p><strong>Python doesn't copy <em>objects</em> you pass during a function call <em>ever</em>.</strong></p>\n\n<p>Function parameters are <em>names</em>. When you call a function Python binds these parameters to whatever objects you pass (via names in a caller scope).</p>\n\n<p>Objects can be mutable (like lists) or immutable (like integers, strings in Python). Mutable object you can change. You can't change a name, you just can bind it to another object.</p>\n\n<p>Your example is not about <a href=\"https://docs.python.org/2/tutorial/classes.html#python-scopes-and-namespaces\" rel=\"noreferrer\">scopes or namespaces</a>, it is about <a href=\"http://docs.python.org/reference/executionmodel.html#naming-and-binding\" rel=\"noreferrer\">naming and binding</a> and <a href=\"http://docs.python.org/reference/datamodel.html#objects-values-and-types\" rel=\"noreferrer\">mutability of an object</a> in Python. </p>\n\n<pre><code>def f(n, x): # these `n`, `x` have nothing to do with `n` and `x` from main()\n    n = 2    # put `n` label on `2` balloon\n    x.append(4) # call `append` method of whatever object `x` is referring to.\n    print('In f():', n, x)\n    x = []   # put `x` label on `[]` ballon\n    # x = [] has no effect on the original list that is passed into the function\n</code></pre>\n\n<p>Here are nice pictures on <a href=\"https://web.archive.org/web/20180121150727/http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#other-languages-have-variables\" rel=\"noreferrer\">the difference between variables in other languages and names in Python</a>.</p>\n"
    },
    "221": {
        "question_id": "4015417",
        "answer_id": "45062077",
        "question": "<p>Is there any reason for a class declaration to inherit from <code>object</code>?</p>\n\n<p>I just found some code that does this and I can't find a good reason why.</p>\n\n<pre><code>class MyClass(object):\n    # class code follows...\n</code></pre>\n",
        "answer": "<blockquote>\n  <h3>Is there any reason for a class declaration to inherit from <code>object</code>?</h3>\n</blockquote>\n\n<p>tl;dr: In Python 3, apart from compatibility between Python 2 and 3, <em>no reason</em>. In Python 2, <em>many reasons</em>. </p>\n\n<hr>\n\n<h3>Python 2.x story:</h3>\n\n<p>In Python 2.x (from 2.2 onwards) there's two styles of classes depending on the presence or absence of <code>object</code> as a base-class:</p>\n\n<ol>\n<li><p><strong>\"classic\" style</strong> classes: they don't have <code>object</code> as a base class:</p>\n\n<pre><code>&gt;&gt;&gt; class ClassicSpam:      # no base class\n...     pass\n&gt;&gt;&gt; ClassicSpam.__bases__\n()\n</code></pre></li>\n<li><p><strong>\"new\" style</strong> classes: they have, directly <em>or indirectly</em> (e.g inherit from a <a href=\"https://docs.python.org/3/library/stdtypes.html\" rel=\"noreferrer\">built-in type</a>), <code>object</code> as a base class:</p>\n\n<pre><code>&gt;&gt;&gt; class NewSpam(object):           # directly inherit from object\n...    pass\n&gt;&gt;&gt; NewSpam.__bases__\n(&lt;type 'object'&gt;,)\n&gt;&gt;&gt; class IntSpam(int):              # indirectly inherit from object...\n...    pass\n&gt;&gt;&gt; IntSpam.__bases__\n(&lt;type 'int'&gt;,) \n&gt;&gt;&gt; IntSpam.__bases__[0].__bases__   # ... because int inherits from object  \n(&lt;type 'object'&gt;,)\n</code></pre></li>\n</ol>\n\n<p>Without a doubt, when writing a class you'll <em>always</em> want to go for new-style classes. The perks of doing so are numerous, to list some of them:</p>\n\n<ul>\n<li><p><a href=\"https://docs.python.org/3/howto/descriptor.html\" rel=\"noreferrer\">Support for descriptors</a>. Specifically, the following constructs are made possible with descriptors: </p>\n\n<ol>\n<li><a href=\"https://docs.python.org/3/library/functions.html#classmethod\" rel=\"noreferrer\"><code>classmethod</code></a>: A method that receives the class as an implicit argument instead of the instance.</li>\n<li><a href=\"https://docs.python.org/3/library/functions.html#staticmethod\" rel=\"noreferrer\"><code>staticmethod</code></a>: A method that does not receive the implicit argument <code>self</code> as a first argument.</li>\n<li>properties with <a href=\"https://docs.python.org/3/library/functions.html#property\" rel=\"noreferrer\"><code>property</code></a>: Create functions for managing the getting, setting and deleting of an attribute. </li>\n<li><a href=\"https://docs.python.org/3/reference/datamodel.html#slots\" rel=\"noreferrer\"><code>__slots__</code></a>: Saves memory consumptions of a class and also results in faster attribute access. Of course, it does <a href=\"https://docs.python.org/3/reference/datamodel.html#notes-on-using-slots\" rel=\"noreferrer\">impose limitations</a>.</li>\n</ol></li>\n<li><p>The <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__new__\" rel=\"noreferrer\"><code>__new__</code></a> static method: lets you customize how new class instances are created. </p></li>\n<li><p><a href=\"https://www.python.org/download/releases/2.3/mro/\" rel=\"noreferrer\">Method resolution order (MRO)</a>: in what order the base classes of a class will be searched when trying to resolve which method to call. </p></li>\n<li><p>Related to MRO, <a href=\"https://docs.python.org/3/library/functions.html#super\" rel=\"noreferrer\"><code>super</code> calls</a>. Also see, <a href=\"https://rhettinger.wordpress.com/2011/05/26/super-considered-super/\" rel=\"noreferrer\"><code>super()</code> considered super.</a></p></li>\n</ul>\n\n<p>If you don't inherit from <code>object</code>, forget these. A more exhaustive description of the previous bullet points along with other perks of \"new\" style classes can be found <a href=\"https://www.python.org/download/releases/2.2.3/descrintro/\" rel=\"noreferrer\">here</a>.</p>\n\n<p>One of the downsides of new-style classes is that the class itself is more memory demanding. Unless you're creating many class objects, though, I doubt this would be an issue and it's a negative sinking in a sea of positives.</p>\n\n<hr>\n\n<h3>Python 3.x story:</h3>\n\n<p>In Python 3, things are simplified. Only new-style classes exist (referred to plainly as classes) so, the only difference in adding <code>object</code> is requiring you to type in 8 more characters. This:</p>\n\n<pre><code>class ClassicSpam:\n    pass\n</code></pre>\n\n<p>is completely equivalent (apart from their name :-) to this:</p>\n\n<pre><code>class NewSpam(object):\n     pass\n</code></pre>\n\n<p>and to this:</p>\n\n<pre><code>class Spam():\n    pass\n</code></pre>\n\n<p>All have <code>object</code> in their <code>__bases__</code>.</p>\n\n<pre><code>&gt;&gt;&gt; [object in cls.__bases__ for cls in {Spam, NewSpam, ClassicSpam}]\n[True, True, True]\n</code></pre>\n\n<hr>\n\n<h2>So, what should you do?</h2>\n\n<p><strong>In Python 2:</strong> <em>always inherit from <code>object</code> explicitly</em>. Get the perks.</p>\n\n<p><strong>In Python 3:</strong> inherit from <code>object</code> if you are writing code that tries to be Python agnostic, that is, it needs to work both in Python 2 and in Python 3. Otherwise don't, it really makes no difference since Python inserts it for you behind the scenes.</p>\n"
    },
    "222": {
        "question_id": "710551",
        "answer_id": "710603",
        "question": "<p>I've tried to find a comprehensive guide on whether it is best to use <code>import module</code> or <code>from module import</code>? I've just started with Python and I'm trying to start off with best practices in mind.</p>\n\n<p>Basically, I was hoping if anyone could share their experiences, what preferences other developers have and what's the best way to avoid any <em>gotchas</em> down the road?</p>\n",
        "answer": "<p>The difference between <code>import module</code> and <code>from module import foo</code> is mainly subjective.  Pick the one you like best and be consistent in your use of it.  Here are some points to help you decide.</p>\n\n<p><code>import module</code></p>\n\n<ul>\n<li><strong>Pros:</strong>\n\n<ul>\n<li>Less maintenance of your <code>import</code> statements. Don't need to add any additional imports to start using another item from the module</li>\n</ul></li>\n<li><strong>Cons:</strong>\n\n<ul>\n<li>Typing <code>module.foo</code> in your code can be tedious and redundant (tedium can be minimized by using <code>import module as mo</code> then typing <code>mo.foo</code>)</li>\n</ul></li>\n</ul>\n\n<p><code>from module import foo</code></p>\n\n<ul>\n<li><strong>Pros:</strong>\n\n<ul>\n<li>Less typing to use <code>foo</code></li>\n<li>More control over which items of a module can be accessed</li>\n</ul></li>\n<li><strong>Cons:</strong>\n\n<ul>\n<li>To use a new item from the module you have to update your <code>import</code> statement</li>\n<li>You lose context about <code>foo</code>. For example, it's less clear what <code>ceil()</code> does compared to <code>math.ceil()</code></li>\n</ul></li>\n</ul>\n\n<p>Either method is acceptable, but <strong>don't</strong> use <code>from module import *</code>.  </p>\n\n<p>For any reasonable large set of code, if you <code>import *</code> you will likely be cementing it into the module, unable to be removed.  This is because it is difficult to determine what items used in the code are coming from 'module', making it easy to get to the point where you think you don't use the <code>import</code> any more but it's extremely difficult to be sure.</p>\n"
    },
    "223": {
        "question_id": "39086",
        "answer_id": "39110",
        "question": "<p>I want to loop over the contents of a text file and do a search and replace on some lines and write the result back to the file. I could first load the whole file in memory and then write it back, but that probably is not the best way to do it.</p>\n\n<p>What is the best way to do this, within the following code?</p>\n\n<pre><code>f = open(file)\nfor line in f:\n    if line.contains('foo'):\n        newline = line.replace('foo', 'bar')\n        # how to write this newline back to the file\n</code></pre>\n",
        "answer": "<p>I guess something like this should do it. It basically writes the content to a new file and replaces the old file with the new file:</p>\n\n<pre><code>from tempfile import mkstemp\nfrom shutil import move\nfrom os import fdopen, remove\n\ndef replace(file_path, pattern, subst):\n    #Create temp file\n    fh, abs_path = mkstemp()\n    with fdopen(fh,'w') as new_file:\n        with open(file_path) as old_file:\n            for line in old_file:\n                new_file.write(line.replace(pattern, subst))\n    #Remove original file\n    remove(file_path)\n    #Move new file\n    move(abs_path, file_path)\n</code></pre>\n"
    },
    "224": {
        "question_id": "11041405",
        "answer_id": "11041421",
        "question": "<p>Today, I came across the <code>dict</code> method <code>get</code> which, given a key in the dictionary, returns the associated value.</p>\n\n<p>For what purpose is this function useful? If I wanted to find a value associated with a key in a dictionary, I can just do <code>dict[key]</code>, and it returns the same thing:</p>\n\n<pre><code>dictionary = {\"Name\": \"Harry\", \"Age\": 17}\ndictionary[\"Name\"]\ndictionary.get(\"Name\")\n</code></pre>\n",
        "answer": "<p>It allows you to provide a default value if the key is missing:</p>\n\n<pre><code>dictionary.get(\"bogus\", default_value)\n</code></pre>\n\n<p>returns <code>default_value</code> (whatever you choose it to be), whereas</p>\n\n<pre><code>dictionary[\"bogus\"]\n</code></pre>\n\n<p>would raise a <code>KeyError</code>.  </p>\n\n<p>If omitted, <code>default_value</code> is <code>None</code>, such that</p>\n\n<pre><code>dictionary.get(\"bogus\")  # &lt;-- No default specified -- defaults to None\n</code></pre>\n\n<p>returns <code>None</code> just like </p>\n\n<pre><code>dictionary.get(\"bogus\", None)\n</code></pre>\n\n<p>would. </p>\n"
    },
    "225": {
        "question_id": "25445439",
        "answer_id": "25445440",
        "question": "<p>When I try to use a <code>print</code> statement in Python, it gives me this error:</p>\n\n<pre><code>&gt;&gt;&gt; print \"Hello, World!\"\n  File \"&lt;stdin&gt;\", line 1\n    print \"Hello, World!\"\n                        ^\nSyntaxError: Missing parentheses in call to 'print'\n</code></pre>\n\n<p>What does that mean?</p>\n",
        "answer": "<p>This error message means that you are attempting to use Python 3 to follow an example or run a program that uses the Python 2 <code>print</code> statement:</p>\n\n<p><s></p>\n\n<pre><code>print \"Hello, World!\"\n</code></pre>\n\n<p></s></p>\n\n<p>The statement above does not work in Python 3. In Python 3 you need to add parentheses around the value to be printed:</p>\n\n<pre><code>print(\"Hello, World!\")\n</code></pre>\n\n<hr>\n\n<p><em>\u201cSyntaxError: Missing parentheses in call to 'print'\u201d</em> is a new error message that was added in Python 3.4.2 primarily to help users that are trying to follow a Python 2 tutorial while running Python 3.</p>\n\n<p>In Python 3, printing values changed from being a distinct statement to being an ordinary function call, so it now needs parentheses:</p>\n\n<pre><code>&gt;&gt;&gt; print(\"Hello, World!\")\nHello, World!\n</code></pre>\n\n<p>In earlier versions of Python 3, the interpreter just reports a generic syntax error, without providing any useful hints as to what might be going wrong:</p>\n\n<pre><code>&gt;&gt;&gt; print \"Hello, World!\"\n  File \"&lt;stdin&gt;\", line 1\n    print \"Hello, World!\"\n                        ^\nSyntaxError: invalid syntax\n</code></pre>\n\n<p>As for <em>why</em> <code>print</code> became an ordinary function in Python 3, that didn't relate to the basic form of the statement, but rather to how you did more complicated things like printing multiple items to stderr with a trailing space rather than ending the line.</p>\n\n<p>In Python 2:</p>\n\n<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; print &gt;&gt; sys.stderr, 1, 2, 3,; print &gt;&gt; sys.stderr, 4, 5, 6\n1 2 3 4 5 6\n</code></pre>\n\n<p>In Python 3:</p>\n\n<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; print(1, 2, 3, file=sys.stderr, end=\" \"); print(4, 5, 6, file=sys.stderr)\n1 2 3 4 5 6\n</code></pre>\n\n<hr>\n\n<p>Starting with the Python 3.6.3 release in September 2017, some error messages related to the Python 2.x print syntax have been updated to recommend their Python 3.x counterparts:</p>\n\n<pre><code>&gt;&gt;&gt; print \"Hello!\"\n  File \"&lt;stdin&gt;\", line 1\n    print \"Hello!\"\n                 ^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(\"Hello!\")?\n</code></pre>\n\n<p>Since the \"Missing parentheses in call to print\" case is a compile time syntax error and hence has access to the raw source code, it's able to include the full text on the rest of the line in the suggested replacement. However, it doesn't currently try to work out the appropriate quotes to place around that expression (that's not impossible, just sufficiently complicated that it hasn't been done).</p>\n\n<p>The <code>TypeError</code> raised for the right shift operator has also been customised:</p>\n\n<pre><code>&gt;&gt;&gt; print &gt;&gt; sys.stderr\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unsupported operand type(s) for &gt;&gt;: 'builtin_function_or_method' and '_io.TextIOWrapper'. Did you mean \"print(&lt;message&gt;, file=&lt;output_stream&gt;)\"?\n</code></pre>\n\n<p>Since this error is raised when the code runs, rather than when it is compiled, it doesn't have access to the raw source code, and hence uses meta-variables (<code>&lt;message&gt;</code> and <code>&lt;output_stream&gt;</code>) in the suggested replacement expression instead of whatever the user actually typed. Unlike the syntax error case, it's straightforward to place quotes around the Python expression in the custom right shift error message.</p>\n"
    },
    "226": {
        "question_id": "3172470",
        "answer_id": "3172488",
        "question": "<p>I am calling different processes with the <code>subprocess</code> module. However, I have a question.</p>\n\n<p>In the following codes:</p>\n\n<pre><code>callProcess = subprocess.Popen(['ls', '-l'], shell=True)\n</code></pre>\n\n<p>and </p>\n\n<pre><code>callProcess = subprocess.Popen(['ls', '-l']) # without shell\n</code></pre>\n\n<p>Both work. After reading the docs, I came to know that <code>shell=True</code> means executing the code through the shell. So that means in absence, the process is directly started. </p>\n\n<p>So what should I prefer for my case - I need to run a process and get its output. What benefit do I have from calling it from within the shell or outside of it.</p>\n",
        "answer": "<p>The benefit of not calling via the shell is that you are not invoking a 'mystery program.'  On POSIX, the environment variable <code>SHELL</code> controls which binary is invoked as the \"shell.\"  On Windows, there is no bourne shell descendent, only cmd.exe.</p>\n\n<p>So invoking the shell invokes a program of the user's choosing and is platform-dependent.  Generally speaking, avoid invocations via the shell.</p>\n\n<p>Invoking via the shell does allow you to expand environment variables and file globs according to the shell's usual mechanism.  On POSIX systems, the shell expands file globs to a list of files.  On Windows, a file glob (e.g., \"*.*\") is not expanded by the shell, anyway (but environment variables on a command line <em>are</em> expanded by cmd.exe).</p>\n\n<p>If you think you want environment variable expansions and file globs, research the <code>ILS</code> attacks of 1992-ish on network services which performed subprogram invocations via the shell.  Examples include the various <code>sendmail</code> backdoors involving <code>ILS</code>.</p>\n\n<p>In summary, use <code>shell=False</code>.</p>\n"
    },
    "227": {
        "question_id": "2960772",
        "answer_id": "2960791",
        "question": "<p>I would like to put an <code>int</code> into a <code>string</code>. This is what I am doing at the moment:</p>\n\n<pre><code>num = 40\nplot.savefig('hanning40.pdf') #problem line\n</code></pre>\n\n<p>I have to run the program for several different numbers, so I'd like to do a loop. But inserting the variable like this doesn't work:</p>\n\n<pre><code>plot.savefig('hanning', num, '.pdf')\n</code></pre>\n\n<p>How do I insert a variable into a Python string?</p>\n",
        "answer": "<pre><code>plot.savefig('hanning(%d).pdf' % num)\n</code></pre>\n\n<p>The <code>%</code> operator, when following a string, allows you to insert values into that string via format codes (the <code>%d</code> in this case). For more details, see the Python documentation:</p>\n\n<p><a href=\"https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting\" rel=\"noreferrer\">https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting</a></p>\n"
    },
    "228": {
        "question_id": "14853243",
        "answer_id": "14853417",
        "question": "<p>I have the following XML which I want to parse using Python's <code>ElementTree</code>:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;rdf:RDF xml:base=\"http://dbpedia.org/ontology/\"\n    xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n    xmlns:owl=\"http://www.w3.org/2002/07/owl#\"\n    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema#\"\n    xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\"\n    xmlns=\"http://dbpedia.org/ontology/\"&gt;\n\n    &lt;owl:Class rdf:about=\"http://dbpedia.org/ontology/BasketballLeague\"&gt;\n        &lt;rdfs:label xml:lang=\"en\"&gt;basketball league&lt;/rdfs:label&gt;\n        &lt;rdfs:comment xml:lang=\"en\"&gt;\n          a group of sports teams that compete against each other\n          in Basketball\n        &lt;/rdfs:comment&gt;\n    &lt;/owl:Class&gt;\n\n&lt;/rdf:RDF&gt;\n</code></pre>\n\n<p>I want to find all <code>owl:Class</code> tags and then extract the value of all <code>rdfs:label</code> instances inside them. I am using the following code:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>tree = ET.parse(\"filename\")\nroot = tree.getroot()\nroot.findall('owl:Class')\n</code></pre>\n\n<p>Because of the namespace, I am getting the following error.</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>SyntaxError: prefix 'owl' not found in prefix map\n</code></pre>\n\n<p>I tried reading the document at <a href=\"http://effbot.org/zone/element-namespaces.htm\">http://effbot.org/zone/element-namespaces.htm</a> but I am still not able to get this working since the above XML has multiple nested namespaces.</p>\n\n<p>Kindly let me know how to change the code to find all the <code>owl:Class</code> tags.</p>\n",
        "answer": "<p>ElementTree is not too smart about namespaces. You need to give the <code>.find()</code>, <code>findall()</code> and <code>iterfind()</code> methods an explicit namespace dictionary. This is not documented very well:</p>\n\n<pre><code>namespaces = {'owl': 'http://www.w3.org/2002/07/owl#'} # add more as needed\n\nroot.findall('owl:Class', namespaces)\n</code></pre>\n\n<p>Prefixes are <em>only</em> looked up in the <code>namespaces</code> parameter you pass in. This means you can use any namespace prefix you like; the API splits off the <code>owl:</code> part, looks up the corresponding namespace URL in the <code>namespaces</code> dictionary, then changes the search to look for the XPath expression <code>{http://www.w3.org/2002/07/owl}Class</code> instead. You can use the same syntax yourself too of course:</p>\n\n<pre><code>root.findall('{http://www.w3.org/2002/07/owl#}Class')\n</code></pre>\n\n<p>If you can switch to the <a href=\"http://lxml.de/\" rel=\"noreferrer\"><code>lxml</code> library</a> things are better; that library supports the same ElementTree API, but collects namespaces for you in a <code>.nsmap</code> attribute on elements.</p>\n"
    },
    "229": {
        "question_id": "4140437",
        "answer_id": "4140988",
        "question": "<p>What is the recommended technique for interactively validating content in a tkinter <code>Entry</code> widget?</p>\n\n<p>I've read the posts about using <code>validate=True</code> and <code>validatecommand=command</code>, and it appears that these features are limited by the fact that they get cleared if the <code>validatecommand</code> command updates the <code>Entry</code> widget's value.</p>\n\n<p>Given this behavior, should we bind on the <code>KeyPress</code>, <code>Cut</code>, and <code>Paste</code> events and monitor/update our <code>Entry</code> widget's value through these events? (And other related events that I might have missed?)</p>\n\n<p>Or should we forget interactive validation altogether and only validate on <code>FocusOut</code> events?</p>\n",
        "answer": "<p>The correct answer is, use the <code>validatecommand</code> attribute of the widget. Unfortunately this feature is severely under-documented in the Tkinter world, though it is quite sufficiently documented in the Tk world. Even though it's not documented well, it has everything you need to do validation without resorting to bindings or tracing variables, or modifying the widget from within the validation procedure.</p>\n\n<p>The trick is to know that you can have Tkinter pass in special values to your validate command. These values give you all the information you need to know to decide on whether the data is valid or not: the value prior to the edit, the value after the edit if the edit is valid, and several other bits of information. To use these, though, you need to do a little voodoo to get this information passed to your validate command.</p>\n\n<p>Note: it's important that the validation command returns either <code>True</code> or <code>False</code>. Anything else will cause the validation to be turned off for the widget.</p>\n\n<p>Here's an example that only allows lowercase (and prints all those funky values):</p>\n\n<pre><code>import tkinter as tk  # python 3.x\n# import Tkinter as tk # python 2.x\n\nclass Example(tk.Frame):\n\n    def __init__(self, parent):\n        tk.Frame.__init__(self, parent)\n\n        # valid percent substitutions (from the Tk entry man page)\n        # note: you only have to register the ones you need; this\n        # example registers them all for illustrative purposes\n        #\n        # %d = Type of action (1=insert, 0=delete, -1 for others)\n        # %i = index of char string to be inserted/deleted, or -1\n        # %P = value of the entry if the edit is allowed\n        # %s = value of entry prior to editing\n        # %S = the text string being inserted or deleted, if any\n        # %v = the type of validation that is currently set\n        # %V = the type of validation that triggered the callback\n        #      (key, focusin, focusout, forced)\n        # %W = the tk name of the widget\n\n        vcmd = (self.register(self.onValidate),\n                '%d', '%i', '%P', '%s', '%S', '%v', '%V', '%W')\n        self.entry = tk.Entry(self, validate=\"key\", validatecommand=vcmd)\n        self.text = tk.Text(self, height=10, width=40)\n        self.entry.pack(side=\"top\", fill=\"x\")\n        self.text.pack(side=\"bottom\", fill=\"both\", expand=True)\n\n    def onValidate(self, d, i, P, s, S, v, V, W):\n        self.text.delete(\"1.0\", \"end\")\n        self.text.insert(\"end\",\"OnValidate:\\n\")\n        self.text.insert(\"end\",\"d='%s'\\n\" % d)\n        self.text.insert(\"end\",\"i='%s'\\n\" % i)\n        self.text.insert(\"end\",\"P='%s'\\n\" % P)\n        self.text.insert(\"end\",\"s='%s'\\n\" % s)\n        self.text.insert(\"end\",\"S='%s'\\n\" % S)\n        self.text.insert(\"end\",\"v='%s'\\n\" % v)\n        self.text.insert(\"end\",\"V='%s'\\n\" % V)\n        self.text.insert(\"end\",\"W='%s'\\n\" % W)\n\n        # Disallow anything but lowercase letters\n        if S == S.lower():\n            return True\n        else:\n            self.bell()\n            return False\n\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    Example(root).pack(fill=\"both\", expand=True)\n    root.mainloop()\n</code></pre>\n\n<p>For more information about what happens under the hood when you call the <code>register</code> method, see <a href=\"https://stackoverflow.com/questions/55184324/input-validation-tkinter/55231273#55231273\">Input validation tkinter</a></p>\n"
    },
    "230": {
        "question_id": "145270",
        "answer_id": "145436",
        "question": "<p>What would be the quickest way to construct a Python binding to a C or C++ library?</p>\n\n<p>(I am using Windows if this matters.)</p>\n",
        "answer": "<p>You should have a look at <a href=\"http://www.boost.org/doc/libs/1_49_0/libs/python/doc/\" rel=\"noreferrer\">Boost.Python</a>. Here is the short introduction taken from their website:</p>\n\n<blockquote>\n  <p>The Boost Python Library is a framework for interfacing Python and\n  C++. It allows you to quickly and seamlessly expose C++ classes\n  functions and objects to Python, and vice-versa, using no special\n  tools -- just your C++ compiler. It is designed to wrap C++ interfaces\n  non-intrusively, so that you should not have to change the C++ code at\n  all in order to wrap it, making Boost.Python ideal for exposing\n  3rd-party libraries to Python. The library's use of advanced\n  metaprogramming techniques simplifies its syntax for users, so that\n  wrapping code takes on the look of a kind of declarative interface\n  definition language (IDL).</p>\n</blockquote>\n"
    },
    "231": {
        "question_id": "9535954",
        "answer_id": "9536084",
        "question": "<p>I am quite new to Python and I am now struggling with formatting my data nicely for printed output.</p>\n\n<p>I have one list that is used for two headings, and a matrix that should be the contents of the table. Like so:</p>\n\n<pre><code>teams_list = [\"Man Utd\", \"Man City\", \"T Hotspur\"]\ndata = np.array([[1, 2, 1],\n                 [0, 1, 0],\n                 [2, 4, 2]])\n</code></pre>\n\n<p>Note that the heading names are not necessarily the same lengths. The data entries are all integers, though.</p>\n\n<p>Now, I want to represent this in a table format, something like this:</p>\n\n<pre><code>            Man Utd   Man City   T Hotspur\n  Man Utd         1          0           0\n Man City         1          1           0\nT Hotspur         0          1           2\n</code></pre>\n\n<p>I have a hunch that there must be a data structure for this, but I cannot find it. I have tried using a dictionary and formatting the printing, I have tried for-loops with indentation and I have tried printing as strings.</p>\n\n<p>I am sure there must be a very simple way to do this, but I am probably missing it due to lack of experience.</p>\n",
        "answer": "<p>Some ad-hoc code for Python 2.7:</p>\n\n<pre><code>row_format =\"{:&gt;15}\" * (len(teams_list) + 1)\nprint(row_format.format(\"\", *teams_list))\nfor team, row in zip(teams_list, data):\n    print(row_format.format(team, *row))\n</code></pre>\n\n<p>This relies on <a href=\"https://docs.python.org/2.7/library/stdtypes.html#str.format\" rel=\"nofollow noreferrer\"><code>str.format()</code></a> and the <a href=\"https://docs.python.org/2.7/library/string.html#formatspec\" rel=\"nofollow noreferrer\">Format Specification Mini-Language</a>.</p>\n"
    },
    "232": {
        "question_id": "47993443",
        "answer_id": "47995294",
        "question": "<p>I'm trying to play <a href=\"http://www.foddy.net/Athletics.html?webgl=true\" rel=\"noreferrer\">QWOP</a> using Selenium on Chrome but I keep getting the following error:</p>\n\n<pre><code>selenium.common.exceptions.NoSuchElementException: \nMessage: no such element: Unable to locate element\n{\"method\":\"id\",\"selector\":\"window1\"\n(Session info: chrome=63.0.3239.108\n(Driver info: chromedriver=2.34.522913\n(36222509aa6e819815938cbf2709b4849735537c), platform=Linux 4.10.0-42-generic x86_64)\n</code></pre>\n\n<p>while using the following code:</p>\n\n<pre><code>from selenium import webdriver\nfrom selenium.webdriver.common.action_chains import ActionChains\nimport time\n\nbrowser = webdriver.Chrome()\nbrowser.set_window_size(640, 480)\nbrowser.get('http://www.foddy.net/Athletics.html?webgl=true')\nbrowser.implicitly_wait(10)\n\ncanvas = browser.find_element_by_id(\"window1\")\n\ncanvas.click()\n\nwhile (True):\n    action = ActionChains(browser)\n    action.move_to_element(canvas).perform()\n    canvas.click()\n    canvas.send_keys(\"q\")\n</code></pre>\n\n<p>The same code works perfectly on Firefox, but because I want to use chrome's capability to run an webgl game in headless mode I can't really switch to Firefox.</p>\n\n<p>Any workarounds to get this working?</p>\n",
        "answer": "<h2><strong><code>NoSuchElementException</code></strong></h2>\n\n<p><code>selenium.common.exceptions.NoSuchElementException</code> popularly known as <code>NoSuchElementException</code> is defined as :</p>\n\n<pre><code>exception selenium.common.exceptions.NoSuchElementException(msg=None, screen=None, stacktrace=None)\n</code></pre>\n\n<p><code>NoSuchElementException</code> is basically thrown in 2 cases as follows :</p>\n\n<ul>\n<li><p>When using :</p>\n\n<pre><code>webdriver.find_element_by_*(\"expression\")\n//example : my_element = driver.find_element_by_xpath(\"xpath_expression\")\n</code></pre></li>\n<li><p>When using :</p>\n\n<pre><code>element.find_element_by_*(\"expression\")\n//example : my_element = element.find_element_by_*(\"expression\")\n</code></pre></li>\n</ul>\n\n<p>As per the API Docs just like any other <code>selenium.common.exceptions</code>, <code>NoSuchElementException</code> should contain the following parameters :</p>\n\n<ul>\n<li><p>msg, screen, stacktrace</p>\n\n<pre><code>    raise exception_class(message, screen, stacktrace)\nselenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\".//*[@id='create-portal-popup']/div[4]/div[1]/button[3]\"}\n  (Session info: chrome=61.0.3163.100)\n  (Driver info: chromedriver=2.32.498550 (9dec58e66c31bcc53a9ce3c7226f0c1c5810906a),platform=Windows NT 10.0.10240 x86_64)\n</code></pre></li>\n</ul>\n\n<h2>Reason</h2>\n\n<p>The reason for <em>NoSuchElementException</em> can be either of the following :</p>\n\n<ul>\n<li>The <em>Locator Strategy</em> you have adopted doesn't identifies any element in the <a href=\"https://www.w3schools.com/js/js_htmldom.asp\" rel=\"nofollow noreferrer\"><strong>HTML DOM</strong></a>.</li>\n<li>The <em>Locator Strategy</em> you have adopted is unable to identify the element as it is not within the browser's <a href=\"https://www.w3schools.com/css/css_rwd_viewport.asp\" rel=\"nofollow noreferrer\">Viewport</a>.</li>\n<li>The <em>Locator Strategy</em> you have adopted identifies the element but is invisible due to presence of the attribute <strong>style=\"display: none;\"</strong>.</li>\n<li>The <em>Locator Strategy</em> you have adopted doesn't <strong>uniquely</strong> identifies the desired element in the <em>HTML DOM</em> and currently finds some other <em>hidden</em> / <em>invisible</em> element.</li>\n<li>The <em>WebElement</em> you are trying to locate is within an <code>&lt;iframe&gt;</code> tag.</li>\n<li>The <em>WebDriver</em> instance is looking out for the <em>WebElement</em> even before the element is present/visibile within the <em>HTML DOM</em>.</li>\n</ul>\n\n<h2>Solution</h2>\n\n<p>The solution to address <em>NoSuchElementException</em> can be either of the following :</p>\n\n<ul>\n<li><p>Adopt a <a href=\"https://stackoverflow.com/questions/48369043/official-locator-strategies-for-the-webdriver/48376890#48376890\">Locator Strategy</a> which uniquely identifies the desired <em>WebElement</em>. You can take help of the <em>Developer Tools</em> (<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>I</kbd> or <kbd>F12</kbd>) and use <em>Element Inspector</em>. </p>\n\n<p>Here you will find a detailed discussion on <a href=\"https://stackoverflow.com/questions/46700764/how-to-inspect-element-in-selenium3-6-as-firebug-is-not-an-option-any-more-for-f/46702281#46702281\">how to inspect element in selenium3.6 as firebug is not an option any more for FF 56?</a></p></li>\n<li><p>Use <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_script\" rel=\"nofollow noreferrer\"><strong><code>execute_script()</code></strong></a> method to scroll the element in to view as follows :</p>\n\n<pre><code>elem = driver.find_element_by_xpath(\"element_xpath\")\ndriver.execute_script(\"arguments[0].scrollIntoView();\", elem)\n</code></pre>\n\n<p>Here you will find a detailed discussion on <a href=\"https://stackoverflow.com/questions/45576958/scrolling-to-top-of-the-page-in-python-using-selenium/45581830#45581830\">Scrolling to top of the page in Python using Selenium</a></p></li>\n<li><p>Incase element is having the attribute <strong>style=\"display: none;\"</strong>, remove the attribute  through <code>executeScript()</code> method as follows :</p>\n\n<pre><code>elem = driver.find_element_by_xpath(\"element_xpath\")\ndriver.execute_script(\"arguments[0].removeAttribute('style')\", elem)\nelem.send_keys(\"text_to_send\")\n</code></pre></li>\n<li><p>To check if the element is within an <code>&lt;iframe&gt;</code> traverse up the <em>HTML</em> to locate the respective <code>&lt;iframe&gt;</code> tag and <code>switchTo()</code> the desired <em>iframe</em> through either of the following methods :</p>\n\n<pre><code>driver.switch_to.frame(\"iframe_name\")\ndriver.switch_to.frame(\"iframe_id\")\ndriver.switch_to.frame(1) // 1 represents frame index\n</code></pre>\n\n<p>Here you can find a detailed discussion on <a href=\"https://stackoverflow.com/questions/47770144/how-can-i-select-a-html-element-no-matter-what-frame-it-is-in-in-selenium/47771879#47771879\">How can I select a html element no matter what frame it is in in selenium?</a>.</p></li>\n<li><p>If the element is not <em>present</em>/<em>visible</em> in the <em>HTML DOM</em> immediately, induce <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.wait.html#module-selenium.webdriver.support.wait\" rel=\"nofollow noreferrer\">WebDriverWait</a> with <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#module-selenium.webdriver.support.expected_conditions\" rel=\"nofollow noreferrer\">expected_conditions</a> set to proper method as follows :</p>\n\n<ul>\n<li><p>To wait for <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#selenium.webdriver.support.expected_conditions.presence_of_element_located\" rel=\"nofollow noreferrer\"><strong>presence_of_element_located</strong></a> :</p>\n\n<pre><code>element = WebDriverWait(driver, 20).until(expected_conditions.presence_of_element_located((By.XPATH, \"element_xpath']\")))\n</code></pre></li>\n<li><p>To wait for <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#selenium.webdriver.support.expected_conditions.visibility_of_element_located\" rel=\"nofollow noreferrer\"><strong>visibility_of_element_located</strong></a> :</p>\n\n<pre><code>element = WebDriverWait(driver, 20).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, \"element_css\")\n</code></pre></li>\n<li><p>To wait for <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#selenium.webdriver.support.expected_conditions.element_to_be_clickable\" rel=\"nofollow noreferrer\"><strong>element_to_be_clickable</strong></a> :</p>\n\n<pre><code>element = WebDriverWait(driver, 20).until(expected_conditions.element_to_be_clickable((By.LINK_TEXT, \"element_link_text\")))\n</code></pre></li>\n</ul></li>\n</ul>\n\n<hr>\n\n<h2>This Usecase</h2>\n\n<p>You are seeing <code>NoSuchElementException</code> because the <em>id</em> locator doesn't identifies the <strong>canvas</strong> uniquely. To identify the canvas and <code>click()</code> on it you have to wait for the <strong>canvas</strong> to be <code>clickable</code> and to achieve that you can use the following code block :</p>\n\n<pre><code>WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.XPATH, \"//canvas[@id='window1']\"))).click()\n</code></pre>\n"
    },
    "233": {
        "question_id": "47789",
        "answer_id": "47826",
        "question": "<p>When should you use generator expressions and when should you use list comprehensions in Python?</p>\n\n<pre><code># Generator expression\n(x*2 for x in range(256))\n\n# List comprehension\n[x*2 for x in range(256)]\n</code></pre>\n",
        "answer": "<p>John's answer is good (that list comprehensions are better when you want to iterate over something multiple times).  However, it's also worth noting that you should use a list if you want to use any of the list methods.  For example, the following code won't work:</p>\n\n<pre><code>def gen():\n    return (something for something in get_some_stuff())\n\nprint gen()[:2]     # generators don't support indexing or slicing\nprint [5,6] + gen() # generators can't be added to lists\n</code></pre>\n\n<p>Basically, use a generator expression if all you're doing is iterating once.  If you want to store and use the generated results, then you're probably better off with a list comprehension.</p>\n\n<p>Since performance is the most common reason to choose one over the other, my advice is to not worry about it and just pick one; if you find that your program is running too slowly, then and only then should you go back and worry about tuning your code.</p>\n"
    },
    "234": {
        "question_id": "40208051",
        "answer_id": "40208762",
        "question": "<p>I'm new to programming and started with <code>Python</code> about 2 months ago and am going over Sweigart's <em>Automate the Boring Stuff with Python</em> text. I'm using IDLE and already installed the selenium module and the Firefox browser.\nWhenever I tried to run the webdriver function, I get this:</p>\n\n<pre><code>from selenium import webdriver\nbrowser = webdriver.Firefox()\n</code></pre>\n\n<p>Exception :-</p>\n\n<pre><code>Exception ignored in: &lt;bound method Service.__del__ of &lt;selenium.webdriver.firefox.service.Service object at 0x00000249C0DA1080&gt;&gt;\nTraceback (most recent call last):\n  File \"C:\\Python\\Python35\\lib\\site-packages\\selenium\\webdriver\\common\\service.py\", line 163, in __del__\n    self.stop()\n  File \"C:\\Python\\Python35\\lib\\site-packages\\selenium\\webdriver\\common\\service.py\", line 135, in stop\n    if self.process is None:\nAttributeError: 'Service' object has no attribute 'process'\nException ignored in: &lt;bound method Service.__del__ of &lt;selenium.webdriver.firefox.service.Service object at 0x00000249C0E08128&gt;&gt;\nTraceback (most recent call last):\n  File \"C:\\Python\\Python35\\lib\\site-packages\\selenium\\webdriver\\common\\service.py\", line 163, in __del__\n    self.stop()\n  File \"C:\\Python\\Python35\\lib\\site-packages\\selenium\\webdriver\\common\\service.py\", line 135, in stop\n    if self.process is None:\nAttributeError: 'Service' object has no attribute 'process'\nTraceback (most recent call last):\n  File \"C:\\Python\\Python35\\lib\\site-packages\\selenium\\webdriver\\common\\service.py\", line 64, in start\n    stdout=self.log_file, stderr=self.log_file)\n  File \"C:\\Python\\Python35\\lib\\subprocess.py\", line 947, in __init__\n    restore_signals, start_new_session)\n  File \"C:\\Python\\Python35\\lib\\subprocess.py\", line 1224, in _execute_child\n    startupinfo)\nFileNotFoundError: [WinError 2] The system cannot find the file specified\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"&lt;pyshell#11&gt;\", line 1, in &lt;module&gt;\n    browser = webdriver.Firefox()\n  File \"C:\\Python\\Python35\\lib\\site-packages\\selenium\\webdriver\\firefox\\webdriver.py\", line 135, in __init__\n    self.service.start()\n  File \"C:\\Python\\Python35\\lib\\site-packages\\selenium\\webdriver\\common\\service.py\", line 71, in start\n    os.path.basename(self.path), self.start_error_message)\nselenium.common.exceptions.WebDriverException: Message: 'geckodriver' executable needs to be in PATH. \n</code></pre>\n\n<p>I think I need to set the path for <code>geckodriver</code> but not sure how, so can anyone tell me how would I do this?</p>\n",
        "answer": "<blockquote>\n  <p>selenium.common.exceptions.WebDriverException: Message: 'geckodriver' executable needs to be in PATH. </p>\n</blockquote>\n\n<p><a href=\"https://github.com/mozilla/geckodriver/releases\">First of all you will need to download latest executable geckodriver from here to run latest firefox using selenium</a></p>\n\n<p>Actually The Selenium client bindings tries to locate the <code>geckodriver</code> executable from the system <code>PATH</code>. You will need to add the directory containing the executable to the system path.</p>\n\n<ul>\n<li><p>On Unix systems you can do the following to append it to your system\u2019s search path, if you\u2019re using a bash-compatible shell:</p>\n\n<pre><code>export PATH=$PATH:/path/to/directory/of/executable/downloaded/in/previous/step\n</code></pre></li>\n<li><p>On Windows you will need to update the <strong>Path system variable to add the full directory path to the executable geckodriver</strong> <a href=\"https://www.google.co.in/amp/www.howtogeek.com/118594/how-to-edit-your-system-path-for-easy-command-line-access/amp/?client=ms-android-motorola\">manually</a> or <a href=\"https://www.windows-commandline.com/set-path-command-line/\">command line</a><strong>(don't forget to restart your system after adding executable geckodriver into system PATH to take effect)</strong>.  The principle is the same as on Unix. </p></li>\n</ul>\n\n<p>Now you can run your code same as you're doing as below :-</p>\n\n<pre><code>from selenium import webdriver\n\nbrowser = webdriver.Firefox()\n</code></pre>\n\n<blockquote>\n  <p>selenium.common.exceptions.WebDriverException: Message: Expected browser binary location, but unable to find binary in default location, no 'moz:firefoxOptions.binary' capability provided, and no binary flag set on the command line</p>\n</blockquote>\n\n<p>Exception clearly states you have installed firefox some other location while Selenium is trying to find firefox and launch from default location but it couldn't find. You need to provide explicitly firefox installed binary location to launch firefox as below :-</p>\n\n<pre><code>from selenium import webdriver\nfrom selenium.webdriver.firefox.firefox_binary import FirefoxBinary\n\nbinary = FirefoxBinary('path/to/installed firefox binary')\nbrowser = webdriver.Firefox(firefox_binary=binary)\n</code></pre>\n"
    },
    "235": {
        "question_id": "22219004",
        "answer_id": "22221675",
        "question": "<p>I have a pandas data frame like:</p>\n\n<pre><code>a b\nA 1\nA 2\nB 5\nB 5\nB 4\nC 6\n</code></pre>\n\n<p>I want to group by the first column and get second column as lists in rows:</p>\n\n<pre><code>A [1,2]\nB [5,5,4]\nC [6]\n</code></pre>\n\n<p>Is it possible to do something like this using pandas groupby?</p>\n",
        "answer": "<p>You can do this using <code>groupby</code> to group on the column of interest and then <code>apply</code> <code>list</code> to every group:</p>\n\n<pre><code>In [1]:\n# create the dataframe    \ndf = pd.DataFrame( {'a':['A','A','B','B','B','C'], 'b':[1,2,5,5,4,6]})\ndf\nOut[1]:\n   a  b\n0  A  1\n1  A  2\n2  B  5\n3  B  5\n4  B  4\n5  C  6\n\n[6 rows x 2 columns]\n\nIn [76]:\ndf.groupby('a')['b'].apply(list)\n\nOut[76]:\na\nA       [1, 2]\nB    [5, 5, 4]\nC          [6]\nName: b, dtype: object\n</code></pre>\n"
    },
    "236": {
        "question_id": "49768770",
        "answer_id": "49769015",
        "question": "<p>I am trying to install a Python library using <code>pip</code>, getting an SSL error:</p>\n\n<pre><code>~/projects/base \ue0a0 pre-master\u00b1  pip install xdict\n\nCollecting xdict\n  Could not fetch URL https://pypi.python.org/simple/xdict/: There was a problem confirming the ssl certificate: [SSL: TLSV1_ALERT_PROTOCOL_VERSION] tlsv1 alert protocol version (_ssl.c:590) - skipping\n  Could not find a version that satisfies the requirement xdict (from versions: )\nNo matching distribution found for xdict\n</code></pre>\n\n<p>pip version: pip 9.0.1</p>\n\n<p>How do I fix this error?</p>\n",
        "answer": "<p>Upgrade pip as follows:</p>\n\n<pre><code>curl https://bootstrap.pypa.io/get-pip.py | python\n</code></pre>\n\n<p>Note: You may need to use <code>sudo python</code> above if not in a virtual environment.</p>\n\n<p>(Note that upgrading <code>pip</code> using <code>pip</code> i.e <code>pip install --upgrade pip</code> will also not upgrade it correctly. It's just a chicken-and-egg issue. <code>pip</code> won't work unless using TLS >= 1.2.)</p>\n\n<p>As mentioned in <a href=\"https://stackoverflow.com/a/49748494/1526703\">this detailed answer</a>, this is due to the recent TLS deprecation for pip. Python.org sites have <a href=\"https://status.python.org/incidents/hdx7w97m5hr8\" rel=\"noreferrer\">stopped support</a> for TLS versions 1.0 and 1.1.</p>\n\n<p>From the Python status page:</p>\n\n<blockquote>\n  <p><strong>Completed</strong> - The rolling brownouts are finished, and TLSv1.0 and\n  TLSv1.1 have been disabled. Apr 11, 15:37 UTC</p>\n</blockquote>\n\n<p><br/>\n<b>For PyCharm (virtualenv) users:</b></p>\n\n<ol>\n<li><p>Run virtual environment with shell. (replace \"./venv/bin/activate\" to your own path)</p>\n\n<pre><code>source ./venv/bin/activate\n</code></pre></li>\n<li><p>Run upgrade</p>\n\n<pre><code>curl https://bootstrap.pypa.io/get-pip.py | python\n</code></pre></li>\n<li><p>Restart your PyCharm instance, and check your Python interpreter in <em>Preference</em>.</p></li>\n</ol>\n"
    },
    "237": {
        "question_id": "295459",
        "answer_id": "295564",
        "question": "<p>How do I execute the following shell command using the Python <a href=\"https://docs.python.org/library/subprocess.html\" rel=\"noreferrer\"><code>subprocess</code></a> module?</p>\n\n<pre><code>echo \"input data\" | awk -f script.awk | sort &gt; outfile.txt\n</code></pre>\n\n<p>The input data will come from a string, so I don't actually need <code>echo</code>.  I've got this far, can anyone explain how I get it to pipe through <code>sort</code> too?</p>\n\n<pre><code>p_awk = subprocess.Popen([\"awk\",\"-f\",\"script.awk\"],\n                          stdin=subprocess.PIPE,\n                          stdout=file(\"outfile.txt\", \"w\"))\np_awk.communicate( \"input data\" )\n</code></pre>\n\n<p><strong>UPDATE</strong>:  Note that while the accepted answer below doesn't actually answer the question as asked, I believe S.Lott is right and it's better to avoid having to solve that problem in the first place!</p>\n",
        "answer": "<p>You'd be a little happier with the following.</p>\n\n<pre><code>import subprocess\n\nawk_sort = subprocess.Popen( \"awk -f script.awk | sort &gt; outfile.txt\",\n    stdin=subprocess.PIPE, shell=True )\nawk_sort.communicate( b\"input data\\n\" )\n</code></pre>\n\n<p>Delegate part of the work to the shell.  Let it connect two processes with a pipeline.</p>\n\n<p>You'd be a lot happier rewriting 'script.awk' into Python, eliminating awk and the pipeline.</p>\n\n<p><strong>Edit</strong>.  Some of the reasons for suggesting that awk isn't helping.</p>\n\n<p>[There are too many reasons to respond via comments.]</p>\n\n<ol>\n<li><p>Awk is adding a step of no significant value.  There's nothing unique about awk's processing that Python doesn't handle.</p></li>\n<li><p>The pipelining from awk to sort, for large sets of data, may improve elapsed processing time.  For short sets of data, it has no significant benefit.  A quick measurement of <code>awk &gt;file ; sort file</code> and <code>awk | sort</code> will reveal of concurrency helps.  With sort, it rarely helps because sort is not a once-through filter.</p></li>\n<li><p>The simplicity of \"Python to sort\" processing (instead of \"Python to awk to sort\") prevents the exact kind of questions being asked here.</p></li>\n<li><p>Python -- while wordier than awk -- is also explicit where awk has certain implicit rules that are opaque to newbies, and confusing to non-specialists.</p></li>\n<li><p>Awk (like the shell script itself) adds Yet Another Programming language.  If all of this can be done in one language (Python), eliminating the shell and the awk programming eliminates two programming languages, allowing someone to focus on the value-producing parts of the task.</p></li>\n</ol>\n\n<p>Bottom line: awk can't add significant value.  In this case, awk is a net cost; it added enough complexity that it was necessary to ask this question.  Removing awk will be a net gain.</p>\n\n<p><strong>Sidebar</strong> Why building a pipeline (<code>a | b</code>) is so hard.</p>\n\n<p>When the shell is confronted with <code>a | b</code> it has to do the following.</p>\n\n<ol>\n<li><p>Fork a child process of the original shell.  This will eventually become b.</p></li>\n<li><p>Build an os pipe.  (not a Python subprocess.PIPE) but call <code>os.pipe()</code> which returns two new file descriptors that are connected via  common buffer.  At this point the process has stdin, stdout, stderr from its parent, plus a file that will be \"a's stdout\" and \"b's stdin\".  </p></li>\n<li><p>Fork a child.  The child replaces its stdout with the new a's stdout.  Exec the <code>a</code> process.</p></li>\n<li><p>The b child closes replaces its stdin with the new b's stdin.  Exec the <code>b</code> process.</p></li>\n<li><p>The b child waits for a to complete.  </p></li>\n<li><p>The parent is waiting for b to complete.</p></li>\n</ol>\n\n<p>I think that the above can be used recursively to spawn <code>a | b | c</code>, but you have to implicitly parenthesize long pipelines, treating them as if they're <code>a | (b | c)</code>.</p>\n\n<p>Since Python has <code>os.pipe()</code>, <code>os.exec()</code> and <code>os.fork()</code>, and you can replace <code>sys.stdin</code> and <code>sys.stdout</code>, there's a way to do the above in pure Python.  Indeed, you may be able to work out some shortcuts using <code>os.pipe()</code> and <code>subprocess.Popen</code>.</p>\n\n<p>However, it's easier to delegate that operation to the shell.</p>\n"
    },
    "238": {
        "question_id": "123198",
        "answer_id": "123212",
        "question": "<p>How do I copy a file in Python?</p>\n\n<p>I couldn't find anything under <a href=\"https://docs.python.org/2/library/os.html\" rel=\"noreferrer\"><code>os</code></a>.</p>\n",
        "answer": "<p><a href=\"http://docs.python.org/3/library/shutil.html\" rel=\"noreferrer\"><code>shutil</code></a> has many methods you can use. One of which is:</p>\n\n<pre><code>from shutil import copyfile\n\ncopyfile(src, dst)\n</code></pre>\n\n<p>Copy the contents of the file named <code>src</code> to a file named <code>dst</code>. The destination location must be writable; otherwise, an <code>IOError</code> exception will be raised. If <code>dst</code> already exists, it will be replaced. Special files such as character or block devices and pipes cannot be copied with this function. <code>src</code> and <code>dst</code> are path names given as strings. </p>\n"
    },
    "239": {
        "question_id": "2921847",
        "answer_id": "2921893",
        "question": "<p>What does the <code>*</code> operator mean in Python, such as in code like <code>zip(*x)</code> or <code>f(**k)</code>?</p>\n\n<ol>\n<li>How is it handled internally in the interpreter?</li>\n<li>Does it affect performance at all? Is it fast or slow?</li>\n<li>When is it useful and when is it not?</li>\n<li>Should it be used in a function declaration or in a call?</li>\n</ol>\n",
        "answer": "<p>The single star <code>*</code> unpacks the sequence/collection into positional arguments, so you can do this:</p>\n\n<pre><code>def sum(a, b):\n    return a + b\n\nvalues = (1, 2)\n\ns = sum(*values)\n</code></pre>\n\n<p>This will unpack the tuple so that it actually executes as:</p>\n\n<pre><code>s = sum(1, 2)\n</code></pre>\n\n<p>The double star <code>**</code> does the same, only using a dictionary and thus named arguments:</p>\n\n<pre><code>values = { 'a': 1, 'b': 2 }\ns = sum(**values)\n</code></pre>\n\n<p>You can also combine:</p>\n\n<pre><code>def sum(a, b, c, d):\n    return a + b + c + d\n\nvalues1 = (1, 2)\nvalues2 = { 'c': 10, 'd': 15 }\ns = sum(*values1, **values2)\n</code></pre>\n\n<p>will execute as:                                     </p>\n\n<pre><code>s = sum(1, 2, c=10, d=15)\n</code></pre>\n\n<p>Also see section <a href=\"http://docs.python.org/tutorial/controlflow.html#unpacking-argument-lists\" rel=\"noreferrer\">4.7.4 - Unpacking Argument Lists</a> of the Python documentation.</p>\n\n<hr>\n\n<p>Additionally you can define functions to take <code>*x</code> and <code>**y</code> arguments, this allows a function to accept any number of positional and/or named arguments that aren't specifically named in the declaration.</p>\n\n<p>Example:</p>\n\n<pre><code>def sum(*values):\n    s = 0\n    for v in values:\n        s = s + v\n    return s\n\ns = sum(1, 2, 3, 4, 5)\n</code></pre>\n\n<p>or with <code>**</code>:</p>\n\n<pre><code>def get_a(**values):\n    return values['a']\n\ns = get_a(a=1, b=2)      # returns 1\n</code></pre>\n\n<p>this can allow you to specify a large number of optional parameters without having to declare them.</p>\n\n<p>And again, you can combine:</p>\n\n<pre><code>def sum(*values, **options):\n    s = 0\n    for i in values:\n        s = s + i\n    if \"neg\" in options:\n        if options[\"neg\"]:\n            s = -s\n    return s\n\ns = sum(1, 2, 3, 4, 5)            # returns 15\ns = sum(1, 2, 3, 4, 5, neg=True)  # returns -15\ns = sum(1, 2, 3, 4, 5, neg=False) # returns 15\n</code></pre>\n"
    },
    "240": {
        "question_id": "306400",
        "answer_id": "306417",
        "question": "<p>Assume I have the following list:</p>\n\n<pre><code>foo = ['a', 'b', 'c', 'd', 'e']\n</code></pre>\n\n<p>What is the simplest way to retrieve an item at random from this list?</p>\n",
        "answer": "<p>Use <a href=\"https://docs.python.org/library/random.html#random.choice\" rel=\"noreferrer\"><code>random.choice()</code></a></p>\n\n<pre><code>import random\n\nfoo = ['a', 'b', 'c', 'd', 'e']\nprint(random.choice(foo))\n</code></pre>\n\n<p>For cryptographically secure random choices (e.g. for generating a passphrase from a wordlist), use <a href=\"https://docs.python.org/library/random.html#random.SystemRandom\" rel=\"noreferrer\"><code>random.SystemRandom</code></a> class</p>\n\n<pre><code>import random\n\nfoo = ['battery', 'correct', 'horse', 'staple']\nsecure_random = random.SystemRandom()\nprint(secure_random.choice(foo))\n</code></pre>\n\n<p>or <a href=\"https://docs.python.org/library/secrets.html#secrets.choice\" rel=\"noreferrer\"><code>secrets.choice()</code></a></p>\n\n<pre><code>import secrets\nfoo = ['a', 'b', 'c', 'd', 'e']\nprint(secrets.choice(foo))\n</code></pre>\n"
    },
    "241": {
        "question_id": "674304",
        "answer_id": "674369",
        "question": "<p>I'm just trying to streamline one of my classes and have introduced some functionality in the same style as the <a href=\"https://en.wikipedia.org/wiki/Flyweight_pattern\" rel=\"noreferrer\">flyweight design pattern</a>.</p>\n\n<p>However, I'm a bit confused as to why <code>__init__</code> is always called after <code>__new__</code>. I wasn't expecting this. Can anyone tell me why this is happening and how I can implement this functionality otherwise? (Apart from putting the implementation into the <code>__new__</code> which feels quite hacky.)</p>\n\n<p>Here's an example:</p>\n\n<pre><code>class A(object):\n    _dict = dict()\n\n    def __new__(cls):\n        if 'key' in A._dict:\n            print \"EXISTS\"\n            return A._dict['key']\n        else:\n            print \"NEW\"\n            return super(A, cls).__new__(cls)\n\n    def __init__(self):\n        print \"INIT\"\n        A._dict['key'] = self\n        print \"\"\n\na1 = A()\na2 = A()\na3 = A()\n</code></pre>\n\n<p>Outputs:</p>\n\n<pre><code>NEW\nINIT\n\nEXISTS\nINIT\n\nEXISTS\nINIT\n</code></pre>\n\n<p>Why?</p>\n",
        "answer": "<blockquote>\n  <p>Use <strong>__new__</strong> when you need to control\n  the creation of a new instance. Use\n  <strong>__init__</strong> when you need to control initialization of a new instance.</p>\n  \n  <p><strong>__new__</strong> is the first step of instance creation.  It's called first, and is\n  responsible for returning a new\n  instance of your class.  In contrast,\n  <strong>__init__</strong> doesn't return anything; it's only responsible for initializing the\n  instance after it's been created.</p>\n  \n  <p>In general, you shouldn't need to\n  override <strong>__new__</strong> unless you're\n  subclassing an immutable type like\n  str, int, unicode or tuple.</p>\n</blockquote>\n\n<p>From: <a href=\"http://mail.python.org/pipermail/tutor/2008-April/061426.html\" rel=\"noreferrer\">http://mail.python.org/pipermail/tutor/2008-April/061426.html</a></p>\n\n<p>You should consider that what you are trying to do is usually done with a <a href=\"http://en.wikipedia.org/wiki/Factory_object\" rel=\"noreferrer\">Factory</a> and that's the best way to do it. Using <strong>__new__</strong> is not a good clean solution so please consider the usage of a factory. Here you have <a href=\"http://code.activestate.com/recipes/86900/\" rel=\"noreferrer\">a good factory example</a>.</p>\n"
    },
    "242": {
        "question_id": "2812520",
        "answer_id": "4910393",
        "question": "<p>Is there any way to make <code>pip</code> play well with multiple versions of Python? For example, I want to use <code>pip</code> to explicitly install things to either my site 2.5 installation or my site 2.6 installation.</p>\n\n<p>For example, with <code>easy_install</code>, I use <code>easy_install-2.{5,6}</code>.</p>\n\n<p>And, yes \u2014 I know about virtualenv, and no \u2014 it's not a solution to this particular problem.</p>\n",
        "answer": "<p>The <a href=\"https://packaging.python.org/guides/installing-using-pip-and-virtualenv/\" rel=\"noreferrer\">current recommendation</a> is to use <code>python -m pip</code>, where <code>python</code> is the version of Python you would like to use. This is the recommendation because it works across all versions of Python, and in all forms of virtualenv. For example:</p>\n\n<pre><code># The system default python:\n$ python -m pip install fish\n\n# A virtualenv's python:\n$ .env/bin/python -m pip install fish\n\n# A specific version of python:\n$ python-3.6 -m pip install fish\n</code></pre>\n\n<p>Previous answer, left for posterity:</p>\n\n<p>Since version 0.8, Pip supports <code>pip-{version}</code>. You can use it the same as <code>easy_install-{version}</code>:</p>\n\n<pre><code>$ pip-2.5 install myfoopackage\n$ pip-2.6 install otherpackage\n$ pip-2.7 install mybarpackage\n</code></pre>\n\n<hr>\n\n<p><strong>EDIT</strong>: pip changed its schema to use <code>pipVERSION</code> instead of <code>pip-VERSION</code> in version 1.5. You should use the following if you have <code>pip &gt;= 1.5</code>:</p>\n\n<pre><code>$ pip2.6 install otherpackage\n$ pip2.7 install mybarpackage\n</code></pre>\n\n<p>Check <a href=\"https://github.com/pypa/pip/pull/1053\" rel=\"noreferrer\">https://github.com/pypa/pip/pull/1053</a> for more details</p>\n\n<hr>\n\n<p>References:</p>\n\n<ul>\n<li><a href=\"https://github.com/pypa/pip/issues/200\" rel=\"noreferrer\">https://github.com/pypa/pip/issues/200</a></li>\n<li><a href=\"http://www.pip-installer.org/docs/pip/en/0.8.3/news.html#id4\" rel=\"noreferrer\">http://www.pip-installer.org/docs/pip/en/0.8.3/news.html#id4</a></li>\n</ul>\n"
    },
    "243": {
        "question_id": "3121979",
        "answer_id": "3121985",
        "question": "<p>I have some data either in a list of lists or a list of tuples, like this:</p>\n\n<pre><code>data = [[1,2,3], [4,5,6], [7,8,9]]\ndata = [(1,2,3), (4,5,6), (7,8,9)]\n</code></pre>\n\n<p>And I want to sort by the 2nd element in the subset. Meaning, sorting by 2,5,8 where <code>2</code> is from <code>(1,2,3)</code>, <code>5</code> is from <code>(4,5,6)</code>. What is the common way to do this? Should I store tuples or lists in my list?</p>\n",
        "answer": "<pre><code>sorted_by_second = sorted(data, key=lambda tup: tup[1])\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>data.sort(key=lambda tup: tup[1])  # sorts in place\n</code></pre>\n"
    },
    "244": {
        "question_id": "2465921",
        "answer_id": "2465932",
        "question": "<p>Can someone please explain this to me? This doesn't make any sense to me.</p>\n\n<p>I copy a dictionary into another and edit the second and both are changed. Why is this happening?</p>\n\n<pre><code>&gt;&gt;&gt; dict1 = {\"key1\": \"value1\", \"key2\": \"value2\"}\n&gt;&gt;&gt; dict2 = dict1\n&gt;&gt;&gt; dict2\n{'key2': 'value2', 'key1': 'value1'}\n&gt;&gt;&gt; dict2[\"key2\"] = \"WHY?!\"\n&gt;&gt;&gt; dict1\n{'key2': 'WHY?!', 'key1': 'value1'}\n</code></pre>\n",
        "answer": "<p>Python <em>never</em> implicitly copies objects. When you set <code>dict2 = dict1</code>, you are making them refer to the same exact dict object, so when you mutate it, all references to it keep referring to the object in its current state.</p>\n\n<p>If you want to copy the dict (which is rare), you have to do so explicitly with</p>\n\n<pre><code>dict2 = dict(dict1)\n</code></pre>\n\n<p>or</p>\n\n<pre><code>dict2 = dict1.copy()\n</code></pre>\n"
    },
    "245": {
        "question_id": "189645",
        "answer_id": "189685",
        "question": "<p>Given the following code (that doesn't work):</p>\n\n<pre><code>while True:\n    #snip: print out current state\n    while True:\n        ok = get_input(\"Is this ok? (y/n)\")\n        if ok.lower() == \"y\": break 2 #this doesn't work :(\n        if ok.lower() == \"n\": break\n    #do more processing with menus and stuff\n</code></pre>\n\n<p>Is there a way to make this work? Or do I have do one check to break out of the input loop, then another, more limited, check in the outside loop to break out all together if the user is satisfied?</p>\n",
        "answer": "<p>My first instinct would be to refactor the nested loop into a function and use <code>return</code> to break out. </p>\n"
    },
    "246": {
        "question_id": "2580136",
        "answer_id": "2580142",
        "question": "<p>Does Python support short-circuiting in boolean expressions?</p>\n",
        "answer": "<p>Yep, both <code>and</code> and <code>or</code> operators short-circuit -- see <a href=\"http://docs.python.org/library/stdtypes.html?highlight=short%20circuit#boolean-operations-and-or-not\" rel=\"noreferrer\">the docs</a>.</p>\n"
    },
    "247": {
        "question_id": "110259",
        "answer_id": "110826",
        "question": "<p>I want to know the memory usage of my Python application and specifically want to know what code blocks/portions or objects are consuming most memory.\nGoogle search shows a commercial one is <a href=\"http://www.softwareverify.com/python/memory/index.html\" rel=\"noreferrer\">Python Memory Validator</a> (Windows only).</p>\n\n<p>And open source ones are <a href=\"http://pysizer.8325.org/\" rel=\"noreferrer\">PySizer</a> and <a href=\"http://guppy-pe.sourceforge.net/#Heapy\" rel=\"noreferrer\">Heapy</a>.</p>\n\n<p>I haven't tried anyone, so I wanted to know which one is the best considering:</p>\n\n<ol>\n<li><p>Gives most details.</p></li>\n<li><p>I have to do least or no changes to my code.</p></li>\n</ol>\n",
        "answer": "<p><a href=\"http://guppy-pe.sourceforge.net/\" rel=\"noreferrer\">Heapy</a> is quite simple to use. At some point in your code, you have to write the following:</p>\n\n<pre><code>from guppy import hpy\nh = hpy()\nprint h.heap()\n</code></pre>\n\n<p>This gives you some output like this:</p>\n\n<pre><code>Partition of a set of 132527 objects. Total size = 8301532 bytes.\nIndex  Count   %     Size   % Cumulative  % Kind (class / dict of class)\n0  35144  27  2140412  26   2140412  26 str\n1  38397  29  1309020  16   3449432  42 tuple\n2    530   0   739856   9   4189288  50 dict (no owner)\n</code></pre>\n\n<p>You can also find out from where objects are referenced and get statistics about that, but somehow the docs on that are a bit sparse.</p>\n\n<p>There is a graphical browser as well, written in Tk.</p>\n"
    },
    "248": {
        "question_id": "517923",
        "answer_id": "2633310",
        "question": "<p>I have a Unicode string in Python, and I would like to remove all the accents (diacritics).</p>\n\n<p>I found on the Web an elegant way to do this in Java:</p>\n\n<ol>\n<li>convert the Unicode string to its long normalized form (with a separate character for letters and diacritics)</li>\n<li>remove all the characters whose Unicode type is \"diacritic\".</li>\n</ol>\n\n<p>Do I need to install a library such as pyICU or is this possible with just the python standard library?  And what about python 3?</p>\n\n<p>Important note: I would like to avoid code with an explicit mapping from accented characters to their non-accented counterpart.</p>\n",
        "answer": "<p><a href=\"https://pypi.python.org/pypi/Unidecode\" rel=\"noreferrer\">Unidecode</a> is the correct answer for this. It transliterates any unicode string into the closest possible representation in ascii text.</p>\n\n<p>Example:</p>\n\n<pre><code>accented_string = u'M\u00e1laga'\n# accented_string is of type 'unicode'\nimport unidecode\nunaccented_string = unidecode.unidecode(accented_string)\n# unaccented_string contains 'Malaga'and is of type 'str'\n</code></pre>\n"
    },
    "249": {
        "question_id": "12453580",
        "answer_id": "12453584",
        "question": "<p>Is there a simpler way to concatenate string items in list into a single string?</p>\n\n<p>Can I use the <code>str.join()</code> function to join items in list?</p>\n\n<p>E.g. this is the input <code>['this','is','a','sentence']</code> and this is the desired output <code>this-is-a-sentence</code></p>\n\n<pre><code>sentence = ['this','is','a','sentence']\nsent_str = \"\"\nfor i in sentence:\n    sent_str += str(i) + \"-\"\nsent_str = sent_str[:-1]\nprint sent_str\n</code></pre>\n",
        "answer": "<p>Use <a href=\"http://docs.python.org/library/stdtypes.html#str.join\"><code>join</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; sentence = ['this','is','a','sentence']\n&gt;&gt;&gt; '-'.join(sentence)\n'this-is-a-sentence'\n</code></pre>\n"
    },
    "250": {
        "question_id": "6116978",
        "answer_id": "6117124",
        "question": "<p>I would like to use the .replace function to replace multiple strings.</p>\n\n<p>I currently have  </p>\n\n<pre><code>string.replace(\"condition1\", \"\")\n</code></pre>\n\n<p>but would like to have something like</p>\n\n<pre><code>string.replace(\"condition1\", \"\").replace(\"condition2\", \"text\")\n</code></pre>\n\n<p>although that does not feel like good syntax</p>\n\n<p>what is the proper way to do this? kind of like how in grep/regex you can do <code>\\1</code> and <code>\\2</code> to replace fields to certain search strings</p>\n",
        "answer": "<p>Here is a short example that should do the trick with regular expressions:</p>\n\n<pre><code>import re\n\nrep = {\"condition1\": \"\", \"condition2\": \"text\"} # define desired replacements here\n\n# use these three lines to do the replacement\nrep = dict((re.escape(k), v) for k, v in rep.iteritems()) \n#Python 3 renamed dict.iteritems to dict.items so use rep.items() for latest versions\npattern = re.compile(\"|\".join(rep.keys()))\ntext = pattern.sub(lambda m: rep[re.escape(m.group(0))], text)\n</code></pre>\n\n<p>For example:</p>\n\n<pre><code>&gt;&gt;&gt; pattern.sub(lambda m: rep[re.escape(m.group(0))], \"(condition1) and --condition2--\")\n'() and --text--'\n</code></pre>\n"
    },
    "251": {
        "question_id": "7129285",
        "answer_id": "7129293",
        "question": "<p>What is the simple basic explanation of what the return statement is, how to use it in Python?</p>\n\n<p>And what is the difference between it and the <code>print</code> statement?</p>\n",
        "answer": "<p>The <code>print()</code> function writes, i.e., \"prints\", a string in the console. The <code>return</code> statement causes your function to exit and hand back a value to its caller. The point of functions in general is to take in inputs and return something. The <code>return</code> statement is used when a function is ready to return a value to its caller. </p>\n\n<p>For example, here's a function utilizing both <code>print()</code> and <code>return</code>:</p>\n\n<pre><code>def foo():\n    print(\"hello from inside of foo\")\n    return 1\n</code></pre>\n\n<p>Now you can run code that calls foo, like so:</p>\n\n<pre><code>if __name__ == '__main__':\n    print(\"going to call foo\")\n    x = foo()\n    print(\"called foo\")\n    print(\"foo returned \" + str(x))\n</code></pre>\n\n<p>If you run this as a script (e.g. a <code>.py</code> file) as opposed to in the Python interpreter, you will get the following output:</p>\n\n<pre><code>going to call foo\nhello from inside foo\ncalled foo   \nfoo returned 1\n</code></pre>\n\n<p>I hope this makes it clearer. The interpreter writes return values to the console so I can see why somebody could be confused.</p>\n\n<p>Here's another example from the interpreter that demonstrates that:</p>\n\n<pre><code>&gt;&gt;&gt; def foo():\n...     print(\"hello from within foo\")\n...     return 1\n...\n&gt;&gt;&gt; foo()\nhello from within foo\n1\n&gt;&gt;&gt; def bar():\n...   return 10 * foo()\n...\n&gt;&gt;&gt; bar()\nhello from within foo\n10\n</code></pre>\n\n<p>You can see that when <code>foo()</code> is called from <code>bar()</code>, 1 isn't written to the console. Instead it is used to calculate the value returned from <code>bar()</code>.  </p>\n\n<p><code>print()</code> is a function that causes a side effect (it writes a string in the console), but execution resumes with the next statement. <code>return</code> causes the function to stop executing and hand a value back to whatever called it.</p>\n"
    },
    "252": {
        "question_id": "19913659",
        "answer_id": "19913845",
        "question": "<p>I have a dataframe along the lines of the below:</p>\n\n<pre><code>    Type       Set\n1    A          Z\n2    B          Z           \n3    B          X\n4    C          Y\n</code></pre>\n\n<p>I want to add another column to the dataframe (or generate a series) of the same length as the dataframe (= equal number of records/rows) which sets a colour green if Set = 'Z' and 'red' if Set = otherwise.</p>\n\n<p>What's the best way to do this?</p>\n",
        "answer": "<p><strong>If you only have two choices to select from:</strong></p>\n\n<pre><code>df['color'] = np.where(df['Set']=='Z', 'green', 'red')\n</code></pre>\n\n<hr>\n\n<p>For example,</p>\n\n<pre><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'Type':list('ABBC'), 'Set':list('ZZXY')})\ndf['color'] = np.where(df['Set']=='Z', 'green', 'red')\nprint(df)\n</code></pre>\n\n<p>yields</p>\n\n<pre><code>  Set Type  color\n0   Z    A  green\n1   Z    B  green\n2   X    B    red\n3   Y    C    red\n</code></pre>\n\n<hr>\n\n<p><strong>If you have more than two conditions then use <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.select.html\" rel=\"noreferrer\"><code>np.select</code></a></strong>. For example, if you want <code>color</code> to be </p>\n\n<ul>\n<li><code>yellow</code> when <code>(df['Set'] == 'Z') &amp; (df['Type'] == 'A')</code></li>\n<li>otherwise <code>blue</code> when <code>(df['Set'] == 'Z') &amp; (df['Type'] == 'B')</code> </li>\n<li>otherwise <code>purple</code> when <code>(df['Type'] == 'B')</code></li>\n<li>otherwise <code>black</code>,</li>\n</ul>\n\n<p>then use</p>\n\n<pre><code>df = pd.DataFrame({'Type':list('ABBC'), 'Set':list('ZZXY')})\nconditions = [\n    (df['Set'] == 'Z') &amp; (df['Type'] == 'A'),\n    (df['Set'] == 'Z') &amp; (df['Type'] == 'B'),\n    (df['Type'] == 'B')]\nchoices = ['yellow', 'blue', 'purple']\ndf['color'] = np.select(conditions, choices, default='black')\nprint(df)\n</code></pre>\n\n<p>which yields</p>\n\n<pre><code>  Set Type   color\n0   Z    A  yellow\n1   Z    B    blue\n2   X    B  purple\n3   Y    C   black\n</code></pre>\n"
    },
    "253": {
        "question_id": "6294179",
        "answer_id": "6294205",
        "question": "<p><a href=\"https://docs.python.org/2/tutorial/datastructures.html#more-on-lists\" rel=\"noreferrer\"><code>index()</code></a> will just give the first occurrence of an item in a list. Is there a neat trick which returns all indices in a list?</p>\n",
        "answer": "<p>You can use a list comprehension:</p>\n\n<pre><code>indices = [i for i, x in enumerate(my_list) if x == \"whatever\"]\n</code></pre>\n"
    },
    "254": {
        "question_id": "19151",
        "answer_id": "24377",
        "question": "<p>How would one create an iterative function (or iterator object) in python?</p>\n",
        "answer": "<p>Iterator objects in python conform to the iterator protocol, which basically means they provide two methods: <code>__iter__()</code>  and  <code>__next__()</code>.  The <code>__iter__</code> returns the iterator object and is implicitly called at the start of loops.  The <code>__next__()</code> method returns the next value and is implicitly called at each loop increment.  <code>__next__()</code> raises a StopIteration exception when there are no more value to return, which is implicitly captured by looping constructs to stop iterating.</p>\n\n<p>Here's a simple example of a counter:</p>\n\n<pre><code>class Counter:\n    def __init__(self, low, high):\n        self.current = low\n        self.high = high\n\n    def __iter__(self):\n        return self\n\n    def __next__(self): # Python 2: def next(self)\n        if self.current &gt; self.high:\n            raise StopIteration\n        else:\n            self.current += 1\n            return self.current - 1\n\n\nfor c in Counter(3, 8):\n    print c\n</code></pre>\n\n<p>This will print:</p>\n\n<pre><code>3\n4\n5\n6\n7\n8\n</code></pre>\n\n<p>This is easier to write using a generator, as covered in a previous answer:</p>\n\n<pre><code>def counter(low, high):\n    current = low\n    while current &lt;= high:\n        yield current\n        current += 1\n\nfor c in counter(3, 8):\n    print c\n</code></pre>\n\n<p>The printed output will be the same.  Under the hood, the generator object supports the iterator protocol and does something roughly similar to the class Counter.</p>\n\n<p>David Mertz's article, <a href=\"https://www.ibm.com/developerworks/library/l-pycon/\" rel=\"nofollow noreferrer\">Iterators and Simple Generators</a>, is a pretty good introduction. </p>\n"
    },
    "255": {
        "question_id": "268272",
        "answer_id": "268285",
        "question": "<p>I have a <code>dictionary</code>: keys are strings, values are integers.</p>\n\n<p>Example: </p>\n\n<pre><code>stats = {'a':1000, 'b':3000, 'c': 100}\n</code></pre>\n\n<p>I'd like to get <code>'b'</code> as an answer, since it's the key with a higher value.</p>\n\n<p>I did the following, using an intermediate list with reversed key-value tuples:</p>\n\n<pre><code>inverse = [(value, key) for key, value in stats.items()]\nprint max(inverse)[1]\n</code></pre>\n\n<p>Is that one the better (or even more elegant) approach?</p>\n",
        "answer": "<p>You can use <code>operator.itemgetter</code> for that:</p>\n\n<pre><code>import operator\nstats = {'a':1000, 'b':3000, 'c': 100}\nmax(stats.iteritems(), key=operator.itemgetter(1))[0]\n</code></pre>\n\n<p>And instead of building a new list in memory use <code>stats.iteritems()</code>. The <code>key</code> parameter to the <code>max()</code> function is a function that computes a key that is used to determine how to rank items.</p>\n\n<p>Please note that if you were to have another key-value pair 'd': 3000 that this method will only return <strong>one</strong> of the <strong>two</strong> even though they both have the maximum value. </p>\n\n<pre><code>&gt;&gt;&gt; import operator\n&gt;&gt;&gt; stats = {'a':1000, 'b':3000, 'c': 100, 'd':3000}\n&gt;&gt;&gt; max(stats.iteritems(), key=operator.itemgetter(1))[0]\n'b' \n</code></pre>\n\n<p>If using Python3:</p>\n\n<pre><code>&gt;&gt;&gt; max(stats.items(), key=operator.itemgetter(1))[0]\n'b'\n</code></pre>\n"
    },
    "256": {
        "question_id": "3679694",
        "answer_id": "26196078",
        "question": "<p>I needed to write a weighted version of random.choice (each element in the list has a different probability for being selected).  This is what I came up with:</p>\n\n<pre><code>def weightedChoice(choices):\n    \"\"\"Like random.choice, but each element can have a different chance of\n    being selected.\n\n    choices can be any iterable containing iterables with two items each.\n    Technically, they can have more than two items, the rest will just be\n    ignored.  The first item is the thing being chosen, the second item is\n    its weight.  The weights can be any numeric values, what matters is the\n    relative differences between them.\n    \"\"\"\n    space = {}\n    current = 0\n    for choice, weight in choices:\n        if weight &gt; 0:\n            space[current] = choice\n            current += weight\n    rand = random.uniform(0, current)\n    for key in sorted(space.keys() + [current]):\n        if rand &lt; key:\n            return choice\n        choice = space[key]\n    return None\n</code></pre>\n\n<p>This function seems overly complex to me, and ugly.  I'm hoping everyone here can offer some suggestions on improving it or alternate ways of doing this.  Efficiency isn't as important to me as code cleanliness and readability.</p>\n",
        "answer": "<p>Since version 1.7.0, NumPy has a <a href=\"https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.random.choice.html\" rel=\"noreferrer\"><code>choice</code></a> function that supports probability distributions.</p>\n\n<pre><code>from numpy.random import choice\ndraw = choice(list_of_candidates, number_of_items_to_pick,\n              p=probability_distribution)\n</code></pre>\n\n<p>Note that <code>probability_distribution</code> is a sequence in the same order of <code>list_of_candidates</code>. You can also use the keyword <code>replace=False</code> to change the behavior so that drawn items are not replaced.</p>\n"
    },
    "257": {
        "question_id": "24870953",
        "answer_id": "24871316",
        "question": "<p>I have noticed very poor performance when using iterrows from pandas.</p>\n\n<p>Is this something that is experienced by others? Is it specific to iterrows and should this function be avoided for data of a certain size (I'm working with 2-3 million rows)?</p>\n\n<p><a href=\"https://github.com/pydata/pandas/issues/7683\">This discussion</a> on GitHub led me to believe it is caused when mixing dtypes in the dataframe, however the simple example below shows it is there even when using one dtype (float64). This takes 36 seconds on my machine:</p>\n\n<pre><code>import pandas as pd\nimport numpy as np\nimport time\n\ns1 = np.random.randn(2000000)\ns2 = np.random.randn(2000000)\ndfa = pd.DataFrame({'s1': s1, 's2': s2})\n\nstart = time.time()\ni=0\nfor rowindex, row in dfa.iterrows():\n    i+=1\nend = time.time()\nprint end - start\n</code></pre>\n\n<p>Why are vectorized operations like apply so much quicker? I imagine there must be some row by row iteration going on there too. </p>\n\n<p>I cannot figure out how to not use iterrows in my case (this I'll save for a future question). Therefore I would appreciate hearing if you have consistently been able to avoid this iteration. I'm making calculations based on data in separate dataframes. Thank you!</p>\n\n<p>---Edit: simplified version of what I want to run has been added below---</p>\n\n<pre><code>import pandas as pd\nimport numpy as np\n\n#%% Create the original tables\nt1 = {'letter':['a','b'],\n      'number1':[50,-10]}\n\nt2 = {'letter':['a','a','b','b'],\n      'number2':[0.2,0.5,0.1,0.4]}\n\ntable1 = pd.DataFrame(t1)\ntable2 = pd.DataFrame(t2)\n\n#%% Create the body of the new table\ntable3 = pd.DataFrame(np.nan, columns=['letter','number2'], index=[0])\n\n#%% Iterate through filtering relevant data, optimizing, returning info\nfor row_index, row in table1.iterrows():   \n    t2info = table2[table2.letter == row['letter']].reset_index()\n    table3.ix[row_index,] = optimize(t2info,row['number1'])\n\n#%% Define optimization\ndef optimize(t2info, t1info):\n    calculation = []\n    for index, r in t2info.iterrows():\n        calculation.append(r['number2']*t1info)\n    maxrow = calculation.index(max(calculation))\n    return t2info.ix[maxrow]\n</code></pre>\n",
        "answer": "<p>Generally, <code>iterrows</code> should only be used in very very specific cases. This is the general order of precedence for performance of various operations:</p>\n\n<pre><code>1) vectorization\n2) using a custom cython routine\n3) apply\n    a) reductions that can be performed in cython\n    b) iteration in python space\n4) itertuples\n5) iterrows\n6) updating an empty frame (e.g. using loc one-row-at-a-time)\n</code></pre>\n\n<p>Using a custom cython routine is usually too complicated, so let's skip that for now.</p>\n\n<p>1) Vectorization is ALWAYS ALWAYS the first and best choice. However,  there are a small set of cases which cannot be vectorized in obvious ways (mostly involving a recurrence). Further, on a smallish frame, it may be faster to do other methods.</p>\n\n<p>3) Apply involves <em>can</em> usually be done by an iterator in Cython space (this is done internally in pandas) (this is a) case.</p>\n\n<p>This is dependent on what is going on inside the apply expression. e.g. <code>df.apply(lambda x: np.sum(x))</code> will be executed pretty swiftly (of course <code>df.sum(1)</code> is even better). However something like: <code>df.apply(lambda x: x['b'] + 1)</code> will be executed in python space, and consequently is slower.</p>\n\n<p>4) <code>itertuples</code> does not box the data into a Series, just returns it as a tuple</p>\n\n<p>5) <code>iterrows</code> DOES box the data into a Series. Unless you really need this, use another method.</p>\n\n<p>6) updating an empty frame a-single-row-at-a-time. I have seen this method used WAY too much. It is by far the slowest. It is probably common place (and reasonably fast for some python structures), but a DataFrame does a fair number of checks on indexing, so this will always be very slow to update a row at a time. Much better to create new structures and <code>concat</code>.</p>\n"
    },
    "258": {
        "question_id": "7301110",
        "answer_id": "7301126",
        "question": "<p>I've been able to verify that the <code>findUniqueWords</code> does result in a sorted <code>list</code>. However, it does not <code>return</code> the <code>list</code>, why?</p>\n\n<pre><code>def findUniqueWords(theList):\n    newList = []\n    words = []\n    # Read a line at a time\n    for item in theList:\n        # Remove any punctuation from the line\n        cleaned = cleanUp(item)\n        # Split the line into separate words\n        words = cleaned.split()\n        # Evaluate each word\n        for word in words:\n            # Count each unique word\n            if word not in newList:\n                newList.append(word)    \n    answer = newList.sort()\n    return answer\n</code></pre>\n",
        "answer": "<p><code>list.sort</code> sorts the list in place, i.e. it doesn't return a new list. Just write</p>\n\n<pre><code>newList.sort()\nreturn newList\n</code></pre>\n"
    },
    "259": {
        "question_id": "6760685",
        "answer_id": "6798042",
        "question": "<p><em>This question is not for the discussion of whether or not the <a href=\"http://en.wikipedia.org/wiki/Singleton_pattern\" rel=\"noreferrer\">singleton design pattern</a> is desirable, is an anti-pattern, or for any religious wars, but to discuss how this pattern is best implemented in Python in such a way that is most pythonic. In this instance I define 'most pythonic' to mean that it follows the 'principle of least astonishment'</em>.</p>\n\n<p>I have multiple classes which would become singletons (my use-case is for a logger, but this is not important). I do not wish to clutter several classes with added gumph when I can simply inherit or decorate.</p>\n\n<p>Best methods:</p>\n\n<hr>\n\n<h2>Method 1: A decorator</h2>\n\n<pre><code>def singleton(class_):\n    instances = {}\n    def getinstance(*args, **kwargs):\n        if class_ not in instances:\n            instances[class_] = class_(*args, **kwargs)\n        return instances[class_]\n    return getinstance\n\n@singleton\nclass MyClass(BaseClass):\n    pass\n</code></pre>\n\n<p>Pros</p>\n\n<ul>\n<li>Decorators are additive in a way that is often more intuitive than multiple inheritance.</li>\n</ul>\n\n<p>Cons</p>\n\n<ul>\n<li>While objects created using MyClass() would be true singleton objects, MyClass itself is a a function, not a class, so you cannot call class methods from it. Also for <code>m = MyClass(); n = MyClass(); o = type(n)();</code> then <code>m == n &amp;&amp; m != o &amp;&amp; n != o</code></li>\n</ul>\n\n<hr>\n\n<h2>Method 2: A base class</h2>\n\n<pre><code>class Singleton(object):\n    _instance = None\n    def __new__(class_, *args, **kwargs):\n        if not isinstance(class_._instance, class_):\n            class_._instance = object.__new__(class_, *args, **kwargs)\n        return class_._instance\n\nclass MyClass(Singleton, BaseClass):\n    pass\n</code></pre>\n\n<p>Pros</p>\n\n<ul>\n<li>It's a true class</li>\n</ul>\n\n<p>Cons</p>\n\n<ul>\n<li>Multiple inheritance - eugh! <code>__new__</code> could be overwritten during inheritance from a second base class? One has to think more than is necessary.</li>\n</ul>\n\n<hr>\n\n<h2>Method 3: A <a href=\"https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python\">metaclass</a></h2>\n\n<pre><code>class Singleton(type):\n    _instances = {}\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)\n        return cls._instances[cls]\n\n#Python2\nclass MyClass(BaseClass):\n    __metaclass__ = Singleton\n\n#Python3\nclass MyClass(BaseClass, metaclass=Singleton):\n    pass\n</code></pre>\n\n<p>Pros</p>\n\n<ul>\n<li>It's a true class</li>\n<li>Auto-magically covers inheritance</li>\n<li>Uses <code>__metaclass__</code> for its proper purpose (and made me aware of it)</li>\n</ul>\n\n<p>Cons</p>\n\n<ul>\n<li>Are there any?</li>\n</ul>\n\n<hr>\n\n<h2>Method 4: decorator returning a class with the same name</h2>\n\n<pre><code>def singleton(class_):\n    class class_w(class_):\n        _instance = None\n        def __new__(class_, *args, **kwargs):\n            if class_w._instance is None:\n                class_w._instance = super(class_w,\n                                    class_).__new__(class_,\n                                                    *args,\n                                                    **kwargs)\n                class_w._instance._sealed = False\n            return class_w._instance\n        def __init__(self, *args, **kwargs):\n            if self._sealed:\n                return\n            super(class_w, self).__init__(*args, **kwargs)\n            self._sealed = True\n    class_w.__name__ = class_.__name__\n    return class_w\n\n@singleton\nclass MyClass(BaseClass):\n    pass\n</code></pre>\n\n<p>Pros</p>\n\n<ul>\n<li>It's a true class</li>\n<li>Auto-magically covers inheritance</li>\n</ul>\n\n<p>Cons</p>\n\n<ul>\n<li>Is there not an overhead for creating each new class? Here we are creating two classes for each class we wish to make a singleton. While this is fine in my case, I worry that this might not scale. Of course there is a matter of debate as to whether it aught to be too easy to scale this pattern...</li>\n<li>What is the point of the <code>_sealed</code> attribute</li>\n<li>Can't call methods of the same name on base classes using <code>super()</code> because they will recurse. This means you can't customize <code>__new__</code> and can't subclass a class that needs you to call up to <code>__init__</code>.</li>\n</ul>\n",
        "answer": "<h2>Use a Metaclass</h2>\n\n<p>I would recommend <strong>Method #2</strong>, but you're better off using a <strong>metaclass</strong> than a base class. Here is a sample implementation:</p>\n\n<pre><code>class Singleton(type):\n    _instances = {}\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)\n        return cls._instances[cls]\n\nclass Logger(object):\n    __metaclass__ = Singleton\n</code></pre>\n\n<p>Or in Python3</p>\n\n<pre><code>class Logger(metaclass=Singleton):\n    pass\n</code></pre>\n\n<p>If you want to run <code>__init__</code> every time the class is called, add</p>\n\n<pre><code>        else:\n            cls._instances[cls].__init__(*args, **kwargs)\n</code></pre>\n\n<p>to the <code>if</code> statement in <code>Singleton.__call__</code>.</p>\n\n<p>A few words about metaclasses. A metaclass is the <strong>class of a class</strong>; that is, a class is an <strong>instance of its metaclass</strong>. You find the metaclass of an object in Python with <code>type(obj)</code>. Normal new-style classes are of type <code>type</code>. <code>Logger</code> in the code above will be of type <code>class 'your_module.Singleton'</code>, just as the (only) instance of <code>Logger</code> will be of type <code>class 'your_module.Logger'</code>. When you call logger with <code>Logger()</code>, Python first asks the metaclass of <code>Logger</code>, <code>Singleton</code>, what to do, allowing instance creation to be pre-empted. This process is the same as Python asking a class what to do by calling <code>__getattr__</code> when you reference one of it's attributes by doing <code>myclass.attribute</code>.</p>\n\n<p>A metaclass essentially decides <strong>what the definition of a class means</strong> and how to implement that definition. See for example <a href=\"http://code.activestate.com/recipes/498149/\" rel=\"noreferrer\">http://code.activestate.com/recipes/498149/</a>, which essentially recreates C-style <code>struct</code>s in Python using metaclasses. The thread <a href=\"https://stackoverflow.com/questions/392160/what-are-your-concrete-use-cases-for-metaclasses-in-python\">What are your (concrete) use-cases for metaclasses in Python?</a> also provides some examples, they generally seem to be related to declarative programming, especially as used in ORMs.</p>\n\n<p>In this situation, if you use your <strong>Method #2</strong>, and a subclass defines a <code>__new__</code> method, it will be <strong>executed every time</strong> you call <code>SubClassOfSingleton()</code> -- because it is responsible for calling the method that returns the stored instance. With a metaclass, it will <strong>only be called once</strong>, when the only instance is created. You want to <strong>customize what it means to call the class</strong>, which is decided by it's type.</p>\n\n<p>In general, it <strong>makes sense</strong> to use a metaclass to implement a singleton. A singleton is special because is <strong>created only once</strong>, and a metaclass is the way you customize the <strong>creation of a class</strong>. Using a metaclass gives you <strong>more control</strong> in case you need to customize the singleton class definitions in other ways.</p>\n\n<p>Your singletons <strong>won't need multiple inheritance</strong> (because the metaclass is not a base class), but for <strong>subclasses of the created class</strong> that use multiple inheritance, you need to make sure the singleton class is the <strong>first / leftmost</strong> one with a metaclass that redefines <code>__call__</code> This is very unlikely to be an issue. The instance dict is <strong>not in the instance's namespace</strong> so it won't accidentally overwrite it.</p>\n\n<p>You will also hear that the singleton pattern violates the \"Single Responsibility Principle\" -- each class should do <strong>only one thing</strong>. That way you don't have to worry about messing up one thing the code does if you need to change another, because they are separate and encapsulated. The metaclass implementation <strong>passes this test</strong>. The metaclass is responsible for <strong>enforcing the pattern</strong> and the created class and subclasses need not be <strong>aware that they are singletons</strong>. <strong>Method #1</strong> fails this test, as you noted with \"MyClass itself is a a function, not a class, so you cannot call class methods from it.\"</p>\n\n<h1>Python 2 and 3 Compatible Version</h1>\n\n<p>Writing something that works in both Python2 and 3 requires using a slightly more complicated scheme. Since metaclasses are usually subclasses of type <code>type</code>, it's possible to use one to dynamically create an intermediary base class at run time with it as its metaclass and then use <em>that</em> as the baseclass of the public <code>Singleton</code> base class. It's harder to explain than to do, as illustrated next:</p>\n\n<pre><code># works in Python 2 &amp; 3\nclass _Singleton(type):\n    \"\"\" A metaclass that creates a Singleton base class when called. \"\"\"\n    _instances = {}\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super(_Singleton, cls).__call__(*args, **kwargs)\n        return cls._instances[cls]\n\nclass Singleton(_Singleton('SingletonMeta', (object,), {})): pass\n\nclass Logger(Singleton):\n    pass\n</code></pre>\n\n<p>An ironic aspect of this approach is that it's using subclassing to implement a metaclass. One possible advantage is that, unlike with a pure metaclass, <code>isinstance(inst, Singleton)</code> will return <code>True</code>.</p>\n\n<h2>Corrections</h2>\n\n<p>On another topic, you've probably already noticed this, but the base class implementation in your original post is wrong. <code>_instances</code> needs to be <strong>referenced on the class</strong>, you need to use <code>super()</code> or you're <strong>recursing</strong>, and <code>__new__</code> is actually a static method that you have to <strong>pass the class to</strong>, not a class method, as the actual class <strong>hasn't been created</strong> yet when it is called. All of these things will be true for a metaclass implementation as well.</p>\n\n<pre><code>class Singleton(object):\n  _instances = {}\n  def __new__(class_, *args, **kwargs):\n    if class_ not in class_._instances:\n        class_._instances[class_] = super(Singleton, class_).__new__(class_, *args, **kwargs)\n    return class_._instances[class_]\n\nclass MyClass(Singleton):\n  pass\n\nc = MyClass()\n</code></pre>\n\n<h2>Decorator Returning A Class</h2>\n\n<p>I originally was writing a comment but it was too long, so I'll add this here. <strong>Method #4</strong> is better than the other decorator version, but it's more code than needed for a singleton, and it's not as clear what it does. </p>\n\n<p>The main problems stem from the class being it's own base class. First, isn't it weird to have a class be a subclass of a nearly identical class with the same name that exists only in its <code>__class__</code> attribute? This also means that you can't define <strong>any methods that call the method of the same name on their base class</strong> with <code>super()</code> because they will recurse. This means your class can't customize <code>__new__</code>, and can't derive from any classes that need <code>__init__</code> called on them.</p>\n\n<h2>When to use the singleton pattern</h2>\n\n<p>Your use case is <strong>one of the better examples</strong> of wanting to use a singleton. You say in one of the comments \"To me logging has always seemed a natural candidate for Singletons.\" You're <strong>absolutely right</strong>.</p>\n\n<p>When people say singletons are bad, the most common reason is they are <strong>implicit shared state</strong>. While with global variables and top-level module imports are <strong>explicit</strong> shared state, other objects that are passed around are generally instantiated. This is a good point, <strong>with two exceptions</strong>.</p>\n\n<p>The first, and one that gets mentioned in various places, is when the singletons are <strong>constant</strong>. Use of global constants, especially enums, is widely accepted, and considered sane because no matter what, <strong>none of the users can mess them up for any other user</strong>. This is equally true for a constant singleton.</p>\n\n<p>The second exception, which get mentioned less, is the opposite -- when the singleton is <strong>only a data sink</strong>, not a data source (directly or indirectly). This is why loggers feel like a \"natural\" use for singletons. As the various users are <strong>not changing the loggers</strong> in ways other users will care about, there is <strong>not really shared state</strong>. This negates the primary argument against the singleton pattern, and makes them a reasonable choice because of their <strong>ease of use</strong> for the task.</p>\n\n<p>Here is a quote from <a href=\"http://googletesting.blogspot.com/2008/08/root-cause-of-singletons.html\" rel=\"noreferrer\">http://googletesting.blogspot.com/2008/08/root-cause-of-singletons.html</a>:</p>\n\n<blockquote>\n  <p>Now, there is one kind of Singleton which is OK. That is a singleton where all of the reachable objects are immutable. If all objects are immutable than Singleton has no global state, as everything is constant. But it is so easy to turn this kind of singleton into mutable one, it is very slippery slope. Therefore, I am against these Singletons too, not because they are bad, but because it is very easy for them to go bad. (As a side note Java enumeration are just these kind of singletons. As long as you don't put state into your enumeration you are OK, so please don't.)</p>\n  \n  <p>The other kind of Singletons, which are semi-acceptable are those which don't effect the execution of your code, They have no \"side effects\". Logging is perfect example. It is loaded with Singletons and global state. It is acceptable (as in it will not hurt you) because your application does not behave any different whether or not a given logger is enabled. The information here flows one way: From your application into the logger. Even thought loggers are global state since no information flows from loggers into your application, loggers are acceptable. You should still inject your logger if you want your test to assert that something is getting logged, but in general Loggers are not harmful despite being full of state.</p>\n</blockquote>\n"
    },
    "260": {
        "question_id": "8009882",
        "answer_id": "8010133",
        "question": "<p>I want to iterate over each line of an entire file. One way to do this is by reading the entire file, saving it to a list, then going over the line of interest. This method uses a lot of memory, so I am looking for an alternative.</p>\n\n<p>My code so far:</p>\n\n<pre><code>for each_line in fileinput.input(input_file):\n    do_something(each_line)\n\n    for each_line_again in fileinput.input(input_file):\n        do_something(each_line_again)\n</code></pre>\n\n<p>Executing this code gives an error message: <code>device active</code>.</p>\n\n<p>Any suggestions?</p>\n\n<p>The purpose is to calculate pair-wise string similarity, meaning for each line in file, I want to calculate the Levenshtein distance with every other line.</p>\n",
        "answer": "<p>The correct, fully Pythonic way to read a file is the following:</p>\n\n<pre><code>with open(...) as f:\n    for line in f:\n        # Do something with 'line'\n</code></pre>\n\n<p>The <code>with</code> statement handles opening and closing the file, including if an exception is raised in the inner block. The <code>for line in f</code> treats the file object <code>f</code> as an iterable, which automatically uses buffered I/O and memory management so you don't have to worry about large files.</p>\n\n<blockquote>\n  <p>There should be one -- and preferably only one -- obvious way to do it.</p>\n</blockquote>\n"
    },
    "261": {
        "question_id": "1988804",
        "answer_id": "1988826",
        "question": "<p>I just started Python and I've got no idea what <a href=\"http://en.wikipedia.org/wiki/Memoization\" rel=\"noreferrer\">memoization</a> is and how to use it. Also, may I have a simplified example?</p>\n",
        "answer": "<p>Memoization effectively refers to remembering (\"memoization\" \u2192 \"memorandum\" \u2192 to be remembered) results of method calls based on the method inputs and then returning the remembered result rather than computing the result again. You can think of it as a cache for method results. For further details, see page 387 for the definition in <strong><em>Introduction To Algorithms</em></strong> (3e), Cormen et al.</p>\n\n<p>A simple example for computing factorials using memoization in Python would be something like this:</p>\n\n<pre><code>factorial_memo = {}\ndef factorial(k):\n    if k &lt; 2: return 1\n    if k not in factorial_memo:\n        factorial_memo[k] = k * factorial(k-1)\n    return factorial_memo[k]\n</code></pre>\n\n<p>You can get more complicated and encapsulate the memoization process into a class:</p>\n\n<pre><code>class Memoize:\n    def __init__(self, f):\n        self.f = f\n        self.memo = {}\n    def __call__(self, *args):\n        if not args in self.memo:\n            self.memo[args] = self.f(*args)\n        #Warning: You may wish to do a deepcopy here if returning objects\n        return self.memo[args]\n</code></pre>\n\n<p>Then:</p>\n\n<pre><code>def factorial(k):\n    if k &lt; 2: return 1\n    return k * factorial(k - 1)\n\nfactorial = Memoize(factorial)\n</code></pre>\n\n<p>A feature known as \"<a href=\"https://www.python.org/dev/peps/pep-0318/\" rel=\"noreferrer\">decorators</a>\" was added in Python 2.4 which allow you to now simply write the following to accomplish the same thing:</p>\n\n<pre><code>@Memoize\ndef factorial(k):\n    if k &lt; 2: return 1\n    return k * factorial(k - 1)\n</code></pre>\n\n<p>The <a href=\"https://wiki.python.org/moin/PythonDecoratorLibrary\" rel=\"noreferrer\">Python Decorator Library</a> has a similar decorator called <a href=\"https://wiki.python.org/moin/PythonDecoratorLibrary#Memoize\" rel=\"noreferrer\"><code>memoized</code></a> that is slightly more robust than the <code>Memoize</code> class shown here.</p>\n"
    },
    "262": {
        "question_id": "19339",
        "answer_id": "19343",
        "question": "<p>I have a list of 2-item tuples and I'd like to convert them to 2 lists where the first contains the first item in each tuple and the second list holds the second item.</p>\n\n<p><strong>For example:</strong></p>\n\n<pre><code>original = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n# and I want to become...\nresult = (['a', 'b', 'c', 'd'], [1, 2, 3, 4])\n</code></pre>\n\n<p>Is there a builtin function that does that?</p>\n",
        "answer": "<p><a href=\"http://docs.python.org/library/functions.html#zip\" rel=\"noreferrer\"><code>zip</code></a> is its own inverse! Provided you use the special * operator.</p>\n\n<pre><code>&gt;&gt;&gt; zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])\n[('a', 'b', 'c', 'd'), (1, 2, 3, 4)]\n</code></pre>\n\n<p>The way this works is by calling <code>zip</code> with the arguments:</p>\n\n<pre><code>zip(('a', 1), ('b', 2), ('c', 3), ('d', 4))\n</code></pre>\n\n<p>\u2026 except the arguments are passed to <code>zip</code> directly (after being converted to a tuple), so there's no need to worry about the number of arguments getting too big.</p>\n"
    },
    "263": {
        "question_id": "11536764",
        "answer_id": "11536794",
        "question": "<p>I'm trying to follow <a href=\"http://www.python.org/dev/peps/pep-0328/\" rel=\"noreferrer\">PEP 328</a>, with the following directory structure:</p>\n\n<pre><code>pkg/\n  __init__.py\n  components/\n    core.py\n    __init__.py\n  tests/\n    core_test.py\n    __init__.py\n</code></pre>\n\n<p>In <code>core_test.py</code> I have the following import statement</p>\n\n<pre><code>from ..components.core import GameLoopEvents\n</code></pre>\n\n<p>However, when I run, I get the following error:</p>\n\n<pre><code>tests$ python core_test.py \nTraceback (most recent call last):\n  File \"core_test.py\", line 3, in &lt;module&gt;\n    from ..components.core import GameLoopEvents\nValueError: Attempted relative import in non-package\n</code></pre>\n\n<p>Searching around I found \"<a href=\"https://stackoverflow.com/questions/9427037/relative-path-not-working-even-with-init-py\">relative path not working even with __init__.py</a>\" and \"<a href=\"https://stackoverflow.com/questions/279237/python-import-a-module-from-a-folder/6098238#6098238\">Import a module from a relative path</a>\" but they didn't help.</p>\n\n<p>Is there anything I'm missing here?</p>\n",
        "answer": "<p>Yes. You're not using it as a package.</p>\n\n<pre><code>python -m pkg.tests.core_test\n</code></pre>\n"
    },
    "264": {
        "question_id": "1191374",
        "answer_id": "12698328",
        "question": "<p>Here's the Python code to run an arbitrary command returning its <code>stdout</code> data, or raise an exception on non-zero exit codes:</p>\n\n<pre><code>proc = subprocess.Popen(\n    cmd,\n    stderr=subprocess.STDOUT,  # Merge stdout and stderr\n    stdout=subprocess.PIPE,\n    shell=True)\n</code></pre>\n\n<p><code>communicate</code> is used to wait for the process to exit:</p>\n\n<pre><code>stdoutdata, stderrdata = proc.communicate()\n</code></pre>\n\n<p>The <code>subprocess</code> module does not support timeout--ability to kill a process running for more than X number of seconds--therefore, <code>communicate</code> may take forever to run.</p>\n\n<p>What is the <strong>simplest</strong> way to implement timeouts in a Python program meant to run on Windows and Linux?</p>\n",
        "answer": "<p>In Python 3.3+:</p>\n\n<pre><code>from subprocess import STDOUT, check_output\n\noutput = check_output(cmd, stderr=STDOUT, timeout=seconds)\n</code></pre>\n\n<p><code>output</code> is a byte string that contains command's merged stdout, stderr data. </p>\n\n<p>This code raises <code>CalledProcessError</code> on non-zero exit status as specified in the question's text unlike <code>proc.communicate()</code> method.</p>\n\n<p>I've removed <code>shell=True</code> because it is often used unnecessarily. You can  always add it back if <code>cmd</code> indeed requires it. If you add <code>shell=True</code> i.e., if the child process spawns its own descendants; <code>check_output()</code> can return much later than the timeout indicates, see <a href=\"https://stackoverflow.com/q/36952245/4279\">Subprocess timeout failure</a>.</p>\n\n<p>The timeout feature is available on Python 2.x via the <a href=\"http://pypi.python.org/pypi/subprocess32/\" rel=\"noreferrer\"><code>subprocess32</code></a> backport of the 3.2+ subprocess module.</p>\n"
    },
    "265": {
        "question_id": "1294382",
        "answer_id": "1294402",
        "question": "<p>What is a global interpreter lock and why is it an issue?</p>\n\n<p>A lot of noise has been made around removing the GIL from Python, and I'd like to understand why that is so important. I have never written a compiler nor an interpreter myself, so don't be frugal with details, I'll probably need them to understand.</p>\n",
        "answer": "<p>Python's GIL is intended to serialize access to interpreter internals from different threads. On multi-core systems, it means that multiple threads can't effectively make use of multiple cores. (If the GIL didn't lead to this problem, most people wouldn't care about the GIL - it's only being raised as an issue because of the increasing prevalence of multi-core systems.) If you want to understand it in detail, you can view <a href=\"https://www.youtube.com/watch?v=ph374fJqFPE\" rel=\"noreferrer\">this video</a> or look at <a href=\"http://www.dabeaz.com/python/GIL.pdf\" rel=\"noreferrer\">this set of slides</a>. It might be too much information, but then you did ask for details :-)</p>\n\n<p>Note that Python's GIL is only really an issue for CPython, the reference implementation. Jython and IronPython don't have a GIL. As a Python developer, you don't generally come across the GIL unless you're writing a C extension. C extension writers need to release the GIL when their extensions do blocking I/O, so that other threads in the Python process get a chance to run.</p>\n"
    },
    "266": {
        "question_id": "3348460",
        "answer_id": "3348664",
        "question": "<pre><code>import csv\n\nwith open('thefile.csv', 'rb') as f:\n  data = list(csv.reader(f))\n  import collections\n  counter = collections.defaultdict(int)\n\n  for row in data:\n        counter[row[10]] += 1\n\n\nwith open('/pythonwork/thefile_subset11.csv', 'w') as outfile:\n    writer = csv.writer(outfile)\n    for row in data:\n        if counter[row[10]] &gt;= 504:\n           writer.writerow(row)\n</code></pre>\n\n<p>This code reads <code>thefile.csv</code>, makes changes, and writes results to <code>thefile_subset1</code>.</p>\n\n<p>However, when I open the resulting csv in Microsoft Excel, there is an extra blank line after each record!</p>\n\n<p>Is there a way to make it not put an extra blank line?</p>\n",
        "answer": "<p>In Python 2, open <code>outfile</code> with mode <code>'wb'</code> instead of <code>'w'</code>.  The <code>csv.writer</code> writes <code>\\r\\n</code> into the file directly.  If you don't open the file in <em>binary</em> mode, it will write <code>\\r\\r\\n</code> because on Windows <em>text</em> mode will translate each <code>\\n</code> into <code>\\r\\n</code>.</p>\n\n<p>In Python 3 the required syntax changed, so open <code>outfile</code> with the additional parameter <code>newline=''</code> instead.</p>\n\n<h3>Examples:</h3>\n\n<pre><code># Python 2\nwith open('/pythonwork/thefile_subset11.csv', 'wb') as outfile:\n    writer = csv.writer(outfile)\n\n# Python 3\nwith open('/pythonwork/thefile_subset11.csv', 'w', newline='') as outfile:\n    writer = csv.writer(outfile)\n</code></pre>\n\n<h3>Documentation Links</h3>\n\n<ul>\n<li><a href=\"https://docs.python.org/2/library/csv.html#csv.writer\" rel=\"noreferrer\">https://docs.python.org/2/library/csv.html#csv.writer</a></li>\n<li><a href=\"https://docs.python.org/3/library/csv.html#csv.writer\" rel=\"noreferrer\">https://docs.python.org/3/library/csv.html#csv.writer</a></li>\n</ul>\n"
    },
    "267": {
        "question_id": "5753597",
        "answer_id": "5753614",
        "question": "<p>Think about a function that I'm calling for it's side effects, not return values (like printing to screen, updating GUI, printing to a file, etc.).</p>\n\n<pre><code>def fun_with_side_effects(x):\n    ...side effects...\n    return y\n</code></pre>\n\n<p>Now, is it <em>Pythonic</em> to use list comprehensions to call this func:</p>\n\n<pre><code>[fun_with_side_effects(x) for x in y if (...conditions...)]\n</code></pre>\n\n<p><em>Note that I don't save the list anywhere</em></p>\n\n<p>Or should I call this func like this:</p>\n\n<pre><code>for x in y:\n    if (...conditions...):\n        fun_with_side_effects(x)\n</code></pre>\n\n<p>Which is better and why?</p>\n",
        "answer": "<p>It is very anti-Pythonic to do so, and any seasoned Pythonista will give you hell over it. The intermediate list is thrown away after it is created, and it could potentially be very, very large, and therefore expensive to create.</p>\n"
    },
    "268": {
        "question_id": "845058",
        "answer_id": "845081",
        "question": "<p>I need to get a line count of a large file (hundreds of thousands of lines) in python. What is the most efficient way both memory- and time-wise?</p>\n\n<p>At the moment I do:</p>\n\n<pre><code>def file_len(fname):\n    with open(fname) as f:\n        for i, l in enumerate(f):\n            pass\n    return i + 1\n</code></pre>\n\n<p>is it possible to do any better?</p>\n",
        "answer": "<p>You can't get any better than that.</p>\n\n<p>After all, any solution will have to read the entire file, figure out how many <code>\\n</code> you have, and return that result.</p>\n\n<p>Do you have a better way of doing that without reading the entire file? Not sure... The best solution will always be I/O-bound, best you can do is make sure you don't use unnecessary memory, but it looks like you have that covered.</p>\n"
    },
    "269": {
        "question_id": "16981921",
        "answer_id": "16985066",
        "question": "<p>I want to import a function from another file in the same directory.</p>\n\n<p>Sometimes it works for me with <code>from .mymodule import myfunction</code> but sometimes I get a:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>SystemError: Parent module '' not loaded, cannot perform relative import\n</code></pre>\n\n<p>Sometimes it works with <code>from mymodule import myfunction</code>, but sometimes I also get a:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>SystemError: Parent module '' not loaded, cannot perform relative import\n</code></pre>\n\n<p>I don't understand the logic here, and I couldn't find any explanation. This looks completely random.</p>\n\n<p>Could someone explain to me what's the logic behind all this?</p>\n",
        "answer": "<blockquote>\n  <p>unfortunately, this module needs to be inside the package, and it also\n  needs to be runnable as a script, sometimes. Any idea how I could\n  achieve that?</p>\n</blockquote>\n\n<p>It's quite common to have a layout like this...</p>\n\n<pre><code>main.py\nmypackage/\n    __init__.py\n    mymodule.py\n    myothermodule.py\n</code></pre>\n\n<p>...with a <code>mymodule.py</code> like this...</p>\n\n<pre><code>#!/usr/bin/env python3\n\n# Exported function\ndef as_int(a):\n    return int(a)\n\n# Test function for module  \ndef _test():\n    assert as_int('1') == 1\n\nif __name__ == '__main__':\n    _test()\n</code></pre>\n\n<p>...a <code>myothermodule.py</code> like this...</p>\n\n<pre><code>#!/usr/bin/env python3\n\nfrom .mymodule import as_int\n\n# Exported function\ndef add(a, b):\n    return as_int(a) + as_int(b)\n\n# Test function for module  \ndef _test():\n    assert add('1', '1') == 2\n\nif __name__ == '__main__':\n    _test()\n</code></pre>\n\n<p>...and a <code>main.py</code> like this...</p>\n\n<pre><code>#!/usr/bin/env python3\n\nfrom mypackage.myothermodule import add\n\ndef main():\n    print(add('1', '1'))\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n\n<p>...which works fine when you run <code>main.py</code> or <code>mypackage/mymodule.py</code>, but fails with <code>mypackage/myothermodule.py</code>, due to the relative import...</p>\n\n<pre><code>from .mymodule import as_int\n</code></pre>\n\n<p>The way you're supposed to run it is...</p>\n\n<pre><code>python3 -m mypackage.myothermodule\n</code></pre>\n\n<p>...but it's somewhat verbose, and doesn't mix well with a shebang line like <code>#!/usr/bin/env python3</code>.</p>\n\n<p>The simplest fix for this case, assuming the name <code>mymodule</code> is globally unique, would be to avoid using relative imports, and just use...</p>\n\n<pre><code>from mymodule import as_int\n</code></pre>\n\n<p>...although, if it's not unique, or your package structure is more complex, you'll need to include the directory containing your package directory in <code>PYTHONPATH</code>, and do it like this...</p>\n\n<pre><code>from mypackage.mymodule import as_int\n</code></pre>\n\n<p>...or if you want it to work \"out of the box\", you can frob the <code>PYTHONPATH</code> in code first with this...</p>\n\n<pre><code>import sys\nimport os\n\nPACKAGE_PARENT = '..'\nSCRIPT_DIR = os.path.dirname(os.path.realpath(os.path.join(os.getcwd(), os.path.expanduser(__file__))))\nsys.path.append(os.path.normpath(os.path.join(SCRIPT_DIR, PACKAGE_PARENT)))\n\nfrom mypackage.mymodule import as_int\n</code></pre>\n\n<p>It's kind of a pain, but there's a clue as to why in <a href=\"http://mail.python.org/pipermail/python-3000/2007-April/006793.html\" rel=\"noreferrer\">an email</a> written by a certain Guido van Rossum...</p>\n\n<blockquote>\n  <p>I'm -1 on this and on any other proposed twiddlings of the <code>__main__</code>\n  machinery. The only use case seems to be running scripts that happen\n  to be living inside a module's directory, which I've always seen as an\n  antipattern. To make me change my mind you'd have to convince me that\n  it isn't.</p>\n</blockquote>\n\n<p>Whether running scripts inside a package is an antipattern or not is subjective, but personally I find it really useful in a package I have which contains some custom wxPython widgets, so I can run the script for any of the source files to display a <code>wx.Frame</code> containing only that widget for testing purposes.</p>\n"
    },
    "270": {
        "question_id": "6667201",
        "answer_id": "6667288",
        "question": "<p>I want to define a two-dimensional array without an initialized length like this:</p>\n\n<pre><code>Matrix = [][]\n</code></pre>\n\n<p>but it does not work...</p>\n\n<p>I've tried the code below, but it is wrong too:</p>\n\n<pre><code>Matrix = [5][5]\n</code></pre>\n\n<p><strong><em>Error:</em></strong></p>\n\n<pre><code>Traceback ...\n\nIndexError: list index out of range\n</code></pre>\n\n<p>What is my mistake?</p>\n",
        "answer": "<p>You're technically trying to index an uninitialized array. You have to first initialize the outer list with lists before adding items; Python calls this\n\"list comprehension\".</p>\n\n<pre><code># Creates a list containing 5 lists, each of 8 items, all set to 0\nw, h = 8, 5;\nMatrix = [[0 for x in range(w)] for y in range(h)] \n</code></pre>\n\n<h1>You can now add items to the list:</h1>\n\n<pre><code>Matrix[0][0] = 1\nMatrix[6][0] = 3 # error! range... \nMatrix[0][6] = 3 # valid\n\nprint Matrix[0][0] # prints 1\nx, y = 0, 6 \nprint Matrix[x][y] # prints 3; be careful with indexing! \n</code></pre>\n\n<p>Although you can name them as you wish, I look at it this way to avoid some confusion that could arise with the indexing, if you use \"x\" for both the inner and outer lists, and want a non-square Matrix.</p>\n"
    },
    "271": {
        "question_id": "8550114",
        "answer_id": "8594831",
        "question": "<p>I have recently been learning Python and am dipping my hand into building a web-scraper.  It's nothing fancy at all; its only purpose is to get the data off of a betting website and have this data put into Excel.</p>\n\n<p>Most of the issues are solvable and I'm having a good little mess around. However I'm hitting a massive hurdle over one issue. If a site loads a table of horses and lists current betting prices this information is not in any source file. The clue is that this data is live sometimes, with the numbers being updated obviously from some remote server. The HTML on my PC simply has a hole where their servers are pushing through all the interesting data that I need.</p>\n\n<p>Now my experience with dynamic web content is low, so this thing is something I'm having trouble getting my head around. </p>\n\n<p>I think Java or Javascript is a key, this pops up often. </p>\n\n<p>The scraper is simply a odds comparison engine.  Some sites have APIs but I need this for those that don't. I'm using the scrapy library with Python 2.7</p>\n\n<p>I do apologize if this question is too open-ended. In short, my question is: how can scrapy be used to scrape this dynamic data so that I can use it?  So that I can scrape this betting odds data in real-time?</p>\n",
        "answer": "<p>Webkit based browsers (like Google Chrome or Safari) has built-in developer tools. In Chrome you can open it <code>Menu-&gt;Tools-&gt;Developer Tools</code>. The <code>Network</code> tab allows you to see all information about every request and response:</p>\n\n<p><img src=\"https://i.stack.imgur.com/8w860.png\" alt=\"enter image description here\"></p>\n\n<p>In the bottom of the picture you can see that I've filtered request down to <code>XHR</code> - these are requests made by javascript code.</p>\n\n<p><em>Tip: log is cleared every time you load a page, at the bottom of the picture, the black dot button will preserve log.</em></p>\n\n<p>After analyzing requests and responses you can simulate these requests from your web-crawler and extract valuable data. In many cases it will be easier to get your data than parsing HTML, because that data does not contain presentation logic and is formatted to be accessed by javascript code.</p>\n\n<p>Firefox has similar extension, it is called <a href=\"http://getfirebug.com/\" rel=\"noreferrer\">firebug</a>. Some will argue that firebug is even more powerful but I like the simplicity of webkit.</p>\n"
    },
    "272": {
        "question_id": "35991403",
        "answer_id": "36025294",
        "question": "<p>I'm new to Python and have been trying to install some packages with <code>pip</code>. </p>\n\n<p>But <code>pip install unroll</code> gives me</p>\n\n<blockquote>\n  <p>Command \"python setup.py egg_info\" failed with error code 1 in\n  C:\\Users\\MARKAN~1\\AppData\\Local\\Temp\\pip-build-wa7uco0k\\unroll\\</p>\n</blockquote>\n\n<p>How can I solve this?</p>\n",
        "answer": "<p><strong>About the error code</strong></p>\n\n<p>According to <a href=\"https://docs.python.org/2/library/errno.html\" rel=\"noreferrer\">the Python documentation</a>:</p>\n\n<blockquote>\n  <p>This module makes available standard errno system symbols. The value of each symbol is the corresponding integer value. <strong>The names and descriptions are borrowed from linux/include/errno.h</strong>, which should be pretty all-inclusive.</p>\n</blockquote>\n\n<p>Error code 1 is defined in <code>errno.h</code> and means <code>Operation not permitted</code>.</p>\n\n<p><strong>About your error</strong></p>\n\n<p>Your <a href=\"https://pypi.python.org/pypi/setuptools\" rel=\"noreferrer\">setuptools</a> do not appear to be installed. Just follow the <a href=\"https://packaging.python.org/tutorials/installing-packages/\" rel=\"noreferrer\"><code>Installation Instructions</code></a> from the PyPI website.</p>\n\n<p>If it's already installed, try</p>\n\n<pre><code>pip install --upgrade setuptools\n</code></pre>\n\n<p>If it's already up to date, check that the module ez_setup is not missing. If it is, then</p>\n\n<pre><code>pip install ez_setup\n</code></pre>\n\n<p>Then try again</p>\n\n<pre><code>pip install unroll\n</code></pre>\n\n<p>If it's still not working, maybe pip didn't install/upgrade setup_tools properly so you might want to try</p>\n\n<pre><code>easy_install -U setuptools\n</code></pre>\n\n<p>And again</p>\n\n<pre><code>pip install unroll\n</code></pre>\n"
    },
    "273": {
        "question_id": "6920302",
        "answer_id": "6921225",
        "question": "<p>Suppose I have the following <code>Button</code> made with Tkinter in Python:</p>\n\n<pre><code>import Tkinter as Tk\nwin = Tk.Toplevel()\nframe = Tk.Frame(master=win).grid(row=1, column=1)\nbutton = Tk.Button(master=frame, text='press', command=action)\n</code></pre>\n\n<p>The method <code>action</code> is called when I press the button, but what if I wanted to pass some arguments to the method <code>action</code>?</p>\n\n<p>I have tried with the following code: </p>\n\n<pre><code>button = Tk.Button(master=frame, text='press', command=action(someNumber))\n</code></pre>\n\n<p>This just invokes the method immediately, and pressing the button does nothing.</p>\n",
        "answer": "<p>I personally prefer to use <code>lambdas</code> in such a scenario, because imo it's clearer and simpler and also doesn't force you to write lots of wrapper methods if you don't have control over the called method, but that's certainly a matter of taste.</p>\n\n<p>That's how you'd do it with a lambda (note there's also some implementation of currying in the functional module, so you can use that too):</p>\n\n<pre><code>button = Tk.Button(master=frame, text='press', command= lambda: action(someNumber))\n</code></pre>\n"
    },
    "274": {
        "question_id": "5616822",
        "answer_id": "5616910",
        "question": "<p>I'm trying to find every 10 digit series of numbers within a larger series of numbers using re in Python 2.6.</p>\n\n<p>I'm easily able to grab no overlapping matches, but I want every match in the number series.  Eg.</p>\n\n<p>in \"123456789123456789\"</p>\n\n<p>I should get the following list:</p>\n\n<pre><code>[1234567891,2345678912,3456789123,4567891234,5678912345,6789123456,7891234567,8912345678,9123456789]\n</code></pre>\n\n<p>I've found references to a \"lookahead\", but the examples I've seen only show pairs of numbers rather than larger groupings and I haven't been able to convert them beyond the two digits.</p>\n",
        "answer": "<p>Use a capturing group inside a lookahead. The lookahead captures the text you're interested in, but the actual match is technically the zero-width substring before the lookahead, so the matches are technically non-overlapping:</p>\n\n<pre><code>import re \ns = \"123456789123456789\"\nmatches = re.finditer(r'(?=(\\d{10}))',s)\nresults = [int(match.group(1)) for match in matches]\n# results: \n# [1234567891,\n#  2345678912,\n#  3456789123,\n#  4567891234,\n#  5678912345,\n#  6789123456,\n#  7891234567,\n#  8912345678,\n#  9123456789]\n</code></pre>\n"
    },
    "275": {
        "question_id": "1637807",
        "answer_id": "1637859",
        "question": "<pre><code>l  = range(100)                         \nfor i in l:                         \n    print i,                         \n    print l.pop(0),                  \n    print l.pop(0)\n</code></pre>\n\n<p>The above python code gives the output quite different from expected. I want to loop over items so that I can skip an item while looping.</p>\n\n<p>Please explain.</p>\n",
        "answer": "<p>I've been bitten before by (someone else's) \"clever\" code that tries to modify a list while iterating over it.  I resolved that I would never do it under any circumstance.</p>\n\n<p>You can use the slice operator <code>mylist[::3]</code> to skip across to every third item in your list.</p>\n\n<pre><code>mylist = [i for i in range(100)]\nfor i in mylist[::3]:\n  print(i),\n</code></pre>\n\n<p>Other points about my example relate to new syntax in <a href=\"http://docs.python.org/3.1/whatsnew/3.0.html\" rel=\"noreferrer\">python 3.0</a>. </p>\n\n<ul>\n<li>I use a list comprehension to define mylist because it works in Python 3.0 (see below)</li>\n<li>print is a function in python 3.0</li>\n</ul>\n\n<blockquote>\n  <p>Python 3.0 range() now behaves like xrange() used to behave, except it works with values of arbitrary size. The latter no longer exists.</p>\n</blockquote>\n"
    },
    "276": {
        "question_id": "101268",
        "answer_id": "101945",
        "question": "<p>What are the lesser-known but useful features of the Python programming language?</p>\n\n<ul>\n<li>Try to limit answers to Python core.</li>\n<li>One feature per answer.</li>\n<li>Give an example and short description of the feature, not just a link to documentation.</li>\n<li>Label the feature using a title as the first line.</li>\n</ul>\n\n<h2>Quick links to answers:</h2>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#111176\">Argument Unpacking</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#112303\">Braces</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101945\">Chaining Comparison Operators</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101447\">Decorators</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#113198\">Default Argument Gotchas / Dangers of Mutable Default arguments</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#102062\">Descriptors</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#111970\">Dictionary default <code>.get</code> value</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#102065\">Docstring Tests</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python/112316#112316\">Ellipsis Slicing Syntax</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#117116\">Enumeration</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#114420\">For/else</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#102202\">Function as iter() argument</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101310\">Generator expressions</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101276\"><code>import this</code></a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#102037\">In Place Value Swapping</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101840\">List stepping</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#112286\"><code>__missing__</code> items</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101537\">Multi-line Regex</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#113164\">Named string formatting</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101549\">Nested list/generator comprehensions</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#108297\">New types at runtime</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#113833\"><code>.pth</code> files</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#1024693\">ROT13 Encoding</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#143636\">Regex Debugging</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101739\">Sending to Generators</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#168270\">Tab Completion in Interactive Interpreter</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#116480\">Ternary Expression</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#114157\"><code>try/except/else</code></a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#3267903\">Unpacking+<code>print()</code> function</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#109182\"><code>with</code> statement</a></li>\n</ul>\n",
        "answer": "<h2>Chaining comparison operators:</h2>\n\n<pre><code>&gt;&gt;&gt; x = 5\n&gt;&gt;&gt; 1 &lt; x &lt; 10\nTrue\n&gt;&gt;&gt; 10 &lt; x &lt; 20 \nFalse\n&gt;&gt;&gt; x &lt; 10 &lt; x*10 &lt; 100\nTrue\n&gt;&gt;&gt; 10 &gt; x &lt;= 9\nTrue\n&gt;&gt;&gt; 5 == x &gt; 4\nTrue\n</code></pre>\n\n<p>In case you're thinking it's doing <code>1 &lt; x</code>, which comes out as <code>True</code>, and then comparing <code>True &lt; 10</code>, which is also <code>True</code>, then no, that's really not what happens (see the last example.) It's really translating into <code>1 &lt; x and x &lt; 10</code>, and <code>x &lt; 10 and 10 &lt; x * 10 and x*10 &lt; 100</code>, but with less typing and each term is only evaluated once.</p>\n"
    },
    "277": {
        "question_id": "7023052",
        "answer_id": "7027113",
        "question": "<p>I'm not sure if this is Flask specific, but when I run an app in dev mode (<code>http://localhost:5000</code>), I cannot access it from other machines on the network (with <code>http://[dev-host-ip]:5000</code>). With Rails in dev mode, for example, it works fine. I couldn't find any docs regarding the Flask dev server configuration. Any idea what should be configured to enable this?</p>\n",
        "answer": "<p>While this is possible, you should not use the Flask dev server in production. The Flask dev server is not designed to be particularly secure, stable, or efficient. See the docs on <a href=\"http://flask.pocoo.org/docs/dev/deploying/\" rel=\"noreferrer\">deploying</a> for correct solutions.</p>\n\n<hr>\n\n<p>Add a parameter to your <code>app.run()</code>.  By default it runs on localhost, change it to <code>app.run(host= '0.0.0.0')</code> to run on your machines IP address.</p>\n\n<p>Documented on the Flask site under \"Externally Visible Server\" on the <a href=\"http://flask.pocoo.org/docs/quickstart/#a-minimal-application\" rel=\"noreferrer\">Quickstart page</a>:</p>\n\n<blockquote>\n  <p>Externally Visible Server</p>\n  \n  <p>If you run the server you will notice that the server is only\n  available from your own computer, not from any other in the network.\n  This is the default because in debugging mode a user of the\n  application can execute arbitrary Python code on your computer. If you\n  have debug disabled or trust the users on your network, you can make\n  the server publicly available.</p>\n  \n  <p>Just change the call of the <code>run()</code> method to look like this:</p>\n  \n  <p><code>app.run(host='0.0.0.0')</code></p>\n  \n  <p>This tells your operating system to listen on a public IP.</p>\n</blockquote>\n"
    },
    "278": {
        "question_id": "6618515",
        "answer_id": "6618543",
        "question": "<p>I have a list of strings like this:</p>\n\n<pre><code>X = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]\nY = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]\n</code></pre>\n\n<p>What is the shortest way of sorting X using values from Y to get the following output?</p>\n\n<pre><code>[\"a\", \"d\", \"h\", \"b\", \"c\", \"e\", \"i\", \"f\", \"g\"]\n</code></pre>\n\n<p>The order of the elements having the same \"key\" does not matter. I can resort to the use of <code>for</code> constructs but I am curious if there is a shorter way. Any suggestions?</p>\n",
        "answer": "<p><strong>Shortest Code</strong></p>\n\n<pre><code>[x for _,x in sorted(zip(Y,X))]\n</code></pre>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>X = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]\nY = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]\n\nZ = [x for _,x in sorted(zip(Y,X))]\nprint(Z)  # [\"a\", \"d\", \"h\", \"b\", \"c\", \"e\", \"i\", \"f\", \"g\"]\n</code></pre>\n\n<hr>\n\n<p><strong>Generally Speaking</strong></p>\n\n<pre><code>[x for _, x in sorted(zip(Y,X), key=lambda pair: pair[0])]\n</code></pre>\n\n<p><strong>Explained:</strong></p>\n\n<ol>\n<li><a href=\"https://docs.python.org/3/library/functions.html#zip\" rel=\"noreferrer\"><code>zip</code></a> the two <code>list</code>s.</li>\n<li>create a new, sorted <code>list</code> based on the <code>zip</code> using <a href=\"https://www.programiz.com/python-programming/methods/built-in/sorted\" rel=\"noreferrer\"><code>sorted()</code></a>.</li>\n<li>using a list comprehension <em>extract</em> the first elements of each pair from the sorted, zipped <code>list</code>.</li>\n</ol>\n\n<p><em>For more information on how to set\\use the <code>key</code> parameter as well as the <code>sorted</code> function in general, take a look at <a href=\"http://pythoncentral.io/how-to-sort-a-list-tuple-or-object-with-sorted-in-python/\" rel=\"noreferrer\">this</a>.</em></p>\n\n<hr>\n"
    },
    "279": {
        "question_id": "1653970",
        "answer_id": "1653974",
        "question": "<p>Python has an <a href=\"http://www.python.org/dev/peps/pep-0372/\" rel=\"noreferrer\">ordered dictionary</a>. What about an ordered set?</p>\n",
        "answer": "<p>There is an <a href=\"http://code.activestate.com/recipes/576694/\" rel=\"noreferrer\">ordered set</a> (possible <a href=\"https://github.com/ActiveState/code/blob/3b27230f418b714bc9a0f897cb8ea189c3515e99/recipes/Python/576696_OrderedSet_with_Weakrefs/README.md\" rel=\"noreferrer\">new link</a>) recipe for this which is referred to from the <a href=\"https://docs.python.org/2/library/collections.html\" rel=\"noreferrer\">Python 2 Documentation</a>. This runs on Py2.6 or later and 3.0 or later without any modifications. The interface is almost exactly the same as a normal set, except that initialisation should be done with a list.</p>\n\n<pre><code>OrderedSet([1, 2, 3])\n</code></pre>\n\n<p>This is a MutableSet, so the signature for <code>.union</code> doesn't match that of set, but since it includes <code>__or__</code> something similar can easily be added:</p>\n\n<pre><code>@staticmethod\ndef union(*sets):\n    union = OrderedSet()\n    union.union(*sets)\n    return union\n\ndef union(self, *sets):\n    for set in sets:\n        self |= set\n</code></pre>\n"
    },
    "280": {
        "question_id": "11144513",
        "answer_id": "11144716",
        "question": "<p>I have two numpy arrays that define the x and y axes of a grid.  For example:</p>\n\n<pre><code>x = numpy.array([1,2,3])\ny = numpy.array([4,5])\n</code></pre>\n\n<p>I'd like to generate the Cartesian product of these arrays to generate:</p>\n\n<pre><code>array([[1,4],[2,4],[3,4],[1,5],[2,5],[3,5]])\n</code></pre>\n\n<p>In a way that's not terribly inefficient since I need to do this many times in a loop.  I'm assuming that converting them to a Python list and using <code>itertools.product</code> and back to a numpy array is not the most efficient form.</p>\n",
        "answer": "<pre><code>&gt;&gt;&gt; numpy.transpose([numpy.tile(x, len(y)), numpy.repeat(y, len(x))])\narray([[1, 4],\n       [2, 4],\n       [3, 4],\n       [1, 5],\n       [2, 5],\n       [3, 5]])\n</code></pre>\n\n<p>See <a href=\"https://stackoverflow.com/questions/1208118/using-numpy-to-build-an-array-of-all-combinations-of-two-arrays\">Using numpy to build an array of all combinations of two arrays</a> for a general solution for computing the Cartesian product of N arrays.</p>\n"
    },
    "281": {
        "question_id": "237079",
        "answer_id": "39501288",
        "question": "<p>I have a script that needs to do some stuff based on file creation &amp; modification dates but has to run on Linux &amp; Windows.</p>\n\n<p>What's the best <strong>cross-platform</strong> way to get file creation &amp; modification date/times in Python?</p>\n",
        "answer": "<p>Getting some sort of modification date in a cross-platform way is easy - just call <a href=\"https://docs.python.org/library/os.path.html#os.path.getmtime\" rel=\"noreferrer\"><code>os.path.getmtime(<i>path</i>)</code></a> and you'll get the Unix timestamp of when the file at <code>path</code> was last modified.</p>\n\n<p>Getting file <em>creation</em> dates, on the other hand, is fiddly and platform-dependent, differing even between the three big OSes:</p>\n\n<ul>\n<li>On <strong>Windows</strong>, a file's <code>ctime</code> (documented at <a href=\"https://msdn.microsoft.com/en-us/library/14h5k7ff.aspx\" rel=\"noreferrer\">https://msdn.microsoft.com/en-us/library/14h5k7ff.aspx</a>) stores its creation date. You can access this in Python through <a href=\"https://docs.python.org/library/os.path.html#os.path.getctime\" rel=\"noreferrer\"><code>os.path.getctime()</code></a> or the <a href=\"https://docs.python.org/3/library/os.html#os.stat_result.st_ctime\" rel=\"noreferrer\"><code>.st_ctime</code></a> attribute of the result of a call to <a href=\"https://docs.python.org/3/library/os.html#os.stat\" rel=\"noreferrer\"><code>os.stat()</code></a>. This <em>won't</em> work on Unix, where the <code>ctime</code> <a href=\"http://www.linux-faqs.info/general/difference-between-mtime-ctime-and-atime\" rel=\"noreferrer\">is the last time that the file's attributes <em>or</em> content were changed</a>.</li>\n<li>On <strong>Mac</strong>, as well as some other Unix-based OSes, you can use the <a href=\"https://docs.python.org/3/library/os.html#os.stat_result.st_birthtime\" rel=\"noreferrer\"><code>.st_birthtime</code></a> attribute of the result of a call to <code>os.stat()</code>.</li>\n<li><p>On <strong>Linux</strong>, this is currently impossible, at least without writing a C extension for Python. Although some file systems commonly used with Linux <a href=\"https://unix.stackexchange.com/questions/7562/what-file-systems-on-linux-store-the-creation-time\">do store creation dates</a> (for example, <code>ext4</code> stores them in <code>st_crtime</code>) , the Linux kernel <a href=\"https://unix.stackexchange.com/questions/91197/how-to-find-creation-date-of-file\">offers no way of accessing them</a>; in particular, the structs it returns from <code>stat()</code> calls in C, as of the latest kernel version, <a href=\"https://github.com/torvalds/linux/blob/v4.8-rc6/include/linux/stat.h\" rel=\"noreferrer\">don't contain any creation date fields</a>. You can also see that the identifier <code>st_crtime</code> doesn't currently feature anywhere in the <a href=\"https://github.com/python/cpython/search?utf8=%E2%9C%93&amp;q=st_crtime\" rel=\"noreferrer\">Python source</a>. At least if you're on <code>ext4</code>, the data <em>is</em> attached to the inodes in the file system, but there's no convenient way of accessing it.</p>\n\n<p>The next-best thing on Linux is to access the file's <code>mtime</code>, through either <a href=\"https://docs.python.org/library/os.path.html#os.path.getmtime\" rel=\"noreferrer\"><code>os.path.getmtime()</code></a> or the <a href=\"https://docs.python.org/3/library/os.html#os.stat_result.st_mtime\" rel=\"noreferrer\"><code>.st_mtime</code></a> attribute of an <code>os.stat()</code> result. This will give you the last time the file's content was modified, which may be adequate for some use cases.</p></li>\n</ul>\n\n<p>Putting this all together, cross-platform code should look something like this...</p>\n\n<pre><code>import os\nimport platform\n\ndef creation_date(path_to_file):\n    \"\"\"\n    Try to get the date that a file was created, falling back to when it was\n    last modified if that isn't possible.\n    See http://stackoverflow.com/a/39501288/1709587 for explanation.\n    \"\"\"\n    if platform.system() == 'Windows':\n        return os.path.getctime(path_to_file)\n    else:\n        stat = os.stat(path_to_file)\n        try:\n            return stat.st_birthtime\n        except AttributeError:\n            # We're probably on Linux. No easy way to get creation dates here,\n            # so we'll settle for when its content was last modified.\n            return stat.st_mtime\n</code></pre>\n"
    },
    "282": {
        "question_id": "8023306",
        "answer_id": "8023337",
        "question": "<p>I made a function which will look up ages in a <code>Dictionary</code> and show the matching name:</p>\n\n<pre><code>dictionary = {'george' : 16, 'amber' : 19}\nsearch_age = raw_input(\"Provide age\")\nfor age in dictionary.values():\n    if age == search_age:\n        name = dictionary[age]\n        print name\n</code></pre>\n\n<p>I know how to compare and find the age I just don't know how to show the name of the person. Additionally, I am getting a <code>KeyError</code> because of line 5. I know it's not correct but I can't figure out how to make it search backwards.</p>\n",
        "answer": "<p>There is none. <code>dict</code> is not intended to be used this way.</p>\n\n<pre><code>for name, age in dictionary.items():    # for name, age in dictionary.iteritems():  (for Python 2.x)\n    if age == search_age:\n        print(name)\n</code></pre>\n"
    },
    "283": {
        "question_id": "1335507",
        "answer_id": "1336751",
        "question": "<p>How would you prompt the user for some input but timing out after N seconds?</p>\n\n<p>Google is pointing to a mail thread about it at <a href=\"http://mail.python.org/pipermail/python-list/2006-January/533215.html\" rel=\"noreferrer\">http://mail.python.org/pipermail/python-list/2006-January/533215.html</a> but it seems not to work. The statement in which the timeout happens, no matter whether it is a sys.input.readline or timer.sleep(), I always get:</p>\n\n<blockquote>\n  <p>&lt;type 'exceptions.TypeError'&gt;: [raw_]input expected at most 1 arguments, got 2</p>\n</blockquote>\n\n<p>which somehow the except fails to catch.</p>\n",
        "answer": "<p>The example you have linked to is wrong and the exception is actually occuring when calling alarm handler instead of when read blocks. Better try this:</p>\n\n<pre><code>import signal\nTIMEOUT = 5 # number of seconds your want for timeout\n\ndef interrupted(signum, frame):\n    \"called when read times out\"\n    print 'interrupted!'\nsignal.signal(signal.SIGALRM, interrupted)\n\ndef input():\n    try:\n            print 'You have 5 seconds to type in your stuff...'\n            foo = raw_input()\n            return foo\n    except:\n            # timeout\n            return\n\n# set alarm\nsignal.alarm(TIMEOUT)\ns = input()\n# disable the alarm after success\nsignal.alarm(0)\nprint 'You typed', s\n</code></pre>\n"
    },
    "284": {
        "question_id": "12179271",
        "answer_id": "12179752",
        "question": "<p>Could someone explain to me the meaning of <code>@classmethod</code> and <code>@staticmethod</code> in python? I need to know the difference and the meaning. </p>\n\n<p>As far as I understand, <code>@classmethod</code> tells a class that it's a method which should be inherited into subclasses, or... something. However, what's the point of that? Why not just define the class method without adding <code>@classmethod</code> or <code>@staticmethod</code> or any <code>@</code> definitions?</p>\n\n<p><strong>tl;dr:</strong> <em>when</em> should I use them, <em>why</em> should I use them, and <em>how</em> should I use them?</p>\n\n<p>I'm pretty advanced with C++, so using more advanced programming concepts shouldn't be a problem. Feel free giving me a corresponding C++ example if possible.</p>\n",
        "answer": "<p>Though <code>classmethod</code> and <code>staticmethod</code> are quite similar, there's a slight difference in usage for both entities: <code>classmethod</code> must have a reference to a class object as the first parameter, whereas <code>staticmethod</code> can have no parameters at all.</p>\n\n<h2>Example</h2>\n\n<pre><code>class Date(object):\n\n    def __init__(self, day=0, month=0, year=0):\n        self.day = day\n        self.month = month\n        self.year = year\n\n    @classmethod\n    def from_string(cls, date_as_string):\n        day, month, year = map(int, date_as_string.split('-'))\n        date1 = cls(day, month, year)\n        return date1\n\n    @staticmethod\n    def is_date_valid(date_as_string):\n        day, month, year = map(int, date_as_string.split('-'))\n        return day &lt;= 31 and month &lt;= 12 and year &lt;= 3999\n\ndate2 = Date.from_string('11-09-2012')\nis_date = Date.is_date_valid('11-09-2012')\n</code></pre>\n\n<h2>Explanation</h2>\n\n<p>Let's assume an example of a class, dealing with date information (this will be our boilerplate):</p>\n\n<pre><code>class Date(object):\n\n    def __init__(self, day=0, month=0, year=0):\n        self.day = day\n        self.month = month\n        self.year = year\n</code></pre>\n\n<p>This class obviously could be used to store information about certain dates (without timezone information; let's assume all dates are presented in UTC).</p>\n\n<p>Here we have <code>__init__</code>, a typical initializer of Python class instances, which receives arguments as a typical <code>instancemethod</code>, having the first non-optional argument (<code>self</code>) that holds a reference to a newly created instance.</p>\n\n<p><strong>Class Method</strong></p>\n\n<p>We have some tasks that can be nicely done using <code>classmethod</code>s.</p>\n\n<p><em>Let's assume that we want to create a lot of <code>Date</code> class instances having date information coming from an outer source encoded as a string with format 'dd-mm-yyyy'. Suppose we have to do this in different places in the source code of our project.</em></p>\n\n<p>So what we must do here is:</p>\n\n<ol>\n<li>Parse a string to receive day, month and year as three integer variables or a 3-item tuple consisting of that variable.</li>\n<li>Instantiate <code>Date</code> by passing those values to the initialization call.</li>\n</ol>\n\n<p>This will look like:</p>\n\n<pre><code>day, month, year = map(int, string_date.split('-'))\ndate1 = Date(day, month, year)\n</code></pre>\n\n<p>For this purpose, C++ can implement such a feature with overloading, but Python lacks this overloading. Instead, we can use <code>classmethod</code>. Let's create another \"<em>constructor</em>\".</p>\n\n<pre><code>    @classmethod\n    def from_string(cls, date_as_string):\n        day, month, year = map(int, date_as_string.split('-'))\n        date1 = cls(day, month, year)\n        return date1\n\ndate2 = Date.from_string('11-09-2012')\n</code></pre>\n\n<p>Let's look more carefully at the above implementation, and review what advantages we have here:</p>\n\n<ol>\n<li>We've implemented date string parsing in one place and it's reusable now.</li>\n<li>Encapsulation works fine here (if you think that you could implement string parsing as a single function elsewhere, this solution fits the OOP paradigm far better).</li>\n<li><code>cls</code> is an object that holds the <strong>class itself</strong>, not an instance of the class. It's pretty cool because if we inherit our <code>Date</code> class, all children will have <code>from_string</code> defined also.</li>\n</ol>\n\n<p><strong>Static method</strong></p>\n\n<p>What about <code>staticmethod</code>? It's pretty similar to <code>classmethod</code> but doesn't take any obligatory parameters (like a class method or instance method does).</p>\n\n<p>Let's look at the next use case.</p>\n\n<p><em>We have a date string that we want to validate somehow. This task is also logically bound to the <code>Date</code> class we've used so far, but doesn't require instantiation of it.</em></p>\n\n<p>Here is where <code>staticmethod</code> can be useful. Let's look at the next piece of code:</p>\n\n<pre><code>    @staticmethod\n    def is_date_valid(date_as_string):\n        day, month, year = map(int, date_as_string.split('-'))\n        return day &lt;= 31 and month &lt;= 12 and year &lt;= 3999\n\n    # usage:\n    is_date = Date.is_date_valid('11-09-2012')\n</code></pre>\n\n<p>So, as we can see from usage of <code>staticmethod</code>, we don't have any access to what the class is---it's basically just a function,  called syntactically like a method, but without access to the object and its internals (fields and another methods), while classmethod does.</p>\n"
    },
    "285": {
        "question_id": "472000",
        "answer_id": "28059785",
        "question": "<p>What is the purpose of <a href=\"https://docs.python.org/3/reference/datamodel.html#slots\" rel=\"noreferrer\"><code>__slots__</code></a> in Python \u2014 especially with respect to when I would want to use it, and when not?</p>\n",
        "answer": "<blockquote>\n  <h1>In Python, what is the purpose of <code>__slots__</code> and what are the cases one should avoid this?</h1>\n</blockquote>\n\n<h2>TLDR:</h2>\n\n<p>The special attribute <code>__slots__</code> allows you to explicitly state which instance attributes you expect your object instances to have, with the expected results:</p>\n\n<ol>\n<li><strong>faster</strong> attribute access.</li>\n<li><strong>space savings</strong> in memory. </li>\n</ol>\n\n<p>The space savings is from </p>\n\n<ol>\n<li>Storing value references in slots instead of <code>__dict__</code>.</li>\n<li>Denying <code>__dict__</code> and <code>__weakref__</code> creation if parent classes deny them and you declare <code>__slots__</code>.</li>\n</ol>\n\n<h3>Quick Caveats</h3>\n\n<p>Small caveat, you should only declare a particular slot one time in an inheritance tree. For example:</p>\n\n<pre><code>class Base:\n    __slots__ = 'foo', 'bar'\n\nclass Right(Base):\n    __slots__ = 'baz', \n\nclass Wrong(Base):\n    __slots__ = 'foo', 'bar', 'baz'        # redundant foo and bar\n</code></pre>\n\n<p>Python doesn't object when you get this wrong (it probably should), problems might not otherwise manifest, but your objects will take up more space than they otherwise should.</p>\n\n<pre><code>&gt;&gt;&gt; from sys import getsizeof\n&gt;&gt;&gt; getsizeof(Right()), getsizeof(Wrong())\n(64, 80)\n</code></pre>\n\n<p>The biggest caveat is for multiple inheritance - multiple \"parent classes with nonempty slots\" cannot be combined. </p>\n\n<p>To accommodate this restriction, follow best practices: Factor out all but one or all parents' abstraction which their concrete class respectively and your new concrete class collectively will inherit from - giving the abstraction(s) empty slots (just like abstract base classes in the standard library). </p>\n\n<p>See section on multiple inheritance below for an example.</p>\n\n<h3>Requirements:</h3>\n\n<ul>\n<li><p>To have attributes named in <code>__slots__</code> to actually be stored in slots instead of a <code>__dict__</code>, a class must inherit from <code>object</code>.</p></li>\n<li><p>To prevent the creation of a <code>__dict__</code>, you must inherit from <code>object</code> and all classes in the inheritance must declare <code>__slots__</code> and none of them can have a <code>'__dict__'</code> entry. </p></li>\n</ul>\n\n<p>There are a lot of details if you wish to keep reading.</p>\n\n<h2>Why use <code>__slots__</code>: Faster attribute access.</h2>\n\n<p>The creator of Python, Guido van Rossum, <a href=\"http://python-history.blogspot.com/2010/06/inside-story-on-new-style-classes.html\" rel=\"noreferrer\">states</a> that he actually created <code>__slots__</code> for faster attribute access.  </p>\n\n<p>It is trivial to demonstrate measurably significant faster access:</p>\n\n<pre><code>import timeit\n\nclass Foo(object): __slots__ = 'foo',\n\nclass Bar(object): pass\n\nslotted = Foo()\nnot_slotted = Bar()\n\ndef get_set_delete_fn(obj):\n    def get_set_delete():\n        obj.foo = 'foo'\n        obj.foo\n        del obj.foo\n    return get_set_delete\n</code></pre>\n\n<p>and</p>\n\n<pre><code>&gt;&gt;&gt; min(timeit.repeat(get_set_delete_fn(slotted)))\n0.2846834529991611\n&gt;&gt;&gt; min(timeit.repeat(get_set_delete_fn(not_slotted)))\n0.3664822799983085\n</code></pre>\n\n<p>The slotted access is almost 30% faster in Python 3.5 on Ubuntu.</p>\n\n<pre><code>&gt;&gt;&gt; 0.3664822799983085 / 0.2846834529991611\n1.2873325658284342\n</code></pre>\n\n<p>In Python 2 on Windows I have measured it about 15% faster.</p>\n\n<h2>Why use <code>__slots__</code>:  Memory Savings</h2>\n\n<p>Another purpose of <code>__slots__</code> is to reduce the space in memory that each object instance takes up.  </p>\n\n<p><a href=\"https://docs.python.org/3/reference/datamodel.html#slots\" rel=\"noreferrer\">My own contribution to the documentation clearly states the reasons behind this</a>: </p>\n\n<blockquote>\n  <p>The space saved over using <code>__dict__</code> can be significant.</p>\n</blockquote>\n\n<p><a href=\"http://docs.sqlalchemy.org/en/rel_1_0/changelog/migration_10.html#significant-improvements-in-structural-memory-use\" rel=\"noreferrer\">SQLAlchemy attributes</a> a lot of memory savings to <code>__slots__</code>.</p>\n\n<p>To verify this, using the Anaconda distribution of Python 2.7 on Ubuntu Linux, with <code>guppy.hpy</code> (aka heapy) and <code>sys.getsizeof</code>, the size of a class instance without <code>__slots__</code> declared, and nothing else, is 64 bytes. That does <em>not</em> include the <code>__dict__</code>. Thank you Python for lazy evaluation again, the <code>__dict__</code> is apparently not called into existence until it is referenced, but classes without data are usually useless. When called into existence, the <code>__dict__</code> attribute is a minimum of 280 bytes additionally. </p>\n\n<p>In contrast, a class instance with <code>__slots__</code> declared to be <code>()</code> (no data) is only 16 bytes, and 56 total bytes with one item in slots, 64 with two.</p>\n\n<p>For 64 bit Python, I illustrate the memory consumption in bytes in Python 2.7 and 3.6, for <code>__slots__</code> and <code>__dict__</code> (no slots defined) for each point where the dict grows in 3.6 (except for 0, 1, and 2 attributes):</p>\n\n<pre><code>       Python 2.7             Python 3.6\nattrs  __slots__  __dict__*   __slots__  __dict__* | *(no slots defined)\nnone   16         56 + 272\u2020   16         56 + 112\u2020 | \u2020if __dict__ referenced\none    48         56 + 272    48         56 + 112\ntwo    56         56 + 272    56         56 + 112\nsix    88         56 + 1040   88         56 + 152\n11     128        56 + 1040   128        56 + 240\n22     216        56 + 3344   216        56 + 408     \n43     384        56 + 3344   384        56 + 752\n</code></pre>\n\n<p>So, in spite of smaller dicts in Python 3, we see how nicely <code>__slots__</code> scale for instances to save us memory, and that is a major reason you would want to use <code>__slots__</code>. </p>\n\n<p>Just for completeness of my notes, note that there is a one-time cost per slot in the class's namespace of 64 bytes in Python 2, and 72 bytes in Python 3, because slots use data descriptors like properties, called \"members\".</p>\n\n<pre><code>&gt;&gt;&gt; Foo.foo\n&lt;member 'foo' of 'Foo' objects&gt;\n&gt;&gt;&gt; type(Foo.foo)\n&lt;class 'member_descriptor'&gt;\n&gt;&gt;&gt; getsizeof(Foo.foo)\n72\n</code></pre>\n\n<h2>Demonstration of <code>__slots__</code>:</h2>\n\n<p>To deny the creation of a <code>__dict__</code>, you must subclass <code>object</code>:</p>\n\n<pre><code>class Base(object): \n    __slots__ = ()\n</code></pre>\n\n<p>now:</p>\n\n<pre><code>&gt;&gt;&gt; b = Base()\n&gt;&gt;&gt; b.a = 'a'\nTraceback (most recent call last):\n  File \"&lt;pyshell#38&gt;\", line 1, in &lt;module&gt;\n    b.a = 'a'\nAttributeError: 'Base' object has no attribute 'a'\n</code></pre>\n\n<p>Or subclass another class that defines <code>__slots__</code></p>\n\n<pre><code>class Child(Base):\n    __slots__ = ('a',)\n</code></pre>\n\n<p>and now:</p>\n\n<pre><code>c = Child()\nc.a = 'a'\n</code></pre>\n\n<p>but:</p>\n\n<pre><code>&gt;&gt;&gt; c.b = 'b'\nTraceback (most recent call last):\n  File \"&lt;pyshell#42&gt;\", line 1, in &lt;module&gt;\n    c.b = 'b'\nAttributeError: 'Child' object has no attribute 'b'\n</code></pre>\n\n<p>To allow <code>__dict__</code> creation while subclassing slotted objects, just add <code>'__dict__'</code> to the <code>__slots__</code> (note that slots are ordered, and you shouldn't repeat slots that are already in parent classes):</p>\n\n<pre><code>class SlottedWithDict(Child): \n    __slots__ = ('__dict__', 'b')\n\nswd = SlottedWithDict()\nswd.a = 'a'\nswd.b = 'b'\nswd.c = 'c'\n</code></pre>\n\n<p>and</p>\n\n<pre><code>&gt;&gt;&gt; swd.__dict__\n{'c': 'c'}\n</code></pre>\n\n<p>Or you don't even need to declare <code>__slots__</code> in your subclass, and you will still use slots from the parents, but not restrict the creation of a <code>__dict__</code>:</p>\n\n<pre><code>class NoSlots(Child): pass\nns = NoSlots()\nns.a = 'a'\nns.b = 'b'\n</code></pre>\n\n<p>And:</p>\n\n<pre><code>&gt;&gt;&gt; ns.__dict__\n{'b': 'b'}\n</code></pre>\n\n<p>However, <code>__slots__</code> may cause problems for multiple inheritance:</p>\n\n<pre><code>class BaseA(object): \n    __slots__ = ('a',)\n\nclass BaseB(object): \n    __slots__ = ('b',)\n</code></pre>\n\n<p>Because creating a child class from parents with both non-empty slots fails:</p>\n\n<pre><code>&gt;&gt;&gt; class Child(BaseA, BaseB): __slots__ = ()\nTraceback (most recent call last):\n  File \"&lt;pyshell#68&gt;\", line 1, in &lt;module&gt;\n    class Child(BaseA, BaseB): __slots__ = ()\nTypeError: Error when calling the metaclass bases\n    multiple bases have instance lay-out conflict\n</code></pre>\n\n<p>If you run into this problem, You <em>could</em> just remove <code>__slots__</code> from the parents, or if you have control of the parents, give them empty slots, or refactor to abstractions:</p>\n\n<pre><code>from abc import ABC\n\nclass AbstractA(ABC):\n    __slots__ = ()\n\nclass BaseA(AbstractA): \n    __slots__ = ('a',)\n\nclass AbstractB(ABC):\n    __slots__ = ()\n\nclass BaseB(AbstractB): \n    __slots__ = ('b',)\n\nclass Child(AbstractA, AbstractB): \n    __slots__ = ('a', 'b')\n\nc = Child() # no problem!\n</code></pre>\n\n<h3>Add <code>'__dict__'</code> to <code>__slots__</code> to get dynamic assignment:</h3>\n\n<pre><code>class Foo(object):\n    __slots__ = 'bar', 'baz', '__dict__'\n</code></pre>\n\n<p>and now:</p>\n\n<pre><code>&gt;&gt;&gt; foo = Foo()\n&gt;&gt;&gt; foo.boink = 'boink'\n</code></pre>\n\n<p>So with <code>'__dict__'</code> in slots we lose some of the size benefits with the upside of having dynamic assignment and still having slots for the names we do expect.</p>\n\n<p>When you inherit from an object that isn't slotted, you get the same sort of semantics when you use <code>__slots__</code> - names that are in <code>__slots__</code> point to  slotted values, while any other values are put in the instance's <code>__dict__</code>.</p>\n\n<p>Avoiding <code>__slots__</code> because you want to be able to add attributes on the fly is actually not a good reason - just add <code>\"__dict__\"</code> to your <code>__slots__</code> if this is required.</p>\n\n<p>You can similarly add <code>__weakref__</code> to <code>__slots__</code> explicitly if you need that feature.</p>\n\n<h3>Set to empty tuple when subclassing a namedtuple:</h3>\n\n<p>The namedtuple builtin make immutable instances that are very lightweight (essentially, the size of tuples) but to get the benefits, you need to do it yourself if you subclass them:</p>\n\n<pre><code>from collections import namedtuple\nclass MyNT(namedtuple('MyNT', 'bar baz')):\n    \"\"\"MyNT is an immutable and lightweight object\"\"\"\n    __slots__ = ()\n</code></pre>\n\n<p>usage:</p>\n\n<pre><code>&gt;&gt;&gt; nt = MyNT('bar', 'baz')\n&gt;&gt;&gt; nt.bar\n'bar'\n&gt;&gt;&gt; nt.baz\n'baz'\n</code></pre>\n\n<p>And trying to assign an unexpected attribute raises an <code>AttributeError</code> because we have prevented the creation of <code>__dict__</code>:</p>\n\n<pre><code>&gt;&gt;&gt; nt.quux = 'quux'\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'MyNT' object has no attribute 'quux'\n</code></pre>\n\n<p>You <em>can</em> allow <code>__dict__</code> creation by leaving off <code>__slots__ = ()</code>, but you can't use non-empty <code>__slots__</code> with subtypes of tuple.</p>\n\n<h2>Biggest Caveat: Multiple inheritance</h2>\n\n<p>Even when non-empty slots are the same for multiple parents, they cannot be used together:</p>\n\n<pre><code>class Foo(object): \n    __slots__ = 'foo', 'bar'\nclass Bar(object):\n    __slots__ = 'foo', 'bar' # alas, would work if empty, i.e. ()\n\n&gt;&gt;&gt; class Baz(Foo, Bar): pass\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: Error when calling the metaclass bases\n    multiple bases have instance lay-out conflict\n</code></pre>\n\n<p>Using an empty <code>__slots__</code> in the parent seems to provide the most flexibility, <strong>allowing the child to choose to prevent or allow</strong> (by adding <code>'__dict__'</code> to get dynamic assignment, see section above) <strong>the creation of a <code>__dict__</code></strong>:</p>\n\n<pre><code>class Foo(object): __slots__ = ()\nclass Bar(object): __slots__ = ()\nclass Baz(Foo, Bar): __slots__ = ('foo', 'bar')\nb = Baz()\nb.foo, b.bar = 'foo', 'bar'\n</code></pre>\n\n<p>You don't <em>have</em> to have slots - so if you add them, and remove them later, it shouldn't cause any problems.</p>\n\n<p><strong>Going out on a limb here</strong>: If you're composing <a href=\"https://stackoverflow.com/questions/860245/mixin-vs-inheritance/27907511#27907511\">mixins</a> or using <a href=\"https://stackoverflow.com/questions/372042/difference-between-abstract-class-and-interface-in-python/31439126#31439126\">abstract base classes</a>, which aren't intended to be instantiated, an empty <code>__slots__</code> in those parents seems to be the best way to go in terms of flexibility for subclassers.</p>\n\n<p>To demonstrate, first, let's create a class with code we'd like to use under multiple inheritance</p>\n\n<pre><code>class AbstractBase:\n    __slots__ = ()\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n    def __repr__(self):\n        return f'{type(self).__name__}({repr(self.a)}, {repr(self.b)})'\n</code></pre>\n\n<p>We could use the above directly by inheriting and declaring the expected slots:</p>\n\n<pre><code>class Foo(AbstractBase):\n    __slots__ = 'a', 'b'\n</code></pre>\n\n<p>But we don't care about that, that's trivial single inheritance, we need another class we might also inherit from, maybe with a noisy attribute:</p>\n\n<pre><code>class AbstractBaseC:\n    __slots__ = ()\n    @property\n    def c(self):\n        print('getting c!')\n        return self._c\n    @c.setter\n    def c(self, arg):\n        print('setting c!')\n        self._c = arg\n</code></pre>\n\n<p>Now if both bases had nonempty slots, we couldn't do the below. (In fact, if we wanted, we could have given <code>AbstractBase</code> nonempty slots a and b, and left them out of the below declaration - leaving them in would be wrong):</p>\n\n<pre><code>class Concretion(AbstractBase, AbstractBaseC):\n    __slots__ = 'a b _c'.split()\n</code></pre>\n\n<p>And now we have functionality from both via multiple inheritance, and can still deny <code>__dict__</code> and <code>__weakref__</code> instantiation:</p>\n\n<pre><code>&gt;&gt;&gt; c = Concretion('a', 'b')\n&gt;&gt;&gt; c.c = c\nsetting c!\n&gt;&gt;&gt; c.c\ngetting c!\nConcretion('a', 'b')\n&gt;&gt;&gt; c.d = 'd'\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'Concretion' object has no attribute 'd'\n</code></pre>\n\n<h2>Other cases to avoid slots:</h2>\n\n<ul>\n<li>Avoid them when you want to perform <code>__class__</code> assignment with another class that doesn't have them (and you can't add them) unless the slot layouts are identical. (I am very interested in learning who is doing this and why.)</li>\n<li>Avoid them if you want to subclass variable length builtins like long, tuple, or str, and you want to add attributes to them.</li>\n<li>Avoid them if you insist on providing default values via class attributes for instance variables. </li>\n</ul>\n\n<p>You may be able to tease out further caveats from the rest of the <code>__slots__</code> <a href=\"https://docs.python.org/3.7/reference/datamodel.html#slots\" rel=\"noreferrer\">documentation (the 3.7 dev docs are the most current)</a>, which I have made significant recent contributions to.</p>\n\n<h2>Critiques of other answers</h2>\n\n<p>The current top answers cite outdated information and are quite hand-wavy and miss the mark in some important ways.</p>\n\n<h3>Do not \"only use <code>__slots__</code> when instantiating lots of objects\"</h3>\n\n<p>I quote:</p>\n\n<blockquote>\n  <p>\"You would want to use <code>__slots__</code> if you are going to instantiate a lot (hundreds, thousands) of objects of the same class.\" </p>\n</blockquote>\n\n<p>Abstract Base Classes, for example, from the <code>collections</code> module, are not instantiated, yet <code>__slots__</code> are declared for them. </p>\n\n<p>Why?</p>\n\n<p>If a user wishes to deny <code>__dict__</code> or <code>__weakref__</code> creation, those things must not be available in the parent classes.</p>\n\n<p><code>__slots__</code> contributes to reusability when creating interfaces or mixins.</p>\n\n<p>It is true that many Python users aren't writing for reusability, but when you are, having the option to deny unnecessary space usage is valuable.</p>\n\n<h3><code>__slots__</code> doesn't break pickling</h3>\n\n<p>When pickling a slotted object, you may find it complains with a misleading <code>TypeError</code>: </p>\n\n<pre><code>&gt;&gt;&gt; pickle.loads(pickle.dumps(f))\nTypeError: a class that defines __slots__ without defining __getstate__ cannot be pickled\n</code></pre>\n\n<p>This is actually incorrect. This message comes from the oldest protocol, which is the default. You can select the latest protocol with the <code>-1</code> argument. In Python 2.7 this would be <code>2</code> (which was introduced in 2.3), and in 3.6 it is <code>4</code>.</p>\n\n<pre><code>&gt;&gt;&gt; pickle.loads(pickle.dumps(f, -1))\n&lt;__main__.Foo object at 0x1129C770&gt;\n</code></pre>\n\n<p>in Python 2.7:</p>\n\n<pre><code>&gt;&gt;&gt; pickle.loads(pickle.dumps(f, 2))\n&lt;__main__.Foo object at 0x1129C770&gt;\n</code></pre>\n\n<p>in Python 3.6</p>\n\n<pre><code>&gt;&gt;&gt; pickle.loads(pickle.dumps(f, 4))\n&lt;__main__.Foo object at 0x1129C770&gt;\n</code></pre>\n\n<p>So I would keep this in mind, as it is a solved problem.</p>\n\n<h2>Critique of the (until Oct 2, 2016) accepted answer</h2>\n\n<p>The first paragraph is half short explanation, half predictive. Here's the only part that actually answers the question</p>\n\n<blockquote>\n  <p>The proper use of <code>__slots__</code> is to save space in objects. Instead of having a dynamic dict that allows adding attributes to objects at anytime, there is a static structure which does not allow additions after creation. This saves the overhead of one dict for every object that uses slots</p>\n</blockquote>\n\n<p>The second half is wishful thinking, and off the mark:</p>\n\n<blockquote>\n  <p>While this is sometimes a useful optimization, it would be completely unnecessary if the Python interpreter was dynamic enough so that it would only require the dict when there actually were additions to the object.</p>\n</blockquote>\n\n<p>Python actually does something similar to this, only creating the <code>__dict__</code> when it is accessed, but creating lots of objects with no data is fairly ridiculous.</p>\n\n<p>The second paragraph oversimplifies and misses actual reasons to avoid <code>__slots__</code>. The below is <em>not</em> a real reason to avoid slots (for <em>actual</em> reasons, see the rest of my answer above.):</p>\n\n<blockquote>\n  <p>They change the behavior of the objects that have slots in a way that can be abused by control freaks and static typing weenies.</p>\n</blockquote>\n\n<p>It then goes on to discuss other ways of accomplishing that perverse goal with Python, not discussing anything to do with <code>__slots__</code>.</p>\n\n<p>The third paragraph is more wishful thinking. Together it is mostly off-the-mark content that the answerer didn't even author and contributes to ammunition for critics of the site.</p>\n\n<h1>Memory usage evidence</h1>\n\n<p>Create some normal objects and slotted objects:</p>\n\n<pre><code>&gt;&gt;&gt; class Foo(object): pass\n&gt;&gt;&gt; class Bar(object): __slots__ = ()\n</code></pre>\n\n<p>Instantiate a million of them:</p>\n\n<pre><code>&gt;&gt;&gt; foos = [Foo() for f in xrange(1000000)]\n&gt;&gt;&gt; bars = [Bar() for b in xrange(1000000)]\n</code></pre>\n\n<p>Inspect with <code>guppy.hpy().heap()</code>:</p>\n\n<pre><code>&gt;&gt;&gt; guppy.hpy().heap()\nPartition of a set of 2028259 objects. Total size = 99763360 bytes.\n Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)\n     0 1000000  49 64000000  64  64000000  64 __main__.Foo\n     1     169   0 16281480  16  80281480  80 list\n     2 1000000  49 16000000  16  96281480  97 __main__.Bar\n     3   12284   1   987472   1  97268952  97 str\n...\n</code></pre>\n\n<p>Access the regular objects and their <code>__dict__</code> and inspect again:</p>\n\n<pre><code>&gt;&gt;&gt; for f in foos:\n...     f.__dict__\n&gt;&gt;&gt; guppy.hpy().heap()\nPartition of a set of 3028258 objects. Total size = 379763480 bytes.\n Index  Count   %      Size    % Cumulative  % Kind (class / dict of class)\n     0 1000000  33 280000000  74 280000000  74 dict of __main__.Foo\n     1 1000000  33  64000000  17 344000000  91 __main__.Foo\n     2     169   0  16281480   4 360281480  95 list\n     3 1000000  33  16000000   4 376281480  99 __main__.Bar\n     4   12284   0    987472   0 377268952  99 str\n...\n</code></pre>\n\n<p>This is consistent with the history of Python, from <a href=\"https://www.python.org/download/releases/2.2.2/descrintro/\" rel=\"noreferrer\">Unifying types and classes in Python 2.2</a></p>\n\n<blockquote>\n  <p>If you subclass a built-in type, extra space is automatically added to the instances to accomodate <code>__dict__</code> and <code>__weakrefs__</code>. (The <code>__dict__</code> is not initialized until you use it though, so you shouldn't worry about the space occupied by an empty dictionary for each instance you create.) If you don't need this extra space, you can add the phrase \"<code>__slots__ = []</code>\" to your class.</p>\n</blockquote>\n"
    },
    "286": {
        "question_id": "44834",
        "answer_id": "44842",
        "question": "<p>I have been using Python more and more, and I keep seeing the variable <code>__all__</code> set in different <code>__init__.py</code> files.  Can someone explain what this does?</p>\n",
        "answer": "<p>It's a list of public objects of that module, as interpreted by <code>import *</code>. It overrides the default of hiding everything that begins with an underscore.</p>\n"
    },
    "287": {
        "question_id": "993984",
        "answer_id": "994010",
        "question": "<p>What are the advantages of <a href=\"http://en.wikipedia.org/wiki/NumPy\" rel=\"noreferrer\">NumPy</a> over regular Python lists?</p>\n\n<p>I have approximately 100 financial markets series, and I am going to create a cube array of 100x100x100 = 1 million cells. I will be regressing (3-variable) each x with each y and z, to fill the array with standard errors.</p>\n\n<p>I have heard that for \"large matrices\" I should use NumPy as opposed to Python lists, for performance and scalability reasons. Thing is, I know Python lists and they seem to work for me. </p>\n\n<p>What will the benefits be if I move to NumPy?</p>\n\n<p>What if I had 1000 series (that is, 1 billion floating point cells in the cube)? </p>\n",
        "answer": "<p>NumPy's arrays are more compact than Python lists -- a list of lists as you describe, in Python, would take at least 20 MB or so, while a NumPy 3D array with single-precision floats in the cells would fit in 4 MB. Access in reading and writing items is also faster with NumPy.</p>\n\n<p>Maybe you don't care that much for just a million cells, but you definitely would for a billion cells -- neither approach would fit in a 32-bit architecture, but with 64-bit builds NumPy would get away with 4 GB or so, Python alone would need at least about 12 GB (lots of pointers which double in size) -- a much costlier piece of hardware!</p>\n\n<p>The difference is mostly due to \"indirectness\" -- a Python list is an array of pointers to Python objects, at least 4 bytes per pointer plus 16 bytes for even the smallest Python object (4 for type pointer, 4 for reference count, 4 for value -- and the memory allocators rounds up to 16). A NumPy array is an array of uniform values -- single-precision numbers takes 4 bytes each, double-precision ones, 8 bytes. Less flexible, but you pay substantially for the flexibility of standard Python lists!</p>\n"
    },
    "288": {
        "question_id": "4664850",
        "answer_id": "4664889",
        "question": "<p>Python has <code>string.find()</code> and <code>string.rfind()</code> to get the index of a substring in a string.</p>\n\n<p>I'm wondering whether there is something like <code>string.find_all()</code> which can return all found indexes (not only the first from the beginning or the first from the end).</p>\n\n<p>For example:</p>\n\n<pre><code>string = \"test test test test\"\n\nprint string.find('test') # 0\nprint string.rfind('test') # 15\n\n#this is the goal\nprint string.find_all('test') # [0,5,10,15]\n</code></pre>\n",
        "answer": "<p>There is no simple built-in string function that does what you're looking for, but you could use the more powerful <a href=\"http://www.regular-expressions.info/\" rel=\"noreferrer\">regular expressions</a>:</p>\n\n<pre><code>import re\n[m.start() for m in re.finditer('test', 'test test test test')]\n#[0, 5, 10, 15]\n</code></pre>\n\n<p>If you want to find overlapping matches, <a href=\"http://www.regular-expressions.info/lookaround.html\" rel=\"noreferrer\">lookahead</a> will do that:</p>\n\n<pre><code>[m.start() for m in re.finditer('(?=tt)', 'ttt')]\n#[0, 1]\n</code></pre>\n\n<p>If you want a reverse find-all without overlaps, you can combine positive and negative lookahead into an expression like this:</p>\n\n<pre><code>search = 'tt'\n[m.start() for m in re.finditer('(?=%s)(?!.{1,%d}%s)' % (search, len(search)-1, search), 'ttt')]\n#[1]\n</code></pre>\n\n<p><a href=\"http://docs.python.org/library/re.html#re.finditer\" rel=\"noreferrer\"><code>re.finditer</code></a> returns a <a href=\"http://wiki.python.org/moin/Generators\" rel=\"noreferrer\">generator</a>, so you could change the <code>[]</code> in the above to <code>()</code> to get a generator instead of a list which will be more efficient if you're only iterating through the results once.</p>\n"
    },
    "289": {
        "question_id": "2347265",
        "answer_id": "2347423",
        "question": "<p>The <code>+=</code> operator in python seems to be operating unexpectedly on lists.  Can anyone tell me what is going on here?</p>\n\n<pre><code>class foo:  \n     bar = []\n     def __init__(self,x):\n         self.bar += [x]\n\n\nclass foo2:\n     bar = []\n     def __init__(self,x):\n          self.bar = self.bar + [x]\n\nf = foo(1)\ng = foo(2)\nprint f.bar\nprint g.bar \n\nf.bar += [3]\nprint f.bar\nprint g.bar\n\nf.bar = f.bar + [4]\nprint f.bar\nprint g.bar\n\nf = foo2(1)\ng = foo2(2)\nprint f.bar \nprint g.bar \n</code></pre>\n\n<p><strong>OUTPUT</strong></p>\n\n<pre><code>[1, 2]\n[1, 2]\n[1, 2, 3]\n[1, 2, 3]\n[1, 2, 3, 4]\n[1, 2, 3]\n[1]\n[2]\n</code></pre>\n\n<p><code>foo += bar</code> seems to affect every instance of the class, whereas <code>foo = foo + bar</code> seems to behave in the way I would expect things to behave. </p>\n\n<p>The <code>+=</code> operator is called a \"compound assignment operator\". </p>\n",
        "answer": "<p>The general answer is that <code>+=</code> tries to call the <code>__iadd__</code> special method, and if that isn't available it tries to use <code>__add__</code> instead. So the issue is with the difference between these special methods.</p>\n\n<p>The <code>__iadd__</code> special method is for an in-place addition, that is it mutates the object that it acts on. The <code>__add__</code> special method returns a new object and is also used for the standard <code>+</code> operator.</p>\n\n<p>So when the <code>+=</code> operator is used on an object which has an <code>__iadd__</code> defined the object is modified in place. Otherwise it will instead try to use the plain <code>__add__</code> and return a new object.</p>\n\n<p>That is why for mutable types like lists <code>+=</code> changes the object's value, whereas for immutable types like tuples, strings and integers a new object is returned instead (<code>a += b</code> becomes equivalent to <code>a = a + b</code>).</p>\n\n<p>For types that support both <code>__iadd__</code> and <code>__add__</code> you therefore have to be careful which one you use. <code>a += b</code> will call <code>__iadd__</code> and mutate <code>a</code>, whereas <code>a = a + b</code> will create a new object and assign it to <code>a</code>. They are not the same operation!</p>\n\n<pre><code>&gt;&gt;&gt; a1 = a2 = [1, 2]\n&gt;&gt;&gt; b1 = b2 = [1, 2]\n&gt;&gt;&gt; a1 += [3]          # Uses __iadd__, modifies a1 in-place\n&gt;&gt;&gt; b1 = b1 + [3]      # Uses __add__, creates new list, assigns it to b1\n&gt;&gt;&gt; a2\n[1, 2, 3]              # a1 and a2 are still the same list\n&gt;&gt;&gt; b2\n[1, 2]                 # whereas only b1 was changed\n</code></pre>\n\n<p>For immutable types (where you don't have an <code>__iadd__</code>) <code>a += b</code> and <code>a = a + b</code> are equivalent. This is what lets you use <code>+=</code> on immutable types, which might seem a strange design decision until you consider that otherwise you couldn't use <code>+=</code> on immutable types like numbers!</p>\n"
    },
    "290": {
        "question_id": "4856717",
        "answer_id": "10284006",
        "question": "<p>Is there a javascript equivalent of Python's zip function?  That is, given multiple arrays of equal lengths create an array of pairs.</p>\n\n<p>For instance, if I have three arrays that look like this:</p>\n\n<pre><code>var array1 = [1, 2, 3];\nvar array2 = ['a','b','c'];\nvar array3 = [4, 5, 6];\n</code></pre>\n\n<p>The output array should be:</p>\n\n<pre><code>var output array:[[1,'a',4], [2,'b',5], [3,'c',6]]\n</code></pre>\n",
        "answer": "<p><strong>2016 update:</strong></p>\n\n<p>Here's a snazzier Ecmascript 6 version:</p>\n\n<pre><code>zip= rows=&gt;rows[0].map((_,c)=&gt;rows.map(row=&gt;row[c]))\n</code></pre>\n\n<p>Illustration equiv. to <strong><em>Python</em></strong>{<code>zip(*args)</code>}:</p>\n\n<pre><code>&gt; zip([['row0col0', 'row0col1', 'row0col2'],\n       ['row1col0', 'row1col1', 'row1col2']]);\n[[\"row0col0\",\"row1col0\"],\n [\"row0col1\",\"row1col1\"],\n [\"row0col2\",\"row1col2\"]]\n</code></pre>\n\n<p>(and FizzyTea points out that ES6 has variadic argument syntax, so the following function definition will act like python, but see below for disclaimer... this will not be its own inverse so <code>zip(zip(x))</code> will not equal <code>x</code>; though as Matt Kramer points out <code>zip(...zip(...x))==x</code> (like in regular python <code>zip(*zip(*x))==x</code>))</p>\n\n<p>Alternative definition equiv. to <strong><em>Python</em></strong>{<code>zip</code>}:</p>\n\n<pre><code>&gt; zip = (...rows) =&gt; [...rows[0]].map((_,c) =&gt; rows.map(row =&gt; row[c]))\n&gt; zip( ['row0col0', 'row0col1', 'row0col2'] ,\n       ['row1col0', 'row1col1', 'row1col2'] );\n             // note zip(row0,row1), not zip(matrix)\nsame answer as above\n</code></pre>\n\n<p>(Do note that the <code>...</code> syntax may have performance issues at this time, and possibly in the future, so if you use the second answer with variadic arguments, you may want to perf test it.)</p>\n\n<hr>\n\n<p>Here's a oneliner:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function zip(arrays) {\n    return arrays[0].map(function(_,i){\n        return arrays.map(function(array){return array[i]})\n    });\n}\n\n// &gt; zip([[1,2],[11,22],[111,222]])\n// [[1,11,111],[2,22,222]]]\n\n// If you believe the following is a valid return value:\n//   &gt; zip([])\n//   []\n// then you can special-case it, or just do\n//  return arrays.length==0 ? [] : arrays[0].map(...)\n</code></pre>\n\n<hr>\n\n<p>The above assumes that the arrays are of equal size, as they should be. It also assumes you pass in a single list of lists argument, unlike Python's version where the argument list is variadic. <strong>If you want all of these</strong> \"features\", see below. It takes just about 2 extra lines of code.</p>\n\n<p>The following will mimic Python's <code>zip</code> behavior on edge cases where the arrays are not of equal size, silently pretending the longer parts of arrays don't exist:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function zip() {\n    var args = [].slice.call(arguments);\n    var shortest = args.length==0 ? [] : args.reduce(function(a,b){\n        return a.length&lt;b.length ? a : b\n    });\n\n    return shortest.map(function(_,i){\n        return args.map(function(array){return array[i]})\n    });\n}\n\n// &gt; zip([1,2],[11,22],[111,222,333])\n// [[1,11,111],[2,22,222]]]\n\n// &gt; zip()\n// []\n</code></pre>\n\n<p>This will mimic Python's <code>itertools.zip_longest</code> behavior, inserting <code>undefined</code> where arrays are not defined:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function zip() {\n    var args = [].slice.call(arguments);\n    var longest = args.reduce(function(a,b){\n        return a.length&gt;b.length ? a : b\n    }, []);\n\n    return longest.map(function(_,i){\n        return args.map(function(array){return array[i]})\n    });\n}\n\n// &gt; zip([1,2],[11,22],[111,222,333])\n// [[1,11,111],[2,22,222],[null,null,333]]\n\n// &gt; zip()\n// []\n</code></pre>\n\n<p>If you use these last two version (variadic aka. multiple-argument versions), then zip is no longer its own inverse. To mimic the <code>zip(*[...])</code> idiom from Python, you will need to do <code>zip.apply(this, [...])</code> when you want to invert the zip function or if you want to similarly have a variable number of lists as input.</p>\n\n<hr>\n\n<p><strong>addendum</strong>:</p>\n\n<p>To make this handle any iterable (e.g. in Python you can use <code>zip</code> on strings, ranges, map objects, etc.), you could define the following:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function iterView(iterable) {\n    // returns an array equivalent to the iterable\n}\n</code></pre>\n\n<p>However if you write <code>zip</code> in the following <a href=\"https://stackoverflow.com/a/13735425/711085\">way</a>, even that won't be necessary:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function zip(arrays) {\n    return Array.apply(null,Array(arrays[0].length)).map(function(_,i){\n        return arrays.map(function(array){return array[i]})\n    });\n}\n</code></pre>\n\n<p>Demo:</p>\n\n<pre><code>&gt; JSON.stringify( zip(['abcde',[1,2,3,4,5]]) )\n[[\"a\",1],[\"b\",2],[\"c\",3],[\"d\",4],[\"e\",5]]\n</code></pre>\n\n<p>(Or you could use a <code>range(...)</code> Python-style function if you've written one already. Eventually you will be able to use ECMAScript array comprehensions or generators.)</p>\n"
    },
    "291": {
        "question_id": "373335",
        "answer_id": "16786600",
        "question": "<p>I'm looking for a library in Python which will provide <code>at</code> and <code>cron</code> like functionality.</p>\n\n<p>I'd quite like have a pure Python solution, rather than relying on tools installed on the box; this way I run on machines with no cron.</p>\n\n<p>For those unfamiliar with <code>cron</code>: you can schedule tasks based upon an expression like: </p>\n\n<pre><code> 0 2 * * 7 /usr/bin/run-backup # run the backups at 0200 on Every Sunday\n 0 9-17/2 * * 1-5 /usr/bin/purge-temps # run the purge temps command, every 2 hours between 9am and 5pm on Mondays to Fridays.\n</code></pre>\n\n<p>The cron time expression syntax is less important, but I would like to have something with this sort of flexibility. </p>\n\n<p>If there isn't something that does this for me out-the-box, any suggestions for the building blocks to make something like this would be gratefully received.</p>\n\n<p><strong>Edit</strong>\nI'm not interested in launching processes, just \"jobs\" also written in Python - python functions. By necessity I think this would be a different thread, but not in a different process.</p>\n\n<p>To this end, I'm looking for the expressivity of the cron time expression, but in Python. </p>\n\n<p>Cron <em>has</em> been around for years, but I'm trying to be as portable as possible. I cannot rely on its presence.</p>\n",
        "answer": "<p>If you're looking for something lightweight checkout <a href=\"https://github.com/dbader/schedule\">schedule</a>:</p>\n\n<pre><code>import schedule\nimport time\n\ndef job():\n    print(\"I'm working...\")\n\nschedule.every(10).minutes.do(job)\nschedule.every().hour.do(job)\nschedule.every().day.at(\"10:30\").do(job)\n\nwhile 1:\n    schedule.run_pending()\n    time.sleep(1)\n</code></pre>\n\n<p><em>Disclosure</em>: I'm the author of that library.</p>\n"
    },
    "292": {
        "question_id": "5626193",
        "answer_id": "5626250",
        "question": "<p>I am trying to understand, what is monkey patching or a monkey patch? </p>\n\n<p>Is that something like methods/operators overloading or delegating? </p>\n\n<p>Does it have anything common with these things?</p>\n",
        "answer": "<p>No, it's not like any of those things. It's simply the dynamic replacement of attributes at runtime.</p>\n\n<p>For instance, consider a class that has a method <code>get_data</code>. This method does an external lookup (on a database or web API, for example), and various other methods in the class call it. However, in a unit test, you don't want to depend on the external data source - so you dynamically replace the <code>get_data</code> method with a stub that returns some fixed data.</p>\n\n<p>Because Python classes are mutable, and methods are just attributes of the class, you can do this as much as you like - and, in fact, you can even replace classes and functions in a module in exactly the same way.</p>\n\n<p>But, as a <a href=\"https://stackoverflow.com/users/2810305/lutz-prechelt\">commenter</a> pointed out, use caution when monkeypatching: </p>\n\n<ol>\n<li><p>If anything else besides your test logic calls <code>get_data</code> as well, it will also call your monkey-patched replacement rather than the original -- which can be good or bad. Just beware. </p></li>\n<li><p>If some variable or attribute exists that also points to the <code>get_data</code> function by the time you replace it, this alias will not change its meaning and will continue to point to the original <code>get_data</code>. (Why? Python just rebinds the name <code>get_data</code> in your class to some other function object; other name bindings are not impacted at all.) </p></li>\n</ol>\n"
    },
    "293": {
        "question_id": "13784201",
        "answer_id": "13784887",
        "question": "<p>I've spent entirely too long researching how to get two subplots to share the same y-axis with a single colorbar shared between the two in Matplotlib. </p>\n\n<p>What was happening was that when I called the <code>colorbar()</code> function in either <code>subplot1</code> or <code>subplot2</code>, it would autoscale the plot such that the colorbar plus the plot would fit inside the 'subplot' bounding box, causing the two side-by-side plots to be two very different sizes.</p>\n\n<p>To get around this, I tried to create a third subplot which I then hacked to render no plot with just a colorbar present. \nThe only problem is, now the heights and widths of the two plots are uneven, and I can't figure out how to make it look okay.</p>\n\n<p>Here is my code:</p>\n\n<pre><code>from __future__ import division\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib import patches\nfrom matplotlib.ticker import NullFormatter\n\n# SIS Functions\nTE = 1 # Einstein radius\ng1 = lambda x,y: (TE/2) * (y**2-x**2)/((x**2+y**2)**(3/2)) \ng2 = lambda x,y: -1*TE*x*y / ((x**2+y**2)**(3/2))\nkappa = lambda x,y: TE / (2*np.sqrt(x**2+y**2))\n\ncoords = np.linspace(-2,2,400)\nX,Y = np.meshgrid(coords,coords)\ng1out = g1(X,Y)\ng2out = g2(X,Y)\nkappaout = kappa(X,Y)\nfor i in range(len(coords)):\n    for j in range(len(coords)):\n        if np.sqrt(coords[i]**2+coords[j]**2) &lt;= TE:\n            g1out[i][j]=0\n            g2out[i][j]=0\n\nfig = plt.figure()\nfig.subplots_adjust(wspace=0,hspace=0)\n\n# subplot number 1\nax1 = fig.add_subplot(1,2,1,aspect='equal',xlim=[-2,2],ylim=[-2,2])\nplt.title(r\"$\\gamma_{1}$\",fontsize=\"18\")\nplt.xlabel(r\"x ($\\theta_{E}$)\",fontsize=\"15\")\nplt.ylabel(r\"y ($\\theta_{E}$)\",rotation='horizontal',fontsize=\"15\")\nplt.xticks([-2.0,-1.5,-1.0,-0.5,0,0.5,1.0,1.5])\nplt.xticks([-2.0,-1.5,-1.0,-0.5,0,0.5,1.0,1.5])\nplt.imshow(g1out,extent=(-2,2,-2,2))\nplt.axhline(y=0,linewidth=2,color='k',linestyle=\"--\")\nplt.axvline(x=0,linewidth=2,color='k',linestyle=\"--\")\ne1 = patches.Ellipse((0,0),2,2,color='white')\nax1.add_patch(e1)\n\n# subplot number 2\nax2 = fig.add_subplot(1,2,2,sharey=ax1,xlim=[-2,2],ylim=[-2,2])\nplt.title(r\"$\\gamma_{2}$\",fontsize=\"18\")\nplt.xlabel(r\"x ($\\theta_{E}$)\",fontsize=\"15\")\nax2.yaxis.set_major_formatter( NullFormatter() )\nplt.axhline(y=0,linewidth=2,color='k',linestyle=\"--\")\nplt.axvline(x=0,linewidth=2,color='k',linestyle=\"--\")\nplt.imshow(g2out,extent=(-2,2,-2,2))\ne2 = patches.Ellipse((0,0),2,2,color='white')\nax2.add_patch(e2)\n\n# subplot for colorbar\nax3 = fig.add_subplot(1,1,1)\nax3.axis('off')\ncbar = plt.colorbar(ax=ax2)\n\nplt.show()\n</code></pre>\n",
        "answer": "<p>Just place the colorbar in its own axis and use <code>subplots_adjust</code> to make room for it.</p>\n\n<p>As a quick example:</p>\n\n<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\nfig, axes = plt.subplots(nrows=2, ncols=2)\nfor ax in axes.flat:\n    im = ax.imshow(np.random.random((10,10)), vmin=0, vmax=1)\n\nfig.subplots_adjust(right=0.8)\ncbar_ax = fig.add_axes([0.85, 0.15, 0.05, 0.7])\nfig.colorbar(im, cax=cbar_ax)\n\nplt.show()\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/vsugg.png\" alt=\"enter image description here\"></p>\n"
    },
    "294": {
        "question_id": "21553327",
        "answer_id": "21553825",
        "question": "<p>I often see comments on other Stack Overflow questions about how the use of <code>except: pass</code> is discouraged. Why is this bad? Sometimes I just don't care what the errors, are and I want to just continue with the code.</p>\n\n<pre><code>try:\n    something\nexcept:\n    pass\n</code></pre>\n\n<p>Why is using an <code>except: pass</code> block bad? What makes it bad? Is it the fact that I <code>pass</code> on an error or that I <code>except</code> any error?</p>\n",
        "answer": "<p>As you correctly guessed, there are two sides to it: Catching <em>any</em> error by specifying no exception type after <code>except</code>, and simply passing it without taking any action.</p>\n\n<p>My explanation is \u201ca bit\u201d longer\u2014so tl;dr it breaks down to this:</p>\n\n<ol>\n<li><strong>Don\u2019t catch <em>any</em> error</strong>. Always specify which exceptions you are prepared to recover from and only catch those.</li>\n<li><strong>Try to avoid passing in except blocks</strong>. Unless explicitly desired, this is usually not a good sign.</li>\n</ol>\n\n<p>But let\u2019s go into detail:</p>\n\n<h3>Don\u2019t catch <em>any</em> error</h3>\n\n<p>When using a <code>try</code> block, you usually do this because you know that there is a chance of an exception being thrown. As such, you also already have an approximate idea of <em>what</em> can break and what exception can be thrown. In such cases, you catch an exception because you can <em>positively recover</em> from it. That means that you are prepared for the exception and have some alternative plan which you will follow in case of that exception.</p>\n\n<p>For example, when you ask for the user to input a number, you can convert the input using <code>int()</code> which might raise a <a href=\"http://docs.python.org/3/library/exceptions.html#ValueError\"><code>ValueError</code></a>. You can easily recover that by simply asking the user to try it again, so catching the <code>ValueError</code> and prompting the user again would be an appropriate plan. A different example would be if you want to read some configuration from a file, and that file happens to not exist. Because it is a configuration file, you might have some default configuration as a fallback, so the file is not exactly necessary. So catching a <a href=\"http://docs.python.org/3/library/exceptions.html#FileNotFoundError\"><code>FileNotFoundError</code></a> and simply applying the default configuration would be a good plan here. Now in both these cases, we have a very specific exception we expect and have an equally specific plan to recover from it. As such, in each case, we explicitly only <code>except</code> <em>that certain</em> exception.</p>\n\n<p>However, if we were to catch <em>everything</em>, then\u2014in addition to those exceptions we are prepared to recover from\u2014there is also a chance that we get exceptions that we didn\u2019t expect, and which we indeed cannot recover from; or shouldn\u2019t recover from.</p>\n\n<p>Let\u2019s take the configuration file example from above. In case of a missing file, we just applied our default configuration, and might decided at a later point to automatically save the configuration (so next time, the file exists). Now imagine we get a <a href=\"http://docs.python.org/3/library/exceptions.html#IsADirectoryError\"><code>IsADirectoryError</code></a>, or a <a href=\"http://docs.python.org/3/library/exceptions.html#PermissionError\"><code>PermissionError</code></a> instead. In such cases, we probably do not want to continue; we could still apply our default configuration, but we later won\u2019t be able to save the file. And it\u2019s likely that the user meant to have a custom configuration too, so using the default values is likely not desired. So we would want to tell the user about it immediately, and probably abort the program execution too. But that\u2019s not something we want to do somewhere deep within some small code part; this is something of application-level importance, so it should be handled at the top\u2014so let the exception bubble up.</p>\n\n<p>Another simple example is also mentioned in the <a href=\"http://docs.python.org/2/howto/doanddont.html#except\">Python 2 idioms</a> document. Here, a simple typo exists in the code which causes it to break. Because we are catching <em>every</em> exception, we also catch <a href=\"http://docs.python.org/3/library/exceptions.html#NameError\"><code>NameError</code>s</a> and <a href=\"http://docs.python.org/3/library/exceptions.html#SyntaxError\"><code>SyntaxError</code>s</a>. Both are mistakes that happen to us all while programming; and both are mistakes we absolutely don\u2019t want to include when shipping the code. But because we also caught those, we won\u2019t even know that they occurred there and lose any help to debug it correctly.</p>\n\n<p>But there are also more dangerous exceptions which we are unlikely prepared for. For example <a href=\"http://docs.python.org/3/library/exceptions.html#SystemError\">SystemError</a> is usually something that happens rarely and which we cannot really plan for; it means there is something more complicated going on, something that likely prevents us from continuing the current task.</p>\n\n<p>In any case, it\u2019s very unlikely that you are prepared for everything in a small scale part of the code, so that\u2019s really where you should only catch those exceptions you are prepared for. Some people suggest to at least catch <a href=\"http://docs.python.org/3/library/exceptions.html#Exception\"><code>Exception</code></a> as it won\u2019t include things like <code>SystemExit</code> and <code>KeyboardInterrupt</code> which <em>by design</em> are to terminate your application, but I would argue that this is still far too unspecific. There is only one place where I personally accept catching <code>Exception</code> or just <em>any</em> exception, and that is in a single global application-level exception handler which has the single purpose to log any exception we were not prepared for. That way, we can still retain as much information about unexpected exceptions, which we then can use to extend our code to handle those explicitly (if we can recover from them) or\u2014in case of a bug\u2014to create test cases to make sure it won\u2019t happen again. But of course, that only works if we only ever caught those exceptions we were already expecting, so the ones we didn\u2019t expect will naturally bubble up.</p>\n\n<h3>Try to avoid passing in except blocks</h3>\n\n<p>When explicitly catching a small selection of specific exceptions, there are many situations in which we will be fine by simply doing nothing. In such cases, just having <code>except SomeSpecificException: pass</code> is just fine. Most of the time though, this is not the case as we likely need some code related to the recovery process (as mentioned above). This can be for example something that retries the action again, or to set up a default value instead.</p>\n\n<p>If that\u2019s not the case though, for example because our code is already structured to repeat until it succeeds, then just passing is good enough. Taking our example from above, we might want to ask the user to enter a number. Because we know that users like to not do what we ask them for, we might just put it into a loop in the first place, so it could look like this:</p>\n\n<pre><code>def askForNumber ():\n    while True:\n        try:\n            return int(input('Please enter a number: '))\n        except ValueError:\n            pass\n</code></pre>\n\n<p>Because we keep trying until no exception is thrown, we don\u2019t need to do anything special in the except block, so this is fine. But of course, one might argue that we at least want to show the user some error message to tell him why he has to repeat the input.</p>\n\n<p>In many other cases though, just passing in an <code>except</code> is a sign that we weren\u2019t really prepared for the exception we are catching. Unless those exceptions are simple (like <code>ValueError</code> or <code>TypeError</code>), and the reason why we can pass is obvious, try to avoid just passing. If there\u2019s really nothing to do (and you are absolutely sure about it), then consider adding a comment why that\u2019s the case; otherwise, expand the except block to actually include some recovery code.</p>\n\n<h3><code>except: pass</code></h3>\n\n<p>The worst offender though is the combination of both. This means that we are willingly catching <em>any</em> error although we are absolutely not prepared for it <strong>and</strong> we also don\u2019t do anything about it. You <em>at least</em> want to log the error and also likely reraise it to still terminate the application (it\u2019s unlikely you can continue like normal after a MemoryError). Just passing though will not only keep the application somewhat alive (depending where you catch of course), but also throw away all the information, making it impossible to discover the error\u2014which is especially true if you are not the one discovering it.</p>\n\n<hr>\n\n<p>So the bottom line is: Catch only exceptions you really expect and are prepared to recover from; all others are likely either mistakes you should fix, or something you are not prepared for anyway. Passing <em>specific</em> exceptions is fine if you really don\u2019t need to do something about them. In all other cases, it\u2019s just a sign of presumption and being lazy. And you definitely want to fix that.</p>\n"
    },
    "295": {
        "question_id": "15197673",
        "answer_id": "15197698",
        "question": "<p>I have a situation with some code where <code>eval()</code> came up as a possible solution.  Now I have never had\nto use <code>eval()</code> before but, I have come across plenty of information about the potential\ndanger it can cause.  That said, I'm very wary about using it.</p>\n\n<p>My situation is that I have input being given by a user:</p>\n\n<pre><code>datamap = raw_input('Provide some data here: ')\n</code></pre>\n\n<p>Where <code>datamap</code> needs to be a dictionary.  I searched around and found that <code>eval()</code> could work this out.\nI thought that I might be able to check the type of the input before trying to use the data and that\nwould be a viable security precaution.</p>\n\n<pre><code>datamap = eval(raw_input('Provide some data here: ')\nif not isinstance(datamap, dict):\n    return\n</code></pre>\n\n<p>I read through the docs and I am still unclear if this would be safe or not.  Does eval evaluate the data as soon as its entered or after the <code>datamap</code> variable is called?</p>\n\n<p>Is the <code>ast</code> module's <code>.literal_eval()</code> the only safe option?</p>\n",
        "answer": "<p><code>datamap = eval(raw_input('Provide some data here: '))</code> means that you actually evaluate the code <em>before</em> you deem it to be unsafe or not. It evaluates the code as soon as the function is called. See also <a href=\"http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html\" rel=\"noreferrer\">the dangers of <code>eval</code></a>.</p>\n\n<p><code>ast.literal_eval</code> raises an exception if the input isn't a valid Python datatype, so the code won't be executed if it's not.</p>\n\n<p>Use <code>ast.literal_eval</code> whenever you need <code>eval</code>. You shouldn't usually evaluate literal Python statements.</p>\n"
    },
    "296": {
        "question_id": "152580",
        "answer_id": "152596",
        "question": "<p>What is the best way to check whether a given object is of a given type? How about checking whether the object inherits from a given type?</p>\n\n<p>Let's say I have an object <code>o</code>. How do I check whether it's a <code>str</code>?</p>\n",
        "answer": "<p>To check if <code>o</code> is an instance of <code>str</code> or any subclass of <code>str</code>, use <a href=\"https://docs.python.org/3/library/functions.html#isinstance\" rel=\"noreferrer\">isinstance</a> (this would be the \"canonical\" way):</p>\n\n<pre><code>if isinstance(o, str):\n</code></pre>\n\n<p>To check if the type of <code>o</code> is exactly <code>str</code> (exclude subclasses):</p>\n\n<pre><code>if type(o) is str:\n</code></pre>\n\n<p>The following also works, and can be useful in some cases:</p>\n\n<pre><code>if issubclass(type(o), str):\n</code></pre>\n\n<p>See <a href=\"http://docs.python.org/2/library/functions.html\" rel=\"noreferrer\">Built-in Functions</a> in the Python Library Reference for relevant information.</p>\n\n<p>One more note: in this case, if you're using python 2, you may actually want to use:</p>\n\n<pre><code>if isinstance(o, basestring):\n</code></pre>\n\n<p>because this will also catch Unicode strings (<a href=\"https://docs.python.org/2/library/functions.html#unicode\" rel=\"noreferrer\"><code>unicode</code></a> is not a subclass of <code>str</code>; both <code>str</code> and <code>unicode</code> are subclasses of <a href=\"https://docs.python.org/2/library/functions.html#basestring\" rel=\"noreferrer\"><code>basestring</code></a>). Note that <code>basestring</code> no longer exists in python 3, where there's <a href=\"https://docs.python.org/3.0/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit\" rel=\"noreferrer\">a strict separation</a> of strings (<a href=\"https://docs.python.org/3/library/functions.html#func-str\" rel=\"noreferrer\"><code>str</code></a>) and binary data (<a href=\"https://docs.python.org/3/library/functions.html#func-bytes\" rel=\"noreferrer\"><code>bytes</code></a>).</p>\n\n<p>Alternatively, <code>isinstance</code> accepts a tuple of classes. This will return True if x is an instance of any subclass of any of (str, unicode):</p>\n\n<pre><code>if isinstance(o, (str, unicode)):\n</code></pre>\n"
    },
    "297": {
        "question_id": "3939361",
        "answer_id": "3939381",
        "question": "<p>I'm trying to remove specific characters from a string using Python. This is the code I'm using right now. Unfortunately it appears to do nothing to the string.</p>\n\n<pre><code>for char in line:\n    if char in \" ?.!/;:\":\n        line.replace(char,'')\n</code></pre>\n\n<p>How do I do this properly?</p>\n",
        "answer": "<p>Strings in Python are <em>immutable</em> (can't be changed).  Because of this, the effect of <code>line.replace(...)</code> is just to create a new string, rather than changing the old one.  You need to <em>rebind</em> (assign) it to <code>line</code> in order to have that variable take the new value, with those characters removed.</p>\n\n<p>Also, the way you are doing it is going to be kind of slow, relatively.  It's also likely to be a bit confusing to experienced pythonators, who will see a doubly-nested structure and think for a moment that something more complicated is going on.</p>\n\n<p>Starting in Python 2.6 and newer Python 2.x versions *, you can instead use <a href=\"https://docs.python.org/2/library/stdtypes.html#str.translate\" rel=\"noreferrer\"><code>str.translate</code></a>, (but read on for Python 3 differences):</p>\n\n<pre><code>line = line.translate(None, '!@#$')\n</code></pre>\n\n<p>or regular expression replacement with <a href=\"https://docs.python.org/2/library/re.html#re.sub\" rel=\"noreferrer\"><code>re.sub</code></a></p>\n\n<pre><code>import re\nline = re.sub('[!@#$]', '', line)\n</code></pre>\n\n<p>The characters enclosed in brackets constitute a <em>character class</em>.  Any characters in <code>line</code> which are in that class are replaced with the second parameter to <code>sub</code>: an empty string.</p>\n\n<p>In Python 3, strings are Unicode. You'll have to translate a little differently. kevpie mentions this in a <a href=\"https://stackoverflow.com/questions/3939361/remove-specific-characters-from-a-string-in-python#comment-4205256\">comment</a> on one of the answers, and it's noted in the <a href=\"https://docs.python.org/2/library/stdtypes.html#str.translate\" rel=\"noreferrer\">documentation for <code>str.translate</code></a>.</p>\n\n<p>When calling the <code>translate</code> method of a Unicode string, you cannot pass the second parameter that we used above. You also can't pass <code>None</code> as the first parameter, or even a translation table from <code>string.maketrans</code>. Instead, you pass a dictionary as the only parameter. This dictionary maps the <em>ordinal values</em> of characters (i.e. the result of calling <a href=\"https://docs.python.org/2/library/functions.html#ord\" rel=\"noreferrer\"><code>ord</code></a> on them) to the ordinal values of the characters which should replace them, or\u2014usefully to us\u2014<code>None</code> to indicate that they should be deleted.</p>\n\n<p>So to do the above dance with a Unicode string you would call something like</p>\n\n<pre><code>translation_table = dict.fromkeys(map(ord, '!@#$'), None)\nunicode_line = unicode_line.translate(translation_table)\n</code></pre>\n\n<p>Here <a href=\"https://docs.python.org/2/library/stdtypes.html#dict.fromkeys\" rel=\"noreferrer\"><code>dict.fromkeys</code></a> and <a href=\"https://docs.python.org/2/library/functions.html#map\" rel=\"noreferrer\"><code>map</code></a> are used to succinctly generate a dictionary containing</p>\n\n<pre><code>{ord('!'): None, ord('@'): None, ...}\n</code></pre>\n\n<p>Even simpler, as <a href=\"https://stackoverflow.com/questions/23175809/typeerror-translate-takes-one-argument-2-given-python\">another answer puts it</a>, create the dictionary in place:</p>\n\n<pre><code>unicode_line = unicode_line.translate({ord(c): None for c in '!@#$'})\n</code></pre>\n\n<hr>\n\n<p>*   for compatibility with earlier Pythons, you can create a \"null\" translation table to pass in place of <code>None</code>:</p>\n\n<pre><code>import string\nline = line.translate(string.maketrans('', ''), '!@#$')\n</code></pre>\n\n<p>Here <a href=\"https://docs.python.org/2/library/string.html#string.maketrans\" rel=\"noreferrer\"><code>string.maketrans</code></a> is used to create a <em>translation table</em>, which is just a string containing the characters with ordinal values 0 to 255.</p>\n"
    },
    "298": {
        "question_id": "1316767",
        "answer_id": "1316793",
        "question": "<p>I wrote a Python program that acts on a large input file to create a few million objects representing triangles.  The algorithm is:</p>\n\n<ol>\n<li>read an input file</li>\n<li>process the file and create a list of triangles, represented by their vertices</li>\n<li>output the vertices in the OFF format: a list of vertices followed by a list of triangles.  The triangles are represented by indices into the list of vertices</li>\n</ol>\n\n<p>The requirement of OFF that I print out the complete list of vertices before I print out the triangles means that I have to hold the list of triangles in memory before I write the output to file.  In the meanwhile I'm getting memory errors because of the sizes of the lists.  </p>\n\n<p>What is the best way to tell Python that I no longer need some of the data, and it can be freed?</p>\n",
        "answer": "<p>According to <a href=\"http://docs.python.org/library/gc.html\" rel=\"noreferrer\">Python Official Documentation</a>, you can force the Garbage Collector to release unreferenced memory with <code>gc.collect()</code>. Example:</p>\n\n<pre><code>import gc\ngc.collect()\n</code></pre>\n"
    },
    "299": {
        "question_id": "483666",
        "answer_id": "483833",
        "question": "<p>Given a dictionary like so:</p>\n\n<pre><code>my_map = { 'a': 1, 'b':2 }\n</code></pre>\n\n<p>How can one invert this map to get:</p>\n\n<pre><code>inv_map = { 1: 'a', 2: 'b' }\n</code></pre>\n\n<p><strong>EDITOR NOTE:</strong> <code>map</code> changed to <code>my_map</code> to avoid conflicts with the built-in function, <code>map</code>. Some comments may be affected below.</p>\n",
        "answer": "<p>For Python 2.7.x</p>\n\n<pre><code>inv_map = {v: k for k, v in my_map.iteritems()}\n</code></pre>\n\n<p>For Python 3+:</p>\n\n<pre><code>inv_map = {v: k for k, v in my_map.items()}\n</code></pre>\n"
    },
    "300": {
        "question_id": "3033952",
        "answer_id": "3386632",
        "question": "<p>Is there a Pool class for worker <strong>threads</strong>, similar to the multiprocessing module's <a href=\"http://docs.python.org/library/multiprocessing.html#module-multiprocessing.pool\" rel=\"noreferrer\">Pool class</a>?</p>\n\n<p>I like for example the easy way to parallelize a map function</p>\n\n<pre><code>def long_running_func(p):\n    c_func_no_gil(p)\n\np = multiprocessing.Pool(4)\nxs = p.map(long_running_func, range(100))\n</code></pre>\n\n<p>however I would like to do it without the overhead of creating new processes.</p>\n\n<p>I know about the GIL. However, in my usecase, the function will be an IO-bound C function for which the python wrapper will release the GIL before the actual function call.</p>\n\n<p>Do I have to write my own threading pool?</p>\n",
        "answer": "<p>I just found out that there actually  <em>is</em> a thread-based Pool interface in the <code>multiprocessing</code> module, however it is hidden somewhat and not properly documented.</p>\n\n<p>It can be imported via</p>\n\n<pre><code>from multiprocessing.pool import ThreadPool\n</code></pre>\n\n<p>It is implemented using a dummy Process class wrapping a python thread.  This thread-based Process class can be found in <a href=\"http://docs.python.org/dev/py3k/library/multiprocessing.html#module-multiprocessing.dummy\" rel=\"noreferrer\"><code>multiprocessing.dummy</code></a> which is mentioned briefly in the <a href=\"http://docs.python.org/dev/py3k/library/multiprocessing.html#module-multiprocessing.dummy\" rel=\"noreferrer\">docs</a>.  This dummy module supposedly provides the whole multiprocessing interface based on threads.</p>\n"
    },
    "301": {
        "question_id": "27835619",
        "answer_id": "28052583",
        "question": "<p>I am getting the following error:</p>\n\n<pre><code>Exception in thread Thread-3:\nTraceback (most recent call last):\nFile \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py\", line 810, in        __bootstrap_inner\nself.run()\nFile \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py\", line 763, in  run\nself.__target(*self.__args, **self.__kwargs)\nFile \"/Users/Matthew/Desktop/Skypebot 2.0/bot.py\", line 271, in process\ninfo = urllib2.urlopen(req).read()\nFile \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py\", line 154, in urlopen\nreturn opener.open(url, data, timeout)\nFile \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py\", line 431, in open\nresponse = self._open(req, data)\nFile \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py\", line 449, in _open\n'_open', req)\nFile \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py\", line 409, in _call_chain\nresult = func(*args)\nFile \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py\", line 1240, in https_open\ncontext=self._context)\nFile \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py\", line 1197, in do_open\nraise URLError(err)\nURLError: &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:581)&gt;\n</code></pre>\n\n<p>This is the code that is causing this error:</p>\n\n<pre><code>if input.startswith(\"!web\"):\n    input = input.replace(\"!web \", \"\")      \n    url = \"https://domainsearch.p.mashape.com/index.php?name=\" + input\n    req = urllib2.Request(url, headers={ 'X-Mashape-Key': 'XXXXXXXXXXXXXXXXXXXX' })\n    info = urllib2.urlopen(req).read()\n    Message.Chat.SendMessage (\"\" + info)\n</code></pre>\n\n<p>The API I'm using requires me to use HTTPS. How can I make it bypass the verification?</p>\n",
        "answer": "<p>If you <strong>just</strong> want to bypass verification, you can create a new <a href=\"https://docs.python.org/2/library/ssl.html#ssl.SSLContext\" rel=\"noreferrer\">SSLContext</a>. By default newly created contexts use <a href=\"https://docs.python.org/2/library/ssl.html#ssl.CERT_NONE\" rel=\"noreferrer\">CERT_NONE</a>.</p>\n\n<p>Be careful with this as stated in section <a href=\"https://docs.python.org/2/library/ssl.html#verifying-certificates\" rel=\"noreferrer\">17.3.7.2.1</a></p>\n\n<blockquote>\n  <p>When calling the SSLContext constructor directly, CERT_NONE is the default. Since it does not authenticate the other peer, it can be insecure, especially in client mode where most of time you would like to ensure the authenticity of the server you\u2019re talking to. Therefore, when in client mode, it is highly recommended to use CERT_REQUIRED. </p>\n</blockquote>\n\n<p>But if you just want it to work now for some other reason you can do the following, you'll have to <code>import ssl</code> as well:</p>\n\n<pre><code>input = input.replace(\"!web \", \"\")      \nurl = \"https://domainsearch.p.mashape.com/index.php?name=\" + input\nreq = urllib2.Request(url, headers={ 'X-Mashape-Key': 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' })\ngcontext = ssl.SSLContext()  # Only for gangstars\ninfo = urllib2.urlopen(req, context=gcontext).read()\nMessage.Chat.SendMessage (\"\" + info)\n</code></pre>\n\n<p>This should get round your problem but you're not really solving any of the issues, but you won't see the <code>[SSL: CERTIFICATE_VERIFY_FAILED]</code> because you now aren't verifying the cert!</p>\n\n<p>To add to the above, if you want to know more about why you are seeing these issues you will want to have a look at <a href=\"https://www.python.org/dev/peps/pep-0476/\" rel=\"noreferrer\">PEP 476</a>.</p>\n\n<blockquote>\n  <p>This PEP proposes to enable verification of X509 certificate signatures, as well as hostname verification for Python's HTTP clients by default, subject to opt-out on a per-call basis. This change would be applied to Python 2.7, Python 3.4, and Python 3.5. </p>\n</blockquote>\n\n<p>There is an advised opt out which isn't dissimilar to my advice above:</p>\n\n<pre><code>import ssl\n\n# This restores the same behavior as before.\ncontext = ssl._create_unverified_context()\nurllib.urlopen(\"https://no-valid-cert\", context=context)\n</code></pre>\n\n<p>It also features a <strong>highly discouraged</strong> option via <a href=\"http://en.wikipedia.org/wiki/Monkey_patch\" rel=\"noreferrer\">monkeypatching</a> which you don't often see in python:</p>\n\n<pre><code>import ssl\n\nssl._create_default_https_context = ssl._create_unverified_context\n</code></pre>\n\n<p>Which overrides the default function for context creation with the function to create an unverified context.</p>\n\n<p>Please note with this as stated in the PEP:</p>\n\n<blockquote>\n  <p>This guidance is aimed primarily at system administrators that wish to adopt newer versions of Python that implement this PEP in legacy environments that do not yet support certificate verification on HTTPS connections. For example, an administrator may opt out by adding the monkeypatch above to sitecustomize.py in their Standard Operating Environment for Python. <strong>Applications and libraries SHOULD NOT be making this change process wide</strong> (except perhaps in response to a system administrator controlled configuration setting). </p>\n</blockquote>\n\n<p>If you want to read a paper on why not validating certs is bad in software <a href=\"https://web.archive.org/web/20170829220032/http://www.cs.utexas.edu/~shmat/shmat_ccs12.pdf\" rel=\"noreferrer\">you can find it here</a>!</p>\n"
    },
    "302": {
        "question_id": "8548030",
        "answer_id": "8548165",
        "question": "<p>I'm trying to use pip to install a package.  I try to run <code>pip install</code> from the Python shell, but I get a <code>SyntaxError</code>.  Why do I get this error?  How do I use pip to install the package?</p>\n\n<pre><code>&gt;&gt;&gt; pip install selenium\n              ^\nSyntaxError: invalid syntax\n</code></pre>\n",
        "answer": "<p>pip is run from the command line, not the Python interpreter. It is a program that <strong>installs</strong> modules, so you can use them from Python. Once you have installed the module, then you can open the Python shell and do <code>import selenium</code>.</p>\n\n<p>The Python shell is not a command line, it is an interactive interpreter. You type Python code into it, not commands.</p>\n"
    },
    "303": {
        "question_id": "14692690",
        "answer_id": "14692747",
        "question": "<p>I have a complex dictionary structure which I would like to access via a list of keys to address the correct item.</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>dataDict = {\n    \"a\":{\n        \"r\": 1,\n        \"s\": 2,\n        \"t\": 3\n        },\n    \"b\":{\n        \"u\": 1,\n        \"v\": {\n            \"x\": 1,\n            \"y\": 2,\n            \"z\": 3\n        },\n        \"w\": 3\n        }\n}    \n\nmaplist = [\"a\", \"r\"]\n</code></pre>\n\n<p>or    </p>\n\n<pre><code>maplist = [\"b\", \"v\", \"y\"]\n</code></pre>\n\n<p>I have made the following code which works but I'm sure there is a better and more efficient way to do this if anyone has an idea.</p>\n\n<pre><code># Get a given data from a dictionary with position provided as a list\ndef getFromDict(dataDict, mapList):    \n    for k in mapList: dataDict = dataDict[k]\n    return dataDict\n\n# Set a given data in a dictionary with position provided as a list\ndef setInDict(dataDict, mapList, value): \n    for k in mapList[:-1]: dataDict = dataDict[k]\n    dataDict[mapList[-1]] = value\n</code></pre>\n",
        "answer": "<p>Use <code>reduce()</code> to traverse the dictionary:</p>\n\n<pre><code>from functools import reduce  # forward compatibility for Python 3\nimport operator\n\ndef getFromDict(dataDict, mapList):\n    return reduce(operator.getitem, mapList, dataDict)\n</code></pre>\n\n<p>and reuse <code>getFromDict</code> to find the location to store the value for <code>setInDict()</code>:</p>\n\n<pre><code>def setInDict(dataDict, mapList, value):\n    getFromDict(dataDict, mapList[:-1])[mapList[-1]] = value\n</code></pre>\n\n<p>All but the last element in <code>mapList</code> is needed to find the 'parent' dictionary to add the value to, then use the last element to set the value to the right key.</p>\n\n<p>Demo:</p>\n\n<pre><code>&gt;&gt;&gt; getFromDict(dataDict, [\"a\", \"r\"])\n1\n&gt;&gt;&gt; getFromDict(dataDict, [\"b\", \"v\", \"y\"])\n2\n&gt;&gt;&gt; setInDict(dataDict, [\"b\", \"v\", \"w\"], 4)\n&gt;&gt;&gt; import pprint\n&gt;&gt;&gt; pprint.pprint(dataDict)\n{'a': {'r': 1, 's': 2, 't': 3},\n 'b': {'u': 1, 'v': {'w': 4, 'x': 1, 'y': 2, 'z': 3}, 'w': 3}}\n</code></pre>\n\n<p>Note that the Python PEP8 style guide <a href=\"https://www.python.org/dev/peps/pep-0008/#function-and-variable-names\" rel=\"noreferrer\">prescribes snake_case names for functions</a>. The above works equally well for lists or a mix of dictionaries and lists, so the names should really be <code>get_by_path()</code> and <code>set_by_path()</code>:</p>\n\n<pre><code>from functools import reduce  # forward compatibility for Python 3\nimport operator\n\ndef get_by_path(root, items):\n    \"\"\"Access a nested object in root by item sequence.\"\"\"\n    return reduce(operator.getitem, items, root)\n\ndef set_by_path(root, items, value):\n    \"\"\"Set a value in a nested object in root by item sequence.\"\"\"\n    get_by_path(root, items[:-1])[items[-1]] = value\n</code></pre>\n"
    },
    "304": {
        "question_id": "11360858",
        "answer_id": "11360880",
        "question": "<p>What is meant by \"using the EAFP principle\" in Python? Could you provide any examples?</p>\n",
        "answer": "<p>From the <a href=\"http://docs.python.org//glossary.html#term-eafp\" rel=\"noreferrer\">glossary</a>:</p>\n\n<blockquote>\n  <p>Easier to ask for forgiveness than permission. This common Python coding style assumes the existence of valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is characterized by the presence of many <code>try</code> and <code>except</code> statements. The technique contrasts with the <a href=\"http://docs.python.org//glossary.html#term-lbyl\" rel=\"noreferrer\">LBYL style</a> common to many other languages such as C.</p>\n</blockquote>\n\n<p>An example would be an attempt to access a dictionary key.</p>\n\n<p>EAFP:</p>\n\n<pre><code>try:\n    x = my_dict[\"key\"]\nexcept KeyError:\n    # handle missing key\n</code></pre>\n\n<p>LBYL:</p>\n\n<pre><code>if \"key\" in my_dict:\n    x = my_dict[\"key\"]\nelse:\n    # handle missing key\n</code></pre>\n\n<p>The LBYL version has to search the key inside the dictionary twice, and might also be considered slightly less readable.</p>\n"
    },
    "305": {
        "question_id": "19837486",
        "answer_id": "19837683",
        "question": "<p>Considering the following code snippet :</p>\n\n<pre><code># directorys == {'login': &lt;object at ...&gt;, 'home': &lt;object at ...&gt;}\nfor d in directorys:\n    self.command[\"cd \" + d] = (lambda : self.root.change_directory(d))\n</code></pre>\n\n<p>I expect to create a dictionary of two function as following :</p>\n\n<pre><code># Expected :\nself.command == {\n    \"cd login\": lambda: self.root.change_directory(\"login\"),\n    \"cd home\": lambda: self.root.change_directory(\"home\")\n}\n</code></pre>\n\n<p>but it looks like the two lambda function generated are exactly the same :</p>\n\n<pre><code># Result :\nself.command == {\n    \"cd login\": lambda: self.root.change_directory(\"login\"),\n    \"cd home\": lambda: self.root.change_directory(\"login\")   # &lt;- Why login ?\n}\n</code></pre>\n\n<p>I really don't understand why. Do you have any suggestions ?</p>\n",
        "answer": "<p>You need to bind d for each function created. One way to do that is to pass it as a parameter with a default value:</p>\n\n<pre><code>lambda d=d: self.root.change_directory(d)\n</code></pre>\n\n<p>Now the d inside the function uses the parameter, even though it has the same name, and the default value for that is evaluated when the function is created. To help you see this:</p>\n\n<pre><code>lambda bound_d=d: self.root.change_directory(bound_d)\n</code></pre>\n\n<p>Remember how default values work, such as for mutable objects like lists and dicts, because you are binding an object.</p>\n\n<p>This idiom of parameters with default values is common enough, but may fail if you introspect function parameters and determine what to do based on their presence.  You can avoid the parameter with another closure:</p>\n\n<pre><code>(lambda d=d: lambda: self.root.change_directory(d))()\n# or\n(lambda d: lambda: self.root.change_directory(d))(d)\n</code></pre>\n"
    },
    "306": {
        "question_id": "45621722",
        "answer_id": "45621723",
        "question": "<p>I have a Python script:</p>\n\n<pre><code>if True:\n    if False:\n        print('foo')\n   print('bar')\n</code></pre>\n\n<p>However, when I attempt to run my script, Python raises an <code>IndentationError</code>:</p>\n\n<pre><code>  File \"script.py\", line 4\n    print('bar')\n               ^\nIndentationError: unindent does not match any outer indentation level\n</code></pre>\n\n<p>I kept playing around with my program, and I was also able to produce three other errors:</p>\n\n<ul>\n<li><code>IndentationError: unexpected indent</code></li>\n<li><code>IndentationError: expected an indented block</code></li>\n<li><code>TabError: inconsistent use of tabs and spaces in indentation</code></li>\n</ul>\n\n<p>What do these errors mean? What am I doing wrong? How can I fix my code?</p>\n",
        "answer": "<h2>Why does indentation matter?</h2>\n\n<p>In Python, indentation is used to delimit <a href=\"https://en.wikipedia.org/wiki/Block_(programming)\" rel=\"noreferrer\">blocks of code</a>. This is different from many other languages that use curly braces <code>{}</code> to delimit blocks such as Java, Javascript, and C. Because of this, Python users must pay close attention to when and how they indent their code because whitespace matters.</p>\n\n<p>When Python encounters a problem with the indentation of your program, it either raises an exception called <a href=\"https://docs.python.org/3/library/exceptions.html#IndentationError\" rel=\"noreferrer\"><code>IndentationError</code></a> or <a href=\"https://docs.python.org/3/library/exceptions.html#TabError\" rel=\"noreferrer\"><code>TabError</code></a>.</p>\n\n<p><strong>A little history</strong></p>\n\n<p>The historical reasons for why Python uses indentation vs the arguably more commonly accepted curly braces <code>{}</code> is outlined in <a href=\"http://python-history.blogspot.com/2009/02/early-language-design-and-development.html\" rel=\"noreferrer\">an article of the history of Python by Guido van Rossum</a> - the creator of Python:</p>\n\n<blockquote>\n  <p>Python\u2019s use of indentation comes directly from ABC, but this idea didn\u2019t originate with ABC--it had already been promoted by Donald Knuth and was a well-known concept of programming style. (The occam programming language also used it.) However, ABC\u2019s authors did invent the use of the colon that separates the lead-in clause from the indented block. After early user testing without the colon, it was discovered that the meaning of the indentation was unclear to beginners being taught the first steps of programming. The addition of the colon clarified it significantly: the colon somehow draws attention to what follows and ties the phrases before and after it together in just the right way.</p>\n</blockquote>\n\n<h2>How do I indent my code?</h2>\n\n<p>The basic rule for indenting Python code (considering that you treat the entire program as a \"basic block\") is: The first statement in a basic block, and each subsequent statement after it must be indented by the same amount.</p>\n\n<p>So technically the following Python program is correct:</p>\n\n<pre><code>def perm(l):\n        # Compute the list of all permutations of l\n    if len(l) &lt;= 1:\n                  return [l]\n    r = []\n    for i in range(len(l)):\n             s = l[:i] + l[i+1:]\n             p = perm(s)\n             for x in p:\n              r.append(l[i:i+1] + x)\n    return r\n</code></pre>\n\n<p>However, as you can probably tell from above, randomly indenting your code makes is extremely hard to read and follow the flow of the program. It's better to be consistent and follow a style.</p>\n\n<p><a href=\"https://www.python.org/dev/peps/pep-0008/#indentation\" rel=\"noreferrer\">PEP8 - The Python style guide - recommends that four spaces per indentation level</a> should be used:</p>\n\n<blockquote>\n  <p>Use 4 spaces per indentation level. </p>\n</blockquote>\n\n<p>That is, <strong>each statement that is starting a new block and each subsequent statement in the new block, should be indented four spaces from the current indentation level</strong>. Here is the above program indented according to the PEP8 style guide:</p>\n\n<pre><code>def perm(l):\n    # Compute the list of all permutations of l\n    if len(l) &lt;= 1:\n        return [l]\n    r = []\n    for i in range(len(l)):\n        s = l[:i] + l[i+1:]\n        p = perm(s)\n        for x in p:\n            r.append(l[i:i+1] + x)\n    return r\n</code></pre>\n\n<h2>Can I still use tabs?</h2>\n\n<p>Python realizes that some people still prefer tabs over spaces and that legacy code may use tabs rather than spaces, so it allows the use of tabs as indentation. <a href=\"https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces\" rel=\"noreferrer\">PEP8 touches on this topic</a>:</p>\n\n<blockquote>\n  <p>Spaces are the preferred indentation method.</p>\n  \n  <p>Tabs should be used solely to remain consistent with code that is already indented with tabs. </p>\n</blockquote>\n\n<p>Note however the one big caveat is <strong>not to use both tabs <em>and</em> spaces for indentation</strong>. Doing so can cause all kinds of strange hard to debug indentation errors. Python expands tabs to the next 8th column, but if your editor is set to a tab size of 4 columns, or you you use spaces as well as tabs, you can easily produce indented code that <em>looks</em> fine  in your editor, but Python will refuse to run. The Python 3 compiler <em>explicitly</em> rejects any program containing an ambiguous mixture of tabs and spaces, usually by raising a <code>TabError</code>. However, by default, mixing tabs and spaces is still allowed in Python 2, but it is highly recommended not to use this \"feature\". Use the <code>-t</code> and <code>-tt</code> command line flags to force Python 2 to raise a warning or (preferably) an error respectively. <a href=\"https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces\" rel=\"noreferrer\">PEP8 also discusses this topic</a>:</p>\n\n<blockquote>\n  <p>Python 3 disallows mixing the use of tabs and spaces for indentation.</p>\n  \n  <p>Python 2 code indented with a mixture of tabs and spaces should be converted to using spaces exclusively.</p>\n  \n  <p>When invoking the Python 2 command line interpreter with the -t option, it issues warnings about code that illegally mixes tabs and spaces. When using -tt these warnings become errors. These options are highly recommended!</p>\n</blockquote>\n\n<h2>What does \"IndentationError: unexpected indent\" mean?</h2>\n\n<p><strong>Problem</strong></p>\n\n<p>This error occurs when a statement is unnecessarily indented or its indentation does not match the indentation of former statements in the same block. For example, the first statement in the program below is unnecessarily indented:</p>\n\n<pre><code>&gt;&gt;&gt;  print('Hello') # this is indented \n  File \"&lt;stdin&gt;\", line 1\n    print('Hello') # this is indented \n    ^\nIndentationError: unexpected indent\n</code></pre>\n\n<p>In this example, the <code>can_drive = True</code> line in the <code>if</code> block does not match the indentation of any former statement:</p>\n\n<pre><code>&gt;&gt;&gt; age = 10\n&gt;&gt;&gt; can_drive = None\n&gt;&gt;&gt; \n&gt;&gt;&gt; if age &gt;= 18:\n...     print('You can drive')\n...      can_drive = True # incorrectly indented\n  File \"&lt;stdin&gt;\", line 3\n    can_drive = True # incorrectly indented\n    ^\nIndentationError: unexpected indent\n</code></pre>\n\n<p><strong>Fix</strong></p>\n\n<p>The fix for this error is to first make sure the problematic line even needs to be indented. For example, the above example using <code>print</code> can be fixed simply be unindenting the line:</p>\n\n<pre><code>&gt;&gt;&gt; print('Hello') # simply unindent the line\nHello\n</code></pre>\n\n<p>However, if you are sure the line does need to be indented, the indentation needs to match that of a former statement in the same block. In the second example above using <code>if</code>, we can fix the error by making sure the line with <code>can_drive = True</code> is indented at the same level as the former statements in the <code>if</code> body:</p>\n\n<pre><code>&gt;&gt;&gt; age = 10\n&gt;&gt;&gt; can_drive = None\n&gt;&gt;&gt; \n&gt;&gt;&gt; if age &gt;= 18:\n...     print('You can drive')\n...     can_drive = True # indent this line at the same level.\n... \n</code></pre>\n\n<h2>What does \"IndentationError: expected an indented block\" mean?</h2>\n\n<p><strong>Problem</strong></p>\n\n<p>This error occurs when Python sees the 'header' for a compound statement, such as <code>if &lt;condition&gt;:</code> or <code>while &lt;condition&gt;:</code> but the compound statement's body or <strong><em>block</em></strong> is never defined. For example in the code below we began an <code>if</code> statement, but we never define a body for the statement:</p>\n\n<pre><code>&gt;&gt;&gt; if True:\n... \n  File \"&lt;stdin&gt;\", line 2\n\n    ^\nIndentationError: expected an indented block\n</code></pre>\n\n<p>In this second example, we began writing a <code>for</code> loop, but we forget to indent the <code>for</code> loop body. So Python still expects an indented block for the <code>for</code> loop body:</p>\n\n<pre><code>&gt;&gt;&gt; names = ['sarah', 'lucy', 'michael']\n&gt;&gt;&gt; for name in names:\n... print(name)\n  File \"&lt;stdin&gt;\", line 2\n    print(name)\n        ^\nIndentationError: expected an indented block\n</code></pre>\n\n<p>Comments don't count as bodies:</p>\n\n<pre><code>&gt;&gt;&gt; if True:\n...     # TODO\n...\n  File \"&lt;stdin&gt;\", line 3\n\n    ^\nIndentationError: expected an indented block\n</code></pre>\n\n<p><strong>Fix</strong></p>\n\n<p>The fix for this error is to simply include a body for the compound statement.</p>\n\n<p>As shown above, a common mistake by new users is that they forget to indent the body. If this is the case, make sure each statement meant to be included in the compound statement's body is indented at the same level under the compound statement's beginning. Here is the above example fixed:</p>\n\n<pre><code>&gt;&gt;&gt; names = ['sarah', 'lucy', 'michael']\n&gt;&gt;&gt; for name in names:\n...     print(name) # The for loop body is now correctly indented.\n... \nsarah\nlucy\nmichael\n</code></pre>\n\n<p>Another common case is that, for some reason, a user may not want to define an actual body for the compound statement, or the body may be commented out. In this case, the <a href=\"https://docs.python.org/3/reference/simple_stmts.html#grammar-token-pass_stmt\" rel=\"noreferrer\"><code>pass</code></a> statement can be used. The <code>pass</code> statement can be used anywhere Python expects one or more statements as a placeholder. <a href=\"https://docs.python.org/3/reference/simple_stmts.html#the-pass-statement\" rel=\"noreferrer\">From the documentation for <code>pass</code></a>:</p>\n\n<blockquote>\n  <p>pass is a null operation \u2014 when it is executed, nothing happens. It is useful as a placeholder when a statement is required syntactically, but no code needs to be executed, for example:</p>\n\n<pre><code>def f(arg): pass    # a function that does nothing (yet)\n\nclass C: pass       # a class with no methods (yet)\n</code></pre>\n</blockquote>\n\n<p>Here is the above example with the <code>if</code> statement fixed by using the <code>pass</code> keyword:</p>\n\n<pre><code>&gt;&gt;&gt; if True:\n...     pass # We don't want to define a body.\n... \n&gt;&gt;&gt;\n</code></pre>\n\n<h2>What does \"IndentationError: unindent does not match any outer indentation level\" mean?</h2>\n\n<p><strong>Problem</strong></p>\n\n<p>This error occurs when you unindent a statement, but now the indentation level of that statement does not match that of any former statement. For example, in the below code we unindent the second call to <code>print</code>. However, the indentation level does not match that of any former statement:</p>\n\n<pre><code>&gt;&gt;&gt; if True:\n...     if True:\n...         print('yes')\n...    print()\n  File \"&lt;stdin&gt;\", line 4\n    print()\n          ^\nIndentationError: unindent does not match any outer indentation level\n</code></pre>\n\n<p>This error is especially hard to catch because even one space will cause your code to fail.</p>\n\n<p><strong>Fix</strong></p>\n\n<p>The fix is to ensure that when you unindent a statement, the indentation level matches that of a former statement. Consider the above example once again. In the example, I want the second call to print to be in the first <code>if</code> statements body. So I need to make sure that that line's indentation level matches that of the former statements in the first <code>if</code> statement's body:</p>\n\n<pre><code>&gt;&gt;&gt; if True:\n...     if True:\n...         print('yes')\n...     print() # indentation level now matches former statement's level.\n... \nyes\n\n&gt;&gt;&gt; \n</code></pre>\n\n<h2>I'm still getting an IndentationError but my program appears to be correctly indented. What do I do?</h2>\n\n<p>If your program visually appears to have correct indentation, but your still getting an <code>IndentationError</code> you have most likely <strong>mixed tabs with spaces</strong>. This will sometimes cause Python to raises strange errors. See the subsection <strong><em>Special cases</em></strong> under <strong><em>What does \"TabError: inconsistent use of tabs and spaces in indentation\" mean?</em></strong> for an more in-depth explanation of the problem.</p>\n\n<h2>What does \"TabError: inconsistent use of tabs and spaces in indentation\" mean?</h2>\n\n<p><strong>Problem</strong></p>\n\n<p>This error only occurs when you attempt to mix tabs and spaces as indentation characters. As said above, Python will not allow your program to contain a mix of tabs and spaces, and will raise the specific exception <code>TabError</code> if it finds you have. For example, in the program below, a mix of tabs and spaces is used for indentation:</p>\n\n<pre><code>&gt;&gt;&gt; if True:\n...     if True:\n...         print()\n...     print()\n...     print()\n  File \"&lt;stdin&gt;\", line 5\n    print()\n          ^\nTabError: inconsistent use of tabs and spaces in indentation\n</code></pre>\n\n<p>Here is a picture which visually shows the whitespace in the above program. Gray dots are spaces, and gray arrows are tabs:</p>\n\n<p><a href=\"https://i.stack.imgur.com/pFV48.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/pFV48.png\" alt=\"enter image description here\"></a></p>\n\n<p>We can see we have indeed mixed spaces and tabs for indentation.</p>\n\n<p><strong>Special cases</strong></p>\n\n<p>Note Python <strong><em>will not</em></strong> <em>always</em> raise a <code>TabError</code> if you mix tabs and spaces into your program. If the program indentation is unambiguous, Python will allow tabs and spaces to be mixed. For example:</p>\n\n<pre><code>&gt;&gt;&gt; if True:\n...     if True: # tab\n...         pass # tab, then 4 spaces\n... \n&gt;&gt;&gt;\n</code></pre>\n\n<p>And sometimes Python simply chokes on the mixture of tabs and spaces and erroneously raises an <code>IndentationError</code> exception when a <code>TabError</code> would be more appropriate. Another example:</p>\n\n<pre><code>&gt;&gt;&gt; if True:\n...     pass # tab\n...     pass # 4 spaces\n  File \"&lt;stdin&gt;\", line 3\n    pass # 4 spaces\n                ^\nIndentationError: unindent does not match any outer indentation level\n</code></pre>\n\n<p>As you can see, running your code this way can create mysterious errors. Even though the program <em>visually</em> appears to be fine, Python became confused trying to parse the tabs and spaces used for indention and errored out.</p>\n\n<p>These are excellent examples that demonstrate why to never mix tabs and spaces and make use of the <code>-t</code> and <code>-tt</code> interpreter flags when using Python 2.</p>\n\n<p><strong>Fix</strong></p>\n\n<p>If your program is short, probably the easiest and quickest fix is to simply re-indent the program. Make sure each statement is indented by four spaces per indention level (see <strong><em>How do I indent my code?</em></strong>).</p>\n\n<p>However, if you already have a large program that you've mixed tabs and spaces into, there are automated tools that can be used to convert all of your indentation to just spaces.</p>\n\n<p>Many editors such as <a href=\"https://www.jetbrains.com/pycharm/\" rel=\"noreferrer\">PyCharm</a> and <a href=\"https://www.sublimetext.com/\" rel=\"noreferrer\">SublimeText</a> have options to automatically convert tabs to spaces. There are also several on-line tools such as <a href=\"http://tabstospaces.com/\" rel=\"noreferrer\">Tabs To Spaces</a> or <a href=\"https://www.browserling.com/tools/tabs-to-spaces\" rel=\"noreferrer\">Browserling</a> that allow you to quickly re-indent your code. There are also tools written in Python. <a href=\"https://github.com/hhatto/autopep8\" rel=\"noreferrer\">autopep8</a> for example can automatically re-indent your code and other indentation errors as well.</p>\n\n<p>Even the best tools though will sometimes not be able to fix all of your indentation errors and you'll have to fix them manually. That's why it's important to always properly indent your code from the start.</p>\n\n<h2>A note about \"SyntaxError\" related indentation problems</h2>\n\n<p>Although not often, sometimes certain <code>SyntaxError</code> exceptions are raised due to incorrect indentation.  For example, look at the code below:</p>\n\n<pre><code>if True:\n    pass\npass # oops! this statement should be indented!.\nelse:\n    pass\n</code></pre>\n\n<p>When the above code is run, a <code>SyntaxError is raised</code>:</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"python\", line 4\n    else:\n       ^\nSyntaxError: invalid syntax\n</code></pre>\n\n<p>Although Python raises a <code>SyntaxError</code>, the <em>real</em> problem with the above code, is that the second <code>pass</code> statement should be indented. Because the second <code>pass</code> isn't indented, Python doesn't realize that the previous <code>if</code> statement and the <code>else</code> statement are meant to be connected.</p>\n\n<p>The fix for this type of error is to simply correctly re-indent your code. To see how to properly indent your code, see the section <em><strong>How do I indent my code?</strong></em>.</p>\n\n<h2>I'm still having a hard time with Python's indentation syntax. What do I do?</h2>\n\n<p>Don't get discouraged if you're still struggling. It can take time to get use to \nPython's whitespace syntax rules. Here are some tips to help:</p>\n\n<ul>\n<li>Get an editor that will tell you when you have an indentation error. Some goods ones are as said above are, <a href=\"https://www.jetbrains.com/pycharm/\" rel=\"noreferrer\">PyCharm</a>, <a href=\"https://www.sublimetext.com/\" rel=\"noreferrer\">SublimeText</a>, and <a href=\"https://github.com/jupyter/notebook\" rel=\"noreferrer\">Jupyter Notebook</a>.</li>\n<li>When you indent your code, count out loud to yourself how many times you press the space-bar (or tab key). For example, if you needed to indent a line by four spaces, you would say out loud \"<em>one</em>, <em>two</em>, <em>three</em>, <em>four</em>\" while simultaneously pressing the space-bar each time. It sounds silly, but it helps train your brain to think about how deep you're indenting your code.</li>\n<li>If you have an editor, see if it has an option to automatically convert tabs to spaces.</li>\n<li>View others' code. Browse <a href=\"https://github.com/\" rel=\"noreferrer\">github</a> or <a href=\"https://stackoverflow.com/\">Stackoverflow</a> and see examples of Python code.</li>\n<li>Just write code. That's the single best way to get better. The more you write Python code, the better you'll get.</li>\n</ul>\n\n<h2>Resources used</h2>\n\n<ul>\n<li><a href=\"https://en.wikipedia.org/\" rel=\"noreferrer\">https://en.wikipedia.org/</a></li>\n<li><a href=\"https://docs.python.org/3/\" rel=\"noreferrer\">https://docs.python.org/3/</a></li>\n<li><a href=\"http://python-history.blogspot.com/2009/02/early-language-design-and-development.html\" rel=\"noreferrer\">http://python-history.blogspot.com/2009/02/early-language-design-and-development.html</a></li>\n<li><a href=\"https://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\">https://www.python.org/dev/peps/pep-0008/</a></li>\n</ul>\n"
    },
    "307": {
        "question_id": "510348",
        "answer_id": "510351",
        "question": "<p>I would like to know how to put a time delay in a Python script.</p>\n",
        "answer": "<pre><code>import time\ntime.sleep(5)   # Delays for 5 seconds. You can also use a float value.\n</code></pre>\n\n<p>Here is another example where something is run approximately once a minute:</p>\n\n<pre><code>import time\nwhile True:\n    print(\"This prints once a minute.\")\n    time.sleep(60) # Delay for 1 minute (60 seconds).\n</code></pre>\n"
    },
    "308": {
        "question_id": "25981703",
        "answer_id": "29751768",
        "question": "<p>I am very new to Python and trying to <code>&gt; pip install linkchecker</code> on Windows 7. Some notes:</p>\n\n<ul>\n<li>pip install is failing no matter the package. For example, <code>&gt; pip install scrapy</code> also results in the SSL error.</li>\n<li>Vanilla install of Python 3.4.1 included pip 1.5.6. The first thing I tried to do was install linkchecker. Python 2.7 was already installed, it came with ArcGIS. <code>python</code> and <code>pip</code> were not available from the command line until I installed 3.4.1.</li>\n<li><code>&gt; pip search linkchecker</code> works. Perhaps that is because pip search does not verify the site's SSL certificate.</li>\n<li>I am in a company network but we do not go through a proxy to reach the Internet.</li>\n<li>Each company computer (including mine) has a Trusted Root Certificate Authority that is used for various reasons including enabling monitoring TLS traffic to <a href=\"https://google.com\">https://google.com</a>. Not sure if that has anything to do with it.</li>\n</ul>\n\n<p>Here are the contents of my <strong>pip.log</strong> after running <code>pip install linkchecker</code>:</p>\n\n<pre><code>Downloading/unpacking linkchecker\n  Getting page https://pypi.python.org/simple/linkchecker/\n  Could not fetch URL https://pypi.python.org/simple/linkchecker/: connection error: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:598)\n  Will skip URL https://pypi.python.org/simple/linkchecker/ when looking for download links for linkchecker\n  Getting page https://pypi.python.org/simple/\n  Could not fetch URL https://pypi.python.org/simple/: connection error: HTTPSConnectionPool(host='pypi.python.org', port=443): Max retries exceeded with url: /simple/ (Caused by &lt;class 'http.client.CannotSendRequest'&gt;: Request-sent)\n  Will skip URL https://pypi.python.org/simple/ when looking for download links for linkchecker\n  Cannot fetch index base URL https://pypi.python.org/simple/\n  URLs to search for versions for linkchecker:\n  * https://pypi.python.org/simple/linkchecker/\n  Getting page https://pypi.python.org/simple/linkchecker/\n  Could not fetch URL https://pypi.python.org/simple/linkchecker/: connection error: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:598)\n  Will skip URL https://pypi.python.org/simple/linkchecker/ when looking for download links for linkchecker\n  Could not find any downloads that satisfy the requirement linkchecker\nCleaning up...\n  Removing temporary dir C:\\Users\\jcook\\AppData\\Local\\Temp\\pip_build_jcook...\nNo distributions at all found for linkchecker\nException information:\nTraceback (most recent call last):\n  File \"C:\\Python34\\lib\\site-packages\\pip\\basecommand.py\", line 122, in main\n    status = self.run(options, args)\n  File \"C:\\Python34\\lib\\site-packages\\pip\\commands\\install.py\", line 278, in run\n    requirement_set.prepare_files(finder, force_root_egg_info=self.bundle, bundle=self.bundle)\n  File \"C:\\Python34\\lib\\site-packages\\pip\\req.py\", line 1177, in prepare_files\n    url = finder.find_requirement(req_to_install, upgrade=self.upgrade)\n  File \"C:\\Python34\\lib\\site-packages\\pip\\index.py\", line 277, in find_requirement\n    raise DistributionNotFound('No distributions at all found for %s' % req)\npip.exceptions.DistributionNotFound: No distributions at all found for linkchecker\n</code></pre>\n",
        "answer": "<p>You can ignore SSL errors by setting <a href=\"https://pypi.org\" rel=\"noreferrer\"><code>pypi.org</code></a> and <a href=\"https://files.pythonhosted.org\" rel=\"noreferrer\"><code>files.pythonhosted.org</code></a> as trusted hosts.</p>\n\n<pre><code>$ pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org &lt;package_name&gt;\n</code></pre>\n\n<p><strong>Note</strong>: Sometime during April 2018, the <a href=\"https://pypi.org\" rel=\"noreferrer\">Python Package Index</a> was migrated from <code>pypi.python.org</code> to <code>pypi.org</code>. This means \"trusted-host\" commands using the old domain no longer work.</p>\n\n<h3>Permanent Fix</h3>\n\n<p>Since the release of pip 10.0, you should be able to fix this permanently just by upgrading <code>pip</code> itself:</p>\n\n<pre><code>$ pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org pip setuptools\n</code></pre>\n\n<p>Or by just <a href=\"https://pip.pypa.io/en/stable/installing/\" rel=\"noreferrer\">reinstalling it</a> to get the latest version:</p>\n\n<pre><code>$ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\n</code></pre>\n\n<p>(\u2026\u00a0and then running <code>get-pip.py</code> with the relevant Python interpreter).</p>\n\n<p><code>pip install &lt;otherpackage&gt;</code> should just work after this. If not, then you will need to do more, as explained below.</p>\n\n<hr>\n\n<p>You may want to <a href=\"https://pip.pypa.io/en/stable/user_guide/?highlight=appdata#config-file\" rel=\"noreferrer\">add the trusted hosts and proxy to your config file</a>.  </p>\n\n<p><code>pip.ini</code> (Windows) or <code>pip.conf</code> (unix)</p>\n\n<pre><code>[global]\ntrusted-host = pypi.python.org\n               pypi.org\n               files.pythonhosted.org\n</code></pre>\n\n<hr>\n\n<p><strong>Alternate Solutions (Less secure)</strong></p>\n\n<p>Most of the answers could pose a security issue.</p>\n\n<p>Two of the workarounds that help in installing most of the python packages with ease would be:</p>\n\n<ul>\n<li><strong>Using easy_install</strong>: if you are really lazy and don't want to waste much time, use <code>easy_install &lt;package_name&gt;</code>. Note that some packages won't be found or will give small errors.</li>\n<li><strong>Using Wheel</strong>: download the <a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\" rel=\"noreferrer\">Wheel of the python package</a> and use the pip command <code>pip install wheel_package_name.whl</code> to install the package.</li>\n</ul>\n"
    },
    "309": {
        "question_id": "2988017",
        "answer_id": "2988117",
        "question": "<p>I noticed a Python script I was writing was acting squirrelly, and traced it to an infinite loop, where the loop condition was <code>while line is not ''</code>. Running through it in the debugger, it turned out that line was in fact <code>''</code>. When I changed it to <code>!=''</code> rather than <code>is not ''</code>, it worked fine. </p>\n\n<p>Also, is it generally considered better to just use '==' by default, even when comparing int or Boolean values? I've always liked to use 'is' because I find it more aesthetically pleasing and pythonic (which is how I fell into this trap...), but I wonder if it's intended to just be reserved for when you care about finding two objects with the same id.</p>\n",
        "answer": "<blockquote>\n  <p>For all built-in Python objects (like\n  strings, lists, dicts, functions,\n  etc.), if x is y, then x==y is also\n  True.</p>\n</blockquote>\n\n<p>Not always.  NaN is a counterexample.  But <em>usually</em>, identity (<code>is</code>) implies equality (<code>==</code>).  The converse is not true: Two distinct objects can have the same value.</p>\n\n<blockquote>\n  <p>Also, is it generally considered better to just use '==' by default, even\n  when comparing int or Boolean values?</p>\n</blockquote>\n\n<p>You use <code>==</code> when comparing values and <code>is</code> when comparing identities.</p>\n\n<p>When comparing ints (or immutable types in general), you pretty much always want the former.  There's an optimization that allows small integers to be compared with <code>is</code>, but don't rely on it.</p>\n\n<p>For boolean values, you shouldn't be doing comparisons at all.   Instead of:</p>\n\n<pre><code>if x == True:\n    # do something\n</code></pre>\n\n<p>write:</p>\n\n<pre><code>if x:\n    # do something\n</code></pre>\n\n<p>For comparing against <code>None</code>, <code>is None</code> is preferred over <code>== None</code>.</p>\n\n<blockquote>\n  <p>I've always liked to use 'is' because\n  I find it more aesthetically pleasing\n  and pythonic (which is how I fell into\n  this trap...), but I wonder if it's\n  intended to just be reserved for when\n  you care about finding two objects\n  with the same id.</p>\n</blockquote>\n\n<p>Yes, that's exactly what it's for.</p>\n"
    },
    "310": {
        "question_id": "1112343",
        "answer_id": "1112350",
        "question": "<p>I'm working on a python script that starts several processes and database connections. Every now and then I want to kill the script with a <kbd>Ctrl</kbd>+<kbd>C</kbd> signal, and I'd like to do some cleanup.</p>\n\n<p>In Perl I'd do this:</p>\n\n<pre class=\"lang-perl prettyprint-override\"><code>$SIG{'INT'} = 'exit_gracefully';\n\nsub exit_gracefully {\n    print \"Caught ^C \\n\";\n    exit (0);\n}\n</code></pre>\n\n<p>How do I do the analogue of this in Python?</p>\n",
        "answer": "<p>Register your handler with <code>signal.signal</code> like this:</p>\n\n<pre><code>#!/usr/bin/env python\nimport signal\nimport sys\ndef signal_handler(sig, frame):\n        print('You pressed Ctrl+C!')\n        sys.exit(0)\nsignal.signal(signal.SIGINT, signal_handler)\nprint('Press Ctrl+C')\nsignal.pause()\n</code></pre>\n\n<p>Code adapted from <a href=\"http://www.linuxjournal.com/article/3946\" rel=\"noreferrer\">here</a>.</p>\n\n<p>More documentation on <code>signal</code> can be found <a href=\"http://docs.python.org/library/signal.html\" rel=\"noreferrer\">here</a>.</p>\n"
    },
    "311": {
        "question_id": "25962114",
        "answer_id": "25962187",
        "question": "<p>I am trying to read a large csv file (aprox. 6 GB) in pandas and i am getting the following memory error:</p>\n\n<pre><code>MemoryError                               Traceback (most recent call last)\n&lt;ipython-input-58-67a72687871b&gt; in &lt;module&gt;()\n----&gt; 1 data=pd.read_csv('aphro.csv',sep=';')\n\nC:\\Python27\\lib\\site-packages\\pandas\\io\\parsers.pyc in parser_f(filepath_or_buffer, sep, dialect, compression, doublequote, escapechar, quotechar, quoting, skipinitialspace, lineterminator, header, index_col, names, prefix, skiprows, skipfooter, skip_footer, na_values, na_fvalues, true_values, false_values, delimiter, converters, dtype, usecols, engine, delim_whitespace, as_recarray, na_filter, compact_ints, use_unsigned, low_memory, buffer_lines, warn_bad_lines, error_bad_lines, keep_default_na, thousands, comment, decimal, parse_dates, keep_date_col, dayfirst, date_parser, memory_map, nrows, iterator, chunksize, verbose, encoding, squeeze, mangle_dupe_cols, tupleize_cols, infer_datetime_format)\n    450                     infer_datetime_format=infer_datetime_format)\n    451 \n--&gt; 452         return _read(filepath_or_buffer, kwds)\n    453 \n    454     parser_f.__name__ = name\n\nC:\\Python27\\lib\\site-packages\\pandas\\io\\parsers.pyc in _read(filepath_or_buffer, kwds)\n    242         return parser\n    243 \n--&gt; 244     return parser.read()\n    245 \n    246 _parser_defaults = {\n\nC:\\Python27\\lib\\site-packages\\pandas\\io\\parsers.pyc in read(self, nrows)\n    693                 raise ValueError('skip_footer not supported for iteration')\n    694 \n--&gt; 695         ret = self._engine.read(nrows)\n    696 \n    697         if self.options.get('as_recarray'):\n\nC:\\Python27\\lib\\site-packages\\pandas\\io\\parsers.pyc in read(self, nrows)\n   1137 \n   1138         try:\n-&gt; 1139             data = self._reader.read(nrows)\n   1140         except StopIteration:\n   1141             if nrows is None:\n\nC:\\Python27\\lib\\site-packages\\pandas\\parser.pyd in pandas.parser.TextReader.read (pandas\\parser.c:7145)()\n\nC:\\Python27\\lib\\site-packages\\pandas\\parser.pyd in pandas.parser.TextReader._read_low_memory (pandas\\parser.c:7369)()\n\nC:\\Python27\\lib\\site-packages\\pandas\\parser.pyd in pandas.parser.TextReader._read_rows (pandas\\parser.c:8194)()\n\nC:\\Python27\\lib\\site-packages\\pandas\\parser.pyd in pandas.parser.TextReader._convert_column_data (pandas\\parser.c:9402)()\n\nC:\\Python27\\lib\\site-packages\\pandas\\parser.pyd in pandas.parser.TextReader._convert_tokens (pandas\\parser.c:10057)()\n\nC:\\Python27\\lib\\site-packages\\pandas\\parser.pyd in pandas.parser.TextReader._convert_with_dtype (pandas\\parser.c:10361)()\n\nC:\\Python27\\lib\\site-packages\\pandas\\parser.pyd in pandas.parser._try_int64 (pandas\\parser.c:17806)()\n\nMemoryError: \n</code></pre>\n\n<p>Any help on this?? </p>\n",
        "answer": "<p>The error shows that the machine does not have enough memory to read the entire\nCSV into a DataFrame at one time. Assuming you do not need the entire dataset in\nmemory all at one time, one way to avoid the problem would be to <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.io.parsers.read_csv.html\" rel=\"noreferrer\">process the CSV in\nchunks</a> (by specifying the <code>chunksize</code> parameter):</p>\n\n<pre><code>chunksize = 10 ** 6\nfor chunk in pd.read_csv(filename, chunksize=chunksize):\n    process(chunk)\n</code></pre>\n\n<p>The <code>chucksize</code> parameter specifies the number of rows per chunk.\n(The last chunk may contain fewer than <code>chunksize</code> rows, of course.)</p>\n"
    },
    "312": {
        "question_id": "2276200",
        "answer_id": "17628350",
        "question": "<p>I have many \"can't encode\" and \"can't decode\" problems with <a href=\"http://en.wikipedia.org/wiki/Python_%28programming_language%29\" rel=\"noreferrer\">Python</a> when I run my applications from the console. But in the <a href=\"http://en.wikipedia.org/wiki/Eclipse_%28software%29\" rel=\"noreferrer\">Eclipse</a> <a href=\"http://en.wikipedia.org/wiki/PyDev\" rel=\"noreferrer\">PyDev</a> IDE, the default character encoding is set to <a href=\"http://en.wikipedia.org/wiki/UTF-8\" rel=\"noreferrer\">UTF-8</a>, and I'm fine.</p>\n\n<p>I searched around for setting the default encoding, and people say that Python deletes the <code>sys.setdefaultencoding</code> function on startup, and we can not use it.</p>\n\n<p>So what's the best solution for it?</p>\n",
        "answer": "<p>Here is a simpler method (hack) that gives you back the <code>setdefaultencoding()</code> function that was deleted from <code>sys</code>:</p>\n\n<pre><code>import sys\n# sys.setdefaultencoding() does not exist, here!\nreload(sys)  # Reload does the trick!\nsys.setdefaultencoding('UTF8')\n</code></pre>\n\n<p><strong>This is not a safe thing to do</strong>, though: this is obviously a hack, since <code>sys.setdefaultencoding()</code> is purposely removed from <code>sys</code> when Python starts. Reenabling it and changing the default encoding <a href=\"https://anonbadger.wordpress.com/2015/06/16/why-sys-setdefaultencoding-will-break-code/\" rel=\"noreferrer\">can break code that relies on ASCII being the default</a> (this code can be third-party, which would generally make fixing it impossible or dangerous).</p>\n"
    },
    "313": {
        "question_id": "5424716",
        "answer_id": "5424739",
        "question": "<p>How do I check if a user's string input is a number (e.g. <code>-1</code>, <code>0</code>, <code>1</code>, etc.)?</p>\n\n<pre><code>user_input = input(\"Enter something:\")\n\nif type(user_input) == int:\n    print(\"Is a number\")\nelse:\n    print(\"Not a number\")\n</code></pre>\n\n<p>The above won't work since <code>input</code> always returns a string.</p>\n",
        "answer": "<p>Simply try converting it to an int and then bailing out if it doesn't work.</p>\n\n<pre><code>try:\n   val = int(userInput)\nexcept ValueError:\n   print(\"That's not an int!\")\n</code></pre>\n"
    },
    "314": {
        "question_id": "15171695",
        "answer_id": "15172182",
        "question": "<p>After dive into Python's source code, I find out that it maintains an array of <code>PyInt_Object</code>s ranging from int(-5) to int(256) (@src/Objects/intobject.c)</p>\n\n<p>A little experiment proves it:</p>\n\n<pre><code>&gt;&gt;&gt; a = 1\n&gt;&gt;&gt; b = 1\n&gt;&gt;&gt; a is b\nTrue\n&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; a is b\nFalse\n</code></pre>\n\n<p>But if I run those code together in a py file (or join them with semi-colons), the result is different:</p>\n\n<pre><code>&gt;&gt;&gt; a = 257; b = 257; a is b\nTrue\n</code></pre>\n\n<p>I'm curious why they are still the same object, so I digg deeper into the syntax tree and compiler, I came up with a calling hierarchy listed below:</p>\n\n<pre><code>PyRun_FileExFlags() \n    mod = PyParser_ASTFromFile() \n        node *n = PyParser_ParseFileFlagsEx() //source to cst\n            parsetoke() \n                ps = PyParser_New() \n                for (;;)\n                    PyTokenizer_Get() \n                    PyParser_AddToken(ps, ...)\n        mod = PyAST_FromNode(n, ...)  //cst to ast\n    run_mod(mod, ...)\n        co = PyAST_Compile(mod, ...) //ast to CFG\n            PyFuture_FromAST()\n            PySymtable_Build()\n            co = compiler_mod()\n        PyEval_EvalCode(co, ...)\n            PyEval_EvalCodeEx()\n</code></pre>\n\n<p>Then I added some debug code in <code>PyInt_FromLong</code> and before/after <code>PyAST_FromNode</code>, and executed a test.py:</p>\n\n<pre><code>a = 257\nb = 257\nprint \"id(a) = %d, id(b) = %d\" % (id(a), id(b))\n</code></pre>\n\n<p>the output looks like:</p>\n\n<pre><code>DEBUG: before PyAST_FromNode\nname = a\nival = 257, id = 176046536\nname = b\nival = 257, id = 176046752\nname = a\nname = b\nDEBUG: after PyAST_FromNode\nrun_mod\nPyAST_Compile ok\nid(a) = 176046536, id(b) = 176046536\nEval ok\n</code></pre>\n\n<p>It means that during the <code>cst</code> to <code>ast</code> transform, two different <code>PyInt_Object</code>s are created (actually it's performed in the <code>ast_for_atom()</code> function), but they are later merged.</p>\n\n<p>I find it hard to comprehend the source in <code>PyAST_Compile</code> and <code>PyEval_EvalCode</code>, so I'm here to ask for help, I'll be appreciative if some one gives a hint?</p>\n",
        "answer": "<p>Python caches integers in the range <a href=\"https://github.com/python/cpython/blob/4830f581af57dd305c02c1fd72299ecb5b090eca/Objects/longobject.c#L18-L23\" rel=\"noreferrer\"><code>[-5, 256]</code></a>, so it is expected that integers in that range are also identical.</p>\n\n<p>What you see is the Python compiler optimizing identical literals when part of the same text.</p>\n\n<p>When typing in the Python shell each line is a completely different statement, parsed in a different moment, thus:</p>\n\n<pre><code>&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; a is b\nFalse\n</code></pre>\n\n<p>But if you put the same code into a file:</p>\n\n<pre><code>$ echo 'a = 257\n&gt; b = 257\n&gt; print a is b' &gt; testing.py\n$ python testing.py\nTrue\n</code></pre>\n\n<p>This happens whenever the parser has a chance to analyze where the literals are used, for example when defining a function in the interactive interpreter:</p>\n\n<pre><code>&gt;&gt;&gt; def test():\n...     a = 257\n...     b = 257\n...     print a is b\n... \n&gt;&gt;&gt; dis.dis(test)\n  2           0 LOAD_CONST               1 (257)\n              3 STORE_FAST               0 (a)\n\n  3           6 LOAD_CONST               1 (257)\n              9 STORE_FAST               1 (b)\n\n  4          12 LOAD_FAST                0 (a)\n             15 LOAD_FAST                1 (b)\n             18 COMPARE_OP               8 (is)\n             21 PRINT_ITEM          \n             22 PRINT_NEWLINE       \n             23 LOAD_CONST               0 (None)\n             26 RETURN_VALUE        \n&gt;&gt;&gt; test()\nTrue\n&gt;&gt;&gt; test.func_code.co_consts\n(None, 257)\n</code></pre>\n\n<p>Note how the compiled code contains a single constant for the <code>257</code>.</p>\n\n<p>In conclusion, the Python bytecode compiler is not able to perform massive optimizations (like static types languages), but it does more than you think. One of these things is to analyze usage of literals and avoid duplicating them.</p>\n\n<p>Note that this does not have to do with the cache, because it works also for floats, which do not have a cache:</p>\n\n<pre><code>&gt;&gt;&gt; a = 5.0\n&gt;&gt;&gt; b = 5.0\n&gt;&gt;&gt; a is b\nFalse\n&gt;&gt;&gt; a = 5.0; b = 5.0\n&gt;&gt;&gt; a is b\nTrue\n</code></pre>\n\n<p>For more complex literals, like tuples, it \"doesn't work\":</p>\n\n<pre><code>&gt;&gt;&gt; a = (1,2)\n&gt;&gt;&gt; b = (1,2)\n&gt;&gt;&gt; a is b\nFalse\n&gt;&gt;&gt; a = (1,2); b = (1,2)\n&gt;&gt;&gt; a is b\nFalse\n</code></pre>\n\n<p>But the literals inside the tuple are shared:</p>\n\n<pre><code>&gt;&gt;&gt; a = (257, 258)\n&gt;&gt;&gt; b = (257, 258)\n&gt;&gt;&gt; a[0] is b[0]\nFalse\n&gt;&gt;&gt; a[1] is b[1]\nFalse\n&gt;&gt;&gt; a = (257, 258); b = (257, 258)\n&gt;&gt;&gt; a[0] is b[0]\nTrue\n&gt;&gt;&gt; a[1] is b[1]\nTrue\n</code></pre>\n\n<hr>\n\n<p>Regarding why you see that two <code>PyInt_Object</code> are created, I'd <strong>guess</strong> that this is done to avoid literal comparison. for example, the number <code>257</code> can be expressed by multiple literals:</p>\n\n<pre><code>&gt;&gt;&gt; 257\n257\n&gt;&gt;&gt; 0x101\n257\n&gt;&gt;&gt; 0b100000001\n257\n&gt;&gt;&gt; 0o401\n257\n</code></pre>\n\n<p>The parser has two choices:</p>\n\n<ul>\n<li>Convert the literals to some common base before creating the integer, and see if the literals are equivalent. then create a single integer object.</li>\n<li>Create the integer objects and see if they are equal. If yes, keep only a single value and assign it to all the literals, otherwise, you already have the integers to assign.</li>\n</ul>\n\n<p>Probably the Python parser uses the second approach, which avoids rewriting the conversion code and also it's easier to extend (for example it works with floats as well).</p>\n\n<hr>\n\n<p>Reading the <code>Python/ast.c</code> file, the function that parses all numbers is <code>parsenumber</code>, which calls <code>PyOS_strtoul</code> to obtain the integer value (for intgers) and eventually calls <code>PyLong_FromString</code>:</p>\n\n<pre><code>    x = (long) PyOS_strtoul((char *)s, (char **)&amp;end, 0);\n    if (x &lt; 0 &amp;&amp; errno == 0) {\n        return PyLong_FromString((char *)s,\n                                 (char **)0,\n                                 0);\n    }\n</code></pre>\n\n<p>As you can see here the parser does <em>not</em> check whether it already found an integer with the given value and so this explains why you see that two int objects are created,\nand this also means that my guess was correct: the parser first creates the constants and only afterward optimizes the bytecode to use the same object for equal constants.</p>\n\n<p>The code that does this check must be somewhere in <code>Python/compile.c</code> or <code>Python/peephole.c</code>, since these are the files that transform the AST into bytecode.</p>\n\n<p>In particular, the <code>compiler_add_o</code> function seems the one that does it. There is this comment in <code>compiler_lambda</code>:</p>\n\n<pre><code>/* Make None the first constant, so the lambda can't have a\n   docstring. */\nif (compiler_add_o(c, c-&gt;u-&gt;u_consts, Py_None) &lt; 0)\n    return 0;\n</code></pre>\n\n<p>So it seems like <code>compiler_add_o</code> is used to insert constants for functions/lambdas etc.\nThe <code>compiler_add_o</code> function stores the constants into a <code>dict</code> object, and from this immediately follows that equal constants will fall in the same slot, resulting in a single constant in the final bytecode.</p>\n"
    },
    "315": {
        "question_id": "3206344",
        "answer_id": "3206446",
        "question": "<p>I'm building an admin for Flask and SQLAlchemy, and I want to pass the HTML for the different inputs to my view using <code>render_template</code>. The templating framework seems to escape the html automatically, so all &lt;\"'> are converted to html entities. How can I disable that so that the HTML renders correctly?</p>\n",
        "answer": "<p>the ideal way is to</p>\n\n<pre><code>{{ something|safe }}\n</code></pre>\n\n<p>than completely turning off auto escaping. </p>\n"
    },
    "316": {
        "question_id": "16351826",
        "answer_id": "16353060",
        "question": "<p>How do you use <code>url_for</code> in Flask to reference a file in a folder?  For example, I have some static files in the <code>static</code> folder, some of which may be in subfolders such as <code>static/bootstrap</code>.</p>\n\n<p>When I try to serve a file from <code>static/bootstrap</code>, I get an error.</p>\n\n<pre><code> &lt;link rel=stylesheet type=text/css href=\"{{ url_for('static/bootstrap', filename='bootstrap.min.css') }}\"&gt;\n</code></pre>\n\n<p>I can reference files that aren't in subfolders with this, which works.</p>\n\n<pre><code> &lt;link rel=stylesheet type=text/css href=\"{{ url_for('static', filename='bootstrap.min.css') }}\"&gt;\n</code></pre>\n\n<p>What is the correct way to reference static files with <code>url_for</code>?  How do I use <code>url_for</code> to generate urls to static files at any level?</p>\n",
        "answer": "<p>You have by default the <a href=\"http://flask.pocoo.org/docs/quickstart/#static-files\" rel=\"noreferrer\"><code>static</code> endpoint</a> for static files. Also <a href=\"http://flask.pocoo.org/docs/api/#flask.Flask\" rel=\"noreferrer\"><code>Flask</code></a> application has the following arguments:</p>\n\n<p><code>static_url_path</code>: can be used to specify a different path for the static files on the web. Defaults to the name of the <code>static_folder</code> folder.</p>\n\n<p><code>static_folder</code>: the folder with static files that should be served at <code>static_url_path</code>. Defaults to the 'static' folder in the root path of the application.</p>\n\n<p>It means that the <code>filename</code> argument will take a relative path to your file in <code>static_folder</code> and convert it to a relative path combined with <code>static_url_default</code>:</p>\n\n<pre><code>url_for('static', filename='path/to/file')\n</code></pre>\n\n<p>will convert the file path from <code>static_folder/path/to/file</code> to the url path <code>static_url_default/path/to/file</code>.</p>\n\n<p>So if you want to get files from the <code>static/bootstrap</code> folder you use this code:</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"{{ url_for('static', filename='bootstrap/bootstrap.min.css') }}\"&gt;\n</code></pre>\n\n<p>Which will be converted to (using default settings):</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"static/bootstrap/bootstrap.min.css\"&gt;\n</code></pre>\n\n<p>Also look at <a href=\"http://flask.pocoo.org/docs/api/#flask.url_for\" rel=\"noreferrer\"><code>url_for</code> documentation</a>.</p>\n"
    },
    "317": {
        "question_id": "39983695",
        "answer_id": "39983806",
        "question": "<p>I just came to know there are <strong>Truthy</strong> and <strong>Falsy</strong> values in python which are different from the normal <code>True</code> and <code>False</code>?</p>\n\n<p>Can someone please explain in depth what <em>truthy</em> and <em>falsy</em> values are? </p>\n\n<p>Where should I use them?</p>\n\n<p>What is the difference between <em>truthy</em> and <code>True</code> values and <em>falsy</em> and <code>False</code> values ?</p>\n",
        "answer": "<p>As the comments described, it just refers to values which are evaluated to True or False.</p>\n\n<p>For instance, to see if a list is not empty, instead of checking like this:</p>\n\n<pre><code>if len(my_list) != 0:\n   print \"Not empty!\"\n</code></pre>\n\n<p>You can simply do this:</p>\n\n<pre><code>if my_list:\n   print \"Not empty!\"\n</code></pre>\n\n<p>This is because some values, such as empty lists, are considered False when evaluated for a boolean value. Non-empty lists are True.</p>\n\n<p>Similarly for the integer 0, the empty string \"\", and so on, for False, and non-zero integers, non-empty strings, and so on, for True.</p>\n\n<p>The idea of terms like \"truthy\" and \"falsy\" simply refer to those values which are considered True in cases like those described above, and those which are considered False.</p>\n\n<p>For example, an empty list (<code>[]</code>) is considered \"falsy\", and a non-empty list (for example, <code>[1]</code>) is considered \"truthy\".</p>\n\n<p>See also <a href=\"https://docs.python.org/3/library/stdtypes.html#truth-value-testing\" rel=\"noreferrer\">this section of the documentation</a>.</p>\n"
    },
    "318": {
        "question_id": "2970520",
        "answer_id": "2970542",
        "question": "<p>What's the best way to count the number of occurrences of a given string, including overlap in python? is it the most obvious way:</p>\n\n<pre><code>def function(string, str_to_search_for):\n      count = 0\n      for x in xrange(len(string) - len(str_to_search_for) + 1):\n           if string[x:x+len(str_to_search_for)] == str_to_search_for:\n                count += 1\n      return count\n\n\nfunction('1011101111','11')\nreturns 5\n</code></pre>\n\n<p>?</p>\n\n<p>or is there a better way in python?</p>\n",
        "answer": "<p>Well, this <em>might</em> be faster since it does the comparing in C:</p>\n\n<pre><code>def occurrences(string, sub):\n    count = start = 0\n    while True:\n        start = string.find(sub, start) + 1\n        if start &gt; 0:\n            count+=1\n        else:\n            return count\n</code></pre>\n"
    },
    "319": {
        "question_id": "17246693",
        "answer_id": "17246744",
        "question": "<pre><code>import copy\n\na=\u201ddeepak\u201d\nb=1,2,3,4\nc=[1,2,3,4]\nd={1:10,2:20,3:30}\n\na1=copy.copy(a)\nb1=copy.copy(b)\nc1=copy.copy(c)\nd1=copy.copy(d)\n\n\nprint \"immutable - id(a)==id(a1)\",id(a)==id(a1)\nprint \"immutable   - id(b)==id(b1)\",id(b)==id(b1)\nprint \"mutable - id(c)==id(c1)\",id(c)==id(c1)\nprint \"mutable   - id(d)==id(d1)\",id(d)==id(d1)\n</code></pre>\n\n<p>I get the following results -</p>\n\n<pre><code>immutable - id(a)==id(a1) True\nimmutable   - id(b)==id(b1) True\nmutable - id(c)==id(c1) False\nmutable   - id(d)==id(d1) False\n</code></pre>\n\n<p>If I perform deepcopy -</p>\n\n<pre><code>a1=copy.deepcopy(a)\nb1=copy.deepcopy(b)\nc1=copy.deepcopy(c)\nd1=copy.deepcopy(d)\n</code></pre>\n\n<p>results are the same -</p>\n\n<pre><code>immutable - id(a)==id(a1) True\nimmutable   - id(b)==id(b1) True\nmutable - id(c)==id(c1) False\nmutable   - id(d)==id(d1) False\n</code></pre>\n\n<p>If I work on assignment operations -</p>\n\n<pre><code>a1=a\nb1=b\nc1=c\nd1=d\n</code></pre>\n\n<p>then results are -</p>\n\n<pre><code>immutable - id(a)==id(a1) True\nimmutable   - id(b)==id(b1) True\nmutable - id(c)==id(c1) True\nmutable   - id(d)==id(d1) True\n</code></pre>\n\n<p>Can somebody explain what exactly makes a difference between the copies? Is it something related to mutable &amp; immutable objects? If so, can you please explain it to me?</p>\n",
        "answer": "<p>Normal assignment operations will simply point the new variable towards the existing object. The <a href=\"http://docs.python.org/2/library/copy.html\" rel=\"noreferrer\">docs</a> explain the difference between shallow and deep copies:</p>\n\n<blockquote>\n  <p>The difference between shallow and deep copying is only relevant for\n  compound objects (objects that contain other objects, like lists or\n  class instances):</p>\n  \n  <ul>\n  <li><p>A shallow copy constructs a new compound object and then (to the    extent possible) inserts references into it to the objects found in the original.</p></li>\n  <li><p>A deep copy constructs a new compound object and then, recursively,    inserts copies into it of the objects found in the\n  original.</p></li>\n  </ul>\n</blockquote>\n\n<p>Here's a little demonstration:</p>\n\n<pre><code>import copy\n\na = [1, 2, 3]\nb = [4, 5, 6]\nc = [a, b]\n</code></pre>\n\n<p>Using normal assignment operatings to copy:</p>\n\n<pre><code>d = c\n\nprint id(c) == id(d)          # True - d is the same object as c\nprint id(c[0]) == id(d[0])    # True - d[0] is the same object as c[0]\n</code></pre>\n\n<p>Using a shallow copy:</p>\n\n<pre><code>d = copy.copy(c)\n\nprint id(c) == id(d)          # False - d is now a new object\nprint id(c[0]) == id(d[0])    # True - d[0] is the same object as c[0]\n</code></pre>\n\n<p>Using a deep copy:</p>\n\n<pre><code>d = copy.deepcopy(c)\n\nprint id(c) == id(d)          # False - d is now a new object\nprint id(c[0]) == id(d[0])    # False - d[0] is now a new object\n</code></pre>\n"
    },
    "320": {
        "question_id": "20250771",
        "answer_id": "20250996",
        "question": "<p>I have a dictionary which looks like this: <code>di = {1: \"A\", 2: \"B\"}</code></p>\n\n<p>I would like to apply it to the \"col1\" column of a dataframe similar to:</p>\n\n<pre><code>     col1   col2\n0       w      a\n1       1      2\n2       2    NaN\n</code></pre>\n\n<p>to get:</p>\n\n<pre><code>     col1   col2\n0       w      a\n1       A      2\n2       B    NaN\n</code></pre>\n\n<p>How can I best do this? For some reason googling terms relating to this only shows me links about how to make columns from dicts and vice-versa :-/ </p>\n",
        "answer": "<p>You can use <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.replace.html\" rel=\"noreferrer\"><code>.replace</code></a>.  For example:</p>\n\n<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'col2': {0: 'a', 1: 2, 2: np.nan}, 'col1': {0: 'w', 1: 1, 2: 2}})\n&gt;&gt;&gt; di = {1: \"A\", 2: \"B\"}\n&gt;&gt;&gt; df\n  col1 col2\n0    w    a\n1    1    2\n2    2  NaN\n&gt;&gt;&gt; df.replace({\"col1\": di})\n  col1 col2\n0    w    a\n1    A    2\n2    B  NaN\n</code></pre>\n\n<p>or directly on the <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.replace.html\" rel=\"noreferrer\"><code>Series</code></a>, i.e. <code>df[\"col1\"].replace(di, inplace=True)</code>.</p>\n"
    },
    "321": {
        "question_id": "5389507",
        "answer_id": "5389547",
        "question": "<p>How do I make a <code>for</code> loop or a list comprehension so that every iteration gives me two elements?</p>\n\n<pre><code>l = [1,2,3,4,5,6]\n\nfor i,k in ???:\n    print str(i), '+', str(k), '=', str(i+k)\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>1+2=3\n3+4=7\n5+6=11\n</code></pre>\n",
        "answer": "<p>You need a <strong><code>pairwise()</code></strong> (or <strong><code>grouped()</code></strong>) implementation.</p>\n\n<p>For Python 2:</p>\n\n<pre><code>from itertools import izip\n\ndef pairwise(iterable):\n    \"s -&gt; (s0, s1), (s2, s3), (s4, s5), ...\"\n    a = iter(iterable)\n    return izip(a, a)\n\nfor x, y in pairwise(l):\n   print \"%d + %d = %d\" % (x, y, x + y)\n</code></pre>\n\n<p>Or, more generally:</p>\n\n<pre><code>from itertools import izip\n\ndef grouped(iterable, n):\n    \"s -&gt; (s0,s1,s2,...sn-1), (sn,sn+1,sn+2,...s2n-1), (s2n,s2n+1,s2n+2,...s3n-1), ...\"\n    return izip(*[iter(iterable)]*n)\n\nfor x, y in grouped(l, 2):\n   print \"%d + %d = %d\" % (x, y, x + y)\n</code></pre>\n\n<p>In Python 3, you can replace <a href=\"https://docs.python.org/2/library/itertools.html#itertools.izip\" rel=\"noreferrer\"><code>izip</code></a> with the built-in <a href=\"https://docs.python.org/3/library/functions.html#zip\" rel=\"noreferrer\"><code>zip()</code></a> function, and drop the <code>import</code>.</p>\n\n<p>All credit to <a href=\"https://stackoverflow.com/users/355230/martineau\">martineau</a> for <a href=\"https://stackoverflow.com/questions/4356329/creating-a-python-dictionary-from-a-line-of-text/4356415#4356415\">his answer</a> to <a href=\"https://stackoverflow.com/q/4356329/78845\">my question</a>, I have found this to be very efficient as it only iterates once over the list and does not create any unnecessary lists in the process. </p>\n\n<p><strong>N.B</strong>: This should not be confused with the <a href=\"https://docs.python.org/3/library/itertools.html#itertools-recipes\" rel=\"noreferrer\"><strong><code>pairwise</code></strong> recipe</a> in Python's own <a href=\"https://docs.python.org/3/library/itertools.html\" rel=\"noreferrer\"><strong><code>itertools</code></strong> documentation</a>, which yields <code>s -&gt; (s0, s1), (s1, s2), (s2, s3), ...</code>, as pointed out by <a href=\"https://stackoverflow.com/users/566644/lazyr\">@lazyr</a> in the comments.</p>\n"
    },
    "322": {
        "question_id": "459083",
        "answer_id": "459131",
        "question": "<p>My little brother is just getting into programming, and for his Science Fair project, he's doing a simulation of a flock of birds in the sky. He's gotten most of his code written, and it works nicely, but the birds need to move <em>every moment</em>.</p>\n\n<p>Tkinter, however, hogs the time for its own event loop, and so his code won't run. Doing <code>root.mainloop()</code> runs, runs, and keeps running, and the only thing it runs is the event handlers.</p>\n\n<p>Is there a way to have his code run alongside the mainloop (without multithreading, it's confusing and this should be kept simple), and if so, what is it?</p>\n\n<p>Right now, he came up with an ugly hack, tying his <code>move()</code> function to <code>&lt;b1-motion&gt;</code>, so that as long as he holds the button down and wiggles the mouse, it works. But there's got to be a better way.</p>\n",
        "answer": "<p>Use the <code>after</code> method on the <code>Tk</code> object:</p>\n\n<pre><code>from tkinter import *\n\nroot = Tk()\n\ndef task():\n    print(\"hello\")\n    root.after(2000, task)  # reschedule event in 2 seconds\n\nroot.after(2000, task)\nroot.mainloop()\n</code></pre>\n\n<p>Here's the declaration and documentation for the <code>after</code> method:</p>\n\n<pre><code>def after(self, ms, func=None, *args):\n    \"\"\"Call function once after given time.\n\n    MS specifies the time in milliseconds. FUNC gives the\n    function which shall be called. Additional parameters\n    are given as parameters to the function call.  Return\n    identifier to cancel scheduling with after_cancel.\"\"\"\n</code></pre>\n"
    },
    "323": {
        "question_id": "2464959",
        "answer_id": "2464968",
        "question": "<p>Like in:</p>\n\n<pre><code>u'Hello'\n</code></pre>\n\n<p>My guess is that it indicates \"Unicode\", is it correct?</p>\n\n<p>If so, since when is it available?</p>\n",
        "answer": "<p>You're right, see <em><a href=\"http://docs.python.org/2/tutorial/introduction.html#unicode-strings\" rel=\"noreferrer\">3.1.3. Unicode Strings</a></em>.</p>\n\n<p>It's been the syntax since Python 2.0. </p>\n\n<p>Python 3 made them redundant, as the default string type is Unicode. Versions 3.0 through 3.2 removed them, but they were <a href=\"https://www.python.org/dev/peps/pep-0414/\" rel=\"noreferrer\">re-added in 3.3+</a> for compatibility with Python 2 to aide the 2 to 3 transition.</p>\n"
    },
    "324": {
        "question_id": "12065885",
        "answer_id": "12065904",
        "question": "<p>I have a Python pandas DataFrame <code>rpt</code>:</p>\n\n<pre><code>rpt\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nMultiIndex: 47518 entries, ('000002', '20120331') to ('603366', '20091231')\nData columns:\nSTK_ID                    47518  non-null values\nSTK_Name                  47518  non-null values\nRPT_Date                  47518  non-null values\nsales                     47518  non-null values\n</code></pre>\n\n<p>I can filter the rows whose stock id is <code>'600809'</code> like this: <code>rpt[rpt['STK_ID'] == '600809']</code></p>\n\n<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;\nMultiIndex: 25 entries, ('600809', '20120331') to ('600809', '20060331')\nData columns:\nSTK_ID                    25  non-null values\nSTK_Name                  25  non-null values\nRPT_Date                  25  non-null values\nsales                     25  non-null values\n</code></pre>\n\n<p>and I want to get all the rows of some stocks together, such as <code>['600809','600141','600329']</code>. That means I want a syntax like this: </p>\n\n<pre><code>stk_list = ['600809','600141','600329']\n\nrst = rpt[rpt['STK_ID'] in stk_list] # this does not works in pandas \n</code></pre>\n\n<p>Since pandas not accept above command, how to achieve the target? </p>\n",
        "answer": "<p>Use the <code>isin</code> method.  <code>rpt[rpt['STK_ID'].isin(stk_list)]</code>.</p>\n"
    },
    "325": {
        "question_id": "26313520",
        "answer_id": "26313848",
        "question": "<p>I have the following method:</p>\n\n<pre><code># last_updated is a datetime() object, representing the last time this program ran\ndef time_diff(last_updated):\n  day_period = last_updated.replace(day=last_updated.day+1, hour=1,\n                                     minute=0, second=0,\n                                     microsecond=0)\n   delta_time = day_period - last_updated\n   hours = delta_time.seconds // 3600\n   # make sure a period of 24hrs have passed before shuffling\n   if hours &gt;= 24:\n      print \"hello\"\n   else:\n      print \"do nothing\"\n</code></pre>\n\n<p>I want to find out if 24 hrs have passed since <code>last_updated</code>, how can I do that in <code>Python</code>?</p>\n",
        "answer": "<p>If <code>last_updated</code> is a naive datetime object representing the time in UTC:</p>\n\n<pre><code>from datetime import datetime, timedelta\n\nif (datetime.utcnow() - last_updated) &gt; timedelta(1): \n    # more than 24 hours passed\n</code></pre>\n\n<p>If <code>last_updated</code> is the local time (naive (timezone-unaware) datetime object):</p>\n\n<pre><code>import time\n\nDAY = 86400\nnow = time.time()\nthen = time.mktime(last_updated.timetuple())\nif (now - then) &gt; DAY:\n    # more than 24 hours passed\n</code></pre>\n\n<p>If <code>last_updated</code> is an ambiguous time e.g., the time during an end-of-DST transition (once a year in many timezones) then there is a fifty-fifty chance that <code>mktime()</code> returns a wrong result (e.g., off by an hour).</p>\n\n<p><code>time.mktime()</code> may also fail if C <code>time</code> library doesn't use a historical timezone database on a given platform <em>and</em> the UTC offset for the local timezone was different at <code>last_updated</code> time compared to now. It may apply to more than a third of all timezones in the last year. Linux, OS X, the recent versions of Windows have the tz database (I don't know whether old Windows versions would work for such past dates).</p>\n\n<p>Beware: it might be tempting to write <code>datetime.now() - last_updated</code> (similar to the UTC case) but it is guaranteed to fail on all platforms if the UTC offset was different at <code>last_updated</code> time (it is possible in many timezones). <code>mktime()</code>-based solution can utilize the tz database at least on some platforms and therefore it can handle the changes in the UTC offset for whatever reason there.</p>\n\n<p>For portability, you could install the tz database. It is provided by <code>pytz</code> module in Python. <code>tzlocal</code> can return <code>pytz</code> timezone corresponding to the local timezone:</p>\n\n<pre><code>from datetime import datetime, timedelta\nfrom tzlocal import get_localzone # $ pip install tzlocal\n\ntz = get_localzone() # local timezone\nthen = tz.normalize(tz.localize(last_updated)) # make it timezone-aware\nnow = datetime.now(tz) # timezone-aware current time in the local timezone\nif (now - then) &gt; timedelta(1):\n    # more than 24 hours passed\n</code></pre>\n\n<p>It works even if the UTC offset was different in the past. But it can't (as well as <code>time.mktime()</code>) fix ambiguous times (<code>tz.localize()</code> picks <code>is_dst=False</code> time by default). <code>tz.normalize()</code> is called to adjust non-existing times e.g., those that correspond to a start-of-DST transition (it should not affect the result).</p>\n\n<p>The above code assumes that <code>last_updated</code> is a naive datetime object (no associated timezone info). If <code>last_updated</code> is an aware datetime object then it is easy to convert it to UTC:</p>\n\n<pre><code>from datetime import datetime, timedelta\n\nthen_in_utc = last_updated.replace(tzinfo=None) - last_updated.utcoffset()\nif (datetime.utcnow() - then_in_utc) &gt; timedelta(1):\n    # more than 24 hours passed\n</code></pre>\n\n<p>General note: you should understand now why people recommend to work with UTC time and to use local time only for display.</p>\n"
    },
    "326": {
        "question_id": "6618002",
        "answer_id": "6618176",
        "question": "<p>Here is a pure Python-specific design question: </p>\n\n<pre><code>class MyClass(object):\n    ...\n    def get_my_attr(self):\n        ...\n\n    def set_my_attr(self, value):\n        ...\n</code></pre>\n\n<p>and </p>\n\n<pre><code>class MyClass(object):\n    ...        \n    @property\n    def my_attr(self):\n        ...\n\n    @my_attr.setter\n    def my_attr(self, value):\n        ...\n</code></pre>\n\n<p>Python lets us to do it either way. If you would design a Python program, which approach would you use and why?</p>\n",
        "answer": "<p><em>Prefer properties</em>. It's what they're there for.</p>\n\n<p>The reason is that all attributes are public in Python. Starting names with an underscore or two is just a warning that the given attribute is an implementation detail that may not stay the same in future versions of the code. It doesn't prevent you from actually getting or setting that attribute. Therefore, standard attribute access is the normal, Pythonic way of, well, accessing attributes.</p>\n\n<p>The advantage of properties is that they are syntactically identical to attribute access, so you can change from one to another without any changes to client code. You could even have one version of a class that uses properties (say, for code-by-contract or debugging) and one that doesn't for production, without changing the code that uses it. At the same time, you don't have to write getters and setters for everything just in case you might need to better control access later.</p>\n"
    },
    "327": {
        "question_id": "635483",
        "answer_id": "19829714",
        "question": "<p>I have a data structure which essentially amounts to a nested dictionary. Let's say it looks like this:</p>\n\n<pre><code>{'new jersey': {'mercer county': {'plumbers': 3,\n                                  'programmers': 81},\n                'middlesex county': {'programmers': 81,\n                                     'salesmen': 62}},\n 'new york': {'queens county': {'plumbers': 9,\n                                'salesmen': 36}}}\n</code></pre>\n\n<p>Now, maintaining and creating this is pretty painful; every time I have a new state/county/profession I have to create the lower layer dictionaries via obnoxious try/catch blocks. Moreover, I have to create annoying nested iterators if I want to go over all the values. </p>\n\n<p>I could also use tuples as keys, like such:</p>\n\n<pre><code>{('new jersey', 'mercer county', 'plumbers'): 3,\n ('new jersey', 'mercer county', 'programmers'): 81,\n ('new jersey', 'middlesex county', 'programmers'): 81,\n ('new jersey', 'middlesex county', 'salesmen'): 62,\n ('new york', 'queens county', 'plumbers'): 9,\n ('new york', 'queens county', 'salesmen'): 36}\n</code></pre>\n\n<p>This makes iterating over the values very simple and natural, but it is more syntactically painful to do things like aggregations and looking at subsets of the dictionary (e.g. if I just want to go state-by-state).</p>\n\n<p>Basically, sometimes I want to think of a nested dictionary as a flat dictionary, and sometimes I want to think of it indeed as a complex hierarchy. I could wrap this all in a class, but it seems like someone might have done this already. Alternatively, it seems like there might be some really elegant syntactical constructions to do this. </p>\n\n<p>How could I do this better?</p>\n\n<p>Addendum: I'm aware of <code>setdefault()</code> but it doesn't really make for clean syntax.  Also, each sub-dictionary you create still needs to have <code>setdefault()</code> manually set.</p>\n",
        "answer": "<blockquote>\n  <h1>What is the best way to implement nested dictionaries in Python?</h1>\n</blockquote>\n\n<p>Implement <code>__missing__</code> on a <code>dict</code> subclass to set and return a new instance.</p>\n\n<p>This approach has been available <a href=\"http://docs.python.org/2/library/stdtypes.html#dict\" rel=\"noreferrer\">(and documented)</a> since Python 2.5, and (particularly valuable to me) <strong>it pretty prints just like a normal dict</strong>, instead of the ugly printing of an autovivified defaultdict:</p>\n\n<pre><code>class Vividict(dict):\n    def __missing__(self, key):\n        value = self[key] = type(self)() # retain local pointer to value\n        return value                     # faster to return than dict lookup\n</code></pre>\n\n<p>(Note <code>self[key]</code> is on the left-hand side of assignment, so there's no recursion here.)</p>\n\n<p>and say you have some data:</p>\n\n<pre><code>data = {('new jersey', 'mercer county', 'plumbers'): 3,\n        ('new jersey', 'mercer county', 'programmers'): 81,\n        ('new jersey', 'middlesex county', 'programmers'): 81,\n        ('new jersey', 'middlesex county', 'salesmen'): 62,\n        ('new york', 'queens county', 'plumbers'): 9,\n        ('new york', 'queens county', 'salesmen'): 36}\n</code></pre>\n\n<p>Here's our usage code:</p>\n\n<pre><code>vividict = Vividict()\nfor (state, county, occupation), number in data.items():\n    vividict[state][county][occupation] = number\n</code></pre>\n\n<p>And now:</p>\n\n<pre><code>&gt;&gt;&gt; import pprint\n&gt;&gt;&gt; pprint.pprint(vividict, width=40)\n{'new jersey': {'mercer county': {'plumbers': 3,\n                                  'programmers': 81},\n                'middlesex county': {'programmers': 81,\n                                     'salesmen': 62}},\n 'new york': {'queens county': {'plumbers': 9,\n                                'salesmen': 36}}}\n</code></pre>\n\n<h2>Criticism</h2>\n\n<p>A criticism of this type of container is that if the user misspells a key, our code could fail silently:</p>\n\n<pre><code>&gt;&gt;&gt; vividict['new york']['queens counyt']\n{}\n</code></pre>\n\n<p>And additionally now we'd have a misspelled county in our data:</p>\n\n<pre><code>&gt;&gt;&gt; pprint.pprint(vividict, width=40)\n{'new jersey': {'mercer county': {'plumbers': 3,\n                                  'programmers': 81},\n                'middlesex county': {'programmers': 81,\n                                     'salesmen': 62}},\n 'new york': {'queens county': {'plumbers': 9,\n                                'salesmen': 36},\n              'queens counyt': {}}}\n</code></pre>\n\n<h1>Explanation:</h1>\n\n<p>We're just providing another nested instance of our class <code>Vividict</code> whenever a key is accessed but missing. (Returning the value assignment is useful because it avoids us additionally calling the getter on the dict, and unfortunately, we can't return it as it is being set.)</p>\n\n<p>Note, these are the same semantics as the most upvoted answer but in half the lines of code - nosklo's implementation:</p>\n\n<blockquote>\n<pre><code>class AutoVivification(dict):\n    \"\"\"Implementation of perl's autovivification feature.\"\"\"\n    def __getitem__(self, item):\n        try:\n            return dict.__getitem__(self, item)\n        except KeyError:\n            value = self[item] = type(self)()\n            return value\n</code></pre>\n</blockquote>\n\n<h2>Demonstration of Usage</h2>\n\n<p>Below is just an example of how this dict could be easily used to create a nested dict structure on the fly. This can quickly create a hierarchical tree structure as deeply as you might want to go.</p>\n\n<pre><code>import pprint\n\nclass Vividict(dict):\n    def __missing__(self, key):\n        value = self[key] = type(self)()\n        return value\n\nd = Vividict()\n\nd['foo']['bar']\nd['foo']['baz']\nd['fizz']['buzz']\nd['primary']['secondary']['tertiary']['quaternary']\npprint.pprint(d)\n</code></pre>\n\n<p>Which outputs: </p>\n\n<pre><code>{'fizz': {'buzz': {}},\n 'foo': {'bar': {}, 'baz': {}},\n 'primary': {'secondary': {'tertiary': {'quaternary': {}}}}}\n</code></pre>\n\n<p>And as the last line shows, it pretty prints beautifully and in order for manual inspection. But if you want to visually inspect your data, implementing <code>__missing__</code> to set a new instance of its class to the key and return it is a far better solution.</p>\n\n<h1>Other alternatives, for contrast:</h1>\n\n<h2><code>dict.setdefault</code></h2>\n\n<p>Although the asker thinks this isn't clean, I find it preferable to the <code>Vividict</code> myself.</p>\n\n<pre><code>d = {} # or dict()\nfor (state, county, occupation), number in data.items():\n    d.setdefault(state, {}).setdefault(county, {})[occupation] = number\n</code></pre>\n\n<p>and now:</p>\n\n<pre><code>&gt;&gt;&gt; pprint.pprint(d, width=40)\n{'new jersey': {'mercer county': {'plumbers': 3,\n                                  'programmers': 81},\n                'middlesex county': {'programmers': 81,\n                                     'salesmen': 62}},\n 'new york': {'queens county': {'plumbers': 9,\n                                'salesmen': 36}}}\n</code></pre>\n\n<p>A misspelling would fail noisily, and not clutter our data with bad information:</p>\n\n<pre><code>&gt;&gt;&gt; d['new york']['queens counyt']\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nKeyError: 'queens counyt'\n</code></pre>\n\n<p>Additionally, I think setdefault works great when used in loops and you don't know what you're going to get for keys, but repetitive usage becomes quite burdensome, and I don't think anyone would want to keep up the following:</p>\n\n<pre><code>d = dict()\n\nd.setdefault('foo', {}).setdefault('bar', {})\nd.setdefault('foo', {}).setdefault('baz', {})\nd.setdefault('fizz', {}).setdefault('buzz', {})\nd.setdefault('primary', {}).setdefault('secondary', {}).setdefault('tertiary', {}).setdefault('quaternary', {})\n</code></pre>\n\n<p>Another criticism is that setdefault requires a new instance whether it is used or not. However, Python (or at least CPython) is rather smart about handling unused and unreferenced new instances, for example, it reuses the location in memory:</p>\n\n<pre><code>&gt;&gt;&gt; id({}), id({}), id({})\n(523575344, 523575344, 523575344)\n</code></pre>\n\n<h2>An auto-vivified defaultdict</h2>\n\n<p>This is a neat looking implementation, and usage in a script that you're not inspecting the data on would be as useful as implementing <code>__missing__</code>:</p>\n\n<pre><code>from collections import defaultdict\n\ndef vivdict():\n    return defaultdict(vivdict)\n</code></pre>\n\n<p>But if you need to inspect your data, the results of an auto-vivified defaultdict populated with data in the same way looks like this:</p>\n\n<pre><code>&gt;&gt;&gt; d = vivdict(); d['foo']['bar']; d['foo']['baz']; d['fizz']['buzz']; d['primary']['secondary']['tertiary']['quaternary']; import pprint; \n&gt;&gt;&gt; pprint.pprint(d)\ndefaultdict(&lt;function vivdict at 0x17B01870&gt;, {'foo': defaultdict(&lt;function vivdict \nat 0x17B01870&gt;, {'baz': defaultdict(&lt;function vivdict at 0x17B01870&gt;, {}), 'bar': \ndefaultdict(&lt;function vivdict at 0x17B01870&gt;, {})}), 'primary': defaultdict(&lt;function \nvivdict at 0x17B01870&gt;, {'secondary': defaultdict(&lt;function vivdict at 0x17B01870&gt;, \n{'tertiary': defaultdict(&lt;function vivdict at 0x17B01870&gt;, {'quaternary': defaultdict(\n&lt;function vivdict at 0x17B01870&gt;, {})})})}), 'fizz': defaultdict(&lt;function vivdict at \n0x17B01870&gt;, {'buzz': defaultdict(&lt;function vivdict at 0x17B01870&gt;, {})})})\n</code></pre>\n\n<p>This output is quite inelegant, and the results are quite unreadable. The solution typically given is to recursively convert back to a dict for manual inspection. This non-trivial solution is left as an exercise for the reader.</p>\n\n<h1>Performance</h1>\n\n<p>Finally, let's look at performance. I'm subtracting the costs of instantiation.</p>\n\n<pre><code>&gt;&gt;&gt; import timeit\n&gt;&gt;&gt; min(timeit.repeat(lambda: {}.setdefault('foo', {}))) - min(timeit.repeat(lambda: {}))\n0.13612580299377441\n&gt;&gt;&gt; min(timeit.repeat(lambda: vivdict()['foo'])) - min(timeit.repeat(lambda: vivdict()))\n0.2936999797821045\n&gt;&gt;&gt; min(timeit.repeat(lambda: Vividict()['foo'])) - min(timeit.repeat(lambda: Vividict()))\n0.5354437828063965\n&gt;&gt;&gt; min(timeit.repeat(lambda: AutoVivification()['foo'])) - min(timeit.repeat(lambda: AutoVivification()))\n2.138362169265747\n</code></pre>\n\n<p>Based on performance, <code>dict.setdefault</code> works the best. I'd highly recommend it for production code, in cases where you care about execution speed. </p>\n\n<p>If you need this for interactive use (in an IPython notebook, perhaps) then performance doesn't really matter - in which case, I'd go with Vividict for readability of the output. Compared to the AutoVivification object (which uses <code>__getitem__</code> instead of <code>__missing__</code>, which was made for this purpose) it is far superior.</p>\n\n<h1>Conclusion</h1>\n\n<p>Implementing <code>__missing__</code> on a subclassed <code>dict</code> to set and return a new instance is slightly more difficult than alternatives but has the benefits of</p>\n\n<ul>\n<li>easy instantiation</li>\n<li>easy data population</li>\n<li>easy data viewing</li>\n</ul>\n\n<p>and because it is less complicated and more performant than modifying <code>__getitem__</code>, it should be preferred to that method.</p>\n\n<p>Nevertheless, it has drawbacks:</p>\n\n<ul>\n<li>Bad lookups will fail silently.</li>\n<li>The bad lookup will remain in the dictionary.</li>\n</ul>\n\n<p>Thus I personally prefer <code>setdefault</code> to the other solutions, and have in every situation where I have needed this sort of behavior.</p>\n"
    },
    "328": {
        "question_id": "319426",
        "answer_id": "319435",
        "question": "<p>How can I do case insensitive string comparison in Python?</p>\n\n<p>I would like to encapsulate comparison of a regular strings to a repository string using in a very simple and Pythonic way. I also would like to have ability to look up values in a dict hashed by strings using regular python strings.</p>\n",
        "answer": "<p>Assuming ASCII strings:</p>\n\n<pre><code>string1 = 'Hello'\nstring2 = 'hello'\n\nif string1.lower() == string2.lower():\n    print(\"The strings are the same (case insensitive)\")\nelse:\n    print(\"The strings are NOT the same (case insensitive)\")\n</code></pre>\n"
    },
    "329": {
        "question_id": "13650293",
        "answer_id": "13650309",
        "question": "<blockquote>\n  <p>The <code>is</code> operator does not match the values of the variables, but the\n  instances themselves.</p>\n</blockquote>\n\n<p>What does it really mean?</p>\n\n<p>I declared two variables named <code>x</code> and <code>y</code> assigning the same values in both variables, but it returns false when I use the <code>is</code> operator.</p>\n\n<p>I need a clarification. Here is my code.</p>\n\n<pre><code>x = [1, 2, 3]\ny = [1, 2, 3]\n\nprint x is y #It prints false!\n</code></pre>\n",
        "answer": "<p>You misunderstood what the <code>is</code> operator tests. It tests if two variables point the <em>same object</em>, not if two variables have the same value.</p>\n\n<p>From the documentation for the <a href=\"http://docs.python.org/2/reference/expressions.html#is\" rel=\"noreferrer\"><code>is</code> operator</a>:</p>\n\n<blockquote>\n  <p>The operators <code>is</code> and <code>is not</code> test for object identity: <code>x is y</code> is true if and only if <code>x</code> and <code>y</code> are the same object.</p>\n</blockquote>\n\n<p>Use the <code>==</code> operator instead:</p>\n\n<pre><code>print x == y\n</code></pre>\n\n<p>This prints <code>True</code>. <code>x</code> and <code>y</code> are two <em>separate</em> lists:</p>\n\n<pre><code>x[0] = 4\nprint(y)  # prints [1, 2, 3]\nprint(x == y)   # prints False\n</code></pre>\n\n<p>If you use the <a href=\"http://docs.python.org/2/library/functions.html#id\" rel=\"noreferrer\"><code>id()</code> function</a> you'll see that <code>x</code> and <code>y</code> have different identifiers:</p>\n\n<pre><code>&gt;&gt;&gt; id(x)\n4401064560\n&gt;&gt;&gt; id(y)\n4401098192\n</code></pre>\n\n<p>but if you were to assign <code>y</code> to <code>x</code> then both point to the same object:</p>\n\n<pre><code>&gt;&gt;&gt; x = y\n&gt;&gt;&gt; id(x)\n4401064560\n&gt;&gt;&gt; id(y)\n4401064560\n&gt;&gt;&gt; x is y\nTrue\n</code></pre>\n\n<p>and <code>is</code> shows both are the same object, it returns <code>True</code>.</p>\n\n<p>Remember that in Python, <a href=\"https://nedbatchelder.com/text/names.html\" rel=\"noreferrer\">names are just labels referencing values</a>; you can have multiple names point to the same object. <code>is</code> tells you if two names point to one and the same object. <code>==</code> tells you if two names refer to objects that have the same value.</p>\n"
    },
    "330": {
        "question_id": "5442910",
        "answer_id": "5442981",
        "question": "<p>In the Python multiprocessing library, is there a variant of pool.map which support multiple arguments?</p>\n\n<pre><code>text = \"test\"\ndef harvester(text, case):\n    X = case[0]\n    text+ str(X)\n\nif __name__ == '__main__':\n    pool = multiprocessing.Pool(processes=6)\n    case = RAW_DATASET\n    pool.map(harvester(text,case),case, 1)\n    pool.close()\n    pool.join()\n</code></pre>\n",
        "answer": "<p>The answer to this is version- and situation-dependent. The most general answer for recent versions of Python (since 3.3) was first described below by <a href=\"https://stackoverflow.com/a/5443941/577088\">J.F. Sebastian</a>.<sup>1</sup> It uses the <a href=\"http://docs.python.org/dev/library/multiprocessing.html#multiprocessing.pool.Pool.starmap\" rel=\"noreferrer\"><code>Pool.starmap</code></a> method, which accepts a sequence of argument tuples. It then automatically unpacks the arguments from each tuple and passes them to the given function:</p>\n\n<pre><code>import multiprocessing\nfrom itertools import product\n\ndef merge_names(a, b):\n    return '{} &amp; {}'.format(a, b)\n\nif __name__ == '__main__':\n    names = ['Brown', 'Wilson', 'Bartlett', 'Rivera', 'Molloy', 'Opie']\n    with multiprocessing.Pool(processes=3) as pool:\n        results = pool.starmap(merge_names, product(names, repeat=2))\n    print(results)\n\n# Output: ['Brown &amp; Brown', 'Brown &amp; Wilson', 'Brown &amp; Bartlett', ...\n</code></pre>\n\n<p>For earlier versions of Python, you'll need to write a helper function to unpack the arguments explicitly. If you want to use <code>with</code>, you'll also need to write a wrapper to turn <code>Pool</code> into a context manager. (Thanks to <a href=\"https://stackoverflow.com/questions/5442910/python-multiprocessing-pool-map-for-multiple-arguments/5442981?noredirect=1#comment80290057_5442981\">muon</a> for pointing this out.)</p>\n\n<pre><code>import multiprocessing\nfrom itertools import product\nfrom contextlib import contextmanager\n\ndef merge_names(a, b):\n    return '{} &amp; {}'.format(a, b)\n\ndef merge_names_unpack(args):\n    return merge_names(*args)\n\n@contextmanager\ndef poolcontext(*args, **kwargs):\n    pool = multiprocessing.Pool(*args, **kwargs)\n    yield pool\n    pool.terminate()\n\nif __name__ == '__main__':\n    names = ['Brown', 'Wilson', 'Bartlett', 'Rivera', 'Molloy', 'Opie']\n    with poolcontext(processes=3) as pool:\n        results = pool.map(merge_names_unpack, product(names, repeat=2))\n    print(results)\n\n# Output: ['Brown &amp; Brown', 'Brown &amp; Wilson', 'Brown &amp; Bartlett', ...\n</code></pre>\n\n<p>In simpler cases, with a fixed second argument, you can also use <code>partial</code>, but only in Python 2.7+.</p>\n\n<pre><code>import multiprocessing\nfrom functools import partial\nfrom contextlib import contextmanager\n\n@contextmanager\ndef poolcontext(*args, **kwargs):\n    pool = multiprocessing.Pool(*args, **kwargs)\n    yield pool\n    pool.terminate()\n\ndef merge_names(a, b):\n    return '{} &amp; {}'.format(a, b)\n\nif __name__ == '__main__':\n    names = ['Brown', 'Wilson', 'Bartlett', 'Rivera', 'Molloy', 'Opie']\n    with poolcontext(processes=3) as pool:\n        results = pool.map(partial(merge_names, b='Sons'), names)\n    print(results)\n\n# Output: ['Brown &amp; Sons', 'Wilson &amp; Sons', 'Bartlett &amp; Sons', ...\n</code></pre>\n\n<p><sup>1. Much of this was inspired by his answer, which should probably have been accepted instead. But since this one is stuck at the top, it seemed best to improve it for future readers.</sup></p>\n"
    },
    "331": {
        "question_id": "33225947",
        "answer_id": "52108199",
        "question": "<p>I've been testing out Selenium with Chromedriver and I noticed that some pages can detect that you're using Selenium even though there's no automation at all. Even when I'm just browsing manually just using chrome through Selenium and Xephyr I often get a page saying that suspicious activity was detected. I've checked my user agent, and my browser fingerprint, and they are all exactly identical to the normal chrome browser.</p>\n\n<p>When I browse to these sites in normal chrome everything works fine, but the moment I use Selenium I'm detected.</p>\n\n<p>In theory chromedriver and chrome should look literally exactly the same to any webserver, but somehow they can detect it. </p>\n\n<p>If you want some testcode try out this:</p>\n\n<pre><code>from pyvirtualdisplay import Display\nfrom selenium import webdriver\n\ndisplay = Display(visible=1, size=(1600, 902))\ndisplay.start()\nchrome_options = webdriver.ChromeOptions()\nchrome_options.add_argument('--disable-extensions')\nchrome_options.add_argument('--profile-directory=Default')\nchrome_options.add_argument(\"--incognito\")\nchrome_options.add_argument(\"--disable-plugins-discovery\");\nchrome_options.add_argument(\"--start-maximized\")\ndriver = webdriver.Chrome(chrome_options=chrome_options)\ndriver.delete_all_cookies()\ndriver.set_window_size(800,800)\ndriver.set_window_position(0,0)\nprint 'arguments done'\ndriver.get('http://stubhub.com')\n</code></pre>\n\n<p>If you browse around stubhub you'll get redirected and 'blocked' within one or two requests. I've been investigating this and I can't figure out how they can tell that a user is using Selenium. </p>\n\n<p>How do they do it?</p>\n\n<p>EDIT UPDATE:</p>\n\n<p>I installed the Selenium IDE plugin in Firefox and I got banned when I went to stubhub.com in the normal firefox browser with only the additional plugin.</p>\n\n<p>EDIT:</p>\n\n<p>When I use Fiddler to view the HTTP requests being sent back and forth I've noticed that the 'fake browser\\'s' requests often have 'no-cache' in the response header.</p>\n\n<p>EDIT:</p>\n\n<p>results like this <a href=\"https://stackoverflow.com/questions/3614472/is-there-a-way-to-detect-that-im-in-a-selenium-webdriver-page-from-javascript\">Is there a way to detect that I&#39;m in a Selenium Webdriver page from Javascript</a> suggest that there should be no way to detect when you are using a webdriver. But this evidence suggests otherwise.</p>\n\n<p>EDIT:</p>\n\n<p>The site uploads a fingerprint to their servers, but I checked and the fingerprint of selenium is identical to the fingerprint when using chrome.</p>\n\n<p>EDIT:</p>\n\n<p>This is one of the fingerprint payloads that they send to their servers</p>\n\n<pre><code>{\"appName\":\"Netscape\",\"platform\":\"Linuxx86_64\",\"cookies\":1,\"syslang\":\"en-US\",\"userlang\":\"en-US\",\"cpu\":\"\",\"productSub\":\"20030107\",\"setTimeout\":1,\"setInterval\":1,\"plugins\":{\"0\":\"ChromePDFViewer\",\"1\":\"ShockwaveFlash\",\"2\":\"WidevineContentDecryptionModule\",\"3\":\"NativeClient\",\"4\":\"ChromePDFViewer\"},\"mimeTypes\":{\"0\":\"application/pdf\",\"1\":\"ShockwaveFlashapplication/x-shockwave-flash\",\"2\":\"FutureSplashPlayerapplication/futuresplash\",\"3\":\"WidevineContentDecryptionModuleapplication/x-ppapi-widevine-cdm\",\"4\":\"NativeClientExecutableapplication/x-nacl\",\"5\":\"PortableNativeClientExecutableapplication/x-pnacl\",\"6\":\"PortableDocumentFormatapplication/x-google-chrome-pdf\"},\"screen\":{\"width\":1600,\"height\":900,\"colorDepth\":24},\"fonts\":{\"0\":\"monospace\",\"1\":\"DejaVuSerif\",\"2\":\"Georgia\",\"3\":\"DejaVuSans\",\"4\":\"TrebuchetMS\",\"5\":\"Verdana\",\"6\":\"AndaleMono\",\"7\":\"DejaVuSansMono\",\"8\":\"LiberationMono\",\"9\":\"NimbusMonoL\",\"10\":\"CourierNew\",\"11\":\"Courier\"}}\n</code></pre>\n\n<p>Its identical in selenium and in chrome</p>\n\n<p>EDIT:</p>\n\n<p>VPNs work for a single use but get detected after I load the first page. Clearly some javascript is being run to detect Selenium.</p>\n",
        "answer": "<h2><strong>For Mac Users</strong></h2>\n\n<p><strong><em>Replacing <code>cdc_</code> variable using Vim or Perl</em></strong></p>\n\n<p>You can use <code>vim</code>, or as @Vic Seedoubleyew has pointed out in the answer by @Erti-Chris Eelmaa, <code>perl</code>, to replace the <code>cdc_</code> variable in <code>chromedriver</code>(<em>See post by @Erti-Chris Eelmaa to learn more about that variable</em>). Using <code>vim</code> or <code>perl</code> prevents you from having to recompile source code or use a hex-editor. Make sure to make a copy of the original <code>chromedriver</code> before attempting to edit it. Also, the methods below were tested on <code>chromedriver version 2.41.578706</code>.</p>\n\n<hr>\n\n<h2><strong>Using Vim</strong></h2>\n\n<pre><code>vim /path/to/chromedriver\n</code></pre>\n\n<p>After running the line above, you'll probably see a bunch of gibberish. Do the following:</p>\n\n<ol>\n<li>Search for <code>cdc_</code> by typing <code>/cdc_</code> and pressing <code>return</code>.</li>\n<li>Enable editing by pressing <code>a</code>.</li>\n<li>Delete any amount of <code>$cdc_lasutopfhvcZLmcfl</code> and replace what was deleted with an equal amount characters. If you don't, <code>chromedriver</code> will fail.</li>\n<li>After you're done editing, press <code>esc</code>.</li>\n<li>To save the changes and quit, type <code>:wq!</code> and press <code>return</code>.</li>\n<li>If you don't want to save the changes, but you want to quit, type <code>:q!</code> and press <code>return</code>.</li>\n<li>You're done.</li>\n</ol>\n\n<p>Go to the altered <code>chromedriver</code> and double click on it. A <code>terminal</code> window should open up. If you don't see <code>killed</code> in the output, you successfully altered the driver.</p>\n\n<hr>\n\n<h2><strong>Using Perl</strong></h2>\n\n<p>The line below replaces <code>cdc_</code> with <code>dog_</code>:</p>\n\n<pre><code>perl -pi -e 's/cdc_/dog_/g' /path/to/chromedriver\n</code></pre>\n\n<p>Make sure that the replacement string has the same number of characters as the search string, otherwise the <code>chromedriver</code> will fail.</p>\n\n<p><strong><em>Perl Explanation</em></strong></p>\n\n<p><code>s///g</code> denotes that you want to search for a string and replace it globally with another string (replaces all occurrences).</p>\n\n<blockquote>\n  <p>e.g., <code>s/string/replacment/g</code></p>\n</blockquote>\n\n<p>So,</p>\n\n<blockquote>\n  <p><code>s///</code> denotes searching for and replacing a string.</p>\n  \n  <p><code>cdc_</code> is the search string.</p>\n  \n  <p><code>dog_</code> is the replacement string.</p>\n  \n  <p><code>g</code> is the global key, which replaces every occurrence of the string.</p>\n</blockquote>\n\n<p><strong><em>How to check if the Perl replacement worked</em></strong></p>\n\n<p>The following line will print every occurrence of the search string <code>cdc_</code>:</p>\n\n<p><code>perl -ne 'while(/cdc_/g){print \"$&amp;\\n\";}' /path/to/chromedriver</code></p>\n\n<p>If this returns nothing, then <code>cdc_</code> has been replaced. </p>\n\n<p>Conversely, you can use the this:</p>\n\n<p><code>perl -ne 'while(/dog_/g){print \"$&amp;\\n\";}' /path/to/chromedriver</code></p>\n\n<p>to see if your replacement string, <code>dog_</code>, is now in the <code>chromedriver</code> binary. If it is, the replacement string will be printed to the console.</p>\n\n<p>Go to the altered <code>chromedriver</code> and double click on it. A <code>terminal</code> window should open up. If you don't see <code>killed</code> in the output, you successfully altered the driver.</p>\n\n<hr>\n\n<h2><strong><em>Wrapping Up</em></strong></h2>\n\n<p>After altering the <code>chromedriver</code> binary, make sure that the name of the altered <code>chromedriver</code> binary is <code>chromedriver</code>, and that the original binary is either moved from its original location or renamed.</p>\n\n<hr>\n\n<h2><strong><em>My Experience With This Method</em></strong></h2>\n\n<p>I was previously being detected on a website while trying to log in, but after replacing <code>cdc_</code> with an equal sized string, I was able to log in. Like others have said though, if you've already been detected, you might get blocked for a plethora of other reasons even after using this method. So you may have to try accessing the site that was detecting you using a VPN, different network, or what have you.</p>\n"
    },
    "332": {
        "question_id": "13137817",
        "answer_id": "13137873",
        "question": "<p>I'm trying to download and save an image from the web using python's <code>requests</code> module.</p>\n\n<p>Here is the (working) code I used:</p>\n\n<pre><code>img = urllib2.urlopen(settings.STATICMAP_URL.format(**data))\nwith open(path, 'w') as f:\n    f.write(img.read())\n</code></pre>\n\n<p>Here is the new (non-working) code using <code>requests</code>:</p>\n\n<pre><code>r = requests.get(settings.STATICMAP_URL.format(**data))\nif r.status_code == 200:\n    img = r.raw.read()\n    with open(path, 'w') as f:\n        f.write(img)\n</code></pre>\n\n<p>Can you help me on what attribute from the response to use from <code>requests</code>?</p>\n",
        "answer": "<p>You can either use the <a href=\"http://docs.python-requests.org/en/latest/api/#requests.Response.raw\"><code>response.raw</code> file object</a>, or iterate over the response.</p>\n\n<p>To use the <code>response.raw</code> file-like object will not, by default, decode compressed responses (with GZIP or deflate). You can force it to decompress for you anyway by setting the <code>decode_content</code> attribute to <code>True</code> (<code>requests</code> sets it to <code>False</code> to control decoding itself). You can then use <a href=\"https://docs.python.org/2/library/shutil.html#shutil.copyfileobj\"><code>shutil.copyfileobj()</code></a> to have Python stream the data to a file object:</p>\n\n<pre><code>import requests\nimport shutil\n\nr = requests.get(settings.STATICMAP_URL.format(**data), stream=True)\nif r.status_code == 200:\n    with open(path, 'wb') as f:\n        r.raw.decode_content = True\n        shutil.copyfileobj(r.raw, f)        \n</code></pre>\n\n<p>To iterate over the response use a loop; iterating like this ensures that data is decompressed by this stage:</p>\n\n<pre><code>r = requests.get(settings.STATICMAP_URL.format(**data), stream=True)\nif r.status_code == 200:\n    with open(path, 'wb') as f:\n        for chunk in r:\n            f.write(chunk)\n</code></pre>\n\n<p>This'll read the data in 128 byte chunks; if you feel another chunk size works better, use the <a href=\"http://docs.python-requests.org/en/latest/api/#requests.Response.iter_content\"><code>Response.iter_content()</code> method</a> with a custom chunk size:</p>\n\n<pre><code>r = requests.get(settings.STATICMAP_URL.format(**data), stream=True)\nif r.status_code == 200:\n    with open(path, 'wb') as f:\n        for chunk in r.iter_content(1024):\n            f.write(chunk)\n</code></pre>\n\n<p>Note that you need to open the destination file in binary mode to ensure python doesn't try and translate newlines for you. We also set <code>stream=True</code> so that <code>requests</code> doesn't download the whole image into memory first.</p>\n"
    },
    "333": {
        "question_id": "9979970",
        "answer_id": "9980160",
        "question": "<p>I understand how this construct works:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>for i in range(10):\n    print(i)\n\n    if i == 9:\n        print(\"Too big - I'm giving up!\")\n        break;\nelse:\n    print(\"Completed successfully\")\n</code></pre>\n\n<p>But I don't understand why <code>else</code> is used as the keyword here, since it suggests the code in question only runs if the <code>for</code> block does not complete, which is the opposite of what it does! No matter how I think about it, my brain can't progress seamlessly from the <code>for</code> statement to the <code>else</code> block. To me, <code>continue</code> or <code>continuewith</code> would make more sense (and I'm trying to train myself to read it as such).</p>\n\n<p>I'm wondering how Python coders read this construct in their head (or aloud, if you like). Perhaps I'm missing something that would make such code blocks more easily decipherable?</p>\n",
        "answer": "<p>It's a strange construct even to seasoned Python coders. When used in conjunction with for-loops it basically means \"find some item in the iterable, else if none was found do ...\". As in:</p>\n\n<pre><code>found_obj = None\nfor obj in objects:\n    if obj.key == search_key:\n        found_obj = obj\n        break\nelse:\n    print('No object found.')\n</code></pre>\n\n<p>But anytime you see this construct, a better alternative is to either encapsulate the search in a function:</p>\n\n<pre><code>def find_obj(search_key):\n    for obj in objects:\n        if obj.key == search_key:\n            return obj\n</code></pre>\n\n<p>Or use a list comprehension:</p>\n\n<pre><code>matching_objs = [o for o in objects if o.key == search_key]\nif matching_objs:\n    print('Found {}'.format(matching_objs[0]))\nelse:\n    print('No object found.')\n</code></pre>\n\n<p>It is not semantically equivalent to the other two versions, but works good enough in non-performance critical code where it doesn't matter whether you iterate the whole list or not. Others may disagree, but I personally would avoid ever using the for-else or while-else blocks in production code. </p>\n\n<p>See also <a href=\"http://mail.python.org/pipermail/python-ideas/2009-October/006155.html\" rel=\"noreferrer\">[Python-ideas] Summary of for...else threads</a></p>\n"
    },
    "334": {
        "question_id": "477486",
        "answer_id": "477635",
        "question": "<p>Is there a way to step between 0 and 1 by 0.1? </p>\n\n<p>I thought I could do it like the following, but it failed:</p>\n\n<pre><code>for i in range(0, 1, 0.1):\n    print i\n</code></pre>\n\n<p>Instead, it says that the step argument cannot be zero, which I did not expect.</p>\n",
        "answer": "<p>Rather than using a decimal step directly, it's much safer to express this in terms of how many points you want. Otherwise, floating-point rounding error is likely to give you a wrong result.</p>\n\n<p>You can use the <code>linspace</code> function from the <a href=\"http://en.wikipedia.org/wiki/NumPy\" rel=\"noreferrer\">NumPy</a> library (which isn't part of the standard library but is relatively easy to obtain). <code>linspace</code> takes a number of points to return, and also lets you specify whether or not to include the right endpoint:</p>\n\n<pre><code>&gt;&gt;&gt; np.linspace(0,1,11)\narray([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ])\n&gt;&gt;&gt; np.linspace(0,1,10,endpoint=False)\narray([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9])\n</code></pre>\n\n<p>If you really want to use a floating-point step value, you can, with <code>numpy.arange</code>.</p>\n\n<pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; np.arange(0.0, 1.0, 0.1)\narray([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9])\n</code></pre>\n\n<p>Floating-point rounding error <em>will</em> cause problems, though. Here's a simple case where rounding error causes <code>arange</code> to produce a length-4 array when it should only produce 3 numbers:</p>\n\n<pre><code>&gt;&gt;&gt; numpy.arange(1, 1.3, 0.1)\narray([1. , 1.1, 1.2, 1.3])\n</code></pre>\n"
    },
    "335": {
        "question_id": "1816958",
        "answer_id": "1816969",
        "question": "<p>I'm trying to use <code>multiprocessing</code>'s <code>Pool.map()</code> function to divide out work simultaneously. When I use the following code, it works fine:</p>\n\n<pre><code>import multiprocessing\n\ndef f(x):\n    return x*x\n\ndef go():\n    pool = multiprocessing.Pool(processes=4)        \n    print pool.map(f, range(10))\n\n\nif __name__== '__main__' :\n    go()\n</code></pre>\n\n<p>However, when I use it in a more object-oriented approach, it doesn't work. The error message it gives is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>PicklingError: Can't pickle &lt;type 'instancemethod'&gt;: attribute lookup\n__builtin__.instancemethod failed\n</code></pre>\n\n<p>This occurs when the following is my main program:</p>\n\n<pre><code>import someClass\n\nif __name__== '__main__' :\n    sc = someClass.someClass()\n    sc.go()\n</code></pre>\n\n<p>and the following is my <code>someClass</code> class:</p>\n\n<pre><code>import multiprocessing\n\nclass someClass(object):\n    def __init__(self):\n        pass\n\n    def f(self, x):\n        return x*x\n\n    def go(self):\n        pool = multiprocessing.Pool(processes=4)       \n        print pool.map(self.f, range(10))\n</code></pre>\n\n<p>Anyone know what the problem could be, or an easy way around it?</p>\n",
        "answer": "<p>The problem is that multiprocessing must pickle things to sling them among processes, and bound methods are not picklable.  The workaround (whether you consider it \"easy\" or not;-) is to add the infrastructure to your program to allow such methods to be pickled, registering it with the <a href=\"https://docs.python.org/3/library/copyreg.html?highlight=copyreg\" rel=\"noreferrer\">copy_reg</a> standard library method.</p>\n\n<p>For example, Steven Bethard's contribution to <a href=\"http://bytes.com/topic/python/answers/552476-why-cant-you-pickle-instancemethods\" rel=\"noreferrer\">this thread</a> (towards the end of the thread) shows one perfectly workable approach to allow method pickling/unpickling via <code>copy_reg</code>.</p>\n"
    },
    "336": {
        "question_id": "9475241",
        "answer_id": "9475354",
        "question": "<p>Is it possible to split a python string every nth character?</p>\n\n<p>For example, suppose I have a string containing the following:</p>\n\n<pre><code>'1234567890'\n</code></pre>\n\n<p>How can I get it to look like this:</p>\n\n<pre><code>['12','34','56','78','90']\n</code></pre>\n",
        "answer": "<pre><code>&gt;&gt;&gt; line = '1234567890'\n&gt;&gt;&gt; n = 2\n&gt;&gt;&gt; [line[i:i+n] for i in range(0, len(line), n)]\n['12', '34', '56', '78', '90']\n</code></pre>\n"
    },
    "337": {
        "question_id": "24085680",
        "answer_id": "24085681",
        "question": "<p>When I create a string containing backslashes, they get duplicated:</p>\n\n<pre><code>&gt;&gt;&gt; my_string = \"why\\does\\it\\happen?\"\n&gt;&gt;&gt; my_string\n'why\\\\does\\\\it\\\\happen?'\n</code></pre>\n\n<p>Why?</p>\n",
        "answer": "<p>What you are seeing is the <em>representation</em> of <code>my_string</code> created by its <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__repr__\" rel=\"noreferrer\"><code>__repr__()</code></a> method. If you print it, you can see that you've actually got single backslashes, just as you intended:</p>\n\n<pre><code>&gt;&gt;&gt; print(my_string)\nwhy\\does\\it\\happen?\n</code></pre>\n\n<p>The string below has <em>three</em> characters in it, not four:</p>\n\n<pre><code>&gt;&gt;&gt; 'a\\\\b'\n'a\\\\b'\n&gt;&gt;&gt; len('a\\\\b')\n3\n</code></pre>\n\n<p>You can get the standard representation of a string (or any other object) with the <a href=\"https://docs.python.org/3/library/functions.html#repr\" rel=\"noreferrer\"><code>repr()</code></a> built-in function:</p>\n\n<pre><code>&gt;&gt;&gt; print(repr(my_string))\n'why\\\\does\\\\it\\\\happen?'\n</code></pre>\n\n<p>Python represents backslashes in strings as <code>\\\\</code> because the backslash is an escape character - for instance, <code>\\n</code> represents a newline, and <code>\\t</code> represents a tab.</p>\n\n<p>This can sometimes get you into trouble:</p>\n\n<pre><code>&gt;&gt;&gt; print(\"this\\text\\is\\not\\what\\it\\seems\")\nthis    ext\\is\not\\what\\it\\seems\n</code></pre>\n\n<p>Because of this, there needs to be a way to tell Python you <em>really</em> want the two characters <code>\\n</code> rather than a newline, and you do that by escaping the backslash itself, with another one:</p>\n\n<pre><code>&gt;&gt;&gt; print(\"this\\\\text\\is\\what\\you\\\\need\")\nthis\\text\\is\\what\\you\\need\n</code></pre>\n\n<p>When Python returns the representation of a string, it plays safe, escaping all backslashes (even if they wouldn't otherwise be part of an escape sequence), and that's what you're seeing. However, the string itself contains only single backslashes.</p>\n\n<p><em>More information about Python's string literals can be found at: <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals\" rel=\"noreferrer\">String and Bytes literals</a> in the Python documentation.</em></p>\n"
    },
    "338": {
        "question_id": "11346283",
        "answer_id": "11346337",
        "question": "<p>I have a DataFrame using pandas and column labels that I need to edit to replace the original column labels. </p>\n\n<p>I'd like to change the column names in a DataFrame <code>A</code> where the original column names are:</p>\n\n<pre><code>['$a', '$b', '$c', '$d', '$e'] \n</code></pre>\n\n<p>to </p>\n\n<pre><code>['a', 'b', 'c', 'd', 'e'].\n</code></pre>\n\n<p>I have the edited column names stored it in a list, but I don't know how to replace the column names.</p>\n",
        "answer": "<p>Just assign it to the <code>.columns</code> attribute:</p>\n\n<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'$a':[1,2], '$b': [10,20]})\n&gt;&gt;&gt; df.columns = ['a', 'b']\n&gt;&gt;&gt; df\n   a   b\n0  1  10\n1  2  20\n</code></pre>\n"
    },
    "339": {
        "question_id": "31593201",
        "answer_id": "31593712",
        "question": "<p>Can someone explain how these three methods of slicing are different?<br>\nI've seen <a href=\"http://pandas.pydata.org/pandas-docs/stable/indexing.html\" rel=\"noreferrer\">the docs</a>, \nand I've seen <a href=\"https://stackoverflow.com/questions/28757389/loc-vs-iloc-vs-ix-vs-at-vs-iat\">these</a> <a href=\"https://stackoverflow.com/questions/27667759/is-ix-always-better-than-loc-and-iloc-since-it-is-faster-and-supports-i\">answers</a>, but I still find myself unable to explain how the three are different.  To me, they seem interchangeable in large part, because they are at the lower levels of slicing.</p>\n\n<p>For example, say we want to get the first five rows of a <code>DataFrame</code>.  How is it that all three of these work?</p>\n\n<pre><code>df.loc[:5]\ndf.ix[:5]\ndf.iloc[:5]\n</code></pre>\n\n<p>Can someone present three cases where the distinction in uses are clearer?</p>\n",
        "answer": "<p><em>Note: in pandas version 0.20.0 and above, <code>ix</code> is <a href=\"http://pandas-docs.github.io/pandas-docs-travis/indexing.html#ix-indexer-is-deprecated\" rel=\"noreferrer\">deprecated</a> and the use of <code>loc</code> and <code>iloc</code> is encouraged instead. I have left the parts of this answer that describe <code>ix</code> intact as a reference for users of earlier versions of pandas. Examples have been added below showing alternatives to  <code>ix</code></em>.</p>\n\n<hr>\n\n<p>First, here's a recap of the three methods:</p>\n\n<ul>\n<li><code>loc</code> gets rows (or columns) with particular <em>labels</em> from the index. </li>\n<li><code>iloc</code> gets rows (or columns) at particular <em>positions</em> in the index (so it only takes integers).</li>\n<li><code>ix</code> usually tries to behave like <code>loc</code> but falls back to behaving like <code>iloc</code> if a label is not present in the index.</li>\n</ul>\n\n<p>It's important to note some subtleties that can make <code>ix</code> slightly tricky to use:</p>\n\n<ul>\n<li><p>if the index is of integer type, <code>ix</code> will only use label-based indexing and not fall back to position-based indexing. If the label is not in the index, an error is raised.</p></li>\n<li><p>if the index does not contain <em>only</em> integers, then given an integer, <code>ix</code> will immediately use position-based indexing rather than label-based indexing. If however <code>ix</code> is given another type (e.g. a string), it can use label-based indexing.</p></li>\n</ul>\n\n<hr>\n\n<p>To illustrate the differences between the three methods, consider the following Series:</p>\n\n<pre><code>&gt;&gt;&gt; s = pd.Series(np.nan, index=[49,48,47,46,45, 1, 2, 3, 4, 5])\n&gt;&gt;&gt; s\n49   NaN\n48   NaN\n47   NaN\n46   NaN\n45   NaN\n1    NaN\n2    NaN\n3    NaN\n4    NaN\n5    NaN\n</code></pre>\n\n<p>We'll look at slicing with the integer value <code>3</code>.</p>\n\n<p>In this case, <code>s.iloc[:3]</code> returns us the first 3 rows (since it treats 3 as a position) and <code>s.loc[:3]</code> returns us the first 8 rows (since it treats 3 as a label):</p>\n\n<pre><code>&gt;&gt;&gt; s.iloc[:3] # slice the first three rows\n49   NaN\n48   NaN\n47   NaN\n\n&gt;&gt;&gt; s.loc[:3] # slice up to and including label 3\n49   NaN\n48   NaN\n47   NaN\n46   NaN\n45   NaN\n1    NaN\n2    NaN\n3    NaN\n\n&gt;&gt;&gt; s.ix[:3] # the integer is in the index so s.ix[:3] works like loc\n49   NaN\n48   NaN\n47   NaN\n46   NaN\n45   NaN\n1    NaN\n2    NaN\n3    NaN\n</code></pre>\n\n<p>Notice <code>s.ix[:3]</code> returns the same Series as <code>s.loc[:3]</code> since it looks for the label first rather than working on the position (and the index for <code>s</code> is of integer type).</p>\n\n<p>What if we try with an integer label that isn't in the index (say <code>6</code>)?</p>\n\n<p>Here <code>s.iloc[:6]</code> returns the first 6 rows of the Series as expected. However, <code>s.loc[:6]</code> raises a KeyError since <code>6</code> is not in the index. </p>\n\n<pre><code>&gt;&gt;&gt; s.iloc[:6]\n49   NaN\n48   NaN\n47   NaN\n46   NaN\n45   NaN\n1    NaN\n\n&gt;&gt;&gt; s.loc[:6]\nKeyError: 6\n\n&gt;&gt;&gt; s.ix[:6]\nKeyError: 6\n</code></pre>\n\n<p>As per the subtleties noted above, <code>s.ix[:6]</code> now raises a KeyError because it tries to work like <code>loc</code> but can't find a <code>6</code> in the index. Because our index is of integer type <code>ix</code> doesn't fall back to behaving like <code>iloc</code>.</p>\n\n<p>If, however, our index was of mixed type, given an integer <code>ix</code> would behave like <code>iloc</code> immediately instead of raising a KeyError:</p>\n\n<pre><code>&gt;&gt;&gt; s2 = pd.Series(np.nan, index=['a','b','c','d','e', 1, 2, 3, 4, 5])\n&gt;&gt;&gt; s2.index.is_mixed() # index is mix of different types\nTrue\n&gt;&gt;&gt; s2.ix[:6] # now behaves like iloc given integer\na   NaN\nb   NaN\nc   NaN\nd   NaN\ne   NaN\n1   NaN\n</code></pre>\n\n<p>Keep in mind that <code>ix</code> can still accept non-integers and behave like <code>loc</code>:</p>\n\n<pre><code>&gt;&gt;&gt; s2.ix[:'c'] # behaves like loc given non-integer\na   NaN\nb   NaN\nc   NaN\n</code></pre>\n\n<p>As general advice, if you're only indexing using labels, or only indexing using integer positions, stick with <code>loc</code> or <code>iloc</code> to avoid unexpected results - try not use <code>ix</code>.</p>\n\n<hr>\n\n<h3>Combining position-based and label-based indexing</h3>\n\n<p>Sometimes given a DataFrame, you will want to mix label and positional indexing methods for the rows and columns.</p>\n\n<p>For example, consider the following DataFrame. How best to slice the rows up to and including 'c' <em>and</em> take the first four columns?</p>\n\n<pre><code>&gt;&gt;&gt; df = pd.DataFrame(np.nan, \n                      index=list('abcde'),\n                      columns=['x','y','z', 8, 9])\n&gt;&gt;&gt; df\n    x   y   z   8   9\na NaN NaN NaN NaN NaN\nb NaN NaN NaN NaN NaN\nc NaN NaN NaN NaN NaN\nd NaN NaN NaN NaN NaN\ne NaN NaN NaN NaN NaN\n</code></pre>\n\n<p>In earlier versions of pandas (before 0.20.0) <code>ix</code> lets you do this quite neatly - we can slice the rows by label and the columns by position (note that for the columns, <code>ix</code> will default to position-based slicing since  <code>4</code> is not a column name):</p>\n\n<pre><code>&gt;&gt;&gt; df.ix[:'c', :4]\n    x   y   z   8\na NaN NaN NaN NaN\nb NaN NaN NaN NaN\nc NaN NaN NaN NaN\n</code></pre>\n\n<p>In later versions of pandas, we can achieve this result using <code>iloc</code> and the help of another method:</p>\n\n<pre><code>&gt;&gt;&gt; df.iloc[:df.index.get_loc('c') + 1, :4]\n    x   y   z   8\na NaN NaN NaN NaN\nb NaN NaN NaN NaN\nc NaN NaN NaN NaN\n</code></pre>\n\n<p><a href=\"http://pandas.pydata.org/pandas-docs/version/0.19.1/generated/pandas.Index.get_loc.html\" rel=\"noreferrer\"><code>get_loc()</code></a> is an index method meaning \"get the position of the label in this index\". Note that since slicing with <code>iloc</code> is exclusive of its endpoint, we must add 1 to this value if we want row 'c' as well.</p>\n\n<p>There are further examples in pandas' documentation <a href=\"http://pandas-docs.github.io/pandas-docs-travis/indexing.html#ix-indexer-is-deprecated\" rel=\"noreferrer\">here</a>.</p>\n"
    },
    "340": {
        "question_id": "311627",
        "answer_id": "311655",
        "question": "<p>This is my code:</p>\n\n<pre><code>import datetime\ntoday = datetime.date.today()\nprint today\n</code></pre>\n\n<p>This prints: <code>2008-11-22</code> which is exactly what I want.</p>\n\n<p>But, I have a list I'm appending this to and then suddenly everything goes \"wonky\". Here is the code:</p>\n\n<pre><code>import datetime\nmylist = []\ntoday = datetime.date.today()\nmylist.append(today)\nprint mylist\n</code></pre>\n\n<p>This prints the following: </p>\n\n<pre><code>[datetime.date(2008, 11, 22)]\n</code></pre>\n\n<p>How can I get just a simple date like <code>2008-11-22</code>?</p>\n",
        "answer": "<h2>The WHY: dates are objects</h2>\n\n<p>In Python, dates are objects. Therefore, when you manipulate them, you manipulate objects, not strings, not timestamps nor anything.</p>\n\n<p>Any object in Python have TWO string representations:</p>\n\n<ul>\n<li><p>The regular representation that is used by \"print\", can be get using the <code>str()</code> function. It is most of the time the most common human readable format and is used to ease display. So <code>str(datetime.datetime(2008, 11, 22, 19, 53, 42))</code> gives you <code>'2008-11-22 19:53:42'</code>. </p></li>\n<li><p>The alternative representation that is used to represent the object nature (as a data). It can be get using the <code>repr()</code> function and is handy to know what kind of data your manipulating while you are developing or debugging. <code>repr(datetime.datetime(2008, 11, 22, 19, 53, 42))</code> gives you <code>'datetime.datetime(2008, 11, 22, 19, 53, 42)'</code>.</p></li>\n</ul>\n\n<p>What happened is that when you have printed the date using \"print\", it used <code>str()</code> so you could see a nice date string. But when you have printed <code>mylist</code>, you have printed a list of objects and Python tried to represent the set of data, using <code>repr()</code>.</p>\n\n<h2>The How: what do you want to do with that?</h2>\n\n<p>Well, when you manipulate dates, keep using the date objects all long the way. They got thousand of useful methods and most of the Python API expect dates to be objects.</p>\n\n<p>When you want to display them, just use <code>str()</code>. In Python, the good practice is to explicitly cast everything. So just when it's time to print, get a string representation of your date using <code>str(date)</code>.</p>\n\n<p>One last thing. When you tried to print the dates, you printed <code>mylist</code>. If you want to print a date, you must print the date objects, not their container (the list).</p>\n\n<p>E.G, you want to print all the date in a list :</p>\n\n<pre><code>for date in mylist :\n    print str(date)\n</code></pre>\n\n<p>Note that <strong><em>in that specific case</em></strong>, you can even omit <code>str()</code> because print will use it for you. But it should not become a habit :-)</p>\n\n<h2>Practical case, using your code</h2>\n\n<pre><code>import datetime\nmylist = []\ntoday = datetime.date.today()\nmylist.append(today)\nprint mylist[0] # print the date object, not the container ;-)\n2008-11-22\n\n# It's better to always use str() because :\n\nprint \"This is a new day : \", mylist[0] # will work\n&gt;&gt;&gt; This is a new day : 2008-11-22\n\nprint \"This is a new day : \" + mylist[0] # will crash\n&gt;&gt;&gt; cannot concatenate 'str' and 'datetime.date' objects\n\nprint \"This is a new day : \" + str(mylist[0]) \n&gt;&gt;&gt; This is a new day : 2008-11-22\n</code></pre>\n\n<h2>Advanced date formatting</h2>\n\n<p>Dates have a default representation, but you may want to print them in a specific format. In that case, you can get a custom string representation using the <code>strftime()</code> method.</p>\n\n<p><code>strftime()</code> expects a string pattern explaining how you want to format your date.</p>\n\n<p>E.G : </p>\n\n<pre><code>print today.strftime('We are the %d, %b %Y')\n&gt;&gt;&gt; 'We are the 22, Nov 2008'\n</code></pre>\n\n<p>All the letter after a <code>\"%\"</code> represent a format for something :</p>\n\n<ul>\n<li><code>%d</code> is the day number</li>\n<li><code>%m</code> is the month number</li>\n<li><code>%b</code> is the month abbreviation</li>\n<li><code>%y</code> is the year last two digits</li>\n<li><code>%Y</code> is the all year</li>\n</ul>\n\n<p>etc</p>\n\n<p><a href=\"http://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior\" rel=\"noreferrer\">Have a look at the official documentation</a>, or <a href=\"http://strftime.org\" rel=\"noreferrer\">McCutchen's quick reference</a> you can't know them all.</p>\n\n<p>Since <a href=\"http://www.python.org/dev/peps/pep-3101/\" rel=\"noreferrer\">PEP3101</a>, every object can have its own format used automatically by the method format of any string. In the case of the datetime, the format is the same used in\nstrftime. So you can do the same as above like this:</p>\n\n<pre><code>print \"We are the {:%d, %b %Y}\".format(today)\n&gt;&gt;&gt; 'We are the 22, Nov 2008'\n</code></pre>\n\n<p>The advantage of this form is that you can also convert other objects at the same time.<br>\nWith the introduction of <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals\" rel=\"noreferrer\">Formatted string literals</a> (since Python 3.6, 2016-12-23) this can be written as</p>\n\n<pre><code>import datetime\nf\"{datetime.datetime.now():%Y-%m-%d}\"\n&gt;&gt;&gt; '2017-06-15'\n</code></pre>\n\n<h2>Localization</h2>\n\n<p>Dates can automatically adapt to the local language and culture if you use them the right way, but it's a bit complicated. Maybe for another question on SO(Stack Overflow) ;-)</p>\n"
    },
    "341": {
        "question_id": "1155617",
        "answer_id": "1155647",
        "question": "<p>What's the simplest way to count the number of occurrences of a character in a string?</p>\n\n<p>e.g. count the number of times <code>'a'</code> appears in <code>'Mary had a little lamb'</code></p>\n",
        "answer": "<blockquote>\n  <p><a href=\"https://docs.python.org/2/library/stdtypes.html#str.count\" rel=\"noreferrer\">str.count(sub[, start[, end]])</a></p>\n  \n  <p>Return the number of non-overlapping occurrences of substring <code>sub</code> in the range <code>[start, end]</code>. Optional arguments <code>start</code> and <code>end</code> are interpreted as in slice notation.</p>\n</blockquote>\n\n<pre><code>&gt;&gt;&gt; sentence = 'Mary had a little lamb'\n&gt;&gt;&gt; sentence.count('a')\n4\n</code></pre>\n"
    },
    "342": {
        "question_id": "14507591",
        "answer_id": "14507637",
        "question": "<p>Is it possible to create a dictionary comprehension in Python (for the keys)?</p>\n\n<p>Without list comprehensions, you can use something like this:</p>\n\n<pre><code>l = []\nfor n in range(1, 11):\n    l.append(n)\n</code></pre>\n\n<p>We can shorten this to a list comprehension: <code>l = [n for n in range(1, 11)]</code>.</p>\n\n<p>However, say I want to set a dictionary's keys to the same value.\nI can do:</p>\n\n<pre><code>d = {}\nfor n in range(1, 11):\n     d[n] = True # same value for each\n</code></pre>\n\n<p>I've tried this:</p>\n\n<pre><code>d = {}\nd[i for i in range(1, 11)] = True\n</code></pre>\n\n<p>However, I get a <code>SyntaxError</code> on the <code>for</code>.</p>\n\n<p>In addition (I don't need this part, but just wondering), can you set a dictionary's keys to a bunch of different values, like this:</p>\n\n<pre><code>d = {}\nfor n in range(1, 11):\n    d[n] = n\n</code></pre>\n\n<p>Is this possible with a dictionary comprehension?</p>\n\n<pre><code>d = {}\nd[i for i in range(1, 11)] = [x for x in range(1, 11)]\n</code></pre>\n\n<p>This also raises a <code>SyntaxError</code> on the <code>for</code>.</p>\n",
        "answer": "<p>There are <a href=\"https://www.python.org/dev/peps/pep-0274/\" rel=\"noreferrer\">dictionary comprehensions in Python 2.7+</a>, but they don't work quite the way you're trying.  Like a list comprehension, they create a <em>new</em> dictionary; you can't use them to add keys to an existing dictionary.  Also, you have to specify the keys and values, although of course you can specify a dummy value if you like.</p>\n\n<pre><code>&gt;&gt;&gt; d = {n: n**2 for n in range(5)}\n&gt;&gt;&gt; print d\n{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\n</code></pre>\n\n<p>If you want to set them all to True:</p>\n\n<pre><code>&gt;&gt;&gt; d = {n: True for n in range(5)}\n&gt;&gt;&gt; print d\n{0: True, 1: True, 2: True, 3: True, 4: True}\n</code></pre>\n\n<p>What you seem to be asking for is a way to set multiple keys at once on an existing dictionary.  There's no direct shortcut for that.  You can either loop like you already showed, or you could use a dictionary comprehension to create a new dict with the new values, and then do <code>oldDict.update(newDict)</code> to merge the new values into the old dict.</p>\n"
    },
    "343": {
        "question_id": "750136",
        "answer_id": "750148",
        "question": "<p>In my previous <a href=\"https://stackoverflow.com/questions/746774/basic-python-quick-question-regarding-calling-a-function\">question</a>, Andrew Jaffe writes: </p>\n\n<blockquote>\n  <p>In addition to all of the other hints and tips, I think you're missing something crucial: your functions actually need to return something.\n  When you create <code>autoparts()</code> or <code>splittext()</code>, the idea is that this will be a function that you can call, and it can (and should) give something back.\n  Once you figure out the output that you want your function to have, you need to put it in a <code>return</code> statement.</p>\n</blockquote>\n\n<pre><code>def autoparts():\n    parts_dict = {}\n    list_of_parts = open('list_of_parts.txt', 'r')\n\n    for line in list_of_parts:\n        k, v = line.split()\n        parts_dict[k] = v\n\n    print(parts_dict)\n\n&gt;&gt;&gt; autoparts()\n{'part A': 1, 'part B': 2, ...}\n</code></pre>\n\n<p>This function creates a dictionary, but it does not return something.  However, since I added the <code>print</code>, the output of the function is shown when I run the function.  What is the difference between <code>return</code>ing something and <code>print</code>ing it?</p>\n",
        "answer": "<p>Print simply prints out the structure to your output device (normally the console). Nothing more. To return it from your function, you would do:</p>\n\n<pre><code>def autoparts():\n  parts_dict = {}\n  list_of_parts = open('list_of_parts.txt', 'r')\n  for line in list_of_parts:\n        k, v = line.split()\n        parts_dict[k] = v\n  return parts_dict\n</code></pre>\n\n<p>Why return? Well if you don't, that dictionary dies (gets garbage collected) and is no longer accessible as soon as this function call ends. If you return the value, you can do other stuff with it. Such as:</p>\n\n<pre><code>my_auto_parts = autoparts() \nprint my_auto_parts['engine']\n</code></pre>\n\n<p>See what happened? autoparts() was called and it returned the parts_dict and we stored it into the my_auto_parts variable. Now we can use this variable to access the dictionary object and it continues to live even though the function call is over. We then printed out the object in the dictionary with the key 'engine'.</p>\n\n<p>For a good tutorial, check out <a href=\"http://www.diveintopython.net/\" rel=\"noreferrer\">dive into python</a>. It's free and very easy to follow.</p>\n"
    },
    "344": {
        "question_id": "28423069",
        "answer_id": "28426819",
        "question": "<p>I'm writing a small Flask application and am having it connect to Rserve using pyRserve. I want every session to initiate and then maintain its own Rserve connection. </p>\n\n<p>Something like this:</p>\n\n<pre><code>session['my_connection'] = pyRserve.connect()\n</code></pre>\n\n<p>doesn't work because the connection object is not JSON serializable. On the other hand, something like this:</p>\n\n<pre><code>flask.g.my_connection = pyRserve.connect()\n</code></pre>\n\n<p>doesn't work because it does not persist between requests. To add to the difficulty, it doesn't seem as though pyRserve provides any identifier for a connection, so I can't store a connection ID in the session and use that to retrieve the right connection before each request.</p>\n\n<p>Is there a way to accomplish having a unique connection per session?</p>\n",
        "answer": "<p>The following applies to any global Python data that you don't want to recreate for each request, not just rserve, and not just data that is unique to each user.</p>\n\n<p>We need some common location to create an rserve connection for each user.  The simplest way to do this is to run a <a href=\"https://docs.python.org/3/library/multiprocessing.html#managers\" rel=\"noreferrer\"><code>multiprocessing.Manager</code></a> as a separate process.</p>\n\n<pre><code>import atexit\nfrom multiprocessing import Lock\nfrom multiprocessing.managers import BaseManager\nimport pyRserve\n\nconnections = {}\nlock = Lock()\n\n\ndef get_connection(user_id):\n    with lock:\n        if user_id not in connections:\n            connections[user_id] = pyRserve.connect()\n\n        return connections[user_id]\n\n\n@atexit.register\ndef close_connections():\n    for connection in connections.values():\n        connection.close()\n\n\nmanager = BaseManager(('', 37844), b'password')\nmanager.register('get_connection', get_connection)\nserver = manager.get_server()\nserver.serve_forever()\n</code></pre>\n\n<p>Run it before starting your application, so that the manager will be available:</p>\n\n<pre><code>python rserve_manager.py\n</code></pre>\n\n<hr>\n\n<p>We can access this manager from the app during requests using a simple function.  This assumes you've got a value for \"user_id\" in the session (which is what Flask-Login would do, for example).  This ends up making the rserve connection unique per user, not per session.</p>\n\n<pre><code>from multiprocessing.managers import BaseManager\nfrom flask import g, session\n\ndef get_rserve():\n    if not hasattr(g, 'rserve'):\n        manager = BaseManager(('', 37844), b'password')\n        manager.register('get_connection')\n        manager.connect()\n        g.rserve = manager.get_connection(session['user_id'])\n\n    return g.rserve\n</code></pre>\n\n<p>Access it inside a view:</p>\n\n<pre><code>result = get_rserve().eval('3 + 5')\n</code></pre>\n\n<hr>\n\n<p>This should get you started, although there's plenty that can be improved, such as not hard-coding the address and password, and not throwing away the connections to the manager.  This was written with Python 3, but <em>should</em> work with Python 2.</p>\n"
    },
    "345": {
        "question_id": "53513",
        "answer_id": "53522",
        "question": "<p>For example, if passed the following:</p>\n\n<pre><code>a = []\n</code></pre>\n\n<p>How do I check to see if <code>a</code> is empty?</p>\n",
        "answer": "<pre><code>if not a:\n  print(\"List is empty\")\n</code></pre>\n\n<p>Using the implicit booleanness of the empty <code>list</code> is quite pythonic.</p>\n"
    },
    "346": {
        "question_id": "222877",
        "answer_id": "222922",
        "question": "<p>What's the difference between:</p>\n\n<pre><code>class Child(SomeBaseClass):\n    def __init__(self):\n        super(Child, self).__init__()\n</code></pre>\n\n<p>and:</p>\n\n<pre><code>class Child(SomeBaseClass):\n    def __init__(self):\n        SomeBaseClass.__init__(self)\n</code></pre>\n\n<p>I've seen <code>super</code> being used quite a lot in classes with only single inheritance. I can see why you'd use it in multiple inheritance but am unclear as to what the advantages are of using it in this kind of situation.</p>\n",
        "answer": "<p>The benefits of <code>super()</code> in single-inheritance are minimal -- mostly, you don't have to hard-code the name of the base class into every method that uses its parent methods.</p>\n\n<p>However, it's almost impossible to use multiple-inheritance without <code>super()</code>. This includes common idioms like mixins, interfaces, abstract classes, etc. This extends to code that later extends yours. If somebody later wanted to write a class that extended <code>Child</code> and a mixin, their code would not work properly.</p>\n"
    },
    "347": {
        "question_id": "2186525",
        "answer_id": "2186565",
        "question": "<p>This is what I have:</p>\n\n<pre><code>glob(os.path.join('src','*.c'))\n</code></pre>\n\n<p>but I want to search the subfolders of src. Something like this would work:</p>\n\n<pre><code>glob(os.path.join('src','*.c'))\nglob(os.path.join('src','*','*.c'))\nglob(os.path.join('src','*','*','*.c'))\nglob(os.path.join('src','*','*','*','*.c'))\n</code></pre>\n\n<p>But this is obviously limited and clunky.</p>\n",
        "answer": "<p><strong>Python 3.5+</strong></p>\n\n<p>Since you're on a new python, you should use <a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob\" rel=\"noreferrer\"><code>pathlib.Path.glob</code></a> from the the <a href=\"https://docs.python.org/3/library/pathlib.html\" rel=\"noreferrer\"><code>pathlib</code></a> module.</p>\n\n<pre><code>from pathlib import Path\n\nfor filename in Path('src').glob('**/*.c'):\n    print(filename)\n</code></pre>\n\n<p>If you don't want to use pathlib, just use <a href=\"https://docs.python.org/3/library/glob.html#glob.glob\" rel=\"noreferrer\"><code>glob.glob</code></a>, but don't forget to pass in the <code>recursive</code> keyword parameter.</p>\n\n<p>For cases where matching files beginning with a dot (.); like files in the current directory or hidden files on Unix based system, use the <a href=\"https://docs.python.org/2/library/os.html#os.walk\" rel=\"noreferrer\"><code>os.walk</code></a> solution below.</p>\n\n<p><strong>Older Python versions</strong></p>\n\n<p>For older Python versions, use <a href=\"https://docs.python.org/2/library/os.html#os.walk\" rel=\"noreferrer\"><code>os.walk</code></a> to recursively walk a directory and <a href=\"https://docs.python.org/2/library/fnmatch.html#fnmatch.filter\" rel=\"noreferrer\"><code>fnmatch.filter</code></a> to match against a simple expression:</p>\n\n<pre><code>import fnmatch\nimport os\n\nmatches = []\nfor root, dirnames, filenames in os.walk('src'):\n    for filename in fnmatch.filter(filenames, '*.c'):\n        matches.append(os.path.join(root, filename))\n</code></pre>\n"
    },
    "348": {
        "question_id": "3819449",
        "answer_id": "3819829",
        "question": "<p>I want to completely remove Python 2.7 from my Mac OS X 10.6.4. I managed to remove the entry from the <code>PATH</code> variable by reverting my <code>.bash_profile</code>. But I also want to remove all directories, files, symlinks, and entries that got installed by the Python 2.7 install package. I've got the install package from <a href=\"http://www.python.org/\" rel=\"noreferrer\">http://www.python.org/</a>. What directories/files/configuration file entries do I need to remove? Is there a list somewhere?</p>\n",
        "answer": "<h3>Do not attempt to remove any Apple-supplied system Python which are in <code>/System/Library</code> and <code>/usr/bin</code>, as this may break your whole operating system.</h3>\n\n<hr>\n\n<p><strong>NOTE:</strong> <em>The steps listed below do <strong>not</strong> affect the Apple-supplied system Python 2.7; they only remove a third-party Python framework, like those installed by <a href=\"https://www.python.org/downloads/\" rel=\"noreferrer\">python.org installers</a>.</em></p>\n\n<hr>\n\n<p>The complete list is <a href=\"http://bugs.python.org/issue7107\" rel=\"noreferrer\">documented here</a>.  Basically, all you need to do is the following:</p>\n\n<ol>\n<li><p>Remove the third-party Python 2.7 framework</p>\n\n<pre><code>sudo rm -rf /Library/Frameworks/Python.framework/Versions/2.7\n</code></pre></li>\n<li><p>Remove the Python 2.7 applications directory</p>\n\n<pre><code>sudo rm -rf \"/Applications/Python 2.7\"\n</code></pre></li>\n<li><p>Remove the symbolic links, in <code>/usr/local/bin</code>, that point to this Python version. See them using</p>\n\n<pre><code>ls -l /usr/local/bin | grep '../Library/Frameworks/Python.framework/Versions/2.7' \n</code></pre>\n\n<p>and then run the following command to remove all the links:</p>\n\n<pre><code>cd /usr/local/bin/\nls -l /usr/local/bin | grep '../Library/Frameworks/Python.framework/Versions/2.7' | awk '{print $9}' | tr -d @ | xargs rm\n</code></pre></li>\n<li><p>If necessary, edit your shell profile file(s) to remove adding <code>/Library/Frameworks/Python.framework/Versions/2.7</code> to your <code>PATH</code> environment file.  Depending on which shell you use, any of the following files may have been modified:\n<code>~/.bash_login</code>, <code>~/.bash_profile</code>, <code>~/.cshrc</code>, <code>~/.profile</code>, <code>~/.tcshrc</code>, and/or <code>~/.zprofile</code>.</p></li>\n</ol>\n"
    },
    "349": {
        "question_id": "2612610",
        "answer_id": "2612615",
        "question": "<p>How do you set/get the values of attributes of <code>t</code> given by <code>x</code>?</p>\n\n<pre><code>class Test:\n   def __init__(self):\n       self.attr1 = 1\n       self.attr2 = 2\n\nt = Test()\nx = \"attr1\"\n</code></pre>\n",
        "answer": "<p>There are built-in functions called <a href=\"https://docs.python.org/3/library/functions.html#getattr\" rel=\"noreferrer\"><code>getattr</code></a> and <a href=\"https://docs.python.org/3/library/functions.html#setattr\" rel=\"noreferrer\"><code>setattr</code></a></p>\n\n<pre><code>getattr(object, attrname)\nsetattr(object, attrname, value)\n</code></pre>\n\n<p>In this case </p>\n\n<pre><code>x = getattr(t, 'attr1')\nsetattr(t, 'attr1', 21)\n</code></pre>\n"
    },
    "350": {
        "question_id": "41585078",
        "answer_id": "41585079",
        "question": "<p>I have a file <code>example.csv</code> with the contents</p>\n\n<pre><code>1,\"A towel,\",1.0\n42,\" it says, \",2.0\n1337,is about the most ,-1\n0,massively useful thing ,123\n-2,an interstellar hitchhiker can have.,3\n</code></pre>\n\n<p>How do I read this <code>example.csv</code> with Python?</p>\n\n<p>Similarly, if I have</p>\n\n<pre><code>data = [(1, \"A towel,\", 1.0),\n        (42, \" it says, \", 2.0),\n        (1337, \"is about the most \", -1),\n        (0, \"massively useful thing \", 123),\n        (-2, \"an interstellar hitchhiker can have.\", 3)]\n</code></pre>\n\n<p>How do I write <code>data</code> to a CSV file with Python?</p>\n",
        "answer": "<p>Here are some minimal complete examples how to read CSV files and how to write CSV files with Python.</p>\n\n<h2>Python 2+3: Reading a CSV file</h2>\n\n<p>Pure Python</p>\n\n<pre><code># -*- coding: utf-8 -*-\n\nimport csv\nimport sys\n\n# Define data\ndata = [(1, \"A towel,\", 1.0),\n        (42, \" it says, \", 2.0),\n        (1337, \"is about the most \", -1),\n        (0, \"massively useful thing \", 123),\n        (-2, \"an interstellar hitchhiker can have.\", 3)]\n\n# Write CSV file\nkwargs = {'newline': ''}\nmode = 'w'\nif sys.version_info &lt; (3, 0):\n    kwargs.pop('newline', None)\n    mode = 'wb'\n\nwith open('test.csv', mode, **kwargs) as fp:\n    writer = csv.writer(fp, delimiter=',')\n    # writer.writerow([\"your\", \"header\", \"foo\"])  # write header\n    writer.writerows(data)\n\n# Read CSV file\nkwargs = {'newline': ''}\nmode = 'r'\nif sys.version_info &lt; (3, 0):\n    kwargs.pop('newline', None)\n    mode = 'rb'\nwith open('test.csv', mode, **kwargs) as fp:\n    reader = csv.reader(fp, delimiter=',', quotechar='\"')\n    # next(reader, None)  # skip the headers\n    data_read = [row for row in reader]\n\nprint(data_read)\n</code></pre>\n\n<p>After that, the contents of <code>data_read</code> are</p>\n\n<pre><code>[['1', 'A towel,', '1.0'],\n ['42', ' it says, ', '2.0'],\n ['1337', 'is about the most ', '-1'],\n ['0', 'massively useful thing ', '123'],\n ['-2', 'an interstellar hitchhiker can have.', '3']]\n</code></pre>\n\n<h2>Unicode and Python 2.X</h2>\n\n<p>If you want to write Unicode, you have to install <code>unicodecsv</code>. Do <strong>not</strong> open the file with <code>codecs.open</code> but simply with <code>open</code>. Write it with</p>\n\n<pre><code>import unicodecsv as csv\n# Write CSV file\nwith open('test.csv', 'w', newline='') as fp:\n    writer = csv.writer(fp, encoding='utf-8')\n    # writer.writerow([\"your\", \"header\", \"foo\"])  # write header\n    writer.writerows(data)\n</code></pre>\n\n<h2>Related</h2>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/9157314/562769\">How do I write data into csv format as string (not file)?</a></li>\n<li><a href=\"https://stackoverflow.com/q/13120127/562769\">How can I use io.StringIO() with the csv module?</a>: This is interesting if you want to serve a CSV on-the-fly with Flask, without actually storing the CSV on the server.</li>\n</ul>\n\n<h2>mpu</h2>\n\n<p>Have a look at my utility package <a href=\"https://github.com/MartinThoma/mpu\" rel=\"noreferrer\"><code>mpu</code></a> for a super simple and easy to remember one:</p>\n\n<pre><code>import mpu.io\ndata = mpu.io.read('example.csv', delimiter=',', quotechar='\"', skiprows=None)\nmpu.io.write('example.csv', data)\n</code></pre>\n\n<h2>Pandas</h2>\n\n<pre><code>import pandas as pd\n\n# Read the CSV into a pandas data frame (df)\n#   With a df you can do many things\n#   most important: visualize data with Seaborn\ndf = pd.read_csv('myfile.csv', sep=',')\nprint(df)\n\n# Or export it in many ways, e.g. a list of tuples\ntuples = [tuple(x) for x in df.values]\n\n# or export it as a list of dicts\ndicts = df.to_dict().values()\n</code></pre>\n\n<p>See <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html\" rel=\"noreferrer\"><code>read_csv</code> docs</a> for more information. Please note that pandas automatically infers if there is a header line, but you can set it manually, too.</p>\n\n<p>If you haven't heard of <a href=\"http://seaborn.pydata.org/index.html\" rel=\"noreferrer\">Seaborn</a>, I recommend having a look at it.</p>\n\n<h2>Other</h2>\n\n<p>Reading CSV files is supported by a bunch of other libraries, for example:</p>\n\n<ul>\n<li><a href=\"http://dask.pydata.org/en/latest/dataframe-api.html#dask.dataframe.read_csv\" rel=\"noreferrer\"><code>dask.dataframe.read_csv</code></a></li>\n<li><a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrameReader\" rel=\"noreferrer\"><code>spark.read.csv</code></a></li>\n</ul>\n\n<h2>Created CSV file</h2>\n\n<pre><code>1,\"A towel,\",1.0\n42,\" it says, \",2.0\n1337,is about the most ,-1\n0,massively useful thing ,123\n-2,an interstellar hitchhiker can have.,3\n</code></pre>\n\n<h2>Common file endings</h2>\n\n<p><code>.csv</code></p>\n\n<h2>Working with the data</h2>\n\n<p>After reading the CSV file to a list of tuples / dicts or a Pandas dataframe, it is simply working with this kind of data. Nothing CSV specific.</p>\n\n<h2>Alternatives</h2>\n\n<ul>\n<li>JSON: Nice for writing human-readable data; VERY commonly used (<a href=\"https://stackoverflow.com/a/37795053/562769\">read &amp; write</a>)</li>\n<li>CSV: Super simple format (<a href=\"https://stackoverflow.com/a/41585079/562769\">read &amp; write</a>)</li>\n<li>YAML: Nice to read, similar to JSON (<a href=\"https://stackoverflow.com/a/42054860/562769\">read &amp; write</a>)</li>\n<li>pickle: A Python serialization format (<a href=\"https://stackoverflow.com/a/33245595/562769\">read &amp; write</a>)</li>\n<li><a href=\"http://msgpack.org/\" rel=\"noreferrer\">MessagePack</a> (<a href=\"https://pypi.python.org/pypi/msgpack-python\" rel=\"noreferrer\">Python package</a>): More compact representation (<a href=\"https://stackoverflow.com/q/43442194/562769\">read &amp; write</a>)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Hierarchical_Data_Format\" rel=\"noreferrer\">HDF5</a> (<a href=\"http://docs.h5py.org/en/latest/quick.html\" rel=\"noreferrer\">Python package</a>): Nice for matrices (<a href=\"https://stackoverflow.com/a/41586571/562769\">read &amp; write</a>)</li>\n<li>XML: exists too *sigh* (<a href=\"https://stackoverflow.com/a/1912483/562769\">read</a> &amp; <a href=\"https://stackoverflow.com/a/3605831/562769\">write</a>)</li>\n</ul>\n\n<p>For your application, the following might be important:</p>\n\n<ul>\n<li>Support by other programming languages</li>\n<li>Reading / writing performance</li>\n<li>Compactness (file size)</li>\n</ul>\n\n<p>See also: <a href=\"https://en.wikipedia.org/wiki/Comparison_of_data_serialization_formats\" rel=\"noreferrer\">Comparison of data serialization formats</a></p>\n\n<p>In case you are rather looking for a way to make configuration files, you might want to read my short article <a href=\"https://martin-thoma.com/configuration-files-in-python/\" rel=\"noreferrer\">Configuration files in Python</a></p>\n"
    },
    "351": {
        "question_id": "35555383",
        "answer_id": "35557758",
        "question": "<p>I am trying to pass data as JSON from a Flask route to a Jinja template rendering JavaScript.  I want to iterate over the data using JavaScript.  The browser shows <code>SyntaxError: Unexpected token '&amp;'. Expected a property name.</code> when <code>JSON.parse</code> is called on the rendered data.  How do I use rendered JSON data in JavaScript?</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>var obj = JSON.parse({{ data }})\nfor (i in obj){\n   document.write(obj[i].text + \"&lt;br /&gt;\");\n}\n</code></pre>\n\n<pre class=\"lang-python prettyprint-override\"><code>def get_nodes(node):\n    d = {}\n    if node == \"Root\":\n        d[\"text\"] = node\n    else:\n        d[\"text\"] = node.name\n\n    getchildren = get_children(node)\n    if getchildren:\n        d[\"nodes\"] = [get_nodes(child) for child in getchildren]\n    return d\n\ntree = get_nodes(\"Root\")\nreturn render_template(\"folder.html\", data=tree)\n</code></pre>\n\n<p>If I just put <code>{{ data }}</code> in the HTML part, what I see looks correct.</p>\n\n<pre><code>{'text': 'Root', 'nodes': [{'text': u'Prosjekt3'}, {'text': u'Prosjekt4', 'nodes': [{'text': u'mappe8'}]}]}\n</code></pre>\n",
        "answer": "<p>Flask's Jinja environment automatically escapes data rendered in HTML templates.  This is to avoid security issues if the dev tries to render untrusted user input.</p>\n\n<p>Since you are passing a Python object to be treated as JSON, Flask provides the <code>tojson</code> filter which automatically dumps the data to JSON and marks it safe.</p>\n\n<pre><code>return render_template('tree.html', tree=tree)\n</code></pre>\n\n<pre class=\"lang-html prettyprint-override\"><code>var tree = {{ tree|tojson }};\n</code></pre>\n\n<p>When you just look at the data rendered in HTML, it looks correct because the browser displays the escaped symbols as the real symbols (although in this case you're seeing the string representation of a Python dict, not JSON, so there's still some issues like <code>u</code> markers).</p>\n\n<p>Previous versions of Flask didn't mark the dumped data safe, so you might come across examples like <code>{{ tree|tojson|safe }}</code>, which isn't required anymore.</p>\n\n<hr>\n\n<p>If you're not rendering JSON (or you already dumped the JSON to a string), you can tell Jinja that data is safe to render without escaping by using the <code>safe</code> filter.</p>\n\n<pre><code># already dumped to json, so tojson would double-encode it\nreturn render_template('tree.html', tree=json.dumps(tree))\n</code></pre>\n\n<pre class=\"lang-html prettyprint-override\"><code>var tree = {{ tree|safe }};\n</code></pre>\n\n<p>You can also wrap the string in <code>Markup</code> before rendering it, it's equivalent to the <code>safe</code> filter.</p>\n\n<pre><code># already dumped and marked safe\nreturn render_template('tree.html', tree=Markup(json.dumps(tree)))\n</code></pre>\n\n<pre class=\"lang-html prettyprint-override\"><code>var tree = {{ tree }};\n</code></pre>\n\n<hr>\n\n<p>If you're not passing this data to JavaScript, but using it in Jinja instead, you don't need JSON. Pass the actual Python data, don't call <code>tojson</code> on it, and use it as you would any other data in the template.</p>\n\n<pre><code>return render_template('tree.html', tree=tree)\n</code></pre>\n\n<pre class=\"lang-html prettyprint-override\"><code>{% for item in tree %}\n    &lt;li&gt;{{ item }}&lt;/li&gt;\n{% endfor %}\n</code></pre>\n"
    },
    "352": {
        "question_id": "209513",
        "answer_id": "209550",
        "question": "<p>How do I convert a hex string to an int in Python? </p>\n\n<p>I may have it as \"<code>0xffff</code>\" or just \"<code>ffff</code>\".</p>\n",
        "answer": "<p><strong>Without</strong> the 0x prefix, you need to specify the base explicitly, otherwise there's no way to tell:</p>\n\n<pre><code>x = int(\"deadbeef\", 16)\n</code></pre>\n\n<p><strong>With</strong> the 0x prefix, Python can distinguish hex and decimal automatically.</p>\n\n<pre><code>&gt;&gt;&gt; print int(\"0xdeadbeef\", 0)\n3735928559\n&gt;&gt;&gt; print int(\"10\", 0)\n10\n</code></pre>\n\n<p>(You <em>must</em> specify <code>0</code> as the base in order to invoke this prefix-guessing behavior; omitting the second parameter means to assume base-10.)</p>\n"
    },
    "353": {
        "question_id": "9733638",
        "answer_id": "26344315",
        "question": "<p>I need to POST a JSON from a client to a server. I'm using Python 2.7.1 and simplejson. The client is using Requests. The server is CherryPy. I can GET a hard-coded JSON from the server (code not shown), but when I try to POST a JSON to the server, I get \"400 Bad Request\".</p>\n\n<p>Here is my client code:</p>\n\n<pre><code>data = {'sender':   'Alice',\n    'receiver': 'Bob',\n    'message':  'We did it!'}\ndata_json = simplejson.dumps(data)\npayload = {'json_payload': data_json}\nr = requests.post(\"http://localhost:8080\", data=payload)\n</code></pre>\n\n<p>Here is the server code.</p>\n\n<pre><code>class Root(object):\n\n    def __init__(self, content):\n        self.content = content\n        print self.content  # this works\n\n    exposed = True\n\n    def GET(self):\n        cherrypy.response.headers['Content-Type'] = 'application/json'\n        return simplejson.dumps(self.content)\n\n    def POST(self):\n        self.content = simplejson.loads(cherrypy.request.body.read())\n</code></pre>\n\n<p>Any ideas?</p>\n",
        "answer": "<p>As of Requests version 2.4.2 and onwards, you can alternatively use 'json' parameter in the call which makes it simpler.</p>\n\n<pre><code>&gt;&gt;&gt; import requests\n&gt;&gt;&gt; r = requests.post('http://httpbin.org/post', json={\"key\": \"value\"})\n&gt;&gt;&gt; r.status_code\n200\n&gt;&gt;&gt; r.json()\n{'args': {},\n 'data': '{\"key\": \"value\"}',\n 'files': {},\n 'form': {},\n 'headers': {'Accept': '*/*',\n             'Accept-Encoding': 'gzip, deflate',\n             'Connection': 'close',\n             'Content-Length': '16',\n             'Content-Type': 'application/json',\n             'Host': 'httpbin.org',\n             'User-Agent': 'python-requests/2.4.3 CPython/3.4.0',\n             'X-Request-Id': 'xx-xx-xx'},\n 'json': {'key': 'value'},\n 'origin': 'x.x.x.x',\n 'url': 'http://httpbin.org/post'}\n</code></pre>\n\n<p>EDIT: This feature has been added to the official documentation. You can view it here: <a href=\"http://docs.python-requests.org/en/master/user/quickstart/#more-complicated-post-requests\">Requests documentation</a></p>\n"
    },
    "354": {
        "question_id": "6921699",
        "answer_id": "6921760",
        "question": "<p>Ok so I can use an OrderedDict in <code>json.dump</code>. That is, an OrderedDict can be used as an input to JSON.</p>\n\n<p>But can it be used as an output? If so how? In my case I'd like to <code>load</code> into an OrderedDict so I can keep the order of the keys in the file.</p>\n\n<p>If not, is there some kind of workaround?</p>\n",
        "answer": "<p>Yes, you can.  By specifying the <code>object_pairs_hook</code> argument to <a href=\"http://docs.python.org/library/json.html#encoders-and-decoders\" rel=\"noreferrer\">JSONDecoder</a>.  In fact, this is the exact example given in the documentation.</p>\n\n<pre><code>&gt;&gt;&gt; json.JSONDecoder(object_pairs_hook=collections.OrderedDict).decode('{\"foo\":1, \"bar\": 2}')\nOrderedDict([('foo', 1), ('bar', 2)])\n&gt;&gt;&gt; \n</code></pre>\n\n<p>You can pass this parameter to <code>json.loads</code> (if you don't need a Decoder instance for other purposes) like so:</p>\n\n<pre><code>&gt;&gt;&gt; import json\n&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; data = json.loads('{\"foo\":1, \"bar\": 2}', object_pairs_hook=OrderedDict)\n&gt;&gt;&gt; print json.dumps(data, indent=4)\n{\n    \"foo\": 1,\n    \"bar\": 2\n}\n&gt;&gt;&gt; \n</code></pre>\n\n<p>Using <code>json.load</code> is done in the same way:</p>\n\n<pre><code>&gt;&gt;&gt; data = json.load(open('config.json'), object_pairs_hook=OrderedDict)\n</code></pre>\n"
    },
    "355": {
        "question_id": "1303347",
        "answer_id": "1303354",
        "question": "<p>I'm trying to map a list into hex, and then use the list elsewhere. In python 2.6, this was easy:</p>\n\n<p><strong>A:</strong> Python 2.6:</p>\n\n<pre><code>&gt;&gt;&gt; map(chr, [66, 53, 0, 94])\n['B', '5', '\\x00', '^']\n</code></pre>\n\n<p>However, in Python 3.1, the above returns a map object.</p>\n\n<p><strong>B:</strong> Python 3.1:</p>\n\n<pre><code>&gt;&gt;&gt; map(chr, [66, 53, 0, 94])\n&lt;map object at 0x00AF5570&gt;\n</code></pre>\n\n<p>How do I retrieve the mapped list (as in <strong>A</strong> above) on Python 3.x? </p>\n\n<p>Alternatively, is there a better way of doing this? My initial list object has around 45 items and id like to convert them to hex.</p>\n",
        "answer": "<p>Do this:</p>\n\n<pre><code>list(map(chr,[66,53,0,94]))\n</code></pre>\n\n<p>In Python 3+, many processes that iterate over iterables return iterators themselves.  In most cases, this ends up saving memory, and should make things go faster.   </p>\n\n<p>If all you're going to do is iterate over this list eventually, there's no need to even convert it to a list, because you can still iterate over the <code>map</code> object like so:</p>\n\n<pre><code># Prints \"ABCD\"\nfor ch in map(chr,[65,66,67,68]):\n    print(ch)\n</code></pre>\n"
    },
    "356": {
        "question_id": "1080411",
        "answer_id": "1080472",
        "question": "<p>How can I retrieve the links of a webpage and copy the url address of the links using Python?</p>\n",
        "answer": "<p>Here's a short snippet using the SoupStrainer class in BeautifulSoup:</p>\n\n<pre><code>import httplib2\nfrom BeautifulSoup import BeautifulSoup, SoupStrainer\n\nhttp = httplib2.Http()\nstatus, response = http.request('http://www.nytimes.com')\n\nfor link in BeautifulSoup(response, parse_only=SoupStrainer('a')):\n    if link.has_attr('href'):\n        print(link['href'])\n</code></pre>\n\n<p>The BeautifulSoup documentation is actually quite good, and covers a number of typical scenarios:</p>\n\n<p><a href=\"http://www.crummy.com/software/BeautifulSoup/documentation.html\" rel=\"nofollow noreferrer\">http://www.crummy.com/software/BeautifulSoup/documentation.html</a></p>\n\n<p>Edit: Note that I used the SoupStrainer class because it's a bit more efficient (memory and speed wise), if you know what you're parsing in advance.</p>\n"
    },
    "357": {
        "question_id": "6318156",
        "answer_id": "6318188",
        "question": "<p>I've been trying to add the Python path to the command line on Windows 7, yet no matter the method I try, nothing seems to work. I've used the <code>set</code> command, I've tried adding it through the Edit Environment variables prompt etc.</p>\n\n<p>Further more if I run the set command on the command line it lists this</p>\n\n<pre><code>python = c:\\python27\n</code></pre>\n\n<p>Yet it still doesn't recognize the Python command.</p>\n\n<p>Reading the documentation, and various other sources hasn't seemed to help.</p>\n\n<p>Edit: Just to clarify further, I've appended the path of the Python executable to PATH in edit environment prompt. Doesn't seem to work.</p>\n",
        "answer": "<ol>\n<li>Hold <kbd>Win</kbd> and press <kbd>Pause</kbd>.</li>\n<li>Click Advanced System Settings.</li>\n<li>Click Environment Variables.</li>\n<li>Append <code>;C:\\python27</code> to the <code>Path</code> variable.</li>\n<li>Restart Command Prompt.</li>\n</ol>\n"
    },
    "358": {
        "question_id": "11269575",
        "answer_id": "11269627",
        "question": "<p>I'm using eSpeak on Ubuntu and have a Python 2.7 script that prints and speaks a message:</p>\n\n<pre><code>import subprocess\ntext = 'Hello World.'\nprint text\nsubprocess.call(['espeak', text])\n</code></pre>\n\n<p>eSpeak produces the desired sounds, but clutters the shell with some errors (ALSA lib..., no socket connect) so i cannot easily read what was printed earlier. Exit code is 0. </p>\n\n<p>Unfortunately there is no documented option to turn off its verbosity, so I'm looking for a way to only visually silence it and keep the open shell clean for further interaction.</p>\n\n<p>How can I do this?</p>\n",
        "answer": "<p>Redirect the output to DEVNULL:</p>\n\n<pre><code>import os\nimport subprocess\n\nFNULL = open(os.devnull, 'w')\nretcode = subprocess.call(['echo', 'foo'], stdout=FNULL, stderr=subprocess.STDOUT)\n</code></pre>\n\n<p>It is effectively the same as running this shell command:</p>\n\n<pre><code>retcode = os.system(\"echo 'foo' &amp;&gt; /dev/null\")\n</code></pre>\n"
    },
    "359": {
        "question_id": "54028199",
        "answer_id": "54028200",
        "question": "<p>I am familiar with the concept of \"vectorization\", and how pandas employs vectorized techniques to speed up computation. Vectorized functions broadcast operations over the entire series or DataFrame to achieve speedups much greater than conventionally iterating over the data. </p>\n\n<p>However, I am quite surprised to see a lot of code (including from answers on Stack Overflow) offering solutions to problems that involve looping through data using <code>for</code> loops and list comprehensions. Having read the documentation, and with a decent understanding of the API, I am given to believe that loops are \"bad\", and that one should \"never\" iterate over arrays, series, or DataFrames. So, how come I see users suggesting loopy solutions every now and then?</p>\n\n<p>So, to summarise... my question is:<br>\nAre <code>for</code> loops really \"bad\"? If not, in what situation(s) would they be better than using a more conventional \"vectorized\" approach?<sup>1</sup></p>\n\n<p><sub>1 - While it is true that the question sounds somewhat broad, the truth is that there are very specific situations when <code>for</code> loops are usually better than conventionally iterating over data. This post aims to capture this for posterity. </sub> </p>\n",
        "answer": "<p>TLDR; No, <code>for</code> loops are not blanket \"bad\", at least, not always. It is probably <strong>more accurate to say that some vectorized operations are slower than iterating</strong>, versus saying that iteration is faster than some vectorized operations. Knowing when and why is key to getting the most performance out of your code. In a nutshell, these are the situations where it is worth considering an alternative to vectorized pandas functions:</p>\n\n<ol>\n<li>When your data is small (...depending on what you're doing),</li>\n<li>When dealing with <code>object</code>/mixed dtypes</li>\n<li>When using the <code>str</code>/regex accessor functions</li>\n</ol>\n\n<p>Let's examine these situations individually. </p>\n\n<hr>\n\n<h3>Iteration v/s Vectorization on Small Data</h3>\n\n<p>Pandas follows a <a href=\"https://en.wikipedia.org/wiki/Convention_over_configuration\" rel=\"noreferrer\">\"Convention Over Configuration\"</a> approach in its API design. This means that the same API has been fitted to cater to a broad range of data and use cases. </p>\n\n<p>When a pandas function is called, the following things (among others) must internally be handled by the function, to ensure working </p>\n\n<ol>\n<li>Index/axis alignment</li>\n<li>Handling mixed datatypes</li>\n<li>Handling missing data</li>\n</ol>\n\n<p>Almost every function will have to deal with these to varying extents, and this presents an <strong>overhead</strong>. The overhead is less for numeric functions (for example, <a href=\"https://github.com/pandas-dev/pandas/blob/v0.23.4/pandas/core/ops.py#L1371-L1388\" rel=\"noreferrer\"><code>Series.add</code></a>), while it is more pronounced for string functions (for example, <a href=\"https://github.com/pandas-dev/pandas/blob/v0.23.4/pandas/core/strings.py#L635-L669\" rel=\"noreferrer\"><code>Series.str.replace</code></a>).</p>\n\n<p><a href=\"https://docs.python.org/3/tutorial/controlflow.html#for-statements\" rel=\"noreferrer\"><code>for</code></a> loops, on the other hand, are faster then you think. What's even better is <a href=\"https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions\" rel=\"noreferrer\">list comprehensions</a> (which create lists through <code>for</code> loops) are even faster as they are optimized iterative mechanisms for list creation.</p>\n\n<p>List comprehensions follow the pattern </p>\n\n<pre><code>[f(x) for x in seq]\n</code></pre>\n\n<p>Where <code>seq</code> is a pandas series or DataFrame column. Or, when operating over multiple columns,</p>\n\n<pre><code>[f(x, y) for x, y in zip(seq1, seq2)]\n</code></pre>\n\n<p>Where <code>seq1</code> and <code>seq2</code> are columns. </p>\n\n<p><strong>Numeric Comparison</strong><br>\nConsider a simple boolean indexing operation. The list comprehension method has been timed against <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.ne.html\" rel=\"noreferrer\"><code>Series.ne</code></a> (<code>!=</code>) and <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.query.html\" rel=\"noreferrer\"><code>query</code></a>. Here are the functions:</p>\n\n<pre><code># Boolean indexing with Numeric value comparison.\ndf[df.A != df.B]                            # vectorized !=\ndf.query('A != B')                          # query (numexpr)\ndf[[x != y for x, y in zip(df.A, df.B)]]    # list comp\n</code></pre>\n\n<p>For simplicity, I have used the <a href=\"https://github.com/nschloe/perfplot\" rel=\"noreferrer\"><code>perfplot</code></a> package to run all the timeit tests in this post. The timings for the operations above are below:</p>\n\n<p><a href=\"https://i.stack.imgur.com/sbtDB.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/sbtDB.png\" alt=\"enter image description here\"></a></p>\n\n<p>The list comprehension outperforms <code>query</code> for moderately sized N, and even outperforms the vectorized not equals comparison for tiny N. Unfortunately, the list comprehension scales linearly, so it does not offer much performance gain for larger N. </p>\n\n<blockquote>\n  <p><strong>Note</strong><br>\n  It is worth mentioning that much of the benefit of list comprehension come from not having to worry about the index alignment,\n  but this means that if your code is dependent on indexing alignment,\n  this will break. In some cases, vectorised operations over the\n  underlying NumPy arrays can be considered as bringing in the \"best of\n  both worlds\", allowing for vectorisation <em>without</em> all the unneeded overhead of the pandas functions. This means that you can rewrite the operation above as </p>\n\n<pre><code>df[df.A.values != df.B.values]\n</code></pre>\n  \n  <p>Which outperforms both the pandas and list comprehension equivalents:<br>\n  <img src=\"https://i.stack.imgur.com/m9hyc.png\" width=\"300\"/><br>\n  NumPy vectorization is out of the scope of this post, but it is definitely worth considering, if performance matters.</p>\n</blockquote>\n\n<p><strong>Value Counts</strong><br>\nTaking another example - this time, with another vanilla python construct that is <em>faster</em> than a for loop - <a href=\"https://docs.python.org/3/library/collections.html#collections.Counter\" rel=\"noreferrer\"><code>collections.Counter</code></a>. A common requirement is to compute the value counts and return the result as a dictionary. This is done with <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.value_counts.html#pandas-series-value-counts\" rel=\"noreferrer\"><code>value_counts</code></a>, <a href=\"https://docs.scipy.org/doc/numpy-1.14.1/reference/generated/numpy.unique.html\" rel=\"noreferrer\"><code>np.unique</code></a>, and <code>Counter</code>:</p>\n\n<pre><code># Value Counts comparison.\nser.value_counts(sort=False).to_dict()           # value_counts\ndict(zip(*np.unique(ser, return_counts=True)))   # np.unique\nCounter(ser)                                     # Counter\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/2i5qT.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/2i5qT.png\" alt=\"enter image description here\"></a></p>\n\n<p>The results are more pronounced, <code>Counter</code> wins out over both vectorized methods for a larger range of small N (~3500). </p>\n\n<blockquote>\n  <p><strong>Note</strong><br>\n   More trivia (courtesy @user2357112). The <code>Counter</code> is implemented with a <a href=\"https://github.com/python/cpython/blob/v3.7.0/Modules/_collectionsmodule.c#L2249-L2354\" rel=\"noreferrer\">C\n  accelerator</a>,\n  so while it still has to work with python objects instead of the\n  underlying C datatypes, it is still faster than a <code>for</code> loop. Python\n  power!</p>\n</blockquote>\n\n<p>Of course, the take away from here is that the performance depends on your data and use case. The point of these examples is to convince you not to rule out these solutions as legitimate options. If these still don't give you the performance you need, there is always <a href=\"https://pandas.pydata.org/pandas-docs/stable/enhancingperf.html#cython-writing-c-extensions-for-pandas\" rel=\"noreferrer\">cython</a> and <a href=\"http://numba.pydata.org/\" rel=\"noreferrer\">numba</a>. Let's add this test into the mix.</p>\n\n<pre><code>from numba import njit, prange\n\n@njit(parallel=True)\ndef get_mask(x, y):\n    result = [False] * len(x)\n    for i in prange(len(x)):\n        result[i] = x[i] != y[i]\n\n    return np.array(result)\n\ndf[get_mask(df.A.values, df.B.values)] # numba\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/nSpCH.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/nSpCH.png\" alt=\"enter image description here\"></a></p>\n\n<p>Numba offers JIT compilation of loopy python code to very powerful vectorized code. Understanding how to make numba work involves a learning curve.</p>\n\n<hr>\n\n<h3><strong>Operations with Mixed/<code>object</code> dtypes</strong></h3>\n\n<p><strong>String-based Comparison</strong><br>\nRevisiting the filtering example from the first section, what if the columns being compared are strings? Consider the same 3 functions above, but with the input DataFrame cast to string.</p>\n\n<pre><code># Boolean indexing with string value comparison.\ndf[df.A != df.B]                            # vectorized !=\ndf.query('A != B')                          # query (numexpr)\ndf[[x != y for x, y in zip(df.A, df.B)]]    # list comp\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/Lg2CE.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/Lg2CE.png\" alt=\"enter image description here\"></a></p>\n\n<p>So, what changed? The thing to note here is that <strong>string operations are inherently difficult to vectorize.</strong> Pandas treats strings as objects, and all operations on objects fall back to a slow, loopy implementation.</p>\n\n<p>Now, because this loopy implementation is surrounded by all the overhead mentioned above, there is a constant magnitude difference between these solutions, even though they scale the same. </p>\n\n<p>When it comes to operations on mutable/complex objects, there is no comparison. List comprehension outperforms all operations involving dicts and lists. </p>\n\n<p><strong>Accessing Dictionary Value(s) by Key</strong><br>\nHere are timings for two operations that extract a value from a column of dictionaries: <code>map</code> and the list comprehension. The setup is in the Appendix, under the heading \"Code Snippets\".</p>\n\n<pre><code># Dictionary value extraction.\nser.map(operator.itemgetter('value'))     # map\npd.Series([x.get('value') for x in ser])  # list comprehension\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/QrbZO.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/QrbZO.png\" alt=\"enter image description here\"></a></p>\n\n<p><strong>Positional List Indexing</strong><br>\nTimings for 3 operations that extract the 0th element from a list of columns (handling exceptions), <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.map.html#pandas-series-map\" rel=\"noreferrer\"><code>map</code></a>, <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.get.html\" rel=\"noreferrer\"><code>str.get</code> accessor method</a>, and the list comprehension:</p>\n\n<pre><code># List positional indexing. \ndef get_0th(lst):\n    try:\n        return lst[0]\n    # Handle empty lists and NaNs gracefully.\n    except (IndexError, TypeError):\n        return np.nan\n</code></pre>\n\n<p></p>\n\n<pre><code>ser.map(get_0th)                                          # map\nser.str[0]                                                # str accessor\npd.Series([x[0] if len(x) &gt; 0 else np.nan for x in ser])  # list comp\npd.Series([get_0th(x) for x in ser])                      # list comp safe\n</code></pre>\n\n<blockquote>\n  <p><strong>Note</strong><br>\n  If the index matters, you would want to do:</p>\n\n<pre><code>pd.Series([...], index=ser.index)\n</code></pre>\n  \n  <p>When reconstructing the series.</p>\n</blockquote>\n\n<p><a href=\"https://i.stack.imgur.com/Zzzez.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/Zzzez.png\" alt=\"enter image description here\"></a></p>\n\n<p><strong>List Flattening</strong><br>\nA final example is flattening lists. This is another common problem, and demonstrates just how powerful pure python is here.</p>\n\n<pre><code># Nested list flattening.\npd.DataFrame(ser.tolist()).stack().reset_index(drop=True)  # stack\npd.Series(list(chain.from_iterable(ser.tolist())))         # itertools.chain\npd.Series([y for x in ser for y in x])                     # nested list comp\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/eJ2iB.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/eJ2iB.png\" alt=\"enter image description here\"></a></p>\n\n<p>Both <a href=\"https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable\" rel=\"noreferrer\"><code>itertools.chain.from_iterable</code></a> and the nested list comprehension are pure python constructs, and scale much better than the <code>stack</code> solution.</p>\n\n<p>These timings are a strong indication of the fact that pandas is not equipped to work with mixed dtypes, and that you should probably refrain from using it to do so. Wherever possible, data should be present as scalar values (ints/floats/strings) in separate columns.</p>\n\n<p>Lastly, the applicability of these solutions depend widely on your data. So, the best thing to do would be to test these operations on your data before deciding what to go with. Notice how I have not timed <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.apply.html#pandas-series-apply\" rel=\"noreferrer\"><code>apply</code></a> on these solutions, because it would skew the graph (yes, it's that slow).</p>\n\n<hr>\n\n<h3>Regex Operations, and <code>.str</code> Accessor Methods</h3>\n\n<p>Pandas can apply regex operations such as <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.contains.html\" rel=\"noreferrer\"><code>str.contains</code></a>, <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.extract.html\" rel=\"noreferrer\"><code>str.extract</code></a>, and <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.extractall.html#pandas.Series.str.extractall\" rel=\"noreferrer\"><code>str.extractall</code></a>, as well as other \"vectorized\" string operations (such as <code>str.split</code>, str.find<code>,</code>str.translate`, and so on) on string columns. These functions are slower than list comprehensions, and are meant to be more convenience functions than anything else.</p>\n\n<p>It is usually much faster to pre-compile a regex pattern and iterate over your data with <a href=\"https://docs.python.org/3/library/re.html#re.compile\" rel=\"noreferrer\"><code>re.compile</code></a> (also see <a href=\"https://stackoverflow.com/questions/452104/is-it-worth-using-pythons-re-compile\">Is it worth using Python&#39;s re.compile?</a>). The list comp equivalent to <code>str.contains</code> looks something like this:</p>\n\n<pre><code>p = re.compile(...)\nser2 = pd.Series([x for x in ser if p.search(x)])\n</code></pre>\n\n<p>Or,</p>\n\n<pre><code>ser2 = ser[[bool(p.search(x)) for x in ser]]\n</code></pre>\n\n<p>If you need to handle NaNs, you can do something like</p>\n\n<pre><code>ser[[bool(p.search(x)) if pd.notnull(x) else False for x in ser]]\n</code></pre>\n\n<p>The list comp equivalent to <code>str.extract</code> (without groups) will look something like:</p>\n\n<pre><code>df['col2'] = [p.search(x).group(0) for x in df['col']]\n</code></pre>\n\n<p>If you need to handle no-matches and NaNs, you can use a custom function (still faster!):</p>\n\n<pre><code>def matcher(x):\n    m = p.search(str(x))\n    if m:\n        return m.group(0)\n    return np.nan\n\ndf['col2'] = [matcher(x) for x in df['col']]\n</code></pre>\n\n<p>The <code>matcher</code> function is very extensible. It can be fitted to return a list for each capture group, as needed. Just extract query the <code>group</code> or <code>groups</code> attribute of the matcher object.</p>\n\n<p>For <code>str.extractall</code>, change <code>p.search</code> to <code>p.findall</code>.</p>\n\n<p><strong>String Extraction</strong><br>\nConsider a simple filtering operation. The idea is to extract 4 digits if it is preceded by an upper case letter.</p>\n\n<pre><code># Extracting strings.\np = re.compile(r'(?&lt;=[A-Z])(\\d{4})')\ndef matcher(x):\n    m = p.search(x)\n    if m:\n        return m.group(0)\n    return np.nan\n\nser.str.extract(r'(?&lt;=[A-Z])(\\d{4})', expand=False)   #  str.extract\npd.Series([matcher(x) for x in ser])                  #  list comprehension\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/XmXyX.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/XmXyX.png\" alt=\"enter image description here\"></a></p>\n\n<p><strong>More Examples</strong><br>\nFull disclosure - I am the author (in part or whole) of these posts listed below.</p>\n\n<ul>\n<li><p><a href=\"https://stackoverflow.com/questions/50444346/fast-punctuation-removal-with-pandas\">Fast punctuation removal with pandas</a></p></li>\n<li><p><a href=\"https://stackoverflow.com/questions/11858472/string-concatenation-of-two-pandas-columns/54298586#54298586\">String concatenation of two pandas columns</a> </p></li>\n<li><p><a href=\"https://stackoverflow.com/questions/13682044/remove-unwanted-parts-from-strings-in-a-column/54302517#54302517\">Remove unwanted parts from strings in a column</a></p></li>\n<li><p><a href=\"https://stackoverflow.com/a/47813144/4909087\">Replace all but the last occurrence of a character in a dataframe</a></p></li>\n</ul>\n\n<hr>\n\n<h3>Conclusion</h3>\n\n<p>As shown from the examples above, iteration shines when working with small rows of DataFrames, mixed datatypes, and regular expressions.</p>\n\n<p>The speedup you get depends on your data and your problem, so your mileage may vary. The best thing to do is to carefully run tests and see if the payout is worth the effort. </p>\n\n<p>The \"vectorized\" functions shine in their simplicity and readability, so if performance is not critical, you should definitely prefer those. </p>\n\n<p>Another side note, certain string operations deal with constraints that favour the use of NumPy. Here are two examples where careful NumPy vectorization outperforms python: </p>\n\n<ul>\n<li><p><a href=\"https://stackoverflow.com/a/49471005/4909087\">Create new column with incremental values in a faster and efficient way - Answer by Divakar</a></p></li>\n<li><p><a href=\"https://stackoverflow.com/a/50518852/4909087\">Fast punctuation removal with pandas - Answer by Paul Panzer</a></p></li>\n</ul>\n\n<p>Additionally, sometimes just operating on the underlying arrays via <code>.values</code> as opposed to on the Series or DataFrames can offer a healthy enough speedup for most usual scenarios (see the <strong>Note</strong> in the <strong>Numeric Comparison</strong> section above). So, for example <code>df[df.A.values != df.B.values]</code> would show instant performance boosts over <code>df[df.A != df.B]</code>. Using <code>.values</code> may not be appropriate in every situation, but it is a useful hack to know. </p>\n\n<p>As mentioned above, it's up to you to decide whether these solutions are worth the trouble of implementing.</p>\n\n<hr>\n\n<h3>Appendix: Code Snippets</h3>\n\n<pre><code>import perfplot  \nimport operator \nimport pandas as pd\nimport numpy as np\nimport re\n\nfrom collections import Counter\nfrom itertools import chain\n</code></pre>\n\n<p></p>\n\n<pre><code># Boolean indexing with Numeric value comparison.\nperfplot.show(\n    setup=lambda n: pd.DataFrame(np.random.choice(1000, (n, 2)), columns=['A','B']),\n    kernels=[\n        lambda df: df[df.A != df.B],\n        lambda df: df.query('A != B'),\n        lambda df: df[[x != y for x, y in zip(df.A, df.B)]],\n        lambda df: df[get_mask(df.A.values, df.B.values)]\n    ],\n    labels=['vectorized !=', 'query (numexpr)', 'list comp', 'numba'],\n    n_range=[2**k for k in range(0, 15)],\n    xlabel='N'\n)\n</code></pre>\n\n<p></p>\n\n<pre><code># Value Counts comparison.\nperfplot.show(\n    setup=lambda n: pd.Series(np.random.choice(1000, n)),\n    kernels=[\n        lambda ser: ser.value_counts(sort=False).to_dict(),\n        lambda ser: dict(zip(*np.unique(ser, return_counts=True))),\n        lambda ser: Counter(ser),\n    ],\n    labels=['value_counts', 'np.unique', 'Counter'],\n    n_range=[2**k for k in range(0, 15)],\n    xlabel='N',\n    equality_check=lambda x, y: dict(x) == dict(y)\n)\n</code></pre>\n\n<p></p>\n\n<pre><code># Boolean indexing with string value comparison.\nperfplot.show(\n    setup=lambda n: pd.DataFrame(np.random.choice(1000, (n, 2)), columns=['A','B'], dtype=str),\n    kernels=[\n        lambda df: df[df.A != df.B],\n        lambda df: df.query('A != B'),\n        lambda df: df[[x != y for x, y in zip(df.A, df.B)]],\n    ],\n    labels=['vectorized !=', 'query (numexpr)', 'list comp'],\n    n_range=[2**k for k in range(0, 15)],\n    xlabel='N',\n    equality_check=None\n)\n</code></pre>\n\n<p></p>\n\n<pre><code># Dictionary value extraction.\nser1 = pd.Series([{'key': 'abc', 'value': 123}, {'key': 'xyz', 'value': 456}])\nperfplot.show(\n    setup=lambda n: pd.concat([ser1] * n, ignore_index=True),\n    kernels=[\n        lambda ser: ser.map(operator.itemgetter('value')),\n        lambda ser: pd.Series([x.get('value') for x in ser]),\n    ],\n    labels=['map', 'list comprehension'],\n    n_range=[2**k for k in range(0, 15)],\n    xlabel='N',\n    equality_check=None\n)\n</code></pre>\n\n<p></p>\n\n<pre><code># List positional indexing. \nser2 = pd.Series([['a', 'b', 'c'], [1, 2], []])        \nperfplot.show(\n    setup=lambda n: pd.concat([ser2] * n, ignore_index=True),\n    kernels=[\n        lambda ser: ser.map(get_0th),\n        lambda ser: ser.str[0],\n        lambda ser: pd.Series([x[0] if len(x) &gt; 0 else np.nan for x in ser]),\n        lambda ser: pd.Series([get_0th(x) for x in ser]),\n    ],\n    labels=['map', 'str accessor', 'list comprehension', 'list comp safe'],\n    n_range=[2**k for k in range(0, 15)],\n    xlabel='N',\n    equality_check=None\n)\n</code></pre>\n\n<p></p>\n\n<pre><code># Nested list flattening.\nser3 = pd.Series([['a', 'b', 'c'], ['d', 'e'], ['f', 'g']])\nperfplot.show(\n    setup=lambda n: pd.concat([ser2] * n, ignore_index=True),\n    kernels=[\n        lambda ser: pd.DataFrame(ser.tolist()).stack().reset_index(drop=True),\n        lambda ser: pd.Series(list(chain.from_iterable(ser.tolist()))),\n        lambda ser: pd.Series([y for x in ser for y in x]),\n    ],\n    labels=['stack', 'itertools.chain', 'nested list comp'],\n    n_range=[2**k for k in range(0, 15)],\n    xlabel='N',    \n    equality_check=None\n\n)\n</code></pre>\n\n<p></p>\n\n<pre><code># Extracting strings.\nser4 = pd.Series(['foo xyz', 'test A1234', 'D3345 xtz'])\nperfplot.show(\n    setup=lambda n: pd.concat([ser4] * n, ignore_index=True),\n    kernels=[\n        lambda ser: ser.str.extract(r'(?&lt;=[A-Z])(\\d{4})', expand=False),\n        lambda ser: pd.Series([matcher(x) for x in ser])\n    ],\n    labels=['str.extract', 'list comprehension'],\n    n_range=[2**k for k in range(0, 15)],\n    xlabel='N',\n    equality_check=None\n)\n</code></pre>\n"
    },
    "360": {
        "question_id": "2764017",
        "answer_id": "2764099",
        "question": "<p>Is it guaranteed that <code>False == 0</code> and <code>True == 1</code>, in Python (assuming that they are not reassigned by the user)?  For instance, is it in any way guaranteed that the following code will always produce the same results, whatever the version of Python (both existing and, likely, future ones)?</p>\n\n<pre><code>0 == False  # True\n1 == True   # True\n['zero', 'one'][False]  # is 'zero'\n</code></pre>\n\n<p>Any reference to the official documentation would be much appreciated!</p>\n\n<p><strong>Edit</strong>: As noted in many answers, <code>bool</code> inherits from <code>int</code>.  The question can therefore be recast as: \"Does the documentation officially say that programmers can rely on booleans inheriting from integers, <em>with the values <code>0</code> and <code>1</code></em>?\".  This question is relevant for writing robust code that won't fail because of implementation details!</p>\n",
        "answer": "<p>In Python 2.x this is <em>not</em> guaranteed as it is possible for <code>True</code> and <code>False</code> to be reassigned.  However, even if this happens, boolean True and boolean False are still properly returned for comparisons.</p>\n\n<p>In Python 3.x <code>True</code> and <code>False</code> are keywords and will always be equal to <code>1</code> and <code>0</code>.</p>\n\n<p>Under normal circumstances in Python 2, and always in Python 3:</p>\n\n<p><code>False</code> object is of type <code>bool</code> which is a subclass of <code>int</code>:</p>\n\n<pre><code>object\n   |\n int\n   |\n bool\n</code></pre>\n\n<p>It is the only reason why in your example, <code>['zero', 'one'][False]</code> does work. It would not work with an object which is not a subclass of integer, because list indexing only works with integers, or objects that define a <a href=\"http://docs.python.org/reference/datamodel.html#object.__index__\" rel=\"noreferrer\"><code>__index__</code></a> method (thanks <a href=\"https://stackoverflow.com/users/270986/mark-dickinson\">mark-dickinson</a>).</p>\n\n<p>Edit:</p>\n\n<p>It is true of the current python version, and of that of Python 3. The <a href=\"http://docs.python.org/reference/datamodel.html#the-standard-type-hierarchy\" rel=\"noreferrer\">docs for python 2.6</a> and the <a href=\"http://docs.python.org/release/3.0.1/reference/datamodel.html#the-standard-type-hierarchy\" rel=\"noreferrer\">docs for Python 3</a> both say:</p>\n\n<blockquote>\n  <p>There are two types of integers: [...] Integers (int) [...] Booleans (bool)</p>\n</blockquote>\n\n<p>and in the boolean subsection:</p>\n\n<blockquote>\n  <p>Booleans: These represent the truth values False and True [...] Boolean values behave like the values 0 and 1, respectively, in almost all contexts, the exception being that when converted to a string, the strings \"False\" or \"True\" are returned, respectively.</p>\n</blockquote>\n\n<p>There is also, <a href=\"https://docs.python.org/2/library/stdtypes.html#boolean-values\" rel=\"noreferrer\">for Python 2</a>:</p>\n\n<blockquote>\n  <p>In numeric contexts (for example when used as the argument to an arithmetic operator), they [False and True] behave like the integers 0 and 1, respectively. </p>\n</blockquote>\n\n<p>So booleans are explicitly considered as integers in Python 2.6 and 3.</p>\n\n<p>So you're safe until Python 4 comes along. ;-)</p>\n"
    },
    "361": {
        "question_id": "2400262",
        "answer_id": "2401181",
        "question": "<p>I need to code a program with Python's tkinter library.</p>\n\n<p>My major problem is that I don't know how to create a <em>timer</em> or a <em>clock</em> like \n<code>hh:mm:ss</code>. </p>\n\n<p>I need it to update itself (that's what I don't know how to do).</p>\n",
        "answer": "<p>Tkinter root windows have a method called <code>after</code> which can be used to schedule a function to be called after a given period of time. If that function itself calls <code>after</code> you've set up an automatically recurring event. </p>\n\n<p>Here is a working example:</p>\n\n<pre><code># for python 3.x use 'tkinter' rather than 'Tkinter'\nimport Tkinter as tk\nimport time\n\nclass App():\n    def __init__(self):\n        self.root = tk.Tk()\n        self.label = tk.Label(text=\"\")\n        self.label.pack()\n        self.update_clock()\n        self.root.mainloop()\n\n    def update_clock(self):\n        now = time.strftime(\"%H:%M:%S\")\n        self.label.configure(text=now)\n        self.root.after(1000, self.update_clock)\n\napp=App()\n</code></pre>\n\n<p>Bear in mind that <code>after</code> doesn't guarantee the function will run exactly on time. It only <em>schedules</em> the job to be run after a given amount of time. It the app is busy there may be a delay before it is called since Tkinter is single-threaded. The delay is typically measured in microseconds.</p>\n"
    },
    "362": {
        "question_id": "23327293",
        "answer_id": "23327352",
        "question": "<p>I am trying to render the file <code>home.html</code>.  The file exists in my project, but I keep getting <code>jinja2.exceptions.TemplateNotFound: home.html</code> when I try to render it.  Why can't Flask find my template?</p>\n\n<pre><code>from flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return render_template('home.html')\n</code></pre>\n\n\n\n<pre><code>/myproject\n    app.py\n    home.html\n</code></pre>\n",
        "answer": "<p>You must create your template files in the correct location; in the <code>templates</code> subdirectory next to your python module.</p>\n\n<p>The error indicates that there is no <code>home.html</code> file in the <code>templates/</code> directory. Make sure you created that directory in the same directory as your python module, and that you did in fact put a <code>home.html</code> file in that subdirectory.  If your app is a package, the templates folder should be created <em>inside</em> the package.</p>\n\n<pre><code>myproject/\n    app.py\n    templates/\n        home.html\n</code></pre>\n\n\n\n<pre><code>myproject/\n    mypackage/\n        __init__.py\n        templates/\n            home.html\n</code></pre>\n\n<p>Alternatively, if you named your templates folder something other than <code>templates</code> and don't want to rename it to the default, you can tell Flask to use that other directory.</p>\n\n<pre><code>app = Flask(__name__, template_folder='template')  # still relative to module\n</code></pre>\n\n<p>You can ask Flask to explain how it tried to find a given template, by setting the <a href=\"http://flask.pocoo.org/docs/1.0/config/#EXPLAIN_TEMPLATE_LOADING\" rel=\"nofollow noreferrer\"><code>EXPLAIN_TEMPLATE_LOADING</code> option</a> to <code>True</code>. For every template loaded, you'll get a report logged to the <a href=\"http://flask.pocoo.org/docs/1.0/quickstart/#logging\" rel=\"nofollow noreferrer\">Flask <code>app.logger</code></a>, at level <code>INFO</code>.</p>\n\n<p>This is what it looks like when a search is successful; in this example the <code>foo/bar.html</code> template extends the <code>base.html</code> template, so there are two searches:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[2019-06-15 16:03:39,197] INFO in debughelpers: Locating template \"foo/bar.html\":\n    1: trying loader of application \"flaskpackagename\"\n       class: jinja2.loaders.FileSystemLoader\n       encoding: 'utf-8'\n       followlinks: False\n       searchpath:\n         - /.../project/flaskpackagename/templates\n       -&gt; found ('/.../project/flaskpackagename/templates/foo/bar.html')\n[2019-06-15 16:03:39,203] INFO in debughelpers: Locating template \"base.html\":\n    1: trying loader of application \"flaskpackagename\"\n       class: jinja2.loaders.FileSystemLoader\n       encoding: 'utf-8'\n       followlinks: False\n       searchpath:\n         - /.../project/flaskpackagename/templates\n       -&gt; found ('/.../project/flaskpackagename/templates/base.html')\n</code></pre>\n\n<p>Blueprints can <a href=\"http://flask.pocoo.org/docs/1.0/blueprints/#templates\" rel=\"nofollow noreferrer\">register their own template directories</a> too, but this is not a requirement if you are using blueprints to make it easier to split a larger project across logical units. The main Flask app template directory is always searched first even when using additional paths per blueprint.</p>\n"
    },
    "363": {
        "question_id": "12419198",
        "answer_id": "12471855",
        "question": "<p>The task I try to accomplish is to stream a ruby file and print out the output. (<strong><em>NOTE</em></strong>: I don't want to print out everything at once)</p>\n\n<p><strong>main.py</strong></p>\n\n<pre><code>from subprocess import Popen, PIPE, STDOUT\n\nimport pty\nimport os\n\nfile_path = '/Users/luciano/Desktop/ruby_sleep.rb'\n\ncommand = ' '.join([\"ruby\", file_path])\n\nmaster, slave = pty.openpty()\nproc = Popen(command, bufsize=0, shell=True, stdout=slave, stderr=slave, close_fds=True)     \nstdout = os.fdopen(master, 'r', 0)\n\nwhile proc.poll() is None:\n    data = stdout.readline()\n    if data != \"\":\n        print(data)\n    else:\n        break\n\nprint(\"This is never reached!\")\n</code></pre>\n\n<p><strong>ruby_sleep.rb</strong></p>\n\n<pre><code>puts \"hello\"\n\nsleep 2\n\nputs \"goodbye!\"\n</code></pre>\n\n<p><em><strong>Problem</em></strong></p>\n\n<p>Streaming the file works fine. The hello/goodbye output is printed with the 2 seconds delay. Exactly as the script should work. The problem is that readline() hangs in the end and never quits. I never reach the last print.</p>\n\n<p>I know there is a lot of questions like this here a stackoverflow but non of them made me solve the problem. I'm not that into the whole subprocess thing so please give me a more hands-on/concrete answer.</p>\n\n<p>Regards</p>\n\n<p><strong>edit</strong></p>\n\n<p>Fix unintended code. (nothing to do with the actual error)</p>\n",
        "answer": "<p>I assume you use <code>pty</code> due to reasons outlined in <a href=\"http://pexpect.readthedocs.org/en/latest/FAQ.html#whynotpipe\" rel=\"noreferrer\">Q: Why not just use a pipe (popen())?</a> (all other answers so far ignore your <em>\"NOTE: I don't want to print out everything at once\"</em>).</p>\n\n<p><code>pty</code> is Linux only <a href=\"http://docs.python.org/dev/library/pty.html\" rel=\"noreferrer\">as said in the docs</a>:</p>\n\n<blockquote>\n  <p>Because pseudo-terminal handling is highly platform dependent, there\n  is code to do it only for Linux. (The Linux code is supposed to work\n  on other platforms, but hasn\u2019t been tested yet.)</p>\n</blockquote>\n\n<p>It is unclear how well it works on other OSes.</p>\n\n<p>You could try <code>pexpect</code>:</p>\n\n<pre><code>import sys\nimport pexpect\n\npexpect.run(\"ruby ruby_sleep.rb\", logfile=sys.stdout)\n</code></pre>\n\n<p>Or <a href=\"http://www.gnu.org/software/coreutils/manual/html_node/stdbuf-invocation.html#stdbuf-invocation\" rel=\"noreferrer\"><code>stdbuf</code></a> to enable line-buffering in non-interactive mode:</p>\n\n<pre><code>from subprocess import Popen, PIPE, STDOUT\n\nproc = Popen(['stdbuf', '-oL', 'ruby', 'ruby_sleep.rb'],\n             bufsize=1, stdout=PIPE, stderr=STDOUT, close_fds=True)\nfor line in iter(proc.stdout.readline, b''):\n    print line,\nproc.stdout.close()\nproc.wait()\n</code></pre>\n\n<p>Or using <code>pty</code> from stdlib based on <a href=\"https://stackoverflow.com/a/28925318/4279\">@Antti Haapala's answer</a>:</p>\n\n<pre><code>#!/usr/bin/env python\nimport errno\nimport os\nimport pty\nfrom subprocess import Popen, STDOUT\n\nmaster_fd, slave_fd = pty.openpty()  # provide tty to enable\n                                     # line-buffering on ruby's side\nproc = Popen(['ruby', 'ruby_sleep.rb'],\n             stdin=slave_fd, stdout=slave_fd, stderr=STDOUT, close_fds=True)\nos.close(slave_fd)\ntry:\n    while 1:\n        try:\n            data = os.read(master_fd, 512)\n        except OSError as e:\n            if e.errno != errno.EIO:\n                raise\n            break # EIO means EOF on some systems\n        else:\n            if not data: # EOF\n                break\n            print('got ' + repr(data))\nfinally:\n    os.close(master_fd)\n    if proc.poll() is None:\n        proc.kill()\n    proc.wait()\nprint(\"This is reached!\")\n</code></pre>\n\n<p>All three code examples print 'hello' immediately (as soon as the first EOL is seen).</p>\n\n<hr>\n\n<p><sup>leave the old more complicated code example here because it may be referenced and discussed in other posts on SO</sup></p>\n\n<p>Or using <code>pty</code> based on <a href=\"https://stackoverflow.com/a/12225379/4279\">@Antti Haapala's answer</a>:</p>\n\n<pre><code>import os\nimport pty\nimport select\nfrom subprocess import Popen, STDOUT\n\nmaster_fd, slave_fd = pty.openpty()  # provide tty to enable\n                                     # line-buffering on ruby's side\nproc = Popen(['ruby', 'ruby_sleep.rb'],\n             stdout=slave_fd, stderr=STDOUT, close_fds=True)\ntimeout = .04 # seconds\nwhile 1:\n    ready, _, _ = select.select([master_fd], [], [], timeout)\n    if ready:\n        data = os.read(master_fd, 512)\n        if not data:\n            break\n        print(\"got \" + repr(data))\n    elif proc.poll() is not None: # select timeout\n        assert not select.select([master_fd], [], [], 0)[0] # detect race condition\n        break # proc exited\nos.close(slave_fd) # can't do it sooner: it leads to errno.EIO error\nos.close(master_fd)\nproc.wait()\n\nprint(\"This is reached!\")\n</code></pre>\n"
    },
    "364": {
        "question_id": "449560",
        "answer_id": "450034",
        "question": "<p>In C, we can find the size of an <code>int</code>, <code>char</code>, etc. I want to know how to get size of objects like a string, integer, etc. in Python.</p>\n\n<p>Related question: <a href=\"https://stackoverflow.com/questions/135664/how-many-bytes-per-element-are-there-in-a-python-list-tuple\">How many bytes per element are there in a Python list (tuple)?</a></p>\n\n<p>I am using an XML file which contains size fields that specify the size of value. I must parse this XML and do my coding. When I want to change the value of a particular field, I will check the size field of that value. Here I want to compare whether the new value that I'm gong to enter is of the same size as in XML. I need to check the size of new value. In case of a string I can say its the length. But in case of int, float, etc. I am confused.</p>\n",
        "answer": "<p>Just use the <a href=\"http://docs.python.org/library/sys.html#sys.getsizeof\" rel=\"noreferrer\">sys.getsizeof</a> function defined in the <code>sys</code> module.</p>\n\n<blockquote>\n  <p><code>sys.getsizeof(object[, default])</code>:</p>\n  \n  <p>Return the size of an object in bytes.\n  The object can be any type of object.\n  All built-in objects will return\n  correct results, but this does not\n  have to hold true for third-party\n  extensions as it is implementation\n  specific.</p>\n  \n  <p>The <code>default</code> argument allows to define\n  a value which will be returned if the\n  object type does not provide means to\n  retrieve the size and would cause a\n  <code>TypeError</code>.</p>\n  \n  <p><code>getsizeof</code> calls the object\u2019s\n  <code>__sizeof__</code> method and adds an additional garbage collector overhead\n  if the object is managed by the\n  garbage collector.</p>\n</blockquote>\n\n<p>Usage example, in python 3.0:</p>\n\n<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; x = 2\n&gt;&gt;&gt; sys.getsizeof(x)\n24\n&gt;&gt;&gt; sys.getsizeof(sys.getsizeof)\n32\n&gt;&gt;&gt; sys.getsizeof('this')\n38\n&gt;&gt;&gt; sys.getsizeof('this also')\n48\n</code></pre>\n\n<p>If you are in python &lt; 2.6 and don't have <code>sys.getsizeof</code> you can use <a href=\"http://code.activestate.com/recipes/546530/\" rel=\"noreferrer\">this extensive module</a> instead. Never used it though.</p>\n"
    },
    "365": {
        "question_id": "11350770",
        "answer_id": "11531402",
        "question": "<p>I have a <code>DataFrame</code> with 4 columns of which 2 contain string values. I was wondering if there was a way to select rows based on a partial string match against a particular column?</p>\n\n<p>In other words, a function or lambda function that would do something like </p>\n\n<pre><code>re.search(pattern, cell_in_question) \n</code></pre>\n\n<p>returning a boolean. I am familiar with the syntax of <code>df[df['A'] == \"hello world\"]</code> but can't seem to find a way to do the same with a partial string match say <code>'hello'</code>.</p>\n\n<p>Would someone be able to point me in the right direction?</p>\n",
        "answer": "<p>Based on github issue <a href=\"https://github.com/pydata/pandas/issues/620\" rel=\"noreferrer\">#620</a>, it looks like you'll soon be able to do the following:</p>\n\n<pre><code>df[df['A'].str.contains(\"hello\")]\n</code></pre>\n\n<p>Update: <a href=\"http://pandas.pydata.org/pandas-docs/stable/text.html#text-string-methods\" rel=\"noreferrer\">vectorized string methods (i.e., Series.str)</a> are available in pandas 0.8.1 and up. </p>\n"
    },
    "366": {
        "question_id": "7585435",
        "answer_id": "7585619",
        "question": "<p>There appears to be two different ways to convert a string to bytes, as seen in the answers to <a href=\"https://stackoverflow.com/questions/5471158/typeerror-str-does-not-support-the-buffer-interface\">TypeError: &#39;str&#39; does not support the buffer interface</a></p>\n\n<p>Which of these methods would be better or more Pythonic? Or is it just a matter of personal preference?</p>\n\n<pre><code>b = bytes(mystring, 'utf-8')\n\nb = mystring.encode('utf-8')\n</code></pre>\n",
        "answer": "<p>If you look at the docs for <code>bytes</code>, it points you to <a href=\"https://docs.python.org/3/library/functions.html#func-bytearray\" rel=\"noreferrer\"><code>bytearray</code></a>:</p>\n\n<blockquote>\n  <p>bytearray([source[, encoding[, errors]]])</p>\n  \n  <p>Return a new array of bytes. The bytearray type is a mutable sequence of integers in the range 0 &lt;= x &lt; 256. It has most of the usual methods of mutable sequences, described in Mutable Sequence Types, as well as most methods that the bytes type has, see Bytes and Byte Array Methods.</p>\n  \n  <p>The optional source parameter can be used to initialize the array in a few different ways:</p>\n  \n  <p><strong>If it is a string, you must also give the encoding (and optionally, errors) parameters; bytearray() then converts the string to bytes using str.encode().</strong></p>\n  \n  <p><strong>If it is an integer, the array will have that size and will be initialized with null bytes.</strong></p>\n  \n  <p><strong>If it is an object conforming to the buffer interface, a read-only buffer of the object will be used to initialize the bytes array.</strong></p>\n  \n  <p><strong>If it is an iterable, it must be an iterable of integers in the range 0 &lt;= x &lt; 256, which are used as the initial contents of the array.</strong></p>\n  \n  <p><strong>Without an argument, an array of size 0 is created.</strong></p>\n</blockquote>\n\n<p>So <code>bytes</code> can do much more than just encode a string. It's Pythonic that it would allow you to call the constructor with any type of source parameter that makes sense. </p>\n\n<p>For  encoding a string, I think that <code>some_string.encode(encoding)</code> is more Pythonic than using the constructor, because it is the most self documenting -- \"take this string and encode it with this encoding\" is clearer than <code>bytes(some_string, encoding)</code> -- there is no explicit verb when you use the constructor.</p>\n\n<p><strong>Edit:</strong> I checked the Python source. If you pass a unicode string to <code>bytes</code> using CPython, it calls <a href=\"http://hg.python.org/cpython/file/5a12416890c0/Objects/unicodeobject.c#l2328\" rel=\"noreferrer\">PyUnicode_AsEncodedString</a>, which is the implementation of <code>encode</code>; so you're just skipping a level of indirection if you call <code>encode</code> yourself.</p>\n\n<p>Also, see Serdalis' comment -- <code>unicode_string.encode(encoding)</code> is also more Pythonic because its inverse is <code>byte_string.decode(encoding)</code> and symmetry is nice.</p>\n"
    },
    "367": {
        "question_id": "976882",
        "answer_id": "976918",
        "question": "<p>I have a list of objects in Python and I want to shuffle them. I thought I could use the <code>random.shuffle</code> method, but this seems to fail when the list is of objects. Is there a method for shuffling object or another way around this?</p>\n\n<pre><code>import random\n\nclass a:\n    foo = \"bar\"\n\na1 = a()\na2 = a()\nb = [a1,a2]\n\nprint random.shuffle(b)\n</code></pre>\n\n<p>This will fail.</p>\n",
        "answer": "<p><a href=\"https://docs.python.org/library/random.html#random.shuffle\" rel=\"noreferrer\"><code>random.shuffle</code></a> should work.  Here's an example, where the objects are lists:</p>\n\n<pre><code>from random import shuffle\nx = [[i] for i in range(10)]\nshuffle(x)\n\n# print x  gives  [[9], [2], [7], [0], [4], [5], [3], [1], [8], [6]]\n# of course your results will vary\n</code></pre>\n\n<p>Note that shuffle works <strong>in place</strong>, and returns None.</p>\n"
    },
    "368": {
        "question_id": "112698",
        "answer_id": "112713",
        "question": "<p>I thought I heard that <a href=\"http://www.py2exe.org/\" rel=\"noreferrer\">py2exe</a> was able to do this, but I never figured it out.  Has anyone successfully done this?  Can I see your setup.py file, and what command line options you used?</p>\n\n<p>Basically I'm thinking of it giving me a single executable file that does something like unzips itself to maybe /temp and runs.</p>\n",
        "answer": "<p><a href=\"http://www.pyinstaller.org/\" rel=\"noreferrer\">PyInstaller</a> will create a single .exe file with no dependencies; use the <code>--onefile</code> option. It does this by packing all the needed shared libs into the executable, and unpacking them before it runs, just as you describe (EDIT: py2exe also has this feature, see <a href=\"https://stackoverflow.com/questions/112698/py2exe-generate-single-executable-file#113014\">minty's answer</a>)</p>\n\n<p>I use the version of PyInstaller from svn, since the latest release (1.3) is somewhat outdated. It's been working really well for an app which depends on PyQt, PyQwt, numpy, scipy and a few more.</p>\n"
    },
    "369": {
        "question_id": "1871524",
        "answer_id": "1872081",
        "question": "<p>I have a JSON file that I want to covert to a CSV file. How can I do this with Python?</p>\n\n<p>I tried:</p>\n\n<pre><code>import json\nimport csv\n\nf = open('data.json')\ndata = json.load(f)\nf.close()\nf = open('data.csv')\ncsv_file = csv.writer(f)\nfor item in data:\n    f.writerow(item)\n\nf.close()\n</code></pre>\n\n<p>However, it did not work. I am using Django and the error I received is:</p>\n\n<pre><code>file' object has no attribute 'writerow'\n</code></pre>\n\n<p>So, then I tried the following:</p>\n\n<pre><code>import json\nimport csv\n\nf = open('data.json')\ndata = json.load(f)\nf.close()\n\nf = open('data.csv')\ncsv_file = csv.writer(f)\nfor item in data:\n    csv_file.writerow(item)\n\nf.close()\n</code></pre>\n\n<p>I then get the error:</p>\n\n<pre><code>sequence expected\n</code></pre>\n\n<p>Sample json file:</p>\n\n<pre class=\"lang-json prettyprint-override\"><code>[\n  {\n    \"pk\": 22,\n    \"model\": \"auth.permission\",\n    \"fields\": {\n      \"codename\": \"add_logentry\",\n      \"name\": \"Can add log entry\",\n      \"content_type\": 8\n    }\n  },\n  {\n    \"pk\": 23,\n    \"model\": \"auth.permission\",\n    \"fields\": {\n      \"codename\": \"change_logentry\",\n      \"name\": \"Can change log entry\",\n      \"content_type\": 8\n    }\n  },\n  {\n    \"pk\": 24,\n    \"model\": \"auth.permission\",\n    \"fields\": {\n      \"codename\": \"delete_logentry\",\n      \"name\": \"Can delete log entry\",\n      \"content_type\": 8\n    }\n  },\n  {\n    \"pk\": 4,\n    \"model\": \"auth.permission\",\n    \"fields\": {\n      \"codename\": \"add_group\",\n      \"name\": \"Can add group\",\n      \"content_type\": 2\n    }\n  },\n  {\n    \"pk\": 10,\n    \"model\": \"auth.permission\",\n    \"fields\": {\n      \"codename\": \"add_message\",\n      \"name\": \"Can add message\",\n      \"content_type\": 4\n    }\n  }\n]\n</code></pre>\n",
        "answer": "<p>I am not sure this question is solved already or not, but let me paste what I have done for reference.</p>\n\n<p>First, your JSON has nested objects, so it normally cannot be directly converted to CSV.\nYou need to change that to something like this:</p>\n\n<pre><code>{\n    \"pk\": 22,\n    \"model\": \"auth.permission\",\n    \"codename\": \"add_logentry\",\n    \"content_type\": 8,\n    \"name\": \"Can add log entry\"\n},\n......]\n</code></pre>\n\n<p>Here is my code to generate CSV from that:</p>\n\n<pre><code>import csv\nimport json\n\nx = \"\"\"[\n    {\n        \"pk\": 22,\n        \"model\": \"auth.permission\",\n        \"fields\": {\n            \"codename\": \"add_logentry\",\n            \"name\": \"Can add log entry\",\n            \"content_type\": 8\n        }\n    },\n    {\n        \"pk\": 23,\n        \"model\": \"auth.permission\",\n        \"fields\": {\n            \"codename\": \"change_logentry\",\n            \"name\": \"Can change log entry\",\n            \"content_type\": 8\n        }\n    },\n    {\n        \"pk\": 24,\n        \"model\": \"auth.permission\",\n        \"fields\": {\n            \"codename\": \"delete_logentry\",\n            \"name\": \"Can delete log entry\",\n            \"content_type\": 8\n        }\n    }\n]\"\"\"\n\nx = json.loads(x)\n\nf = csv.writer(open(\"test.csv\", \"wb+\"))\n\n# Write CSV Header, If you dont need that, remove this line\nf.writerow([\"pk\", \"model\", \"codename\", \"name\", \"content_type\"])\n\nfor x in x:\n    f.writerow([x[\"pk\"],\n                x[\"model\"],\n                x[\"fields\"][\"codename\"],\n                x[\"fields\"][\"name\"],\n                x[\"fields\"][\"content_type\"]])\n</code></pre>\n\n<p>You will get output as:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>pk,model,codename,name,content_type\n22,auth.permission,add_logentry,Can add log entry,8\n23,auth.permission,change_logentry,Can change log entry,8\n24,auth.permission,delete_logentry,Can delete log entry,8\n</code></pre>\n"
    },
    "370": {
        "question_id": "32557920",
        "answer_id": "32558710",
        "question": "<p>One of the talked about features in <code>Python 3.5</code> is said to be <code>type hints</code>.</p>\n\n<p>An example of <code>type hints</code> is mentioned in this <a href=\"http://lwn.net/Articles/650904/\">article</a> and <a href=\"http://lwn.net/Articles/640359/\">this</a> while also mentioning to use type hints responsibly. Can someone explain more about it and when it should be used and when not?</p>\n",
        "answer": "<p>I would suggest reading <a href=\"https://www.python.org/dev/peps/pep-0483/\" rel=\"noreferrer\">PEP 483</a> and <a href=\"https://www.python.org/dev/peps/pep-0484/\" rel=\"noreferrer\">PEP 484</a> and watching <a href=\"https://www.youtube.com/watch?v=2wDvzy6Hgxg\" rel=\"noreferrer\">this</a> presentation by Guido on Type Hinting.</p>\n\n<p><strong>In a nutshell</strong>: <em>Type hinting is literally what the words mean, you hint the type of the object(s) you're using</em>. </p>\n\n<p>Due to the <em>dynamic</em> nature of Python, <em>inferring or checking the type</em> of an object being used is especially hard. This fact makes it hard for developers to understand what exactly is going on in code they haven't written and, most importantly, for type checking tools found in many IDEs [PyCharm, PyDev come to mind] that are limited due to the fact that they don't have any indicator of what type the objects are. As a result they resort to trying to infer the type with (as mentioned in the presentation) around 50% success rate. </p>\n\n<hr>\n\n<p>To take two important slides from the Type Hinting presentation:</p>\n\n<h3><strong><em>Why Type Hints?</em></strong></h3>\n\n<ol>\n<li><strong>Helps Type Checkers:</strong> By hinting at what type you want the object to be the type checker can easily detect if, for instance, you're passing an object with a type that isn't expected.</li>\n<li><strong>Helps with documentation:</strong> A third person viewing your code will know what is expected where, ergo, how to use it without getting them <code>TypeErrors</code>. </li>\n<li><strong>Helps IDEs develop more accurate and robust tools:</strong> Development Environments will be better suited at suggesting appropriate methods when know what type your object is. You have probably experienced this with some IDE at some point, hitting the <code>.</code> and having methods/attributes pop up which aren't defined for an object.</li>\n</ol>\n\n<h3><strong><em>Why use Static Type Checkers?</em></strong></h3>\n\n<ul>\n<li><strong>Find bugs sooner</strong>: This is self evident, I believe.</li>\n<li><strong>The larger your project the more you need it</strong>: Again, makes sense. Static languages offer a robustness and control that\ndynamic languages lack. The bigger and more complex your application becomes the more control and predictability (from\na behavioral aspect) you require.</li>\n<li><strong>Large teams are already running static analysis</strong>: I'm guessing this verifies the first two points.</li>\n</ul>\n\n<p><strong>As a closing note for this small introduction</strong>: This is an <strong>optional</strong> feature and, from what I understand, it has been introduced in order to reap some of the benefits of static typing. </p>\n\n<p>You generally <strong>do not</strong> need to worry about it and <strong>definitely</strong> don't need to use it (especially in cases where you use Python as an auxiliary scripting language). It should be helpful when developing large projects as <em>it offers much needed robustness, control and additional debugging capabilities</em>.</p>\n\n<hr>\n\n<h2><strong>Type Hinting with mypy</strong>:</h2>\n\n<p>In order to make this answer more complete, I think a little demonstration would be suitable. I'll be using <a href=\"http://mypy-lang.org/\" rel=\"noreferrer\"><code>mypy</code></a>, the library which inspired Type Hints as they are presented in the PEP. This is mainly written for anybody bumping into this question and wondering where to begin.</p>\n\n<p>Before I do that let me reiterate the following: <a href=\"https://www.python.org/dev/peps/pep-0484/\" rel=\"noreferrer\">PEP 484</a> doesn't enforce anything; it is simply setting a direction for function\nannotations and proposing guidelines for <strong>how</strong> type checking can/should be performed. You can annotate your functions and\nhint as many things as you want; your scripts will still run regardless of the presence of annotations because Python itself doesn't use them.</p>\n\n<p>Anyways, as noted in the PEP, hinting types should generally take three forms:</p>\n\n<ul>\n<li>Function annotations. (<a href=\"https://www.python.org/dev/peps/pep-3107/\" rel=\"noreferrer\">PEP 3107</a>)</li>\n<li>Stub files for built-in/user modules. </li>\n<li>Special <code># type: type</code> comments that complement the first two forms. (See: <strong><a href=\"https://stackoverflow.com/questions/39971929/what-are-variable-annotations-in-python-3-6/39973133#39973133\">What are variable annotations in Python 3.6?</a></strong> for a Python 3.6 update for <code># type: type</code> comments)</li>\n</ul>\n\n<p>Additionally, you'll want to use type hints in conjunction with the new <a href=\"https://docs.python.org/3/library/typing.html\" rel=\"noreferrer\"><code>typing</code></a> module introduced in <code>Py3.5</code>. In it, many (additional) ABCs (Abstract Base Classes) are defined along with helper functions and decorators for use in static checking. Most <code>ABCs</code> in <code>collections.abc</code> are included but in a <code>Generic</code> form in order to allow subscription (by defining a <code>__getitem__()</code> method).</p>\n\n<p>For anyone interested in a more in-depth explanation of these, the <a href=\"http://mypy.readthedocs.org/en/latest/\" rel=\"noreferrer\"><code>mypy documentation</code></a> is written very nicely and has a lot of code samples demonstrating/describing the functionality of their checker; it is definitely worth a read.</p>\n\n<h3>Function annotations and special comments:</h3>\n\n<p>First, it's interesting to observe some of the behavior we can get when using special comments. Special <code># type: type</code> comments\ncan be added during variable assignments to indicate the type of an object if one cannot be directly inferred. Simple assignments are\ngenerally easily inferred but others, like lists (with regard to their contents), cannot.</p>\n\n<p><strong>Note:</strong> If we want to use any derivative of <code>Containers</code> and need to specify the contents for that container we <strong>must</strong> use the <strong><em>generic</em></strong> types from the <code>typing</code> module. <strong>These support indexing.</strong></p>\n\n<pre><code># generic List, supports indexing.\nfrom typing import List\n\n# In this case, the type is easily inferred as type: int.\ni = 0\n\n# Even though the type can be inferred as of type list\n# there is no way to know the contents of this list.\n# By using type: List[str] we indicate we want to use a list of strings.\na = []  # type: List[str]\n\n# Appending an int to our list\n# is statically not correct.\na.append(i)\n\n# Appending a string is fine.\na.append(\"i\")\n\nprint(a)  # [0, 'i']\n</code></pre>\n\n<p>If we add these commands to a file and execute them with our interpreter, everything works just fine and <code>print(a)</code> just prints\nthe contents of list <code>a</code>. The <code># type</code> comments have been discarded, <em>treated as plain comments which have no additional semantic meaning</em>.</p>\n\n<p>By running this with <code>mypy</code>, on the other hand, we get the following responce:</p>\n\n<pre><code>(Python3)jimmi@jim: mypy typeHintsCode.py\ntypesInline.py:14: error: Argument 1 to \"append\" of \"list\" has incompatible type \"int\"; expected \"str\"\n</code></pre>\n\n<p>Indicating that a list of <code>str</code> objects cannot contain an <code>int</code>, which, statically speaking, is sound. This can be fixed by either abiding to the type of <code>a</code> and only appending <code>str</code> objects or by changing the type of the contents of <code>a</code> to indicate that any value is acceptable (Intuitively performed with <code>List[Any]</code> after <code>Any</code> has been imported from <code>typing</code>).</p>\n\n<p>Function annotations are added in the form <code>param_name : type</code> after each parameter in your function signature and a return type is specified using the <code>-&gt; type</code> notation before the ending function colon; all annotations are stored in the <code>__annotations__</code> attribute for that function in a handy dictionary form. Using a trivial example (which doesn't require extra types from the <code>typing</code> module):</p>\n\n<pre><code>def annotated(x: int, y: str) -&gt; bool:\n    return x &lt; y\n</code></pre>\n\n<p>The <code>annotated.__annotations__</code> attribute now has the following values:</p>\n\n<pre><code>{'y': &lt;class 'str'&gt;, 'return': &lt;class 'bool'&gt;, 'x': &lt;class 'int'&gt;}\n</code></pre>\n\n<p>If we're a complete noobie, or we are familiar with <code>Py2.7</code> concepts and are consequently unaware of the <code>TypeError</code> lurking in the comparison of <code>annotated</code>, we can perform another static check, catch the error and save us some trouble:</p>\n\n<pre><code>(Python3)jimmi@jim: mypy typeHintsCode.py\ntypeFunction.py: note: In function \"annotated\":\ntypeFunction.py:2: error: Unsupported operand types for &gt; (\"str\" and \"int\")\n</code></pre>\n\n<p>Among other things, calling the function with invalid arguments will also get caught:</p>\n\n<pre><code>annotated(20, 20)\n\n# mypy complains:\ntypeHintsCode.py:4: error: Argument 2 to \"annotated\" has incompatible type \"int\"; expected \"str\"\n</code></pre>\n\n<p>These can be extended to basically any use-case and the errors caught extend further than basic calls and operations. The types you\ncan check for are really flexible and I have merely given a small sneak peak of its potential. A look in the <code>typing</code> module, the\nPEPs or the <code>mypy</code> docs will give you a more comprehensive idea of the capabilities offered.</p>\n\n<h3>Stub Files:</h3>\n\n<p>Stub files can be used in two different non mutually exclusive cases:</p>\n\n<ul>\n<li>You need to type check a module for which you do not want to directly alter the function signatures</li>\n<li>You want to write modules and have type-checking but additionally want to separate annotations from content.</li>\n</ul>\n\n<p>What stub files (with an extension of <code>.pyi</code>) are is an annotated interface of the module you are making/want to use. They contain\nthe signatures of the functions you want to type-check with the body of the functions discarded. To get a feel of this, given a set\nof three random functions in a module named <code>randfunc.py</code>:</p>\n\n<pre><code>def message(s):\n    print(s)\n\ndef alterContents(myIterable):\n    return [i for i in myIterable if i % 2 == 0]\n\ndef combine(messageFunc, itFunc):\n    messageFunc(\"Printing the Iterable\")\n    a = alterContents(range(1, 20))\n    return set(a)\n</code></pre>\n\n<p>We can create a stub file <code>randfunc.pyi</code>, in which we can place some restrictions if we wish to do so. The downside is that\nsomebody viewing the source without the stub won't really get that annotation assistance when trying to understand what is supposed\nto be passed where.</p>\n\n<p>Anyway, the structure of a stub file is pretty simplistic: Add all function definitions with empty bodies (<code>pass</code> filled) and\nsupply the annotations based on your requirements. Here, let's assume we only want to work with <code>int</code> types for our Containers.</p>\n\n<pre><code># Stub for randfucn.py\nfrom typing import Iterable, List, Set, Callable\n\ndef message(s: str) -&gt; None: pass\n\ndef alterContents(myIterable: Iterable[int])-&gt; List[int]: pass\n\ndef combine(\n    messageFunc: Callable[[str], Any],\n    itFunc: Callable[[Iterable[int]], List[int]]\n)-&gt; Set[int]: pass\n</code></pre>\n\n<p>The <code>combine</code> function gives an indication of why you might want to use annotations in a different file, they some times clutter up\nthe code and reduce readability (big no-no for Python). You could of course use type aliases but that sometime confuses more than it\nhelps (so use them wisely).</p>\n\n<hr>\n\n<p>This should get you familiarized with the basic concepts of Type Hints in Python. Even though the type checker used has been\n<code>mypy</code> you should gradually start to see more of them pop-up, some internally in IDEs (<a href=\"http://blog.jetbrains.com/pycharm/2015/11/python-3-5-type-hinting-in-pycharm-5/\" rel=\"noreferrer\"><strong>PyCharm</strong></a>,) and others as standard python modules.\nI'll try and add additional checkers/related packages in the following list when and if I find them (or if suggested).</p>\n\n<p><strong><em>Checkers I know of</em></strong>:</p>\n\n<ul>\n<li><a href=\"http://mypy-lang.org/\" rel=\"noreferrer\"><strong>Mypy</strong></a>: as described here.</li>\n<li><a href=\"https://github.com/google/pytype\" rel=\"noreferrer\"><strong>PyType</strong></a>: By Google, uses different notation from what I gather, probably worth a look.</li>\n</ul>\n\n<p><strong><em>Related Packages/Projects</em></strong>:</p>\n\n<ul>\n<li><a href=\"https://github.com/python/typeshed/\" rel=\"noreferrer\"><strong>typeshed:</strong></a> Official Python repo housing an assortment of stub files for the standard library. </li>\n</ul>\n\n<p>The <code>typeshed</code> project is actually one of the best places you can look to see how type hinting might be used in a project of your own. Let's take as an example <a href=\"https://github.com/python/typeshed/blob/master/stdlib/3/collections.pyi#L78\" rel=\"noreferrer\">the <code>__init__</code> dunders of the <code>Counter</code> class</a> in the corresponding <code>.pyi</code> file: </p>\n\n<pre><code>class Counter(Dict[_T, int], Generic[_T]):\n        @overload\n        def __init__(self) -&gt; None: ...\n        @overload\n        def __init__(self, Mapping: Mapping[_T, int]) -&gt; None: ...\n        @overload\n        def __init__(self, iterable: Iterable[_T]) -&gt; None: ...\n</code></pre>\n\n<p><a href=\"http://mypy.readthedocs.org/en/latest/generics.html#defining-generic-classes\" rel=\"noreferrer\">Where <code>_T = TypeVar('_T')</code> is used to define generic classes</a>. For the <code>Counter</code> class we can see that it can either take no arguments in its initializer, get a single <code>Mapping</code> from any type to an <code>int</code> <em>or</em> take an <code>Iterable</code> of any type.  </p>\n\n<hr>\n\n<p><strong>Notice</strong>: One thing I forgot to mention was that the <code>typing</code> module has been introduced on a <em>provisional basis</em>. From <strong><a href=\"https://www.python.org/dev/peps/pep-0411/\" rel=\"noreferrer\">PEP 411</a></strong>:</p>\n\n<blockquote>\n  <p>A provisional package may have its API modified prior to \"graduating\" into a \"stable\" state. On one hand, this state provides the package with the benefits of being formally part of the Python distribution. On the other hand, the core development team explicitly states that no promises are made with regards to the the stability of the package's API, which may change for the next release. While it is considered an unlikely outcome, such packages may even be removed from the standard library without a deprecation period if the concerns regarding their API or maintenance prove well-founded.</p>\n</blockquote>\n\n<p>So take things here with a pinch of salt; I'm doubtfull it will be removed  or altered in significant ways but one can never know.</p>\n\n<hr>\n\n<p><sup>**</sup> Another topic altogether but valid in the scope of type-hints: <a href=\"https://docs.python.org/3.6/whatsnew/3.6.html#pep-526-syntax-for-variable-annotations\" rel=\"noreferrer\"><code>PEP 526</code>: Syntax for Variable Annotations</a> is an effort to replace <code># type</code> comments by introducing new syntax which allows users to annotate the type of variables in simple <code>varname: type</code> statements. </p>\n\n<p>See <em><a href=\"https://stackoverflow.com/questions/39971929/what-are-variable-annotations-in-python-3-6/39973133#39973133\">What are variable annotations in Python 3.6?</a></em>, as previously mentioned, for a small intro on these.</p>\n"
    },
    "371": {
        "question_id": "233673",
        "answer_id": "233835",
        "question": "<p>While I was investigating a problem I had with lexical closures in Javascript code, I came along this problem in Python:</p>\n\n<pre><code>flist = []\n\nfor i in xrange(3):\n    def func(x): return x * i\n    flist.append(func)\n\nfor f in flist:\n    print f(2)\n</code></pre>\n\n<p>Note that this example mindfully avoids <code>lambda</code>. It prints \"4 4 4\", which is surprising. I'd expect \"0 2 4\". </p>\n\n<p>This equivalent Perl code does it right:</p>\n\n<pre><code>my @flist = ();\n\nforeach my $i (0 .. 2)\n{\n    push(@flist, sub {$i * $_[0]});\n}\n\nforeach my $f (@flist)\n{\n    print $f-&gt;(2), \"\\n\";\n}\n</code></pre>\n\n<p>\"0 2 4\" is printed.</p>\n\n<p>Can you please explain the difference ?</p>\n\n<hr>\n\n<p>Update: </p>\n\n<p>The problem <strong>is not</strong> with <code>i</code> being global. This displays the same behavior:</p>\n\n<pre><code>flist = []\n\ndef outer():\n    for i in xrange(3):\n        def inner(x): return x * i\n        flist.append(inner)\n\nouter()\n#~ print i   # commented because it causes an error\n\nfor f in flist:\n    print f(2)\n</code></pre>\n\n<p>As the commented line shows, <code>i</code> is unknown at that point. Still, it prints \"4 4 4\".</p>\n",
        "answer": "<p>Python is actually behaving as defined. <b>Three separate functions</b> are created, but  they each have the <b>closure of the environment they're defined in</b> - in this case, the global environment (or the outer function's environment if the loop is placed inside another function). This is exactly the problem, though - in this environment, <b>i is mutated</b>, and the closures all <b>refer to the same i</b>.</p>\n\n<p>Here is the best solution I can come up with - create a function creater and invoke <i>that</i> instead. This will force <b>different environments</b> for each of the functions created, with a <b>different i</b> in each one.</p>\n\n<pre><code>flist = []\n\nfor i in xrange(3):\n    def funcC(j):\n        def func(x): return x * j\n        return func\n    flist.append(funcC(i))\n\nfor f in flist:\n    print f(2)\n</code></pre>\n\n<p>This is what happens when you mix side effects and functional programming. </p>\n"
    },
    "372": {
        "question_id": "7674790",
        "answer_id": "13790741",
        "question": "<p>I'm trying to build a one-file EXE with PyInstaller which is to include an image and an icon. I cannot for the life of me get it to work with <code>--onefile</code>.</p>\n\n<p>If I do <code>--onedir</code> it works all works very well.\nWhen I use <code>--onefile</code>, it can't find the referenced additional files (when running the compiled EXE). It finds the DLLs and everything else fine, just not the two images.</p>\n\n<p>I've looked in the temp-dir generated when running the EXE (<code>\\Temp\\_MEI95642\\</code> for example) and the files are indeed in there. When I drop the EXE in that temp-directory it finds them. Very perplexing.</p>\n\n<p>This is what I've added to the <code>.spec</code> file</p>\n\n<pre><code>a.datas += [('images/icon.ico', 'D:\\\\[workspace]\\\\App\\\\src\\\\images\\\\icon.ico',  'DATA'),\n('images/loaderani.gif','D:\\\\[workspace]\\\\App\\\\src\\\\images\\\\loaderani.gif','DATA')]     \n</code></pre>\n\n<p>I should add that I have tried not putting them in subfolders as well, didn't make a difference.</p>\n\n<p><strong>Edit:</strong> <em>Marked newer answer as correct due to PyInstaller update.</em></p>\n",
        "answer": "<p>Newer versions of PyInstaller do not set the <code>env</code> variable anymore, so Shish's excellent <a href=\"https://stackoverflow.com/a/7675014/525169\">answer</a> will not work. Now the path gets set as <code>sys._MEIPASS</code>:</p>\n\n<pre><code>def resource_path(relative_path):\n    \"\"\" Get absolute path to resource, works for dev and for PyInstaller \"\"\"\n    try:\n        # PyInstaller creates a temp folder and stores path in _MEIPASS\n        base_path = sys._MEIPASS\n    except Exception:\n        base_path = os.path.abspath(\".\")\n\n    return os.path.join(base_path, relative_path)\n</code></pre>\n"
    },
    "373": {
        "question_id": "5434891",
        "answer_id": "5434936",
        "question": "<p>I sometimes need to iterate a list in Python looking at the \"current\" element and the \"next\" element. I have, till now, done so with code like:</p>\n\n<pre><code>for current, next in zip(the_list, the_list[1:]):\n    # Do something\n</code></pre>\n\n<p>This works and does what I expect, but is there's a more idiomatic or efficient way to do the same thing?</p>\n",
        "answer": "<p>Here's a relevant example from the <a href=\"http://docs.python.org/library/itertools.html#recipes\" rel=\"noreferrer\">itertools</a> module docs:</p>\n\n<pre><code>import itertools\ndef pairwise(iterable):\n    \"s -&gt; (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = itertools.tee(iterable)\n    next(b, None)\n    return zip(a, b)   \n</code></pre>\n\n<p>For Python 2, you need <code>itertools.izip</code> instead of <code>zip</code>:</p>\n\n<pre><code>import itertools\ndef pairwise(iterable):\n    \"s -&gt; (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = itertools.tee(iterable)\n    next(b, None)\n    return itertools.izip(a, b)\n</code></pre>\n\n<p>How this works:</p>\n\n<p>First, two parallel iterators, <code>a</code> and <code>b</code> are created (the <code>tee()</code> call), both pointing to the first element of the original iterable. The second iterator, <code>b</code> is moved 1 step  forward (the <code>next(b, None)</code>) call). At this point <code>a</code> points to s0 and <code>b</code> points to s1. Both <code>a</code> and <code>b</code> can traverse the original iterator independently - the izip function takes the two iterators and makes pairs of the returned elements, advancing both iterators at the same pace.</p>\n\n<p>One caveat: the <code>tee()</code> function produces two iterators that can advance independently of each other, but it comes at a cost. If one of the iterators advances further than the other,  then <code>tee()</code>  needs to keep the consumed elements in memory until the second iterator comsumes them too (it cannot 'rewind' the original iterator). Here it doesn't matter because one iterator is only 1 step ahead of the other, but in general it's easy to use a lot of memory this way.</p>\n\n<p>And since <code>tee()</code> can take an <code>n</code> parameter, this can also be used for more than two parallel iterators:</p>\n\n<pre><code>def threes(iterator):\n    \"s -&gt; (s0,s1,s2), (s1,s2,s3), (s2, s3,4), ...\"\n    a, b, c = itertools.tee(iterator, 3)\n    next(b, None)\n    next(c, None)\n    next(c, None)\n    return zip(a, b, c)\n</code></pre>\n"
    },
    "374": {
        "question_id": "15526996",
        "answer_id": "15591007",
        "question": "<p>After installing the latest <a href=\"http://continuum.io/downloads.html\" rel=\"noreferrer\">Mac OSX 64-bit Anaconda Python distribution</a>, I keep getting a ValueError when trying to start the IPython Notebook.</p>\n\n<p>Starting ipython works fine:</p>\n\n<pre><code>3-millerc-~:ipython\nPython 2.7.3 |Anaconda 1.4.0 (x86_64)| (default, Feb 25 2013, 18:45:56) \nType \"copyright\", \"credits\" or \"license\" for more information.\n\nIPython 0.13.1 -- An enhanced Interactive Python.\n?         -&gt; Introduction and overview of IPython's features.\n%quickref -&gt; Quick reference.\nhelp      -&gt; Python's own help system.\nobject?   -&gt; Details about 'object', use 'object??' for extra details.\n</code></pre>\n\n<p>But starting ipython notebook:</p>\n\n<pre><code>4-millerc-~:ipython notebook\n</code></pre>\n\n<p>Results in the ValueError (with traceback):</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"/Users/millerc/anaconda/bin/ipython\", line 7, in &lt;module&gt;\n    launch_new_instance()\n  File \"/Users/millerc/anaconda/lib/python2.7/site-packages/IPython/frontend/terminal/ipapp.py\", line 388, in launch_new_instance\n    app.initialize()\n  File \"&lt;string&gt;\", line 2, in initialize\n  File \"/Users/millerc/anaconda/lib/python2.7/site-packages/IPython/config/application.py\", line 84, in catch_config_error\n    return method(app, *args, **kwargs)\n  File \"/Users/millerc/anaconda/lib/python2.7/site-packages/IPython/frontend/terminal/ipapp.py\", line 313, in initialize\n    super(TerminalIPythonApp, self).initialize(argv)\n  File \"&lt;string&gt;\", line 2, in initialize\n  File \"/Users/millerc/anaconda/lib/python2.7/site-packages/IPython/config/application.py\", line 84, in catch_config_error\n    return method(app, *args, **kwargs)\n  File \"/Users/millerc/anaconda/lib/python2.7/site-packages/IPython/core/application.py\", line 325, in initialize\n    self.parse_command_line(argv)\n  File \"/Users/millerc/anaconda/lib/python2.7/site-packages/IPython/frontend/terminal/ipapp.py\", line 308, in parse_command_line\n    return super(TerminalIPythonApp, self).parse_command_line(argv)\n  File \"&lt;string&gt;\", line 2, in parse_command_line\n  File \"/Users/millerc/anaconda/lib/python2.7/site-packages/IPython/config/application.py\", line 84, in catch_config_error\n    return method(app, *args, **kwargs)\n  File \"/Users/millerc/anaconda/lib/python2.7/site-packages/IPython/config/application.py\", line 420, in parse_command_line\n    return self.initialize_subcommand(subc, subargv)\n  File \"&lt;string&gt;\", line 2, in initialize_subcommand\n  File \"/Users/millerc/anaconda/lib/python2.7/site-packages/IPython/config/application.py\", line 84, in catch_config_error\n    return method(app, *args, **kwargs)\n  File \"/Users/millerc/anaconda/lib/python2.7/site-packages/IPython/config/application.py\", line 352, in initialize_subcommand\n    subapp = import_item(subapp)\n  File \"/Users/millerc/anaconda/lib/python2.7/site-packages/IPython/utils/importstring.py\", line 40, in import_item\n    module = __import__(package,fromlist=[obj])\n  File \"/Users/millerc/anaconda/lib/python2.7/site-packages/IPython/frontend/html/notebook/notebookapp.py\", line 46, in &lt;module&gt;\n    from .handlers import (LoginHandler, LogoutHandler,\n  File \"/Users/millerc/anaconda/lib/python2.7/site-packages/IPython/frontend/html/notebook/handlers.py\", line 36, in &lt;module&gt;\n    from docutils.core import publish_string\n  File \"/Users/millerc/anaconda/lib/python2.7/site-packages/docutils/core.py\", line 20, in &lt;module&gt;\n    from docutils import frontend, io, utils, readers, writers\n  File \"/Users/millerc/anaconda/lib/python2.7/site-packages/docutils/frontend.py\", line 41, in &lt;module&gt;\n    import docutils.utils\n  File \"/Users/millerc/anaconda/lib/python2.7/site-packages/docutils/utils/__init__.py\", line 20, in &lt;module&gt;\n    from docutils.io import FileOutput\n  File \"/Users/millerc/anaconda/lib/python2.7/site-packages/docutils/io.py\", line 18, in &lt;module&gt;\n    from docutils.utils.error_reporting import locale_encoding, ErrorString, ErrorOutput\n  File \"/Users/millerc/anaconda/lib/python2.7/site-packages/docutils/utils/error_reporting.py\", line 47, in &lt;module&gt;\n    locale_encoding = locale.getlocale()[1] or locale.getdefaultlocale()[1]\n  File \"/Users/millerc/anaconda/lib/python2.7/locale.py\", line 503, in getdefaultlocale\n    return _parse_localename(localename)\n  File \"/Users/millerc/anaconda/lib/python2.7/locale.py\", line 435, in _parse_localename\n    raise ValueError, 'unknown locale: %s' % localename\nValueError: unknown locale: UTF-8\n</code></pre>\n\n<p>Running the <code>locale</code> command from the terminal:</p>\n\n<pre><code>5-millerc-~:locale \nLANG=\nLC_COLLATE=\"C\"\nLC_CTYPE=\"UTF-8\"\nLC_MESSAGES=\"C\"\nLC_MONETARY=\"C\"\nLC_NUMERIC=\"C\"\nLC_TIME=\"C\"\nLC_ALL=\n</code></pre>\n",
        "answer": "<p>I summarize here the solution to be found on: <a href=\"http://blog.lobraun.de/2009/04/11/mercurial-on-mac-os-x-valueerror-unknown-locale-utf-8/\">http://blog.lobraun.de/2009/04/11/mercurial-on-mac-os-x-valueerror-unknown-locale-utf-8/</a> </p>\n\n<p>I added these lines to my <code>.bash_profile</code>:</p>\n\n<pre><code>export LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\n</code></pre>\n\n<p>I reloaded the profile:</p>\n\n<pre><code>source ~/.bash_profile\n</code></pre>\n\n<p>I then ran <code>ipython</code> again:</p>\n\n<pre><code>ipython notebook\n</code></pre>\n\n<h2>Changing locales</h2>\n\n<p>The above will work for the English language in a US locale. One may want different settings.</p>\n\n<p>At the risk of stating the obvious, to discover the current settings for your system, use:</p>\n\n<pre><code>$ locale\n</code></pre>\n\n<p>And to retrieve a list of all valid settings on your system:</p>\n\n<pre><code>$ locale -a\n</code></pre>\n\n<p>Then choose your preferred locale. For example, for a Swiss French locale, the solution would look like this:</p>\n\n<pre><code>export LC_ALL=fr_CH.UTF-8\nexport LANG=fr_CH.UTF-8\n</code></pre>\n"
    },
    "375": {
        "question_id": "5997027",
        "answer_id": "5997058",
        "question": "<p>I don't know if this is an obvious bug, but while running a Python script for varying the parameters of a simulation, I realized the results with delta = 0.29 and delta = 0.58 were missing. On investigation, I noticed that the following Python code:</p>\n\n<pre><code>for i_delta in range(0, 101, 1):\n  delta = float(i_delta) / 100\n\n  (...)\n\nfilename = 'foo' + str(int(delta * 100)) + '.dat'\n</code></pre>\n\n<p>generated identical files for delta = 0.28 and 0.29, same with .57 and .58, the reason being that python returns float(29)/100 as 0.28999999999999998. But that isn't a systematic error, not in the sense it happens to every integer. So I created the following Python script:</p>\n\n<pre><code>import sys\n\nn = int(sys.argv[1])\n\nfor i in range(0, n + 1):\n  a = int(100 * (float(i) / 100))\n  if i != a: print i, a\n</code></pre>\n\n<p>And I can't see any pattern in the numbers for which this rounding error happens. Why does this happen with those particular numbers?</p>\n",
        "answer": "<p>Any number that can't be built from exact powers of two can't be represented exactly as a floating point number; it needs to be approximated. Sometimes the closest approximation will be less than the actual number.</p>\n\n<p>Read <a href=\"http://download.oracle.com/docs/cd/E19957-01/806-3568/ncg_goldberg.html\" rel=\"noreferrer\">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a>.</p>\n"
    },
    "376": {
        "question_id": "3462143",
        "answer_id": "3462160",
        "question": "<p>I have two lists in Python, like these:</p>\n\n<pre><code>temp1 = ['One', 'Two', 'Three', 'Four']\ntemp2 = ['One', 'Two']\n</code></pre>\n\n<p>I need to create a third list with items from the first list which aren't present in the second one. From the example I have to get:</p>\n\n<pre><code>temp3 = ['Three', 'Four']\n</code></pre>\n\n<p>Are there any fast ways without cycles and checking?</p>\n",
        "answer": "<pre><code>In [5]: list(set(temp1) - set(temp2))\nOut[5]: ['Four', 'Three']\n</code></pre>\n\n<p>Beware that </p>\n\n<pre><code>In [5]: set([1, 2]) - set([2, 3])\nOut[5]: set([1]) \n</code></pre>\n\n<p>where you might expect/want it to equal <code>set([1, 3])</code>. If you do want <code>set([1, 3])</code> as your answer, you'll need to use <code>set([1, 2]).symmetric_difference(set([2, 3]))</code>.</p>\n"
    },
    "377": {
        "question_id": "18337407",
        "answer_id": "18337754",
        "question": "<p>sample code:</p>\n\n<pre><code>&gt;&gt;&gt; import json\n&gt;&gt;&gt; json_string = json.dumps(\"\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4\")\n&gt;&gt;&gt; print json_string\n\"\\u05d1\\u05e8\\u05d9 \\u05e6\\u05e7\\u05dc\\u05d4\"\n</code></pre>\n\n<p>The problem: it's not human readable. My (smart) users want to verify or even edit text files with JSON dumps. (and i'd rather not use XML)</p>\n\n<p>Is there a way to serialize objects into utf-8 json string (instead of  \\uXXXX ) ?</p>\n\n<p>this doesn't help:</p>\n\n<pre><code>&gt;&gt;&gt; output = json_string.decode('string-escape')\n\"\\u05d1\\u05e8\\u05d9 \\u05e6\\u05e7\\u05dc\\u05d4\"\n</code></pre>\n\n<p>this <strong>works, but</strong> if any sub-objects is a python-unicode and not utf-8, it'll dump garbage:</p>\n\n<pre><code>&gt;&gt;&gt; #### ok:\n&gt;&gt;&gt; s= json.dumps( \"\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4\", ensure_ascii=False)    \n&gt;&gt;&gt; print json.loads(s)   \n\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4\n\n&gt;&gt;&gt; #### NOT ok:\n&gt;&gt;&gt; d={ 1: \"\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4\", 2: u\"\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4\" }\n&gt;&gt;&gt; print d\n{1: '\\xd7\\x91\\xd7\\xa8\\xd7\\x99 \\xd7\\xa6\\xd7\\xa7\\xd7\\x9c\\xd7\\x94', \n 2: u'\\xd7\\x91\\xd7\\xa8\\xd7\\x99 \\xd7\\xa6\\xd7\\xa7\\xd7\\x9c\\xd7\\x94'}\n&gt;&gt;&gt; s = json.dumps( d, ensure_ascii=False, encoding='utf8')\n&gt;&gt;&gt; print json.loads(s)['1']\n\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4\n&gt;&gt;&gt; print json.loads(s)['2']\n\u00d7\u00d7\u00a8\u00d7 \u00d7\u00a6\u00d7\u00a7\u00d7\u00d7\n</code></pre>\n",
        "answer": "<p>Use the <code>ensure_ascii=False</code> switch to <code>json.dumps()</code>, then encode the value to UTF-8 manually:</p>\n\n<pre><code>&gt;&gt;&gt; json_string = json.dumps(u\"\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4\", ensure_ascii=False).encode('utf8')\n&gt;&gt;&gt; json_string\n'\"\\xd7\\x91\\xd7\\xa8\\xd7\\x99 \\xd7\\xa6\\xd7\\xa7\\xd7\\x9c\\xd7\\x94\"'\n&gt;&gt;&gt; print json_string\n\"\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4\"\n</code></pre>\n\n<p>If you are writing this to a file, you can use <a href=\"https://docs.python.org/2/library/io.html#io.open\"><code>io.open()</code></a> instead of <code>open()</code> to produce a file object that encodes Unicode values for you as you write, then use <code>json.dump()</code> instead to write to that file:</p>\n\n<pre><code>with io.open('filename', 'w', encoding='utf8') as json_file:\n    json.dump(u\"\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4\", json_file, ensure_ascii=False)\n</code></pre>\n\n<p>In Python 3, the built-in <code>open()</code> is an alias for <code>io.open()</code>. Do note that there is a <a href=\"http://bugs.python.org/issue13769\">bug in the <code>json</code> module</a> where the <code>ensure_ascii=False</code> flag can produce a <em>mix</em> of <code>unicode</code> and <code>str</code> objects. The workaround for Python 2 then is:</p>\n\n<pre><code>with io.open('filename', 'w', encoding='utf8') as json_file:\n    data = json.dumps(u\"\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4\", ensure_ascii=False)\n    # unicode(data) auto-decodes data to unicode if str\n    json_file.write(unicode(data))\n</code></pre>\n\n<p>If you are passing in byte strings (type <code>str</code> in Python 2, <code>bytes</code> in Python 3) encoded to UTF-8, make sure to also set the <code>encoding</code> keyword:</p>\n\n<pre><code>&gt;&gt;&gt; d={ 1: \"\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4\", 2: u\"\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4\" }\n&gt;&gt;&gt; d\n{1: '\\xd7\\x91\\xd7\\xa8\\xd7\\x99 \\xd7\\xa6\\xd7\\xa7\\xd7\\x9c\\xd7\\x94', 2: u'\\u05d1\\u05e8\\u05d9 \\u05e6\\u05e7\\u05dc\\u05d4'}\n\n&gt;&gt;&gt; s=json.dumps(d, ensure_ascii=False, encoding='utf8')\n&gt;&gt;&gt; s\nu'{\"1\": \"\\u05d1\\u05e8\\u05d9 \\u05e6\\u05e7\\u05dc\\u05d4\", \"2\": \"\\u05d1\\u05e8\\u05d9 \\u05e6\\u05e7\\u05dc\\u05d4\"}'\n&gt;&gt;&gt; json.loads(s)['1']\nu'\\u05d1\\u05e8\\u05d9 \\u05e6\\u05e7\\u05dc\\u05d4'\n&gt;&gt;&gt; json.loads(s)['2']\nu'\\u05d1\\u05e8\\u05d9 \\u05e6\\u05e7\\u05dc\\u05d4'\n&gt;&gt;&gt; print json.loads(s)['1']\n\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4\n&gt;&gt;&gt; print json.loads(s)['2']\n\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4\n</code></pre>\n\n<p>Note that <strong>your</strong> second sample is <strong>not</strong> valid Unicode; you gave it UTF-8 bytes as a unicode literal, that would <em>never</em> work:</p>\n\n<pre><code>&gt;&gt;&gt; s = u'\\xd7\\x91\\xd7\\xa8\\xd7\\x99 \\xd7\\xa6\\xd7\\xa7\\xd7\\x9c\\xd7\\x94'\n&gt;&gt;&gt; print s\n\u00d7\u00d7\u00a8\u00d7 \u00d7\u00a6\u00d7\u00a7\u00d7\u00d7\n&gt;&gt;&gt; print s.encode('latin1').decode('utf8')\n\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4\n</code></pre>\n\n<p>Only when I encoded that string to Latin 1 (whose unicode codepoints map one-to-one to bytes) then decode as UTF-8 do you see the expected output. That has nothing to do with JSON and everything to do with that you use the wrong input. The result is called a <a href=\"http://en.wikipedia.org/wiki/Mojibake\">Mojibake</a>.</p>\n\n<p>If you got that Unicode value from a string literal, it was decoded using the wrong codec. It could be your terminal is mis-configured, or that your text editor saved your source code using a different codec than what you told Python to read the file with. Or you sourced it from a library that applied the wrong codec. <strong>This all has nothing to do with the JSON library</strong>.</p>\n"
    },
    "378": {
        "question_id": "13883277",
        "answer_id": "22269678",
        "question": "<p>Is it possible to use Stanford Parser in NLTK? (I am not talking about Stanford POS.)</p>\n",
        "answer": "<p>Note that this answer applies to NLTK v 3.0, and not to more recent versions.</p>\n\n<p>Sure, try the following in Python:</p>\n\n<pre><code>import os\nfrom nltk.parse import stanford\nos.environ['STANFORD_PARSER'] = '/path/to/standford/jars'\nos.environ['STANFORD_MODELS'] = '/path/to/standford/jars'\n\nparser = stanford.StanfordParser(model_path=\"/location/of/the/englishPCFG.ser.gz\")\nsentences = parser.raw_parse_sents((\"Hello, My name is Melroy.\", \"What is your name?\"))\nprint sentences\n\n# GUI\nfor line in sentences:\n    for sentence in line:\n        sentence.draw()\n</code></pre>\n\n<p>Output:</p>\n\n<blockquote>\n  <p>[Tree('ROOT', [Tree('S', [Tree('INTJ', [Tree('UH', ['Hello'])]),\n  Tree(',', [',']), Tree('NP', [Tree('PRP$', ['My']), Tree('NN',\n  ['name'])]), Tree('VP', [Tree('VBZ', ['is']), Tree('ADJP', [Tree('JJ',\n  ['Melroy'])])]), Tree('.', ['.'])])]), Tree('ROOT', [Tree('SBARQ',\n  [Tree('WHNP', [Tree('WP', ['What'])]), Tree('SQ', [Tree('VBZ',\n  ['is']), Tree('NP', [Tree('PRP$', ['your']), Tree('NN', ['name'])])]),\n  Tree('.', ['?'])])])]</p>\n</blockquote>\n\n<p><strong>Note 1:</strong>\nIn this example both the parser &amp; model jars are in the same folder.</p>\n\n<p><strong>Note 2:</strong></p>\n\n<ul>\n<li>File name of stanford parser is: stanford-parser.jar </li>\n<li>File name of stanford models is: stanford-parser-x.x.x-models.jar</li>\n</ul>\n\n<p><strong>Note 3:</strong>\nThe englishPCFG.ser.gz file can be found <strong><em>inside</em></strong> the models.jar file (/edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz). Please use come archive manager to 'unzip' the models.jar file.</p>\n\n<p><strong>Note 4:</strong>\nBe sure you are using Java JRE (Runtime Environment) <strong>1.8</strong> also known as Oracle JDK 8. Otherwise you will get: Unsupported major.minor version 52.0.</p>\n\n<h1>Installation</h1>\n\n<ol>\n<li><p>Download NLTK v3 from: <a href=\"https://github.com/nltk/nltk\" rel=\"noreferrer\">https://github.com/nltk/nltk</a>. And install NLTK:</p>\n\n<p>sudo python setup.py install</p></li>\n<li><p>You can use the NLTK downloader to get Stanford Parser, using Python:</p>\n\n<pre><code>import nltk\nnltk.download()\n</code></pre></li>\n<li><p>Try my example! (don't forget the change the jar paths and change the model path to the ser.gz location)</p></li>\n</ol>\n\n<p><strong>OR:</strong></p>\n\n<ol>\n<li><p>Download and install NLTK v3, same as above.</p></li>\n<li><p>Download the latest version from (<strong>current version</strong> filename is stanford-parser-full-2015-01-29.zip):\n<a href=\"http://nlp.stanford.edu/software/lex-parser.shtml#Download\" rel=\"noreferrer\">http://nlp.stanford.edu/software/lex-parser.shtml#Download</a></p></li>\n<li><p>Extract the standford-parser-full-20xx-xx-xx.zip. </p></li>\n<li><p>Create a new folder ('jars' in my example). Place the extracted files into this jar folder:  stanford-parser-3.x.x-models.jar and stanford-parser.jar.</p>\n\n<p>As shown above you can use the environment variables (STANFORD_PARSER &amp; STANFORD_MODELS) to point to this 'jars' folder. I'm using Linux, so if you use Windows please use something like: C://folder//jars.</p></li>\n<li><p>Open the stanford-parser-3.x.x-models.jar using an Archive manager (7zip).</p></li>\n<li><p>Browse inside the jar file; edu/stanford/nlp/models/lexparser. Again, extract the file called 'englishPCFG.ser.gz'. Remember the location where you extract this ser.gz file.</p></li>\n<li><p>When creating a StanfordParser instance, you can provide the model path as parameter. This is the complete path to the model, in our case /location/of/englishPCFG.ser.gz.</p></li>\n<li><p>Try my example! (don't forget the change the jar paths and change the model path to the ser.gz location)</p></li>\n</ol>\n"
    },
    "379": {
        "question_id": "919680",
        "answer_id": "919684",
        "question": "<p>In a similar way to using varargs in C or C++:</p>\n\n<pre><code>fn(a, b)\nfn(a, b, c, d, ...)\n</code></pre>\n",
        "answer": "<p>Yes.</p>\n\n<p>This is simple and works if you disregard keyword arguments:</p>\n\n<pre><code>def manyArgs(*arg):\n  print \"I was called with\", len(arg), \"arguments:\", arg\n\n&gt;&gt;&gt; manyArgs(1)\nI was called with 1 arguments: (1,)\n&gt;&gt;&gt; manyArgs(1, 2,3)\nI was called with 3 arguments: (1, 2, 3)\n</code></pre>\n\n<p>As you can see, Python will give you a single tuple with all the arguments.</p>\n\n<p>For keyword arguments you need to accept those as a separate actual argument, as shown in <a href=\"https://stackoverflow.com/a/919720/28169\">Skurmedel's answer</a>.</p>\n"
    },
    "380": {
        "question_id": "775296",
        "answer_id": "775399",
        "question": "<p>I am having a hard time using the MySQLdb module to insert information into my database.  I need to insert 6 variables into the table.  </p>\n\n<pre><code>cursor.execute (\"\"\"\n    INSERT INTO Songs (SongName, SongArtist, SongAlbum, SongGenre, SongLength, SongLocation)\n    VALUES\n        (var1, var2, var3, var4, var5, var6)\n\n\"\"\")\n</code></pre>\n\n<p>Can someone help me with the syntax here?</p>\n",
        "answer": "<p>Beware of using string interpolation for SQL queries, since it won't escape the input parameters correctly and will leave your application open to SQL injection vulnerabilities. <strong>The difference might seem trivial, but in reality it's huge</strong>.</p>\n\n<h3>Incorrect (with security issues)</h3>\n\n<pre><code>c.execute(\"SELECT * FROM foo WHERE bar = %s AND baz = %s\" % (param1, param2))\n</code></pre>\n\n<h3>Correct (with escaping)</h3>\n\n<pre><code>c.execute(\"SELECT * FROM foo WHERE bar = %s AND baz = %s\", (param1, param2))\n</code></pre>\n\n<p>It adds to the confusion that the modifiers used to bind parameters in a SQL statement varies between different DB API implementations and that the mysql client library uses <code>printf</code> style syntax instead of the more commonly accepted '?' marker (used by eg. <code>python-sqlite</code>).</p>\n"
    },
    "381": {
        "question_id": "4937491",
        "answer_id": "4937526",
        "question": "<p>I am trying to create a matrix transpose function for python but I can't seem to make it work.\nSay I have </p>\n\n<pre><code>theArray = [['a','b','c'],['d','e','f'],['g','h','i']]\n</code></pre>\n\n<p>and I want my function to come up with</p>\n\n<pre><code>newArray = [['a','d','g'],['b','e','h'],['c', 'f', 'i']]\n</code></pre>\n\n<p>So in other words, if I were to print this 2D array as columns and rows I would like the rows to turn into columns and columns into rows.</p>\n\n<p>I made this so far but it doesn't work</p>\n\n<pre><code>def matrixTranspose(anArray):\n    transposed = [None]*len(anArray[0])\n    for t in range(len(anArray)):\n        for tt in range(len(anArray[t])):\n            transposed[t] = [None]*len(anArray)\n            transposed[t][tt] = anArray[tt][t]\n    print transposed\n</code></pre>\n",
        "answer": "<p>Python 2:</p>\n\n<pre><code>&gt;&gt;&gt; theArray = [['a','b','c'],['d','e','f'],['g','h','i']]\n&gt;&gt;&gt; zip(*theArray)\n[('a', 'd', 'g'), ('b', 'e', 'h'), ('c', 'f', 'i')]\n</code></pre>\n\n<p>Python 3:</p>\n\n<pre><code>&gt;&gt;&gt; [*zip(*theArray)]\n[('a', 'd', 'g'), ('b', 'e', 'h'), ('c', 'f', 'i')]\n</code></pre>\n"
    },
    "382": {
        "question_id": "10062954",
        "answer_id": "10063039",
        "question": "<p>I just discovered a logical bug in my code which was causing all sorts of problems. I was inadvertently doing a <strong>bitwise AND</strong> instead of a <strong>logical AND</strong>.</p>\n\n<p>I changed the code from:</p>\n\n<pre><code>r = mlab.csv2rec(datafile, delimiter=',', names=COL_HEADERS)\nmask = ((r[\"dt\"] &gt;= startdate) &amp; (r[\"dt\"] &lt;= enddate))\nselected = r[mask]\n</code></pre>\n\n<p>TO:</p>\n\n<pre><code>r = mlab.csv2rec(datafile, delimiter=',', names=COL_HEADERS)\nmask = ((r[\"dt\"] &gt;= startdate) and (r[\"dt\"] &lt;= enddate))\nselected = r[mask]\n</code></pre>\n\n<p>To my surprise, I got the rather cryptic error message:</p>\n\n<blockquote>\n  <p>ValueError: The truth value of an array with more than one element is\n  ambiguous. Use a.any() or a.all()</p>\n</blockquote>\n\n<p>Why was a similar error not emitted when I use a bitwise operation - and how do I fix this?</p>\n",
        "answer": "<p><code>r</code> is a numpy (rec)array. So <code>r[\"dt\"] &gt;= startdate</code> is also a (boolean)\narray. For numpy arrays the <code>&amp;</code> operation returns the elementwise-and of the two\nboolean arrays.</p>\n\n<p>The NumPy developers felt there was no one commonly understood way to evaluate\nan array in boolean context: it could mean <code>True</code> if <em>any</em> element is\n<code>True</code>, or it could mean <code>True</code> if <em>all</em> elements are <code>True</code>, or <code>True</code> if the array has non-zero length, just to name three possibilities.</p>\n\n<p>Since different users might have different needs and different assumptions, the\nNumPy developers refused to guess and instead decided to raise a ValueError\nwhenever one tries to evaluate an array in boolean context. Applying <code>and</code> to\ntwo numpy arrays causes the two arrays to be evaluated in boolean context (by\ncalling <code>__bool__</code> in Python3 or <code>__nonzero__</code> in Python2).</p>\n\n<p>Your original code </p>\n\n<pre><code>mask = ((r[\"dt\"] &gt;= startdate) &amp; (r[\"dt\"] &lt;= enddate))\nselected = r[mask]\n</code></pre>\n\n<p>looks correct. However, if you do want <code>and</code>, then instead of <code>a and b</code> use <code>(a-b).any()</code> or <code>(a-b).all()</code>.</p>\n"
    },
    "383": {
        "question_id": "7053652",
        "answer_id": "7053664",
        "question": "<p>I just learned (am learning) how function parameters work in Python, and I started experimenting with it for no apparent reason, when this:</p>\n\n<pre><code>def jiskya(x, y):\n    if x &gt; y:\n        print y\n    else:\n        print x\n\nprint(jiskya(2, 3))\n</code></pre>\n\n<p>gave the ouput:</p>\n\n<pre><code>&gt;&gt;&gt;\n2\nNone\n</code></pre>\n\n<p>Where did the <code>None</code> come from? And what is it?</p>\n",
        "answer": "<p>It's the return value of the function, which you print out. If there is no return statement (or <a href=\"http://docs.python.org/reference/simple_stmts.html#return\" rel=\"noreferrer\">just a <code>return</code> without an argument</a>), an implicit <code>return None</code> is added to the end of a function.</p>\n\n<p>You probably want to return the values in the function instead of printing them:</p>\n\n<pre><code>def jiskya(x, y):\n    if x &gt; y:\n        return y\n    else:\n        return x\n\nprint(jiskya(2, 3))\n</code></pre>\n"
    },
    "384": {
        "question_id": "3402168",
        "answer_id": "3402193",
        "question": "<p>Whenever I use <code>sys.path.append</code>, the new directory will be added. However, once I close python, the list will revert to the previous (default?) values. How do I permanently add a directory to <code>PYTHONPATH</code>?</p>\n",
        "answer": "<p>You need to add your new directory to the environment variable <code>PYTHONPATH</code>, separated by a colon from previous contents thereof.  In any form of Unix, you can do that in a startup script appropriate to whatever shell you're using (<code>.profile</code> or whatever, depending on your favorite shell) with a command which, again, depends on the shell in question; in Windows, you can do it through the system GUI for the purpose.</p>\n\n<p><code>superuser.com</code> may be a better place to ask further, i.e. for more details if you need specifics about how to enrich an environment variable in your chosen platform and shell, since it's not really a programming question per se.</p>\n"
    },
    "385": {
        "question_id": "6587507",
        "answer_id": "6587528",
        "question": "<p>I want to install <a href=\"http://pypi.python.org/pypi/pip\" rel=\"noreferrer\">pip</a>. It should support Python 3, but it requires setuptools, which is available only for Python 2.</p>\n\n<p>How can I install pip with Python 3?</p>\n",
        "answer": "<p>edit: Manual installation and use of <code>setuptools</code> is not the standard process anymore.</p>\n\n<h2>If you're running Python 2.7.9+ or Python 3.4+</h2>\n\n<p>Congrats, you <em>should</em> already have <code>pip</code> installed. If you do not, read onward.</p>\n\n<h2>If you're running a Unix-like System</h2>\n\n<p>You can usually install the package for <code>pip</code> through your package manager if your version of Python is older than 2.7.9 or 3.4, or if your system did not include it for whatever reason.</p>\n\n<p>Instructions for some of the more common distros follow.</p>\n\n<h3>Installing on Debian (Wheezy and newer) and Ubuntu (Trusty Tahr and newer) for Python 2.x</h3>\n\n<p>Run the following command from a terminal:</p>\n\n<pre><code>sudo apt-get install python-pip \n</code></pre>\n\n<h3>Installing on Debian (Wheezy and newer) and Ubuntu (Trusty Tahr and newer) for Python 3.x</h3>\n\n<p>Run the following command from a terminal:</p>\n\n<pre><code>sudo apt-get install python3-pip\n</code></pre>\n\n<strong>Note:</strong>\n\n<p>On a fresh Debian/Ubuntu install, the package may not be found until you do:</p>\n\n<pre><code>sudo apt-get update\n</code></pre>\n\n<h3>Installing <code>pip</code> on CentOS 7 for Python 2.x</h3>\n\n<p>On CentOS 7, you have to install setup tools first, and then use that to install <code>pip</code>, as there is no direct package for it.</p>\n\n<pre><code>sudo yum install python-setuptools\nsudo easy_install pip\n</code></pre>\n\n<h3>Installing <code>pip</code> on CentOS 7 for Python 3.x</h3>\n\n<p>Assuming you installed Python 3.4 <a href=\"https://fedoraproject.org/wiki/EPEL\" rel=\"noreferrer\">from EPEL</a>, you can install Python 3's setup tools and use it to install <code>pip</code>.</p>\n\n<pre><code># First command requires you to have enabled EPEL for CentOS7\nsudo yum install python34-setuptools\nsudo easy_install pip\n</code></pre>\n\n<h3>If your Unix/Linux distro doesn't have it in package repos</h3>\n\n<p>Install using the manual way detailed below.</p>\n\n<h2>The manual way</h2>\n\n<p>If you want to do it the manual way, the now-recommended method is to install using the <code>get-pip.py</code> script from <a href=\"https://pip.pypa.io/en/stable/installing.html\" rel=\"noreferrer\"><code>pip</code>'s installation instructions</a>.</p>\n\n<blockquote>\n  <p>Install pip</p>\n  \n  <p>To install pip, securely download <a href=\"https://bootstrap.pypa.io/get-pip.py\" rel=\"noreferrer\"><code>get-pip.py</code></a></p>\n  \n  <p>Then run the following (which may require administrator access):</p>\n\n<pre><code>python get-pip.py \n</code></pre>\n  \n  <p>If <code>setuptools</code> is not already installed, <code>get-pip.py</code> will install setuptools for you.</p>\n</blockquote>\n"
    },
    "386": {
        "question_id": "3249524",
        "answer_id": "3249539",
        "question": "<p>I would like to make several statements that give standard output without seeing newlines in between statements.</p>\n\n<p>Specifically, suppose I have:</p>\n\n<pre><code>for item in range(1,100):\n    print item\n</code></pre>\n\n<p>The result is:</p>\n\n<pre><code>1\n2\n3\n4\n.\n.\n.\n</code></pre>\n\n<p>How get this to instead look like:</p>\n\n<pre><code>1 2 3 4 5 ...\n</code></pre>\n\n<p>Even better, is it possible to print the single number <em>over</em> the last number, so only one number is on the screen at a time?</p>\n",
        "answer": "<p>Change <code>print item</code> to:</p>\n\n<ul>\n<li><code>print item,</code> in Python 2.7</li>\n<li><code>print(item, end=\" \")</code> in Python 3</li>\n</ul>\n\n<p>If you want to print the data dynamically use following syntax:</p>\n\n<ul>\n<li><code>print(item, sep=' ', end='', flush=True)</code> in Python 3</li>\n</ul>\n"
    },
    "387": {
        "question_id": "8949252",
        "answer_id": "8949265",
        "question": "<p>I keep getting an error that says</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>AttributeError: 'NoneType' object has no attribute 'something'\n</code></pre>\n\n<p>The code I have is too long to post here. What general scenarios would cause this <code>AttributeError</code>, what is <code>NoneType</code> supposed to mean and how can I narrow down what's going on?</p>\n",
        "answer": "<p>NoneType means that instead of an instance of whatever Class or Object you think you're working with, you've actually got <code>None</code>.  That usually means that an assignment or function call up above failed or returned an unexpected result.</p>\n"
    },
    "388": {
        "question_id": "4663306",
        "answer_id": "28165771",
        "question": "<p>I tried to use <code>raw_input()</code> to get a list of numbers, however with the code</p>\n\n<pre><code>numbers = raw_input()\nprint len(numbers)\n</code></pre>\n\n<p>the input <code>[1,2,3]</code> gives a result of <code>7</code>, so I guess it interprets the input as if it were a string. Is there any direct way to make a list out of it? Maybe I could use <code>re.findall</code> to extract the integers, but if possible, I would prefer to use a more Pythonic solution.</p>\n",
        "answer": "<p>In Python 3.x, use this.</p>\n\n<pre><code>a = [int(x) for x in input().split()]\n</code></pre>\n\n<h2>Example</h2>\n\n<pre><code>&gt;&gt;&gt; a = [int(x) for x in input().split()]\n3 4 5\n&gt;&gt;&gt; a\n[3, 4, 5]\n&gt;&gt;&gt; \n</code></pre>\n"
    },
    "389": {
        "question_id": "4806911",
        "answer_id": "4806946",
        "question": "<p>I'm wondering how Python does string comparison, more specifically how it determines the outcome when a less than (<code>&lt;</code>) or greater than (<code>&gt;</code>) operator is used.</p>\n\n<p>For instance if I put <code>print('abc' &lt; 'bac')</code> I get <code>True</code>. I understand that it compares corresponding characters in the string, however its unclear as to why there is more, for lack of a better term, \"weight\" placed on the fact that a is less than b (first position) in first string rather than the fact that a is less than b in the second string (second position).</p>\n",
        "answer": "<p>From the <a href=\"http://docs.python.org/tutorial/datastructures.html#comparing-sequences-and-other-types\" rel=\"noreferrer\">docs</a>:</p>\n\n<blockquote>\n  <p>The comparison uses lexicographical\n  ordering: first the first two items\n  are compared, and if they differ this\n  determines the outcome of the\n  comparison; if they are equal, the\n  next two items are compared, and so\n  on, until either sequence is\n  exhausted.</p>\n</blockquote>\n\n<p>Also:</p>\n\n<blockquote>\n  <p>Lexicographical ordering for strings uses the Unicode code point number to order individual characters.</p>\n</blockquote>\n\n<p>or on <a href=\"https://docs.python.org/2/tutorial/datastructures.html#comparing-sequences-and-other-types\" rel=\"noreferrer\">Python 2</a>:</p>\n\n<blockquote>\n  <p>Lexicographical ordering for strings uses the ASCII ordering for individual characters.</p>\n</blockquote>\n\n<p>As an example:</p>\n\n<pre><code>&gt;&gt;&gt; 'abc' &gt; 'bac'\nFalse\n&gt;&gt;&gt; ord('a'), ord('b')\n(97, 98)\n</code></pre>\n\n<p>The result <code>False</code> is returned as soon as <code>a</code> is found to be less than <code>b</code>. The further items are not compared (as you can see for the second items: <code>b</code> > <code>a</code> is <code>True</code>).</p>\n\n<p>Be aware of lower and uppercase:</p>\n\n<pre><code>&gt;&gt;&gt; [(x, ord(x)) for x in abc]\n[('a', 97), ('b', 98), ('c', 99), ('d', 100), ('e', 101), ('f', 102), ('g', 103), ('h', 104), ('i', 105), ('j', 106), ('k', 107), ('l', 108), ('m', 109), ('n', 110), ('o', 111), ('p', 112), ('q', 113), ('r', 114), ('s', 115), ('t', 116), ('u', 117), ('v', 118), ('w', 119), ('x', 120), ('y', 121), ('z', 122)]\n&gt;&gt;&gt; [(x, ord(x)) for x in abc.upper()]\n[('A', 65), ('B', 66), ('C', 67), ('D', 68), ('E', 69), ('F', 70), ('G', 71), ('H', 72), ('I', 73), ('J', 74), ('K', 75), ('L', 76), ('M', 77), ('N', 78), ('O', 79), ('P', 80), ('Q', 81), ('R', 82), ('S', 83), ('T', 84), ('U', 85), ('V', 86), ('W', 87), ('X', 88), ('Y', 89), ('Z', 90)]\n</code></pre>\n"
    },
    "390": {
        "question_id": "15863066",
        "answer_id": "15863102",
        "question": "<p>I'm having trouble finding the correct regular expression for the scenario below:</p>\n\n<p>Lets say:</p>\n\n<pre><code>a = \"this is a sample\"\n</code></pre>\n\n<p>I want to match whole word - for example match <code>\"hi\"</code> should return False since <code>\"hi\"</code> is not a word and <code>\"is\"</code> should return True since there is no alpha character on the left and on the right side.</p>\n",
        "answer": "<p>Try</p>\n\n<pre><code>re.search(r'\\bis\\b', your_string)\n</code></pre>\n\n<p>From <a href=\"http://docs.python.org/2/library/re.html\" rel=\"noreferrer\">the docs</a>:</p>\n\n<blockquote>\n  <p>\\b Matches the empty string, but only at the beginning or end of a word. </p>\n</blockquote>\n\n<p>Note that the <code>re</code> module uses a naive definition of \"word\" as a \"sequence of alphanumeric or underscore characters\", where \"alphanumeric\" depends on locale or unicode options.</p>\n\n<p>Also note that without the raw string prefix, <code>\\b</code> is seen as \"backspace\" instead of regex word boundary.</p>\n"
    },
    "391": {
        "question_id": "273192",
        "answer_id": "273227",
        "question": "<p>What is the most elegant way to check if the directory a file is going to be written to exists, and if not, create the directory using Python? Here is what I tried:</p>\n\n<pre><code>import os\n\nfile_path = \"/my/directory/filename.txt\"\ndirectory = os.path.dirname(file_path)\n\ntry:\n    os.stat(directory)\nexcept:\n    os.mkdir(directory)       \n\nf = file(filename)\n</code></pre>\n\n<p>Somehow, I missed <code>os.path.exists</code> (thanks kanja, Blair, and Douglas). This is what I have now:</p>\n\n<pre><code>def ensure_dir(file_path):\n    directory = os.path.dirname(file_path)\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n</code></pre>\n\n<p>Is there a flag for \"open\", that makes this happen automatically?</p>\n",
        "answer": "<p>I see two answers with good qualities, each with a small flaw, so I will give my take on it:</p>\n\n<p>Try <a href=\"https://docs.python.org/2/library/os.path.html#os.path.exists\" rel=\"noreferrer\"><code>os.path.exists</code></a>, and consider <a href=\"https://docs.python.org/2/library/os.html#os.makedirs\" rel=\"noreferrer\"><code>os.makedirs</code></a> for the creation.</p>\n\n<pre><code>import os\nif not os.path.exists(directory):\n    os.makedirs(directory)\n</code></pre>\n\n<p>As noted in comments and elsewhere, there's a race condition &ndash; if the directory is created between the <code>os.path.exists</code> and the <code>os.makedirs</code> calls, the <code>os.makedirs</code> will fail with an <code>OSError</code>. Unfortunately, blanket-catching <code>OSError</code> and continuing is not foolproof, as it will ignore a failure to create the directory due to other factors, such as insufficient permissions, full disk, etc.</p>\n\n<p>One option would be to trap the <code>OSError</code> and examine the embedded error code (see <a href=\"https://stackoverflow.com/questions/273698/is-there-a-cross-platform-way-of-getting-information-from-pythons-oserror\">Is there a cross-platform way of getting information from Python\u2019s OSError</a>):</p>\n\n<pre><code>import os, errno\n\ntry:\n    os.makedirs(directory)\nexcept OSError as e:\n    if e.errno != errno.EEXIST:\n        raise\n</code></pre>\n\n<p>Alternatively, there could be a second <code>os.path.exists</code>, but suppose another created the directory after the first check, then removed it before the second one &ndash; we could still be fooled. </p>\n\n<p>Depending on the application, the danger of concurrent operations may be more or less than the danger posed by other factors such as file permissions. The developer would have to know more about the particular application being developed and its expected environment before choosing an implementation.</p>\n\n<p>Modern versions of Python improve this code quite a bit, both by exposing <a href=\"https://docs.python.org/3.3/library/exceptions.html?#FileExistsError\" rel=\"noreferrer\"><code>FileExistsError</code></a> (in 3.3+)...</p>\n\n<pre><code>try:\n    os.makedirs(\"path/to/directory\")\nexcept FileExistsError:\n    # directory already exists\n    pass\n</code></pre>\n\n<p>...and by allowing <a href=\"https://docs.python.org/3.2/library/os.html#os.makedirs\" rel=\"noreferrer\">a keyword argument to <code>os.makedirs</code> called <code>exist_ok</code></a> (in 3.2+).</p>\n\n<pre><code>os.makedirs(\"path/to/directory\", exist_ok=True)  # succeeds even if directory exists.\n</code></pre>\n"
    },
    "392": {
        "question_id": "101754",
        "answer_id": "8189603",
        "question": "<p>We are working on an <a href=\"http://en.wikipedia.org/wiki/S60_%28software_platform%29\" rel=\"noreferrer\">S60</a> version and this platform has a nice Python API..</p>\n\n<p>However, there is nothing official about Python on Android, but since <a href=\"http://en.wikipedia.org/wiki/Jython\" rel=\"noreferrer\">Jython</a> exists, is there a way to let the snake and the robot work together??</p>\n",
        "answer": "<p>One way is to use <a href=\"http://kivy.org/\" rel=\"noreferrer\">Kivy</a>:</p>\n\n<blockquote>\n  <p>Open source Python library for rapid development of applications\n  that make use of innovative user interfaces, such as multi-touch apps.</p>\n</blockquote>\n\n<p></p>\n\n<blockquote>\n  <p>Kivy runs on Linux, Windows, OS X, Android and iOS. You can run the same [python] code on all supported platforms.</p>\n</blockquote>\n\n<p><a href=\"https://play.google.com/store/apps/details?id=org.kivy.showcase\" rel=\"noreferrer\">Kivy Showcase app</a>  </p>\n"
    },
    "393": {
        "question_id": "1602934",
        "answer_id": "1602964",
        "question": "<p>I wanted to test if a key exists in a dictionary before updating the value for the key.\nI wrote the following code:</p>\n\n<pre><code>if 'key1' in dict.keys():\n  print \"blah\"\nelse:\n  print \"boo\"\n</code></pre>\n\n<p>I think this is not the best way to accomplish this task. Is there a better way to test for a key in the dictionary?</p>\n",
        "answer": "<p><code>in</code> is the intended way to test for the existence of a key in a <code>dict</code>.</p>\n\n<pre><code>d = dict()\n\nfor i in range(100):\n    key = i % 10\n    if key in d:\n        d[key] += 1\n    else:\n        d[key] = 1\n</code></pre>\n\n<p>If you wanted a default, you can always use <code>dict.get()</code>:</p>\n\n<pre><code>d = dict()\n\nfor i in range(100):\n    key = i % 10\n    d[key] = d.get(key, 0) + 1\n</code></pre>\n\n<p>... and if you wanted to always ensure a default value for any key you can use <code>defaultdict</code> from the <code>collections</code> module, like so:</p>\n\n<pre><code>from collections import defaultdict\n\nd = defaultdict(int)\n\nfor i in range(100):\n    d[i % 10] += 1\n</code></pre>\n\n<p>... but in general, the <code>in</code> keyword is the best way to do it.</p>\n"
    },
    "394": {
        "question_id": "12309269",
        "answer_id": "12309296",
        "question": "<p>I have JSON data stored in the variable <code>data</code>.</p>\n\n<p>I want to write this to a text file for testing so I don't have to grab the data from the server each time.</p>\n\n<p>Currently, I am trying this:</p>\n\n<pre><code>obj = open('data.txt', 'wb')\nobj.write(data)\nobj.close\n</code></pre>\n\n<p>And am receiving the error: </p>\n\n<p><code>TypeError: must be string or buffer, not dict</code></p>\n\n<p>How to fix this?</p>\n",
        "answer": "<p>You forgot the actual JSON part - <code>data</code> is a dictionary and not yet JSON-encoded. Write it <a href=\"https://docs.python.org/3/library/json.html\" rel=\"noreferrer\">like this</a> for maximum compatibility (Python 2 and 3):</p>\n\n<pre><code>import json\nwith open('data.json', 'w') as outfile:\n    json.dump(data, outfile)\n</code></pre>\n\n<p>On a modern system (i.e. Python 3 and UTF-8 support), you can write a nicer file with</p>\n\n<pre><code>import json\nwith open('data.json', 'w', encoding='utf-8') as outfile:\n    json.dump(data, outfile, ensure_ascii=False, indent=2)\n</code></pre>\n"
    },
    "395": {
        "question_id": "339007",
        "answer_id": "339013",
        "question": "<p>What is the most Pythonic way to pad a numeric string with zeroes to the left, i.e., so the numeric string has a specific length?</p>\n",
        "answer": "<p>Strings:</p>\n\n<pre><code>&gt;&gt;&gt; n = '4'\n&gt;&gt;&gt; print(n.zfill(3))\n004\n</code></pre>\n\n<p>And for numbers:</p>\n\n<pre><code>&gt;&gt;&gt; n = 4\n&gt;&gt;&gt; print('%03d' % n)\n004\n&gt;&gt;&gt; print(format(n, '03')) # python &gt;= 2.6\n004\n&gt;&gt;&gt; print('{0:03d}'.format(n))  # python &gt;= 2.6\n004\n&gt;&gt;&gt; print('{foo:03d}'.format(foo=n))  # python &gt;= 2.6\n004\n&gt;&gt;&gt; print('{:03d}'.format(n))  # python &gt;= 2.7 + python3\n004\n&gt;&gt;&gt; print('{0:03d}'.format(n))  # python 3\n004\n&gt;&gt;&gt; print(f'{n:03}') # python &gt;= 3.6\n004\n</code></pre>\n\n<p><a href=\"https://docs.python.org/2/library/string.html#formatexamples\" rel=\"noreferrer\">String formatting documentation</a>.</p>\n"
    },
    "396": {
        "question_id": "15891038",
        "answer_id": "28648923",
        "question": "<p>I want to convert a table, represented as a list of lists, into a Pandas DataFrame. As an extremely simplified example:</p>\n\n<pre><code>a = [['a', '1.2', '4.2'], ['b', '70', '0.03'], ['x', '5', '0']]\ndf = pd.DataFrame(a)\n</code></pre>\n\n<p>What is the best way to convert the columns to the appropriate types, in this case columns 2 and 3 into floats? Is there a way to specify the types while converting to DataFrame? Or is it better to create the DataFrame first and then loop through the columns to change the type for each column? Ideally I would like to do this in a dynamic way because there can be hundreds of columns and I don't want to specify exactly which columns are of which type. All I can guarantee is that each columns contains values of the same type.</p>\n",
        "answer": "<p>You have three main options for converting types in pandas:</p>\n\n<ol>\n<li><p><a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_numeric.html\" rel=\"noreferrer\"><code>to_numeric()</code></a> - provides functionality to safely convert non-numeric types (e.g. strings) to a suitable numeric type. (See also <a href=\"http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html#pandas.to_datetime\" rel=\"noreferrer\"><code>to_datetime()</code></a> and <a href=\"http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_timedelta.html#pandas.to_timedelta\" rel=\"noreferrer\"><code>to_timedelta()</code></a>.)</p></li>\n<li><p><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.astype.html\" rel=\"noreferrer\"><code>astype()</code></a> - convert (almost) any type to (almost) any other type (even if it's not necessarily sensible to do so). Also allows you to convert to <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html\" rel=\"noreferrer\">categorial</a> types (very useful).</p></li>\n<li><p><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.infer_objects.html\" rel=\"noreferrer\"><code>infer_objects()</code></a> - a utility method to convert object columns holding Python objects to a pandas type if possible.</p></li>\n</ol>\n\n<p>Read on for more detailed explanations and usage of each of these methods.</p>\n\n<hr>\n\n<h1>1. <code>to_numeric()</code></h1>\n\n<p>The best way to convert one or more columns of a DataFrame to numeric values is to use <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_numeric.html\" rel=\"noreferrer\"><code>pandas.to_numeric()</code></a>.</p>\n\n<p>This function will try to change non-numeric objects (such as strings) into integers or floating point numbers as appropriate.</p>\n\n<h2>Basic usage</h2>\n\n<p>The input to <code>to_numeric()</code> is a Series or a single column of a DataFrame. </p>\n\n<pre><code>&gt;&gt;&gt; s = pd.Series([\"8\", 6, \"7.5\", 3, \"0.9\"]) # mixed string and numeric values\n&gt;&gt;&gt; s\n0      8\n1      6\n2    7.5\n3      3\n4    0.9\ndtype: object\n\n&gt;&gt;&gt; pd.to_numeric(s) # convert everything to float values\n0    8.0\n1    6.0\n2    7.5\n3    3.0\n4    0.9\ndtype: float64\n</code></pre>\n\n<p>As you can see, a new Series is returned. Remember to assign this output to a variable or column name to continue using it:</p>\n\n<pre><code># convert Series\nmy_series = pd.to_numeric(my_series)\n\n# convert column \"a\" of a DataFrame\ndf[\"a\"] = pd.to_numeric(df[\"a\"])\n</code></pre>\n\n<p>You can also use it to convert multiple columns of a DataFrame via the <code>apply()</code> method:</p>\n\n<pre><code># convert all columns of DataFrame\ndf = df.apply(pd.to_numeric) # convert all columns of DataFrame\n\n# convert just columns \"a\" and \"b\"\ndf[[\"a\", \"b\"]] = df[[\"a\", \"b\"]].apply(pd.to_numeric)\n</code></pre>\n\n<p>As long as your values can all be converted, that's probably all you need.</p>\n\n<h2>Error handling</h2>\n\n<p>But what if some values can't be converted to a numeric type?</p>\n\n<p><code>to_numeric()</code> also takes an <code>errors</code> keyword argument that allows you to force non-numeric values to be <code>NaN</code>, or simply ignore columns containing these values.</p>\n\n<p>Here's an example using a Series of strings <code>s</code> which has the object dtype:</p>\n\n<pre><code>&gt;&gt;&gt; s = pd.Series(['1', '2', '4.7', 'pandas', '10'])\n&gt;&gt;&gt; s\n0         1\n1         2\n2       4.7\n3    pandas\n4        10\ndtype: object\n</code></pre>\n\n<p>The default behaviour is to raise if it can't convert a value. In this case, it can't cope with the string 'pandas':</p>\n\n<pre><code>&gt;&gt;&gt; pd.to_numeric(s) # or pd.to_numeric(s, errors='raise')\nValueError: Unable to parse string\n</code></pre>\n\n<p>Rather than fail, we might want 'pandas' to be considered a missing/bad numeric value. We can coerce invalid values to <code>NaN</code> as follows using the <code>errors</code> keyword argument:</p>\n\n<pre><code>&gt;&gt;&gt; pd.to_numeric(s, errors='coerce')\n0     1.0\n1     2.0\n2     4.7\n3     NaN\n4    10.0\ndtype: float64\n</code></pre>\n\n<p>The third option for <code>errors</code> is just to ignore the operation if an invalid value is encountered:</p>\n\n<pre><code>&gt;&gt;&gt; pd.to_numeric(s, errors='ignore')\n# the original Series is returned untouched\n</code></pre>\n\n<p>This last option is particularly useful when you want to convert your entire DataFrame, but don't not know which of our columns can be converted reliably to a numeric type. In that case just write:</p>\n\n<pre><code>df.apply(pd.to_numeric, errors='ignore')\n</code></pre>\n\n<p>The function will be applied to each column of the DataFrame. Columns that can be converted to a numeric type will be converted, while columns that cannot (e.g. they contain non-digit strings or dates) will be left alone.</p>\n\n<h2>Downcasting</h2>\n\n<p>By default, conversion with <code>to_numeric()</code> will give you either a <code>int64</code> or <code>float64</code> dtype (or whatever integer width is native to your platform).</p>\n\n<p>That's usually what you want, but what if you wanted to save some memory and use a more compact dtype, like <code>float32</code>, or <code>int8</code>?</p>\n\n<p><code>to_numeric()</code> gives you the option to downcast to either 'integer', 'signed', 'unsigned', 'float'. Here's an example for a simple series <code>s</code> of integer type:</p>\n\n<pre><code>&gt;&gt;&gt; s = pd.Series([1, 2, -7])\n&gt;&gt;&gt; s\n0    1\n1    2\n2   -7\ndtype: int64\n</code></pre>\n\n<p>Downcasting to 'integer' uses the smallest possible integer that can hold the values:</p>\n\n<pre><code>&gt;&gt;&gt; pd.to_numeric(s, downcast='integer')\n0    1\n1    2\n2   -7\ndtype: int8\n</code></pre>\n\n<p>Downcasting to 'float' similarly picks a smaller than normal floating type:</p>\n\n<pre><code>&gt;&gt;&gt; pd.to_numeric(s, downcast='float')\n0    1.0\n1    2.0\n2   -7.0\ndtype: float32\n</code></pre>\n\n<hr>\n\n<h1>2. <code>astype()</code></h1>\n\n<p>The <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.astype.html\" rel=\"noreferrer\"><code>astype()</code></a> method enables you to be explicit about the dtype you want your DataFrame or Series to have. It's very versatile in that you can try and go from one type to the any other.</p>\n\n<h2>Basic usage</h2>\n\n<p>Just pick a type: you can use a NumPy dtype (e.g. <code>np.int16</code>), some Python types (e.g. bool), or pandas-specific types (like the categorical dtype).</p>\n\n<p>Call the method on the object you want to convert and <code>astype()</code> will try and convert it for you:</p>\n\n<pre><code># convert all DataFrame columns to the int64 dtype\ndf = df.astype(int)\n\n# convert column \"a\" to int64 dtype and \"b\" to complex type\ndf = df.astype({\"a\": int, \"b\": complex})\n\n# convert Series to float16 type\ns = s.astype(np.float16)\n\n# convert Series to Python strings\ns = s.astype(str)\n\n# convert Series to categorical type - see docs for more details\ns = s.astype('category')\n</code></pre>\n\n<p>Notice I said \"try\" - if <code>astype()</code> does not know how to convert a value in the Series or DataFrame, it will raise an error. For example if you have a <code>NaN</code> or <code>inf</code> value you'll get an error trying to convert it to an integer.</p>\n\n<p>As of pandas 0.20.0, this error can be suppressed by passing <code>errors='ignore'</code>. Your original object will be return untouched.</p>\n\n<h2>Be careful</h2>\n\n<p><code>astype()</code> is powerful, but it will sometimes convert values \"incorrectly\". For example:</p>\n\n<pre><code>&gt;&gt;&gt; s = pd.Series([1, 2, -7])\n&gt;&gt;&gt; s\n0    1\n1    2\n2   -7\ndtype: int64\n</code></pre>\n\n<p>These are small integers, so how about converting to an unsigned 8-bit type to save memory?</p>\n\n<pre><code>&gt;&gt;&gt; s.astype(np.uint8)\n0      1\n1      2\n2    249\ndtype: uint8\n</code></pre>\n\n<p>The conversion worked, but the -7 was wrapped round to become 249 (i.e. 2<sup>8</sup> - 7)! </p>\n\n<p>Trying to downcast using <code>pd.to_numeric(s, downcast='unsigned')</code> instead could help prevent this error.</p>\n\n<hr>\n\n<h1>3. <code>infer_objects()</code></h1>\n\n<p>Version 0.21.0 of pandas introduced the method <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.infer_objects.html\" rel=\"noreferrer\"><code>infer_objects()</code></a> for converting columns of a DataFrame that have an object datatype to a more specific type (soft conversions).</p>\n\n<p>For example, here's a DataFrame with two columns of object type. One holds actual integers and the other holds strings representing integers:</p>\n\n<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'a': [7, 1, 5], 'b': ['3','2','1']}, dtype='object')\n&gt;&gt;&gt; df.dtypes\na    object\nb    object\ndtype: object\n</code></pre>\n\n<p>Using <code>infer_objects()</code>, you can change the type of column 'a' to int64:</p>\n\n<pre><code>&gt;&gt;&gt; df = df.infer_objects()\n&gt;&gt;&gt; df.dtypes\na     int64\nb    object\ndtype: object\n</code></pre>\n\n<p>Column 'b' has been left alone since its values were strings, not integers. If you wanted to try and force the conversion of both columns to an integer type, you could use <code>df.astype(int)</code> instead.</p>\n"
    },
    "397": {
        "question_id": "11707586",
        "answer_id": "11711637",
        "question": "<p>Is there a way to widen the display of output in either interactive or script-execution mode?</p>\n\n<p>Specifically, I am using the describe() function on a Pandas <code>dataframe</code>.  When the <code>dataframe</code> is 5 columns (labels) wide, I get the descriptive statistics that I want.  However, if the <code>dataframe</code> has any more columns, the statistics are suppressed and something like this is returned:</p>\n\n<pre><code>&gt;&gt; Index: 8 entries, count to max  \n&gt;&gt; Data columns:  \n&gt;&gt; x1          8  non-null values  \n&gt;&gt; x2          8  non-null values  \n&gt;&gt; x3          8  non-null values  \n&gt;&gt; x4          8  non-null values  \n&gt;&gt; x5          8  non-null values  \n&gt;&gt; x6          8  non-null values  \n&gt;&gt; x7          8  non-null values  \n</code></pre>\n\n<p>The \"8\" value is given whether there are 6 or 7 columns.  What does the \"8\" refer to?</p>\n\n<p>I have already tried dragging the IDLE window larger, as well as increasing the \"Configure IDLE\" width options, to no avail.</p>\n\n<p>My purpose in using Pandas and describe() is to avoid using a second program like <strong>STATA</strong> to do basic data manipulation and investigation.</p>\n\n<p>Python/IDLE 2.7.3<br>\nPandas 0.8.1<br>\nNotepad++ 6.1.4 (UNICODE)<br>\nWindows Vista SP2  </p>\n",
        "answer": "<p><strong>Update: Pandas 0.23.4 onwards</strong></p>\n\n<p>This is not necessary, pandas autodetects the size of your terminal window if you set <code>pd.options.display.width = 0</code>. (For older versions see at bottom.)</p>\n\n<p><code>pandas.set_printoptions(...)</code> is deprecated. Instead, use <code>pandas.set_option(optname, val)</code>, or equivalently <code>pd.options.&lt;opt.hierarchical.name&gt; = val</code>. Like:</p>\n\n<pre><code>import pandas as pd\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\n</code></pre>\n\n<p>Here is the <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.set_option.html\" rel=\"noreferrer\">help for <code>set_option</code></a>:</p>\n\n<pre>\nset_option(pat,value) - Sets the value of the specified option\n\nAvailable options:\ndisplay.[chop_threshold, colheader_justify, column_space, date_dayfirst,\n         date_yearfirst, encoding, expand_frame_repr, float_format, height,\n         line_width, max_columns, max_colwidth, max_info_columns, max_info_rows,\n         max_rows, max_seq_items, mpl_style, multi_sparse, notebook_repr_html,\n         pprint_nest_depth, precision, width]\nmode.[sim_interactive, use_inf_as_null]\n\nParameters\n----------\npat - str/regexp which should match a single option.\n\nNote: partial matches are supported for convenience, but unless you use the\nfull option name (e.g. x.y.z.option_name), your code may break in future\nversions if new options with similar names are introduced.\n\nvalue - new value of option.\n\nReturns\n-------\nNone\n\nRaises\n------\nKeyError if no such option exists\n\ndisplay.chop_threshold: [default: None] [currently: None]\n: float or None\n        if set to a float value, all float values smaller then the given threshold\n        will be displayed as exactly 0 by repr and friends.\ndisplay.colheader_justify: [default: right] [currently: right]\n: 'left'/'right'\n        Controls the justification of column headers. used by DataFrameFormatter.\ndisplay.column_space: [default: 12] [currently: 12]No description available.\n\ndisplay.date_dayfirst: [default: False] [currently: False]\n: boolean\n        When True, prints and parses dates with the day first, eg 20/01/2005\ndisplay.date_yearfirst: [default: False] [currently: False]\n: boolean\n        When True, prints and parses dates with the year first, eg 2005/01/20\ndisplay.encoding: [default: UTF-8] [currently: UTF-8]\n: str/unicode\n        Defaults to the detected encoding of the console.\n        Specifies the encoding to be used for strings returned by to_string,\n        these are generally strings meant to be displayed on the console.\ndisplay.expand_frame_repr: [default: True] [currently: True]\n: boolean\n        Whether to print out the full DataFrame repr for wide DataFrames\n        across multiple lines, `max_columns` is still respected, but the output will\n        wrap-around across multiple \"pages\" if it's width exceeds `display.width`.\ndisplay.float_format: [default: None] [currently: None]\n: callable\n        The callable should accept a floating point number and return\n        a string with the desired format of the number. This is used\n        in some places like SeriesFormatter.\n        See core.format.EngFormatter for an example.\ndisplay.height: [default: 60] [currently: 1000]\n: int\n        Deprecated.\n        (Deprecated, use `display.height` instead.)\n\ndisplay.line_width: [default: 80] [currently: 1000]\n: int\n        Deprecated.\n        (Deprecated, use `display.width` instead.)\n\ndisplay.max_columns: [default: 20] [currently: 500]\n: int\n        max_rows and max_columns are used in __repr__() methods to decide if\n        to_string() or info() is used to render an object to a string.  In case\n        python/IPython is running in a terminal this can be set to 0 and pandas\n        will correctly auto-detect the width the terminal and swap to a smaller\n        format in case all columns would not fit vertically. The IPython notebook,\n        IPython qtconsole, or IDLE do not run in a terminal and hence it is not\n        possible to do correct auto-detection.\n        'None' value means unlimited.\ndisplay.max_colwidth: [default: 50] [currently: 50]\n: int\n        The maximum width in characters of a column in the repr of\n        a pandas data structure. When the column overflows, a \"...\"\n        placeholder is embedded in the output.\ndisplay.max_info_columns: [default: 100] [currently: 100]\n: int\n        max_info_columns is used in DataFrame.info method to decide if\n        per column information will be printed.\ndisplay.max_info_rows: [default: 1690785] [currently: 1690785]\n: int or None\n        max_info_rows is the maximum number of rows for which a frame will\n        perform a null check on its columns when repr'ing To a console.\n        The default is 1,000,000 rows. So, if a DataFrame has more\n        1,000,000 rows there will be no null check performed on the\n        columns and thus the representation will take much less time to\n        display in an interactive session. A value of None means always\n        perform a null check when repr'ing.\ndisplay.max_rows: [default: 60] [currently: 500]\n: int\n        This sets the maximum number of rows pandas should output when printing\n        out various output. For example, this value determines whether the repr()\n        for a dataframe prints out fully or just a summary repr.\n        'None' value means unlimited.\ndisplay.max_seq_items: [default: None] [currently: None]\n: int or None\n\n        when pretty-printing a long sequence, no more then `max_seq_items`\n        will be printed. If items are ommitted, they will be denoted by the addition\n        of \"...\" to the resulting string.\n\n        If set to None, the number of items to be printed is unlimited.\ndisplay.mpl_style: [default: None] [currently: None]\n: bool\n\n        Setting this to 'default' will modify the rcParams used by matplotlib\n        to give plots a more pleasing visual style by default.\n        Setting this to None/False restores the values to their initial value.\ndisplay.multi_sparse: [default: True] [currently: True]\n: boolean\n        \"sparsify\" MultiIndex display (don't display repeated\n        elements in outer levels within groups)\ndisplay.notebook_repr_html: [default: True] [currently: True]\n: boolean\n        When True, IPython notebook will use html representation for\n        pandas objects (if it is available).\ndisplay.pprint_nest_depth: [default: 3] [currently: 3]\n: int\n        Controls the number of nested levels to process when pretty-printing\ndisplay.precision: [default: 7] [currently: 7]\n: int\n        Floating point output precision (number of significant digits). This is\n        only a suggestion\ndisplay.width: [default: 80] [currently: 1000]\n: int\n        Width of the display in characters. In case python/IPython is running in\n        a terminal this can be set to None and pandas will correctly auto-detect the\n        width.\n        Note that the IPython notebook, IPython qtconsole, or IDLE do not run in a\n        terminal and hence it is not possible to correctly detect the width.\nmode.sim_interactive: [default: False] [currently: False]\n: boolean\n        Whether to simulate interactive mode for purposes of testing\nmode.use_inf_as_null: [default: False] [currently: False]\n: boolean\n        True means treat None, NaN, INF, -INF as null (old way),\n        False means None and NaN are null, but INF, -INF are not null\n        (new way).\nCall def:   pd.set_option(self, *args, **kwds)\n</pre>\n\n<hr>\n\n<p>EDIT: older version information, much of this has been deprecated.</p>\n\n<p>As @bmu <a href=\"https://stackoverflow.com/a/11708664/623735\">mentioned</a>, pandas auto detects (by default) the size of the display area, a summary view will be used when an object repr does not fit on the display. You mentioned resizing the IDLE window, to no effect. If you do <code>print df.describe().to_string()</code> does it fit on the IDLE window?</p>\n\n<p>The terminal size is determined by <code>pandas.util.terminal.get_terminal_size()</code> (deprecated and removed), this returns a tuple containing the <code>(width, height)</code> of the display. Does the output match the size of your IDLE window? There might be an issue (there was one before when running a terminal in emacs).</p>\n\n<p>Note that it is possible to bypass the autodetect, <code>pandas.set_printoptions(max_rows=200, max_columns=10)</code> will never switch to summary view if number of rows, columns does not exceed the given limits.</p>\n"
    },
    "398": {
        "question_id": "19384532",
        "answer_id": "19385591",
        "question": "<p>I have a data frame <code>df</code> and I use several columns from it to <code>groupby</code>:</p>\n\n<pre><code>df['col1','col2','col3','col4'].groupby(['col1','col2']).mean()\n</code></pre>\n\n<p>In the above way I almost get the table (data frame) that I need. What is missing is an additional column that contains number of rows in each group. In other words, I have mean but I also would like to know how many number were used to get these means. For example in the first group there are 8 values and in the second one 10 and so on.</p>\n\n<p>In short: How do I get <strong>group-wise</strong> statistics for a dataframe?</p>\n",
        "answer": "<p>On <code>groupby</code> object, the <code>agg</code> function can take a list to <a href=\"http://pandas.pydata.org/pandas-docs/stable/groupby.html#applying-multiple-functions-at-once\">apply several aggregation methods</a> at once. This should give you the result you need:</p>\n\n<pre><code>df[['col1', 'col2', 'col3', 'col4']].groupby(['col1', 'col2']).agg(['mean', 'count'])\n</code></pre>\n"
    },
    "399": {
        "question_id": "4529815",
        "answer_id": "4529901",
        "question": "<p>I've created an object like this:</p>\n\n<pre><code>company1.name = 'banana' \ncompany1.value = 40\n</code></pre>\n\n<p>I would like to save this object. How can I do that?</p>\n",
        "answer": "<p>You could use the <code>pickle</code> module in the standard library.\nHere's an elementary application of it to your example:</p>\n\n<pre><code>import pickle\n\nclass Company(object):\n    def __init__(self, name, value):\n        self.name = name\n        self.value = value\n\nwith open('company_data.pkl', 'wb') as output:\n    company1 = Company('banana', 40)\n    pickle.dump(company1, output, pickle.HIGHEST_PROTOCOL)\n\n    company2 = Company('spam', 42)\n    pickle.dump(company2, output, pickle.HIGHEST_PROTOCOL)\n\ndel company1\ndel company2\n\nwith open('company_data.pkl', 'rb') as input:\n    company1 = pickle.load(input)\n    print(company1.name)  # -&gt; banana\n    print(company1.value)  # -&gt; 40\n\n    company2 = pickle.load(input)\n    print(company2.name) # -&gt; spam\n    print(company2.value)  # -&gt; 42\n</code></pre>\n\n<p>You could also define your own simple utility like the following which opens a file and writes a single object to it:</p>\n\n<pre><code>def save_object(obj, filename):\n    with open(filename, 'wb') as output:  # Overwrites any existing file.\n        pickle.dump(obj, output, pickle.HIGHEST_PROTOCOL)\n\n# sample usage\nsave_object(company1, 'company1.pkl')\n</code></pre>\n\n<h2>Update:</h2>\n\n<p>Since this is such a popular answer, I'd like touch on a few slightly advanced usage topics.</p>\n\n<h3><code>cPickle</code> (or <code>_pickle</code>) vs <code>pickle</code></h3>\n\n<p>It's almost always preferable to actually use the <a href=\"http://docs.python.org/2/library/pickle.html#module-cPickle\" rel=\"nofollow noreferrer\"><code>cPickle</code></a> module rather than <code>pickle</code> because the former is written in C and is much faster. There are some subtle differences between them, but in most situations they're equivalent and the C version will provide greatly superior performance. Switching to it couldn't be easier, just change the <code>import</code> statement to this:</p>\n\n<pre><code>import cPickle as pickle\n</code></pre>\n\n<p>In Python 3, <code>cPickle</code> was renamed <code>_pickle</code>, but doing this is no longer necessary since the <code>pickle</code> module now does it automatically\u2014see <a href=\"https://stackoverflow.com/questions/19191859/what-difference-between-pickle-and-pickle-in-python-3\">What difference between pickle and _pickle in python 3?</a>.</p>\n\n<p>The rundown is you could use something like the following to ensure that your code will <em>always</em> use the C version when it's available in both Python 2 and 3:</p>\n\n<pre><code>try:\n    import cPickle as pickle\nexcept ModuleNotFoundError:\n    import pickle\n</code></pre>\n\n<h3>Data stream formats (protocols)</h3>\n\n<p><code>pickle</code> can read and write files in several different, Python-specific, formats, called <em>protocols</em> as described in the <a href=\"https://docs.python.org/3/library/pickle.html#data-stream-format\" rel=\"nofollow noreferrer\">documentation</a>, \"Protocol version 0\" is ASCII and therefore \"human-readable\". Versions > 1 are binary and the highest one available depends on what version of Python is being used. The default also depends on Python version. In Python 2 the default was Protocol version <code>0</code>, but in Python 3.7, it's Protocol version <code>3</code>. In Python 3.x the module had a <code>pickle.DEFAULT_PROTOCOL</code> added to it, but that doesn't exist in Python 2.</p>\n\n<p>Fortunately there's shorthand for writing <code>pickle.HIGHEST_PROTOCOL</code> in every call (assuming that's what you want, and you usually do), just use the literal number <code>-1</code> \u2014 similar to referencing the last element of a sequence via a negative index.\nSo, instead of writing:</p>\n\n<pre><code>pickle.dump(obj, output, pickle.HIGHEST_PROTOCOL)\n</code></pre>\n\n<p>You can just write:</p>\n\n<pre><code>pickle.dump(obj, output, -1)\n</code></pre>\n\n<p>Either way, you'd only have specify the protocol once if you created a <code>Pickler</code> object for use in multiple pickle operations:</p>\n\n<pre><code>pickler = pickle.Pickler(output, -1)\npickler.dump(obj1)\npickler.dump(obj2)\n   etc...\n</code></pre>\n\n<p><em>Note</em>: If you're in an environment running different versions of Python, then you'll probably want to explicitly use (i.e. hardcode) a specific protocol number that all of them can read (later versions can generally read files produced by earlier ones).</p>\n\n<h3>Multiple Objects</h3>\n\n<p>While a pickle file <em>can</em> contain any number of pickled objects, as shown in the above samples, when there's an unknown number of them, it's often easier to store them all in some sort of variably-sized container, like a <code>list</code>, <code>tuple</code>, or <code>dict</code> and write them all to the file in a single call:</p>\n\n<pre><code>tech_companies = [\n    Company('Apple', 114.18), Company('Google', 908.60), Company('Microsoft', 69.18)\n]\nsave_object(tech_companies, 'tech_companies.pkl')\n</code></pre>\n\n<p>and restore the list and everything in it later with:</p>\n\n<pre><code>with open('tech_companies.pkl', 'rb') as input:\n    tech_companies = pickle.load(input)\n</code></pre>\n\n<p>The major advantage is you don't need to know how many object instances are saved in order to load them back later (although doing so without that information <em>is</em> possible, it requires some slightly specialized code). See the answers to the related question <a href=\"https://stackoverflow.com/questions/20716812/saving-and-loading-multiple-objects-in-pickle-file\">Saving and loading multiple objects in pickle file?</a> for details on different ways to do this. Personally <strong>I</strong> like @Lutz Prechelt's <a href=\"https://stackoverflow.com/a/28745948/355230\">answer</a> the best. Here's it adapted to the examples here:</p>\n\n<pre><code>class Company:\n    def __init__(self, name, value):\n        self.name = name\n        self.value = value\n\ndef pickled_items(filename):\n    \"\"\" Unpickle a file of pickled data. \"\"\"\n    with open(filename, \"rb\") as f:\n        while True:\n            try:\n                yield pickle.load(f)\n            except EOFError:\n                break\n\nprint('Companies in pickle file:')\nfor company in pickled_items('company_data.pkl'):\n    print('  name: {}, value: {}'.format(company.name, company.value))\n</code></pre>\n"
    },
    "400": {
        "question_id": "1035340",
        "answer_id": "1035360",
        "question": "<p>In Python, how do I read in a binary file and loop over each byte of that file?</p>\n",
        "answer": "<p><strong>Python 2.4 and Earlier</strong></p>\n\n<pre><code>f = open(\"myfile\", \"rb\")\ntry:\n    byte = f.read(1)\n    while byte != \"\":\n        # Do stuff with byte.\n        byte = f.read(1)\nfinally:\n    f.close()\n</code></pre>\n\n<p><strong>Python 2.5-2.7</strong></p>\n\n<pre><code>with open(\"myfile\", \"rb\") as f:\n    byte = f.read(1)\n    while byte != \"\":\n        # Do stuff with byte.\n        byte = f.read(1)\n</code></pre>\n\n<p>Note that the with statement is not available in versions of Python below 2.5. To use it in v 2.5 you'll need to import it:</p>\n\n<pre><code>from __future__ import with_statement\n</code></pre>\n\n<p>In 2.6 this is not needed.</p>\n\n<p><strong>Python 3</strong></p>\n\n<p>In Python 3, it's a bit different. We will no longer get raw characters from the stream in byte mode but byte objects, thus we need to alter the condition:</p>\n\n<pre><code>with open(\"myfile\", \"rb\") as f:\n    byte = f.read(1)\n    while byte != b\"\":\n        # Do stuff with byte.\n        byte = f.read(1)\n</code></pre>\n\n<p>Or as benhoyt says, skip the not equal and take advantage of the fact that <code>b\"\"</code> evaluates to false. This makes the code compatible between 2.6 and 3.x without any changes. It would also save you from changing the condition if you go from byte mode to text or the reverse.</p>\n\n<pre><code>with open(\"myfile\", \"rb\") as f:\n    byte = f.read(1)\n    while byte:\n        # Do stuff with byte.\n        byte = f.read(1)\n</code></pre>\n"
    },
    "401": {
        "question_id": "492483",
        "answer_id": "492711",
        "question": "<p>When piping the output of a Python program, the Python interpreter gets confused about encoding and sets it to None. This means a program like this:</p>\n\n<pre><code># -*- coding: utf-8 -*-\nprint u\"\u00e5\u00e4\u00f6\"\n</code></pre>\n\n<p>will work fine when run normally, but fail with:</p>\n\n<blockquote>\n  <p>UnicodeEncodeError: 'ascii' codec can't encode character u'\\xa0' in position 0: ordinal not in range(128)</p>\n</blockquote>\n\n<p>when used in a pipe sequence.</p>\n\n<p>What is the best way to make this work when piping? Can I just tell it to use whatever encoding the shell/filesystem/whatever is using? </p>\n\n<p>The suggestions I have seen thus far is to modify your site.py directly, or hardcoding the defaultencoding using this hack:</p>\n\n<pre><code># -*- coding: utf-8 -*-\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\nprint u\"\u00e5\u00e4\u00f6\"\n</code></pre>\n\n<p>Is there a better way to make piping work?</p>\n",
        "answer": "<p>Your code works when run in an script because Python encodes the output to whatever encoding your terminal application is using. If you are piping you must encode it yourself.</p>\n\n<p>A rule of thumb is: Always use Unicode internally. Decode what you receive, and encode what you send.</p>\n\n<pre><code># -*- coding: utf-8 -*-\nprint u\"\u00e5\u00e4\u00f6\".encode('utf-8')\n</code></pre>\n\n<p>Another didactic example is a Python program to convert between ISO-8859-1 and UTF-8, making everything uppercase in between.</p>\n\n<pre><code>import sys\nfor line in sys.stdin:\n    # Decode what you receive:\n    line = line.decode('iso8859-1')\n\n    # Work with Unicode internally:\n    line = line.upper()\n\n    # Encode what you send:\n    line = line.encode('utf-8')\n    sys.stdout.write(line)\n</code></pre>\n\n<p>Setting the system default encoding is a bad idea, because some modules and libraries you use can rely on the fact it is ASCII. Don't do it.</p>\n"
    },
    "402": {
        "question_id": "20219254",
        "answer_id": "20221655",
        "question": "<p>I use pandas to write to excel file in the following fashion:</p>\n\n<pre><code>import pandas\n\nwriter = pandas.ExcelWriter('Masterfile.xlsx') \n\ndata_filtered.to_excel(writer, \"Main\", cols=['Diff1', 'Diff2'])\n\nwriter.save()\n</code></pre>\n\n<p>Masterfile.xlsx already consists of number of different tabs. However, it does not yet contain \"Main\".</p>\n\n<p>Pandas correctly writes to \"Main\" sheet, unfortunately it also deletes all other tabs.</p>\n",
        "answer": "<p>Pandas docs says it uses openpyxl for xlsx files. Quick look through the code in <code>ExcelWriter</code> gives a clue that something like this might work out:</p>\n\n<pre><code>import pandas\nfrom openpyxl import load_workbook\n\nbook = load_workbook('Masterfile.xlsx')\nwriter = pandas.ExcelWriter('Masterfile.xlsx', engine='openpyxl') \nwriter.book = book\nwriter.sheets = dict((ws.title, ws) for ws in book.worksheets)\n\ndata_filtered.to_excel(writer, \"Main\", cols=['Diff1', 'Diff2'])\n\nwriter.save()\n</code></pre>\n"
    },
    "403": {
        "question_id": "35491274",
        "answer_id": "35491399",
        "question": "<p>I have a pandas dataFrame with one column that looks like the following:</p>\n\n<pre><code>`\nIn [207]:df2.teams\nOut[207]: \n0         [SF, NYG]\n1         [SF, NYG]\n2         [SF, NYG]\n3         [SF, NYG]\n4         [SF, NYG]\n5         [SF, NYG]\n6         [SF, NYG]\n7         [SF, NYG]\n`\n</code></pre>\n\n<p>I need to split this column of lists into 2 columns named team1 and team2 using pandas</p>\n",
        "answer": "<p>You can use <code>DataFrame</code> constructor with <code>lists</code> created by converting to <code>numpy array</code> by <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.values.html\" rel=\"noreferrer\"><code>values</code></a> with <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.tolist.html\" rel=\"noreferrer\"><code>tolist</code></a>:</p>\n\n<pre><code>import pandas as pd\n\nd1 = {'teams': [['SF', 'NYG'],['SF', 'NYG'],['SF', 'NYG'],\n                ['SF', 'NYG'],['SF', 'NYG'],['SF', 'NYG'],['SF', 'NYG']]}\ndf2 = pd.DataFrame(d1)\nprint (df2)\n       teams\n0  [SF, NYG]\n1  [SF, NYG]\n2  [SF, NYG]\n3  [SF, NYG]\n4  [SF, NYG]\n5  [SF, NYG]\n6  [SF, NYG]\n</code></pre>\n\n<hr>\n\n<pre><code>df2[['team1','team2']] = pd.DataFrame(df2.teams.values.tolist(), index= df2.index)\nprint (df2)\n       teams team1 team2\n0  [SF, NYG]    SF   NYG\n1  [SF, NYG]    SF   NYG\n2  [SF, NYG]    SF   NYG\n3  [SF, NYG]    SF   NYG\n4  [SF, NYG]    SF   NYG\n5  [SF, NYG]    SF   NYG\n6  [SF, NYG]    SF   NYG\n</code></pre>\n\n<p>And for new <code>DataFrame</code>:</p>\n\n<pre><code>df3 = pd.DataFrame(df2['teams'].values.tolist(), columns=['team1','team2'])\nprint (df3)\n  team1 team2\n0    SF   NYG\n1    SF   NYG\n2    SF   NYG\n3    SF   NYG\n4    SF   NYG\n5    SF   NYG\n6    SF   NYG\n</code></pre>\n\n<p>Solution with <code>apply(pd.Series)</code> is very slow:</p>\n\n<pre><code>#7k rows\ndf2 = pd.concat([df2]*1000).reset_index(drop=True)\n\nIn [89]: %timeit df2['teams'].apply(pd.Series)\n1 loop, best of 3: 1.15 s per loop\n\nIn [90]: %timeit pd.DataFrame(df2['teams'].values.tolist(), columns=['team1','team2'])\n1000 loops, best of 3: 820 \u00b5s per loop\n</code></pre>\n"
    },
    "404": {
        "question_id": "4710067",
        "answer_id": "4710090",
        "question": "<p>Let's say I have a text file full of nicknames. How can I delete a specific nickname from this file, using Python?</p>\n",
        "answer": "<p>First, open the file and get all your lines from the file. Then reopen the file in write mode and write your lines back, except for the line you want to delete:</p>\n\n<pre><code>with open(\"yourfile.txt\", \"r\") as f:\n    lines = f.readlines()\nwith open(\"yourfile.txt\", \"w\") as f:\n    for line in lines:\n        if line.strip(\"\\n\") != \"nickname_to_delete\":\n            f.write(line)\n</code></pre>\n\n<p>You need to <code>strip(\"\\n\")</code> the newline character in the comparison because if your file doesn't end with a newline character the very last <code>line</code> won't either.</p>\n"
    },
    "405": {
        "question_id": "23435270",
        "answer_id": "23435320",
        "question": "<p>I feel like there is a better way than this:</p>\n\n<pre><code>import pandas as pd\ndf = pd.DataFrame(\n    [['A', 'X', 3], ['A', 'X', 5], ['A', 'Y', 7], ['A', 'Y', 1],\n     ['B', 'X', 3], ['B', 'X', 1], ['B', 'X', 3], ['B', 'Y', 1],\n     ['C', 'X', 7], ['C', 'Y', 4], ['C', 'Y', 1], ['C', 'Y', 6]],\n    columns=['c1', 'c2', 'v1'])\ndef callback(x):\n    x['seq'] = range(1, x.shape[0] + 1)\n    return x\ndf = df.groupby(['c1', 'c2']).apply(callback)\nprint df\n</code></pre>\n\n<p>To achieve this:</p>\n\n<pre><code>   c1 c2  v1  seq\n0   A  X   3    1\n1   A  X   5    2\n2   A  Y   7    1\n3   A  Y   1    2\n4   B  X   3    1\n5   B  X   1    2\n6   B  X   3    3\n7   B  Y   1    1\n8   C  X   7    1\n9   C  Y   4    1\n10  C  Y   1    2\n11  C  Y   6    3\n</code></pre>\n\n<p>Is there a way to do it that avoids the callback?</p>\n",
        "answer": "<p>use <code>cumcount()</code>, see docs <a href=\"http://pandas.pydata.org/pandas-docs/stable/groupby.html#enumerate-group-items\">here</a></p>\n\n<pre><code>In [4]: df.groupby(['c1', 'c2']).cumcount()\nOut[4]: \n0     0\n1     1\n2     0\n3     1\n4     0\n5     1\n6     2\n7     0\n8     0\n9     0\n10    1\n11    2\ndtype: int64\n</code></pre>\n\n<p>If you want orderings starting at 1</p>\n\n<pre><code>In [5]: df.groupby(['c1', 'c2']).cumcount()+1\nOut[5]: \n0     1\n1     2\n2     1\n3     2\n4     1\n5     2\n6     3\n7     1\n8     1\n9     1\n10    2\n11    3\ndtype: int64\n</code></pre>\n"
    },
    "406": {
        "question_id": "1641219",
        "answer_id": "1641236",
        "question": "<p>I'm coming from the Java world and reading Bruce Eckels' <em>Python 3 Patterns, Recipes and Idioms</em>. </p>\n\n<p>While reading about classes, it goes on to say that in Python there is no need to declare instance variables. You just use them in the constructor, and boom, they are there. </p>\n\n<p>So for example:</p>\n\n<pre><code>class Simple:\n    def __init__(self, s):\n        print(\"inside the simple constructor\")\n        self.s = s\n\n    def show(self):\n        print(self.s)\n\n    def showMsg(self, msg):\n        print(msg + ':', self.show())\n</code></pre>\n\n<p>If that\u2019s true, then any object of class <code>Simple</code> can just change the value of variable <code>s</code> outside of the class. </p>\n\n<p>For example: </p>\n\n<pre><code>if __name__ == \"__main__\":\n    x = Simple(\"constructor argument\")\n    x.s = \"test15\" # this changes the value\n    x.show()\n    x.showMsg(\"A message\")\n</code></pre>\n\n<p>In Java, we have been taught about public/private/protected variables.  Those keywords make sense because at times you want variables in a class to which no one outside the class has access to. </p>\n\n<p>Why is that not required in Python?</p>\n",
        "answer": "<p>It's cultural.  In Python, you don't write to other classes' instance or class variables.  In Java, nothing prevents you from doing the same if you <em>really</em> want to - after all, you can always edit the source of the class itself to achieve the same effect. Python drops that pretence of security and encourages programmers to be responsible. In practice, this works very nicely.</p>\n\n<p>If you want to emulate private variables for some reason, you can always use the <code>__</code> prefix from <a href=\"http://www.python.org/dev/peps/pep-0008/\">PEP 8</a>. Python mangles the names of variables like <code>__foo</code> so that they're not easily visible to code outside the class that contains them (although you <em>can</em> get around it if you're determined enough, just like you <em>can</em> get around Java's protections if you work at it).</p>\n\n<p>By the same convention, the <code>_</code> prefix means <strong>stay away even if you're not technically prevented from doing so</strong>. You don't play around with another class's variables that look like <code>__foo</code> or <code>_bar</code>.</p>\n"
    },
    "407": {
        "question_id": "3362600",
        "answer_id": "3363254",
        "question": "<p>I am having problems understanding how to email an attachment using Python. I have successfully emailed simple messages with the <code>smtplib</code>. Could someone please explain how to send an attachment in an email. I know there are other posts online but as a Python beginner I find them hard to understand. </p>\n",
        "answer": "<p>Here's another:</p>\n\n<pre><code>import smtplib\nfrom os.path import basename\nfrom email.mime.application import MIMEApplication\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom email.utils import COMMASPACE, formatdate\n\n\ndef send_mail(send_from, send_to, subject, text, files=None,\n              server=\"127.0.0.1\"):\n    assert isinstance(send_to, list)\n\n    msg = MIMEMultipart()\n    msg['From'] = send_from\n    msg['To'] = COMMASPACE.join(send_to)\n    msg['Date'] = formatdate(localtime=True)\n    msg['Subject'] = subject\n\n    msg.attach(MIMEText(text))\n\n    for f in files or []:\n        with open(f, \"rb\") as fil:\n            part = MIMEApplication(\n                fil.read(),\n                Name=basename(f)\n            )\n        # After the file is closed\n        part['Content-Disposition'] = 'attachment; filename=\"%s\"' % basename(f)\n        msg.attach(part)\n\n\n    smtp = smtplib.SMTP(server)\n    smtp.sendmail(send_from, send_to, msg.as_string())\n    smtp.close()\n</code></pre>\n\n<p>It's much the same as the first example... But it should be easier to drop in.</p>\n"
    },
    "408": {
        "question_id": "1823058",
        "answer_id": "10742904",
        "question": "<p>I am trying to print an integer in <em>Python 2.6.1</em> with commas as thousands separators. For example, I want to show the number <code>1234567</code> as <code>1,234,567</code>. How would I go about doing this? I have seen many examples on Google, but I am looking for the simplest practical way.</p>\n\n<p>It does not need to be locale-specific to decide between periods and commas. I would prefer something as simple as reasonably possible.</p>\n",
        "answer": "<h3>Locale unaware</h3>\n\n<pre><code>'{:,}'.format(value)  # For Python \u22652.7\nf'{value:,}'  # For Python \u22653.7\n</code></pre>\n\n<h3>Locale aware</h3>\n\n<pre><code>import locale\nlocale.setlocale(locale.LC_ALL, 'en_US.UTF-8')  # Customize\n\n'{:n}'.format(value)  # For Python \u22652.7\nf'{value:n}'  # For Python \u22653.7\n</code></pre>\n\n<h3>Reference</h3>\n\n<p>Per <a href=\"https://docs.python.org/library/string.html#format-specification-mini-language\" rel=\"nofollow noreferrer\">Format Specification Mini-Language</a>,</p>\n\n<blockquote>\n  <p>The <code>','</code> option signals the use of a comma for a thousands separator. For a locale aware separator, use the <code>'n'</code> integer presentation type instead.</p>\n</blockquote>\n"
    },
    "409": {
        "question_id": "1535327",
        "answer_id": "1535336",
        "question": "<p>I am learning the ropes in Python. When I try to print an object of class <strong><code>Foobar</code></strong> using the <strong><code>print()</code></strong> function, I get an output like this:</p>\n\n<pre><code>&lt;__main__.Foobar instance at 0x7ff2a18c&gt;\n</code></pre>\n\n<p>Is there a way I can set the <em>printing behaviour</em> (or the <em>string representation</em>) of a <em>class</em> and its <em>objects</em>? For instance, when I call <code>print()</code> on a class object, I would like to print its data members in a certain format. How to achieve this in Python?</p>\n\n<p>If you are familiar with C++ classes, the above can be achieved for the standard <strong><code>ostream</code></strong> by adding a <strong><code>friend ostream&amp; operator &lt;&lt; (ostream&amp;, const Foobar&amp;)</code></strong> method for the class.</p>\n",
        "answer": "<pre><code>&gt;&gt;&gt; class Test:\n...     def __repr__(self):\n...         return \"Test()\"\n...     def __str__(self):\n...         return \"member of Test\"\n... \n&gt;&gt;&gt; t = Test()\n&gt;&gt;&gt; t\nTest()\n&gt;&gt;&gt; print(t)\nmember of Test\n</code></pre>\n\n<p>The <code>__str__</code> method is what happens when you print it, and the <code>__repr__</code> method is what happens when you use the <a href=\"https://docs.python.org/library/functions.html#repr\" rel=\"noreferrer\"><code>repr()</code></a> function (or when you look at it with the interactive prompt). If this isn't the most <em>Pythonic</em> method, I apologize, because I'm still learning too - but it works.</p>\n\n<p>If no <code>__str__</code> method is given, Python will print the result of <code>__repr__</code> instead. If you define <code>__str__</code> but not <code>__repr__</code>, Python will use what you see above as the <code>__repr__</code>, but still use <code>__str__</code> for printing.</p>\n"
    },
    "410": {
        "question_id": "642154",
        "answer_id": "642169",
        "question": "<p>I have a tuple of tuples from a MySQL query like this:</p>\n\n<pre><code>T1 = (('13', '17', '18', '21', '32'),\n      ('07', '11', '13', '14', '28'),\n      ('01', '05', '06', '08', '15', '16'))\n</code></pre>\n\n<p>I'd like to convert all the string elements into integers and put them back into a list of lists:</p>\n\n<pre><code>T2 = [[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]\n</code></pre>\n\n<p>I tried to achieve it with <code>eval</code> but didn't get any decent result yet.</p>\n",
        "answer": "<p><a href=\"https://docs.python.org/3/library/functions.html#int\" rel=\"noreferrer\"><code>int()</code></a> is the Python standard built-in function to convert a string into an integer value. You call it with a string containing a number as the argument, and it returns the number converted to an integer:</p>\n\n<pre><code>print (int(\"1\") + 1)\n</code></pre>\n\n<p>The above prints <code>2</code>.</p>\n\n<p>If you know the structure of your list, T1 (that it simply contains lists, only one level), you could do this in Python 2:</p>\n\n<pre><code>T2 = [map(int, x) for x in T1]\n</code></pre>\n\n<p>In Python 3:</p>\n\n<pre><code>T2 = [list(map(int, x)) for x in T1]\n</code></pre>\n"
    },
    "411": {
        "question_id": "3389574",
        "answer_id": "3389611",
        "question": "<p>How can I check if any of the strings in an array exists in another string?</p>\n\n<p>Like:</p>\n\n<pre><code>a = ['a', 'b', 'c']\nstr = \"a123\"\nif a in str:\n  print \"some of the strings found in str\"\nelse:\n  print \"no strings found in str\"\n</code></pre>\n\n<p>That code doesn't work, it's just to show what I want to achieve.</p>\n",
        "answer": "<p>You can use <a href=\"http://docs.python.org/library/functions.html#any\" rel=\"noreferrer\"><strong><code>any</code></strong></a>:</p>\n\n<pre><code>if any(x in str for x in a):\n</code></pre>\n\n<p>Similarly to check if <em>all</em> the strings from the list are found, use <a href=\"http://docs.python.org/library/functions.html#all\" rel=\"noreferrer\"><strong><code>all</code></strong></a> instead of <code>any</code>.</p>\n"
    },
    "412": {
        "question_id": "12330522",
        "answer_id": "12330535",
        "question": "<p>In Python, calling</p>\n\n<pre><code>temp = open(filename,'r').readlines()\n</code></pre>\n\n<p>results in a list in which each element is a line in the file. Its a little stupid but still: <code>readlines()</code> also writes newline character to each element, something I do not wish to happen. How can I avoid it? </p>\n",
        "answer": "<p>You can read the whole file and split lines using <a href=\"https://docs.python.org/2/library/stdtypes.html#str.splitlines\" rel=\"noreferrer\"><code>str.splitlines</code></a>:</p>\n\n<pre><code>temp = file.read().splitlines()\n</code></pre>\n\n<p>Or you can strip the newline by hand:</p>\n\n<pre><code>temp = [line[:-1] for line in file]\n</code></pre>\n\n<p><strong>Note:</strong> this last solution only works if the file ends with a newline, otherwise the last line will lose a character.</p>\n\n<p>This assumption is true in most cases (especially for files created by text editors, which often <em>do</em> add an ending newline anyway).</p>\n\n<p>If you want to avoid this you can add a newline at the end of file:</p>\n\n<pre><code>with open(the_file, 'r+') as f:\n    f.seek(-1, 2)  # go at the end of the file\n    if f.read(1) != '\\n':\n        # add missing newline if not already present\n        f.write('\\n')\n        f.flush()\n        f.seek(0)\n    lines = [line[:-1] for line in f]\n</code></pre>\n\n<p>Or a simpler alternative is to <code>strip</code> the newline instead:</p>\n\n<pre><code>[line.rstrip('\\n') for line in file]\n</code></pre>\n\n<p>Or even, although pretty unreadable:</p>\n\n<pre><code>[line[:-(line[-1] == '\\n') or len(line)+1] for line in file]\n</code></pre>\n\n<p>Which exploits the fact that the return value of <code>or</code> isn't a boolean, but the object that was evaluated true or false.</p>\n\n<hr>\n\n<p>The <code>readlines</code> method is actually equivalent to:</p>\n\n<pre><code>def readlines(self):\n    lines = []\n    for line in iter(self.readline, ''):\n        lines.append(line)\n    return lines\n\n# or equivalently\n\ndef readlines(self):\n    lines = []\n    while True:\n        line = self.readline()\n        if not line:\n            break\n        lines.append(line)\n    return lines\n</code></pre>\n\n<p>Since <code>readline()</code> keeps the newline also <code>readlines()</code> keeps it.</p>\n\n<p><strong>Note:</strong> for symmetry to <code>readlines()</code> the <a href=\"https://docs.python.org/3/library/io.html#io.IOBase.writelines\" rel=\"noreferrer\"><code>writelines()</code></a> method does <em>not</em> add ending newlines, so <code>f2.writelines(f.readlines())</code> produces an exact copy of <code>f</code> in <code>f2</code>.</p>\n"
    },
    "413": {
        "question_id": "28654047",
        "answer_id": "28654127",
        "question": "<p>So my dataset has some information by location for n dates. The problem is each date is actually a different column header. For example the CSV looks like</p>\n\n<pre><code>location    name    Jan-2010    Feb-2010    March-2010\nA           \"test\"  12          20          30\nB           \"foo\"   18          20          25\n</code></pre>\n\n<p>What I would like is for it to look like</p>\n\n<pre><code>location    name    Date        Value\nA           \"test\"  Jan-2010    12       \nA           \"test\"  Feb-2010    20\nA           \"test\"  March-2010  30\nB           \"foo\"   Jan-2010    18       \nB           \"foo\"   Feb-2010    20\nB           \"foo\"   March-2010  25\n</code></pre>\n\n<p>problem is I don't know how many dates are in the column (though I know they will always start after name)</p>\n",
        "answer": "<p><strong>UPDATE</strong><br>\nFrom v0.20, <code>melt</code> is a first order function, you can now use</p>\n\n<pre><code>df.melt(id_vars=[\"location\", \"name\"], \n        var_name=\"Date\", \n        value_name=\"Value\")\n\n  location    name        Date  Value\n0        A  \"test\"    Jan-2010     12\n1        B   \"foo\"    Jan-2010     18\n2        A  \"test\"    Feb-2010     20\n3        B   \"foo\"    Feb-2010     20\n4        A  \"test\"  March-2010     30\n5        B   \"foo\"  March-2010     25\n</code></pre>\n\n<hr>\n\n<p><strong>OLD(ER) VERSIONS: &lt;0.20</strong></p>\n\n<p>You can use <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.melt.html\" rel=\"noreferrer\"><code>pd.melt</code></a> to get most of the way there, and then sort:</p>\n\n<pre><code>&gt;&gt;&gt; df\n  location  name  Jan-2010  Feb-2010  March-2010\n0        A  test        12        20          30\n1        B   foo        18        20          25\n&gt;&gt;&gt; df2 = pd.melt(df, id_vars=[\"location\", \"name\"], \n                  var_name=\"Date\", value_name=\"Value\")\n&gt;&gt;&gt; df2\n  location  name        Date  Value\n0        A  test    Jan-2010     12\n1        B   foo    Jan-2010     18\n2        A  test    Feb-2010     20\n3        B   foo    Feb-2010     20\n4        A  test  March-2010     30\n5        B   foo  March-2010     25\n&gt;&gt;&gt; df2 = df2.sort([\"location\", \"name\"])\n&gt;&gt;&gt; df2\n  location  name        Date  Value\n0        A  test    Jan-2010     12\n2        A  test    Feb-2010     20\n4        A  test  March-2010     30\n1        B   foo    Jan-2010     18\n3        B   foo    Feb-2010     20\n5        B   foo  March-2010     25\n</code></pre>\n\n<p>(Might want to throw in a <code>.reset_index(drop=True)</code>, just to keep the output clean.)</p>\n\n<p><strong>Note</strong>: <code>pd.DataFrame.sort</code> <a href=\"https://stackoverflow.com/questions/44123874/dataframe-object-has-no-attribute-sort\">has been deprecated</a> in favour of <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort_values.html\" rel=\"noreferrer\"><code>pd.DataFrame.sort_values</code></a>.</p>\n"
    },
    "414": {
        "question_id": "31875",
        "answer_id": "31887",
        "question": "<p>There seem to be many ways to define <a href=\"http://en.wikipedia.org/wiki/Singleton_pattern\" rel=\"noreferrer\">singletons</a> in Python. Is there a consensus opinion on Stack&nbsp;Overflow?</p>\n",
        "answer": "<p>I don't really see the need, as a module with functions (and not a class) would serve well as a singleton. All its variables would be bound to the module, which could not be instantiated repeatedly anyway. </p>\n\n<p>If you do wish to use a class, there is no way of creating private classes or private constructors in Python, so you can't protect against multiple instantiations, other than just via convention in use of your API. I would still just put methods in a module, and consider the module as the singleton.</p>\n"
    },
    "415": {
        "question_id": "473620",
        "answer_id": "473702",
        "question": "<p><a href=\"http://www.google.co.uk/search?q=python+daemon\" rel=\"noreferrer\">Searching on Google</a> reveals x2 code snippets. The first result is to <a href=\"http://code.activestate.com/recipes/278731/\" rel=\"noreferrer\">this code recipe</a> which has a lot of documentation and explanation, along with some useful discussion underneath. </p>\n\n<p>However, <a href=\"https://gist.github.com/slor/5946334\" rel=\"noreferrer\">another code sample</a>, whilst not containing so much documentation, includes sample code for passing commands such as start, stop and restart. It also creates a PID file which can be handy for checking if the daemon is already running etc.</p>\n\n<p>These samples both explain how to create the daemon. Are there any additional things that need to be considered? Is one sample better than the other, and why?</p>\n",
        "answer": "<p><strong>Current solution</strong></p>\n\n<p>A reference implementation of <a href=\"https://www.python.org/dev/peps/pep-3143/\" rel=\"noreferrer\">PEP 3143 (Standard daemon process library)</a> is now available as <a href=\"https://pypi.python.org/pypi/python-daemon\" rel=\"noreferrer\">python-daemon</a>.</p>\n\n<p><strong>Historical answer</strong></p>\n\n<p>Sander Marechal's <a href=\"http://web.archive.org/web/20131017130434/http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/\" rel=\"noreferrer\">code sample</a> is superior to the original, which was originally posted in 2004.  I once contributed a daemonizer for Pyro, but would probably use Sander's code if I had to do it over.</p>\n"
    },
    "416": {
        "question_id": "20906474",
        "answer_id": "21232849",
        "question": "<p>I would like to read several csv files from a directory into pandas and concatenate them into one big DataFrame. I have not been able to figure it out though. Here is what I have so far:</p>\n\n<pre><code>import glob\nimport pandas as pd\n\n# get data file names\npath =r'C:\\DRO\\DCL_rawdata_files'\nfilenames = glob.glob(path + \"/*.csv\")\n\ndfs = []\nfor filename in filenames:\n    dfs.append(pd.read_csv(filename))\n\n# Concatenate all data into one DataFrame\nbig_frame = pd.concat(dfs, ignore_index=True)\n</code></pre>\n\n<p>I guess I need some help within the for loop???</p>\n",
        "answer": "<p>If you have same columns in all your <code>csv</code> files then you can try the code below.\nI have added <code>header=0</code> so that after reading <code>csv</code> first row can be assigned as the column names.</p>\n\n<pre><code>import pandas as pd\nimport glob\n\npath = r'C:\\DRO\\DCL_rawdata_files' # use your path\nall_files = glob.glob(path + \"/*.csv\")\n\nli = []\n\nfor filename in all_files:\n    df = pd.read_csv(filename, index_col=None, header=0)\n    li.append(df)\n\nframe = pd.concat(li, axis=0, ignore_index=True)\n</code></pre>\n"
    },
    "417": {
        "question_id": "753052",
        "answer_id": "925630",
        "question": "<pre><code>from mechanize import Browser\nbr = Browser()\nbr.open('http://somewebpage')\nhtml = br.response().readlines()\nfor line in html:\n  print line\n</code></pre>\n\n<p>When printing a line in an HTML file, I'm trying to find a way to only show the contents of each HTML element and not the formatting itself. If it finds <code>'&lt;a href=\"whatever.com\"&gt;some text&lt;/a&gt;'</code>, it will only print 'some text', <code>'&lt;b&gt;hello&lt;/b&gt;'</code> prints 'hello', etc. How would one go about doing this?</p>\n",
        "answer": "<p>I always used this function to strip HTML tags, as it requires only the Python stdlib:</p>\n\n<p>On Python 2</p>\n\n<pre><code>from HTMLParser import HTMLParser\n\nclass MLStripper(HTMLParser):\n    def __init__(self):\n        self.reset()\n        self.fed = []\n    def handle_data(self, d):\n        self.fed.append(d)\n    def get_data(self):\n        return ''.join(self.fed)\n\ndef strip_tags(html):\n    s = MLStripper()\n    s.feed(html)\n    return s.get_data()\n</code></pre>\n\n<p>For Python 3</p>\n\n<pre><code>from html.parser import HTMLParser\n\nclass MLStripper(HTMLParser):\n    def __init__(self):\n        self.reset()\n        self.strict = False\n        self.convert_charrefs= True\n        self.fed = []\n    def handle_data(self, d):\n        self.fed.append(d)\n    def get_data(self):\n        return ''.join(self.fed)\n\ndef strip_tags(html):\n    s = MLStripper()\n    s.feed(html)\n    return s.get_data()\n</code></pre>\n\n<p><strong>Note</strong>: this works only for 3.1. For 3.2 or above, you need to call the parent class's <strong>init</strong> function. See <a href=\"https://stackoverflow.com/q/11061058/3416774\">Using HTMLParser in Python 3.2</a></p>\n"
    },
    "418": {
        "question_id": "2801882",
        "answer_id": "3054314",
        "question": "<p>I am trying to use networkx with Python. When I run this program it get this error. Is there anything missing?</p>\n\n<pre><code>#!/usr/bin/env python\n\nimport networkx as nx\nimport matplotlib\nimport matplotlib.pyplot\nimport matplotlib.pyplot as plt\n\nG=nx.Graph()\nG.add_node(1)\nG.add_nodes_from([2,3,4,5,6,7,8,9,10])\n#nx.draw_graphviz(G)\n#nx_write_dot(G, 'node.png')\nnx.draw(G)\nplt.savefig(\"/var/www/node.png\")\n\n\nTraceback (most recent call last):\n  File \"graph.py\", line 13, in &lt;module&gt;\n    nx.draw(G)\n  File \"/usr/lib/pymodules/python2.5/networkx/drawing/nx_pylab.py\", line 124, in draw\n    cf=pylab.gcf()\n  File \"/usr/lib/pymodules/python2.5/matplotlib/pyplot.py\", line 276, in gcf\n    return figure()\n  File \"/usr/lib/pymodules/python2.5/matplotlib/pyplot.py\", line 254, in figure\n    **kwargs)\n  File \"/usr/lib/pymodules/python2.5/matplotlib/backends/backend_tkagg.py\", line 90, in new_figure_manager\n    window = Tk.Tk()\n  File \"/usr/lib/python2.5/lib-tk/Tkinter.py\", line 1650, in __init__\n    self.tk = _tkinter.create(screenName, baseName, className, interactive, wantobjects, useTk, sync, use)\n_tkinter.TclError: no display name and no $DISPLAY environment variable\n</code></pre>\n\n<hr>\n\n<p>I get a different error now:</p>\n\n<pre><code>#!/usr/bin/env python\n\nimport networkx as nx\nimport matplotlib\nimport matplotlib.pyplot\nimport matplotlib.pyplot as plt\n\nmatplotlib.use('Agg')\n\nG=nx.Graph()\nG.add_node(1)\nG.add_nodes_from([2,3,4,5,6,7,8,9,10])\n#nx.draw_graphviz(G)\n#nx_write_dot(G, 'node.png')\nnx.draw(G)\nplt.savefig(\"/var/www/node.png\")\n</code></pre>\n\n<hr>\n\n<pre><code>/usr/lib/pymodules/python2.5/matplotlib/__init__.py:835: UserWarning:  This call to matplotlib.use() has no effect\nbecause the the backend has already been chosen;\nmatplotlib.use() must be called *before* pylab, matplotlib.pyplot,\nor matplotlib.backends is imported for the first time.\n\n  if warn: warnings.warn(_use_error_msg)\nTraceback (most recent call last):\n  File \"graph.py\", line 15, in &lt;module&gt;\n    nx.draw(G)\n  File \"/usr/lib/python2.5/site-packages/networkx-1.2.dev-py2.5.egg/networkx/drawing/nx_pylab.py\", line 124, in draw\n    cf=pylab.gcf()\n  File \"/usr/lib/pymodules/python2.5/matplotlib/pyplot.py\", line 276, in gcf\n    return figure()\n  File \"/usr/lib/pymodules/python2.5/matplotlib/pyplot.py\", line 254, in figure\n    **kwargs)\n  File \"/usr/lib/pymodules/python2.5/matplotlib/backends/backend_tkagg.py\", line 90, in new_figure_manager\n    window = Tk.Tk()\n  File \"/usr/lib/python2.5/lib-tk/Tkinter.py\", line 1650, in __init__\n    self.tk = _tkinter.create(screenName, baseName, className, interactive, wantobjects, useTk, sync, use)\n_tkinter.TclError: no display name and no $DISPLAY environment variable\n</code></pre>\n\n<hr>\n\n<p>I get a different error now:</p>\n\n<pre><code>#!/usr/bin/env python\n\nimport networkx as nx\nimport matplotlib\nimport matplotlib.pyplot\nimport matplotlib.pyplot as plt\n\nmatplotlib.use('Agg')\n\nG=nx.Graph()\nG.add_node(1)\nG.add_nodes_from([2,3,4,5,6,7,8,9,10])\n#nx.draw_graphviz(G)\n#nx_write_dot(G, 'node.png')\nnx.draw(G)\nplt.savefig(\"/var/www/node.png\")\n</code></pre>\n\n<hr>\n\n<pre><code>/usr/lib/pymodules/python2.5/matplotlib/__init__.py:835: UserWarning:  This call to matplotlib.use() has no effect\nbecause the the backend has already been chosen;\nmatplotlib.use() must be called *before* pylab, matplotlib.pyplot,\nor matplotlib.backends is imported for the first time.\n\n  if warn: warnings.warn(_use_error_msg)\nTraceback (most recent call last):\n  File \"graph.py\", line 15, in &lt;module&gt;\n    nx.draw(G)\n  File \"/usr/lib/python2.5/site-packages/networkx-1.2.dev-py2.5.egg/networkx/drawing/nx_pylab.py\", line 124, in draw\n    cf=pylab.gcf()\n  File \"/usr/lib/pymodules/python2.5/matplotlib/pyplot.py\", line 276, in gcf\n    return figure()\n  File \"/usr/lib/pymodules/python2.5/matplotlib/pyplot.py\", line 254, in figure\n    **kwargs)\n  File \"/usr/lib/pymodules/python2.5/matplotlib/backends/backend_tkagg.py\", line 90, in new_figure_manager\n    window = Tk.Tk()\n  File \"/usr/lib/python2.5/lib-tk/Tkinter.py\", line 1650, in __init__\n    self.tk = _tkinter.create(screenName, baseName, className, interactive, wantobjects, useTk, sync, use)\n_tkinter.TclError: no display name and no $DISPLAY environment variable\n</code></pre>\n",
        "answer": "<p>The main problem is that (on your system) matplotlib chooses an x-using backend by default. I just had the same problem on one of my servers.  The solution for me was to add the following code in a place that gets read <em>before</em> any other pylab/matplotlib/<strong>pyplot</strong> import:</p>\n\n<pre><code>import matplotlib\n# Force matplotlib to not use any Xwindows backend.\nmatplotlib.use('Agg')\n</code></pre>\n\n<p>The alternative is to set it in your .matplotlibrc</p>\n"
    },
    "419": {
        "question_id": "2627002",
        "answer_id": "2627034",
        "question": "<p>I'm doing it like:</p>\n\n<pre><code>def set_property(property,value):  \ndef get_property(property):  \n</code></pre>\n\n<p>or </p>\n\n<pre><code>object.property = value  \nvalue = object.property\n</code></pre>\n\n<p>I'm new to Python, so i'm still exploring the syntax, and i'd like some advice on doing this.  </p>\n",
        "answer": "<p>Try this: <a href=\"http://docs.python.org/library/functions.html?highlight=property#property\" rel=\"noreferrer\">Python Property</a></p>\n\n<p>The sample code is:</p>\n\n<pre><code>class C(object):\n    def __init__(self):\n        self._x = None\n\n    @property\n    def x(self):\n        \"\"\"I'm the 'x' property.\"\"\"\n        print(\"getter of x called\")\n        return self._x\n\n    @x.setter\n    def x(self, value):\n        print(\"setter of x called\")\n        self._x = value\n\n    @x.deleter\n    def x(self):\n        print(\"deleter of x called\")\n        del self._x\n\n\nc = C()\nc.x = 'foo'  # setter called\nfoo = c.x    # getter called\ndel c.x      # deleter called\n</code></pre>\n"
    },
    "420": {
        "question_id": "2211990",
        "answer_id": "3796442",
        "question": "<p>This is not a homework, I am just curious.</p>\n\n<p>INFINITE is the key word here.</p>\n\n<p>I wish to use it as <code>for p in primes()</code>. I believe that this is a built-in function in Haskell.</p>\n\n<p>So, the answer cannot be as naive as \"Just do a Sieve\".</p>\n\n<p>First of all, you do not know how many consecutive primes will be consumed. Well, suppose you could concoct 100 of them at a time. Would you use the same Sieve approach as well as the frequency of prime numbers formula?</p>\n\n<p>I prefer non-concurrent approach.</p>\n\n<p>Thank you for reading (and writing ;) )!</p>\n",
        "answer": "<h1>\u201cIf I have seen further\u2026\u201d</h1>\n\n<p>The <code>erat2</code> function from the cookbook can be further sped up (by about 20-25%):</p>\n\n<h2>erat2a</h2>\n\n<pre><code>import itertools as it\ndef erat2a( ):\n    D = {  }\n    yield 2\n    for q in it.islice(it.count(3), 0, None, 2):\n        p = D.pop(q, None)\n        if p is None:\n            D[q*q] = q\n            yield q\n        else:\n            # old code here:\n            # x = p + q\n            # while x in D or not (x&amp;1):\n            #     x += p\n            # changed into:\n            x = q + 2*p\n            while x in D:\n                x += 2*p\n            D[x] = p\n</code></pre>\n\n<p>The <code>not (x&amp;1)</code> check verifies that <code>x</code> is odd. However, since <em>both</em> <code>q</code> and <code>p</code> are odd, by adding <code>2*p</code> half of the steps are avoided along with the test for oddity.</p>\n\n<h2>erat3</h2>\n\n<p>If one doesn't mind a little extra fanciness, <code>erat2</code> can be sped up by 35-40% with the following changes (NB: needs Python 2.7+ or Python 3+ because of the <code>itertools.compress</code> function):</p>\n\n<pre><code>import itertools as it\ndef erat3( ):\n    D = { 9: 3, 25: 5 }\n    yield 2\n    yield 3\n    yield 5\n    MASK= 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0,\n    MODULOS= frozenset( (1, 7, 11, 13, 17, 19, 23, 29) )\n\n    for q in it.compress(\n            it.islice(it.count(7), 0, None, 2),\n            it.cycle(MASK)):\n        p = D.pop(q, None)\n        if p is None:\n            D[q*q] = q\n            yield q\n        else:\n            x = q + 2*p\n            while x in D or (x%30) not in MODULOS:\n                x += 2*p\n            D[x] = p\n</code></pre>\n\n<p>The <code>erat3</code> function takes advantage of the fact that all primes (except for  2, 3, 5) modulo 30 result to only eight numbers: the ones included in the <code>MODULOS</code> frozenset. Thus, after yielding the initial three primes, we start from 7 and work <em>only</em> with the candidates.<br>\nThe candidate filtering uses the <code>itertools.compress</code> function; the \u201cmagic\u201d is in the <code>MASK</code> sequence; <code>MASK</code> has 15 elements (there are 15 odd numbers in every 30 numbers, as chosen by the <code>itertools.islice</code> function) with a <code>1</code> for every possible candidate, starting from 7. The cycle repeats as specified by the <code>itertools.cycle</code> function.<br>\nThe introduction of the candidate filtering needs another modification: the <code>or (x%30) not in MODULOS</code> check. The <code>erat2</code> algorithm processed all odd numbers; now that the <code>erat3</code> algorithm processes only r30 candidates, we need to make sure that all <code>D.keys()</code> can only be such \u2014false\u2014 candidates.</p>\n\n<h2>Benchmarks</h2>\n\n<h3>Results</h3>\n\n<p>On an Atom 330 Ubuntu 9.10 server, versions 2.6.4 and 3.1.1+:</p>\n\n<pre><code>$ testit\nup to 8192\n==== python2 erat2 ====\n100 loops, best of 3: 18.6 msec per loop\n==== python2 erat2a ====\n100 loops, best of 3: 14.5 msec per loop\n==== python2 erat3 ====\nTraceback (most recent call last):\n\u2026\nAttributeError: 'module' object has no attribute 'compress'\n==== python3 erat2 ====\n100 loops, best of 3: 19.2 msec per loop\n==== python3 erat2a ====\n100 loops, best of 3: 14.1 msec per loop\n==== python3 erat3 ====\n100 loops, best of 3: 11.7 msec per loop\n</code></pre>\n\n<p>On an AMD Geode LX Gentoo home server, Python 2.6.5 and 3.1.2:</p>\n\n<pre><code>$ testit\nup to 8192\n==== python2 erat2 ====\n10 loops, best of 3: 104 msec per loop\n==== python2 erat2a ====\n10 loops, best of 3: 81 msec per loop\n==== python2 erat3 ====\nTraceback (most recent call last):\n\u2026\nAttributeError: 'module' object has no attribute 'compress'\n==== python3 erat2 ====\n10 loops, best of 3: 116 msec per loop\n==== python3 erat2a ====\n10 loops, best of 3: 82 msec per loop\n==== python3 erat3 ====\n10 loops, best of 3: 66 msec per loop\n</code></pre>\n\n<h3>Benchmark code</h3>\n\n<p>A <code>primegen.py</code> module contains the <code>erat2</code>, <code>erat2a</code> and <code>erat3</code> functions. Here follows the testing script:</p>\n\n<pre><code>#!/bin/sh\nmax_num=${1:-8192}\necho up to $max_num\nfor python_version in python2 python3\ndo\n    for function in erat2 erat2a erat3\n    do\n        echo \"==== $python_version $function ====\"\n        $python_version -O -m timeit -c \\\n        -s  \"import itertools as it, functools as ft, operator as op, primegen; cmp= ft.partial(op.ge, $max_num)\" \\\n            \"next(it.dropwhile(cmp, primegen.$function()))\"\n    done\ndone\n</code></pre>\n"
    },
    "421": {
        "question_id": "19735250",
        "answer_id": "19736494",
        "question": "<p>I'm trying to run a Python script from PHP using the following command:</p>\n\n<p><code>exec('/usr/bin/python2.7 /srv/http/assets/py/switch.py arg1 arg2');</code></p>\n\n<p>However, PHP simply doesn't produce any output. Error reporting is set to E_ALL and display_errors is on.</p>\n\n<p>Here's what I've tried:</p>\n\n<ul>\n<li>I used <code>python2</code>, <code>/usr/bin/python2</code> and <code>python2.7</code> instead of <code>/usr/bin/python2.7</code></li>\n<li>I also used a relative path instead of an absolute path which didn't change anything either.</li>\n<li>I tried using the commands <code>exec</code>, <code>shell_exec</code>, <code>system</code>.</li>\n</ul>\n\n<p>However, if I run</p>\n\n<pre><code>if (exec('echo TEST') == 'TEST')\n{\n    echo 'exec works!';\n}\n</code></pre>\n\n<p>it works perfectly fine while <code>shutdown now</code> doesn't do anything.</p>\n\n<p>PHP has the permissions to access and execute the file.</p>\n\n<p>EDIT: Thanks to Alejandro, I was able to fix the problem. If you have the same problem, don't forget that your webserver probably/hopefully doesn't run as root. <strong>Try logging in as your webserver's user or a user with similar permissions and try to run the commands yourself.</strong></p>\n",
        "answer": "<p>Tested on Ubuntu Server 10.04. I hope it helps you also on Arch Linux.</p>\n\n<p>In PHP <a href=\"https://www.php.net/manual/en/function.shell-exec.php\" rel=\"nofollow noreferrer\">use shell_exec function</a>:</p>\n\n<blockquote>\n  <p>Execute command via shell and return the complete output as a string.</p>\n  \n  <p>It returns the output from the executed command or NULL if an error\n  occurred or the command produces no output.</p>\n</blockquote>\n\n<pre><code>&lt;?php \n\n$command = escapeshellcmd('/usr/custom/test.py');\n$output = shell_exec($command);\necho $output;\n\n?&gt;\n</code></pre>\n\n<p>In Python file <code>test.py</code>, verify this text in first line: <a href=\"http://www.stackoverflow.com/questions/2429511/why-do-people-write-usr-bin-env-python-on-the-first-line-of-a-python-script/2429517\">(see shebang explain)</a>:</p>\n\n<pre><code>#!/usr/bin/env python\n</code></pre>\n\n<p>Also Python file <a href=\"http://www.php.net/manual/en/function.shell-exec.php#37971\" rel=\"nofollow noreferrer\">must have correct privileges</a> (execution for user www-data / apache if PHP script runs in browser or curl)\nand/or must be \"executable\". Also all commands into <code>.py</code> file must have correct privileges:</p>\n\n<p>Taken <a href=\"http://www.php.net/manual/en/function.shell-exec.php#37971\" rel=\"nofollow noreferrer\">from php manual</a>:</p>\n\n<blockquote>\n  <p>Just a quick reminder for those trying to use shell_exec on a\n  unix-type platform and can't seem to get it to work. PHP executes as\n  the web user on the system (generally www for Apache), so you need to\n  make sure that the web user has rights to whatever files or\n  directories that you are trying to use in the shell_exec command.\n  Other wise, it won't appear to be doing anything.</p>\n</blockquote>\n\n<p>To <a href=\"http://nersp.nerdc.ufl.edu/~dicke3/nerspcs/chmod.html\" rel=\"nofollow noreferrer\">make executable a file on unix-type platforms</a>:</p>\n\n<pre><code>chmod +x myscript.py\n</code></pre>\n"
    },
    "422": {
        "question_id": "15541404",
        "answer_id": "15541556",
        "question": "<p>While this question doesn't have any real use in practice, I am curious as to how Python does string interning. I have noticed the following.</p>\n\n<pre><code>&gt;&gt; \"string\" is \"string\"\n&gt;&gt; True\n</code></pre>\n\n<p>This is as I expected.</p>\n\n<p>You can also do this.</p>\n\n<pre><code>&gt;&gt; \"strin\"+\"g\" is \"string\"\n&gt;&gt; True\n</code></pre>\n\n<p>And that's pretty clever!</p>\n\n<p>But you can't do this.</p>\n\n<pre><code>&gt;&gt; s1 = \"strin\"\n&gt;&gt; s2 = \"string\"\n&gt;&gt; s1+\"g\" is s2\n&gt;&gt; False\n</code></pre>\n\n<p>Why wouldn't Python evaluate <code>s1+\"g\"</code>, and realize it is the same as <code>s1</code> and point it to the same address? What is actually going on in that last block to have it return <code>False</code>?</p>\n",
        "answer": "<p>This is implementation-specific, but your interpreter is probably interning compile-time constants but not the results of run-time expressions.</p>\n\n<p>In what follows I use CPython 2.7.3.</p>\n\n<p>In the second example, the expression <code>\"strin\"+\"g\"</code> is evaluated at compile time, and is replaced with <code>\"string\"</code>. This makes the first two examples behave the same.</p>\n\n<p>If we examine the bytecodes, we'll see that they are exactly the same:</p>\n\n<pre><code>  # s1 = \"string\"\n  2           0 LOAD_CONST               1 ('string')\n              3 STORE_FAST               0 (s1)\n\n  # s2 = \"strin\" + \"g\"\n  3           6 LOAD_CONST               4 ('string')\n              9 STORE_FAST               1 (s2)\n</code></pre>\n\n<p>The third example involves a run-time concatenation, the result of which is not automatically interned:</p>\n\n<pre><code>  # s3a = \"strin\"\n  # s3 = s3a + \"g\"\n  4          12 LOAD_CONST               2 ('strin')\n             15 STORE_FAST               2 (s3a)\n\n  5          18 LOAD_FAST                2 (s3a)\n             21 LOAD_CONST               3 ('g')\n             24 BINARY_ADD          \n             25 STORE_FAST               3 (s3)\n             28 LOAD_CONST               0 (None)\n             31 RETURN_VALUE        \n</code></pre>\n\n<p>If you were to manually <code>intern()</code> the result of the third expression, you'd get the same object as before:</p>\n\n<pre><code>&gt;&gt;&gt; s3a = \"strin\"\n&gt;&gt;&gt; s3 = s3a + \"g\"\n&gt;&gt;&gt; s3 is \"string\"\nFalse\n&gt;&gt;&gt; intern(s3) is \"string\"\nTrue\n</code></pre>\n"
    },
    "423": {
        "question_id": "526125",
        "answer_id": "526131",
        "question": "<p>Here is the dictionary I have</p>\n\n<pre><code>propertyList = {\n    \"id\":           \"int\",\n    \"name\":         \"char(40)\",\n\n    \"team\":         \"int\",\n    \"realOwner\":    \"int\",\n\n    \"x\":            \"int\",\n    \"y\":            \"int\",\n\n    \"description\":  \"char(255)\",\n\n    \"port\":         \"bool\",\n    \"secret\":       \"bool\",\n    \"dead\":         \"bool\",\n    \"nomadic\":      \"bool\",\n\n    \"population\":   \"int\",\n    \"slaves\":       \"int\",\n}\n</code></pre>\n\n<p>But when I print it out with \"\\n\".join(myDict) I get this</p>\n\n<pre><code>name\nnomadic\ndead\nport\nrealOwner\nsecret\nslaves\nteam\ny\nx\npopulation\nid\ndescription\n</code></pre>\n\n<p>I know that a dictionary is unordered but it comes out the same every time and I've no idea why.</p>\n",
        "answer": "<p>For older versions of Python, the real question should be \u201cwhy not?\u201d \u2014 An unordered dictionary is usually implemented as a <a href=\"http://en.wikipedia.org/wiki/Hash_table\" rel=\"nofollow noreferrer\">hash table</a> where the order of elements is well-defined but not immediately obvious (<a href=\"https://docs.python.org/2.7/library/stdtypes.html#dict.items\" rel=\"nofollow noreferrer\">the Python documentation used to state this</a>). Your observations match the rules of a hash table perfectly: apparent arbitrary, but constant order.</p>\n\n<p>Python has since changed its <code>dict</code> implementation to preserve the order of insertion, and <a href=\"https://mail.python.org/pipermail/python-dev/2017-December/151283.html\" rel=\"nofollow noreferrer\">this is <em>guaranteed</em> as of Python 3.7</a>. The implementation therefore no longer constitutes a pure hash table (but a hash table is still <em>used</em> in its implementation).</p>\n"
    },
    "424": {
        "question_id": "17677649",
        "answer_id": "17677768",
        "question": "<p>I'm trying to create a few buttons (with a for) like so:</p>\n\n<pre><code>def a(self, name):\n    print name\n\nusers = {\"Test\":\"127.0.0.0\", \"Test2\":\"128.0.0.0\"}\nrow = 1\nfor name in users:\n    user_button = Tkinter.Button(self.root,\n                                 text=name,\n                                 command=lambda: self.a(name))\n    user_button.grid(row = row, column = 0)\n    row+=1\n</code></pre>\n\n<p>and for the buttons to each get their own parameter (Test getting Test and Test2 getting Test2) but when i press the buttons they both print \"Test2\" which means they are using the same function with the same parameter.</p>\n\n<p>How can I solve this?</p>\n",
        "answer": "<p>The problem is your lamba in the for loop. Your lambda is using the <code>name</code> variable, but the <code>name</code> variable gets reassigned each time through the for loop. So in the end, all of the buttons get the last value that <code>name</code> was assigned to in the for loop. To avoid this you can use default keyword parameters in your lamba expression like so:</p>\n\n<pre><code>user_button = Tkinter.Button(self.root,\n                             text=name,\n                             command=lambda name=name: self.a(name))\n</code></pre>\n\n<p>This binds the current value of the <code>name</code> variable to the lamba's <code>name</code> keyword argument each time through the loop, producing the desired effect.</p>\n"
    },
    "425": {
        "question_id": "53162",
        "answer_id": "53180",
        "question": "<p>I have a long line of code that I want to break up among multiple lines. What do I use and what is the syntax?</p>\n\n<p>For example, adding a bunch of strings,</p>\n\n<pre><code>e = 'a' + 'b' + 'c' + 'd'\n</code></pre>\n\n<p>and have it in two lines like this:</p>\n\n<pre><code>e = 'a' + 'b' +\n    'c' + 'd'\n</code></pre>\n",
        "answer": "<p>What is the line?  You can just have arguments on the next line without any problems:</p>\n\n<pre><code>a = dostuff(blahblah1, blahblah2, blahblah3, blahblah4, blahblah5, \n            blahblah6, blahblah7)\n</code></pre>\n\n<p>Otherwise you can do something like this:</p>\n\n<pre><code>if a == True and \\\n   b == False\n</code></pre>\n\n<p>Check the <a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\">style guide</a> for more information.</p>\n\n<p>From your example line:</p>\n\n<pre><code>a = '1' + '2' + '3' + \\\n    '4' + '5'\n</code></pre>\n\n<p>Or:</p>\n\n<pre><code>a = ('1' + '2' + '3' +\n    '4' + '5')\n</code></pre>\n\n<p>Note that the style guide says that using the implicit continuation with parentheses is preferred, but in this particular case just adding parentheses around your expression is probably the wrong way to go.</p>\n"
    },
    "426": {
        "question_id": "12608788",
        "answer_id": "12608937",
        "question": "<p>I am trying to fix how python plots my data.</p>\n\n<p>Say </p>\n\n<pre><code>x = [0,5,9,10,15]\n</code></pre>\n\n<p>and </p>\n\n<pre><code>y = [0,1,2,3,4]\n</code></pre>\n\n<p>Then I would do:</p>\n\n<pre><code>matplotlib.pyplot.plot(x,y)\nmatplotlib.pyplot.show()\n</code></pre>\n\n<p>and the x axis' ticks are plotted in intervals of 5. Is there a way to make it show intervals of 1?</p>\n",
        "answer": "<p>You could explicitly set where you want to tick marks with <code>plt.xticks</code>:</p>\n\n<pre><code>plt.xticks(np.arange(min(x), max(x)+1, 1.0))\n</code></pre>\n\n<hr>\n\n<p>For example,</p>\n\n<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\nx = [0,5,9,10,15]\ny = [0,1,2,3,4]\nplt.plot(x,y)\nplt.xticks(np.arange(min(x), max(x)+1, 1.0))\nplt.show()\n</code></pre>\n\n<hr>\n\n<p>(<code>np.arange</code> was used rather than Python's <code>range</code> function just in case <code>min(x)</code> and <code>max(x)</code> are floats instead of ints.) </p>\n\n<hr>\n\n<p>The <code>plt.plot</code> (or <code>ax.plot</code>) function will automatically set default <code>x</code> and <code>y</code> limits. If you wish to keep those limits, and just change the stepsize of the tick marks, then you could use <code>ax.get_xlim()</code> to discover what limits Matplotlib has already set. </p>\n\n<pre><code>start, end = ax.get_xlim()\nax.xaxis.set_ticks(np.arange(start, end, stepsize))\n</code></pre>\n\n<p>The default tick formatter should do a decent job rounding the tick values to a sensible number of significant digits. However, if you wish to have more control over the format, you can define your own formatter. For example,</p>\n\n<pre><code>ax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%0.1f'))\n</code></pre>\n\n<p>Here's a runnable example:</p>\n\n<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\nx = [0,5,9,10,15]\ny = [0,1,2,3,4]\nfig, ax = plt.subplots()\nax.plot(x,y)\nstart, end = ax.get_xlim()\nax.xaxis.set_ticks(np.arange(start, end, 0.712123))\nax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%0.1f'))\nplt.show()\n</code></pre>\n"
    },
    "427": {
        "question_id": "11011756",
        "answer_id": "11011846",
        "question": "<p>For example I have two dicts:</p>\n\n<pre><code>Dict A: {'a': 1, 'b': 2, 'c': 3}\nDict B: {'b': 3, 'c': 4, 'd': 5}\n</code></pre>\n\n<p>I need a pythonic way of 'combining' two dicts such that the result is:</p>\n\n<pre><code>{'a': 1, 'b': 5, 'c': 7, 'd': 5}\n</code></pre>\n\n<p>That is to say: if a key appears in both dicts, add their values, if it appears in only one dict, keep its value.</p>\n",
        "answer": "<p>Use <a href=\"http://docs.python.org/library/collections.html#collections.Counter\" rel=\"noreferrer\"><code>collections.Counter</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; A = Counter({'a':1, 'b':2, 'c':3})\n&gt;&gt;&gt; B = Counter({'b':3, 'c':4, 'd':5})\n&gt;&gt;&gt; A + B\nCounter({'c': 7, 'b': 5, 'd': 5, 'a': 1})\n</code></pre>\n\n<p>Counters are basically a subclass of <code>dict</code>, so you can still do everything else with them you'd normally do with that type, such as iterate over their keys and values.</p>\n"
    },
    "428": {
        "question_id": "436198",
        "answer_id": "16577427",
        "question": "<p>It seems they canceled in Python 3 all the easy way to quickly load a script by removing <code>execfile()</code> </p>\n\n<p>Is there an obvious alternative I'm missing?</p>\n",
        "answer": "<p><a href=\"https://docs.python.org/3.3/whatsnew/3.0.html?highlight=execfile#builtins\" rel=\"noreferrer\">According to the documentation</a>, instead of </p>\n\n<pre><code>execfile(\"./filename\") \n</code></pre>\n\n<p>Use</p>\n\n<pre><code>exec(open(\"./filename\").read())\n</code></pre>\n\n<p>See:</p>\n\n<ul>\n<li><a href=\"http://docs.python.org/3.3/whatsnew/3.0.html?highlight=execfile#builtins\" rel=\"noreferrer\">What\u2019s New In Python 3.0</a></li>\n</ul>\n"
    },
    "429": {
        "question_id": "494594",
        "answer_id": "499245",
        "question": "<p>I had originally coded the program wrongly. Instead of returning the Fibonacci numbers between a range (ie. startNumber 1, endNumber 20 should = only those numbers between 1 &amp; 20), I have written for the program to display all Fibonacci numbers between a range (ie. startNumber 1, endNumber 20 displays = First 20 Fibonacci numbers). I thought I had a sure-fire code. I also do not see why this is happening.</p>\n\n<pre><code>startNumber = int(raw_input(\"Enter the start number here \"))\nendNumber = int(raw_input(\"Enter the end number here \"))\n\ndef fib(n):\n    if n &lt; 2:\n        return n\n    return fib(n-2) + fib(n-1)\n\nprint map(fib, range(startNumber, endNumber))\n</code></pre>\n\n<p>Someone pointed out in my Part II (which was closed for being a duplicate - <a href=\"https://stackoverflow.com/questions/504193/how-to-write-the-fibonacci-sequence-in-python-part-ii\">https://stackoverflow.com/questions/504193/how-to-write-the-fibonacci-sequence-in-python-part-ii</a>) that I need to pass the startNumber and endNumber through a generator using a while loop. Can someone please point me in the direction on how to do this? Any help is welcome.</p>\n\n<hr>\n\n<p>I'm a learning programmer and I've run into a bit of a jumble. I am asked to write a program that will compute and display Fibonacci's Sequence by a user inputted start number and end number (ie. startNumber = 20 endNumber = 100 and it will display only the numbers between that range). The trick is to use it inclusively (which I do not know how to do in Python? - I'm assuming this means to use an inclusive range?).</p>\n\n<p>What I have so far is no actual coding but rather:</p>\n\n<ul>\n<li>Write Fib sequence formula to infinite</li>\n<li>Display startNumber to endNumber only from Fib sequence.</li>\n</ul>\n\n<p>I have no idea where to start and I am asking for ideas or insight into how to write this. I also have tried to write the Fib sequence forumla but I get lost on that as well.</p>\n",
        "answer": "<p>There is lots of information about the Fibonacci Sequence on <a href=\"http://en.wikipedia.org/wiki/Fibonacci_number\" rel=\"noreferrer\">wikipedia</a> and on <a href=\"http://mathworld.wolfram.com/FibonacciNumber.html\" rel=\"noreferrer\">wolfram</a>. A lot more than you may need. Anyway it is a good thing to learn how to use these resources to find (quickly if possible) what you need.</p>\n\n<h2>Write Fib sequence formula to infinite</h2>\n\n<p>In math, it's given in a recursive form:</p>\n\n<p><img src=\"https://upload.wikimedia.org/math/7/6/f/76f99713cf111eb035d908228c351710.png\" alt=\"fibonacci from wikipedia\"></p>\n\n<p>In programming, <strong>infinite</strong> doesn't exist. You can use a recursive form translating the math form directly in your language, for example in Python it becomes:</p>\n\n<pre><code>def F(n):\n    if n == 0: return 0\n    elif n == 1: return 1\n    else: return F(n-1)+F(n-2)\n</code></pre>\n\n<p>Try it in your favourite language and see that this form requires <strong>a lot</strong> of time as n gets bigger. In fact, this is O(2<sup>n</sup>) in time.</p>\n\n<p>Go on on the sites I linked to you and will see this (on <a href=\"http://mathworld.wolfram.com/images/equations/FibonacciNumber/NumberedEquation6.gif\" rel=\"noreferrer\">wolfram</a>):</p>\n\n<p><a href=\"https://i.stack.imgur.com/SPYOU.gif\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/SPYOU.gif\" alt=\"Fibonacci Equation\"></a></p>\n\n<p>This one is pretty easy to implement and very, very fast to compute, in Python:</p>\n\n<pre><code>from math import sqrt\ndef F(n):\n    return ((1+sqrt(5))**n-(1-sqrt(5))**n)/(2**n*sqrt(5))\n</code></pre>\n\n<p>An other way to do it is following the definition (from <a href=\"http://en.wikipedia.org/wiki/Fibonacci_number\" rel=\"noreferrer\">wikipedia</a>):</p>\n\n<blockquote>\n  <p>The first number of the sequence is 0,\n  the second number is 1, and each\n  subsequent number is equal to the sum\n  of the previous two numbers of the\n  sequence itself, yielding the sequence\n  0, 1, 1, 2, 3, 5, 8, etc.</p>\n</blockquote>\n\n<p>If your language supports iterators you may do something like:</p>\n\n<pre><code>def F():\n    a,b = 0,1\n    while True:\n        yield a\n        a, b = b, a + b\n</code></pre>\n\n<h2>Display startNumber to endNumber only from Fib sequence.</h2>\n\n<p>Once you know how to generate Fibonacci Numbers you just have to cycle trough the numbers and check if they verify the given conditions.</p>\n\n<p>Suppose now you wrote a f(n) that returns the n-th term of the Fibonacci Sequence (like the one with sqrt(5) )</p>\n\n<p>In most languages you can do something like:</p>\n\n<pre><code>def SubFib(startNumber, endNumber):\n    n = 0\n    cur = f(n)\n    while cur &lt;= endNumber:\n        if startNumber &lt;= cur:\n            print cur\n        n += 1\n        cur = f(n)\n</code></pre>\n\n<p>In python I'd use the iterator form and go for:</p>\n\n<pre><code>def SubFib(startNumber, endNumber):\n    for cur in F():\n        if cur &gt; endNumber: return\n        if cur &gt;= startNumber:\n            yield cur\n\nfor i in SubFib(10, 200):\n    print i\n</code></pre>\n\n<p>My hint is to <em>learn to read</em> what you need. Project Euler (google for it) will train you to do so :P\nGood luck and have fun!</p>\n"
    },
    "430": {
        "question_id": "23708898",
        "answer_id": "23709194",
        "question": "<p>I'm running into a weird error trying to install Django on my computer.</p>\n\n<p>This is the sequence that I've typed into my command line:</p>\n\n<pre><code>C:\\Python34&gt;python get-pip.py\nRequirement already up-to-date: pip in c:\\python34\\lib\\site-packages\nCleaning up...\n\nC:\\Python34&gt;pip install Django\n'pip' is not recognized as an internal or external command,\noperable program or batch file.\n\nC:\\Python34&gt;lib\\site-packages\\pip install Django\n'lib\\site-packages\\pip' is not recognized as an internal or external command,\noperable program or batch file. \n</code></pre>\n\n<p>What could be causing this?</p>\n\n<p>EDIT <strong>___________________</strong></p>\n\n<p>As requested this is what I get when I type in echo %PATH%</p>\n\n<pre><code>C:\\Python34&gt;echo %PATH%\nC:\\Program Files\\ImageMagick-6.8.8-Q16;C:\\Program Files (x86)\\Intel\\iCLS Client\\\n;C:\\Program Files\\Intel\\iCLS Client\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\S\nystem32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\\nWindows Live\\Shared;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x86;C:\\Progr\nam Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x64;C:\\Program Files\\Intel\\Intel(R) Mana\ngement Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine C\nomponents\\IPT;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\n\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\P\nrogram Files (x86)\\nodejs\\;C:\\Program Files (x86)\\Heroku\\bin;C:\\Program Files (x\n86)\\git\\cmd;C:\\RailsInstaller\\Ruby2.0.0\\bin;C:\\RailsInstaller\\Git\\cmd;C:\\RailsIn\nstaller\\Ruby1.9.3\\bin;C:\\Users\\Javi\\AppData\\Roaming\\npm\n</code></pre>\n",
        "answer": "<p><strong>You need to add the path of your pip installation to your PATH system variable</strong>. By default, pip is installed to <code>C:\\Python34\\Scripts\\pip</code> (pip now comes bundled with new versions of python), so the path \"C:\\Python34\\Scripts\" needs to be added to your PATH variable.</p>\n\n<p>To check if it is already in your PATH variable, type <code>echo %PATH%</code> at the CMD prompt</p>\n\n<p><strong>To add the path of your pip installation to your PATH variable</strong>, you can use the Control Panel or the <code>setx</code> command. For example:</p>\n\n<pre><code>setx PATH \"%PATH%;C:\\Python34\\Scripts\"\n</code></pre>\n\n<hr>\n\n<p><strong>Note</strong>:\nAccording to the <a href=\"https://technet.microsoft.com/en-us/library/cc755104%28v=ws.11%29.aspx\">official documentation</a>, \"[v]ariables set with setx variables are available in future command windows only, not in the current command window\". In particular, <em>you will need to start a new cmd.exe instance</em> after entering the above command in order to utilize the new environment variable. </p>\n\n<p>Thanks to Scott Bartell for pointing this out.</p>\n"
    },
    "431": {
        "question_id": "163542",
        "answer_id": "165662",
        "question": "<p>If I do the following:</p>\n\n<pre><code>import subprocess\nfrom cStringIO import StringIO\nsubprocess.Popen(['grep','f'],stdout=subprocess.PIPE,stdin=StringIO('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')).communicate()[0]\n</code></pre>\n\n<p>I get:</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in ?\n  File \"/build/toolchain/mac32/python-2.4.3/lib/python2.4/subprocess.py\", line 533, in __init__\n    (p2cread, p2cwrite,\n  File \"/build/toolchain/mac32/python-2.4.3/lib/python2.4/subprocess.py\", line 830, in _get_handles\n    p2cread = stdin.fileno()\nAttributeError: 'cStringIO.StringI' object has no attribute 'fileno'\n</code></pre>\n\n<p>Apparently a cStringIO.StringIO object doesn't quack close enough to a file duck to suit subprocess.Popen.  How do I work around this?</p>\n",
        "answer": "<p><a href=\"https://docs.python.org/3/library/subprocess.html?highlight=subprocess#subprocess.Popen.communicate\" rel=\"noreferrer\"><code>Popen.communicate()</code></a> documentation:</p>\n\n<blockquote>\n  <p>Note that if you want to send data to\n  the process\u2019s stdin, you need to\n  create the Popen object with\n  stdin=PIPE. Similarly, to get anything\n  other than None in the result tuple,\n  you need to give stdout=PIPE and/or\n  stderr=PIPE too.</p>\n  \n  <p><strong>Replacing os.popen*</strong></p>\n</blockquote>\n\n<pre><code>    pipe = os.popen(cmd, 'w', bufsize)\n    # ==&gt;\n    pipe = Popen(cmd, shell=True, bufsize=bufsize, stdin=PIPE).stdin\n</code></pre>\n\n<blockquote>\n  <p><strong>Warning</strong> Use communicate() rather than\n  stdin.write(), stdout.read() or\n  stderr.read() to avoid deadlocks due\n  to any of the other OS pipe buffers\n  filling up and blocking the child\n  process.</p>\n</blockquote>\n\n<p>So your example could be written as follows:</p>\n\n<pre><code>from subprocess import Popen, PIPE, STDOUT\n\np = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)    \ngrep_stdout = p.communicate(input=b'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]\nprint(grep_stdout.decode())\n# -&gt; four\n# -&gt; five\n# -&gt;\n</code></pre>\n\n<hr>\n\n<p>On the current Python 3 version, you could use <a href=\"https://docs.python.org/3/library/subprocess.html#subprocess.run\" rel=\"noreferrer\"><code>subprocess.run</code></a>, to pass input as a string to an external command and get its exit status, and its output as a string back in one call:</p>\n\n<pre><code>#!/usr/bin/env python3\nfrom subprocess import run, PIPE\n\np = run(['grep', 'f'], stdout=PIPE,\n        input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n', encoding='ascii')\nprint(p.returncode)\n# -&gt; 0\nprint(p.stdout)\n# -&gt; four\n# -&gt; five\n# -&gt; \n</code></pre>\n"
    },
    "432": {
        "question_id": "1746613",
        "answer_id": "1746642",
        "question": "<p>Consider this code:</p>\n\n<pre><code>x = 1        # 0001\nx &lt;&lt; 2       # Shift left 2 bits: 0100\n# Result: 4\n\nx | 2        # Bitwise OR: 0011\n# Result: 3\n\nx &amp; 1        # Bitwise AND: 0001\n# Result: 1\n</code></pre>\n\n<p>I can understand the arithmetic operators in Python (and other languages), but I never understood 'bitwise' operators quite well. In the above example (from a Python book), I understand the left-shift but not the other two.</p>\n\n<p>Also, what are bitwise operators actually used for? I'd appreciate some examples.</p>\n",
        "answer": "<p>Bitwise operators are operators that work on multi-bit values, but conceptually one bit at a time.</p>\n\n<ul>\n<li><code>AND</code> is 1 only if <em>both</em> of its inputs are 1, otherwise it's 0.</li>\n<li><code>OR</code> is 1 if <em>one or both</em> of its inputs are 1, otherwise it's 0.</li>\n<li><code>XOR</code> is 1 only if <em>exactly one</em> of its inputs are 1, otherwise it's 0.</li>\n<li><code>NOT</code> is 1 only if its input is 0, otherwise it's 0.</li>\n</ul>\n\n<p>These can often be best shown as truth tables.  Input possibilities are on the top and left, the resultant bit is one of the four (two in the case of NOT since it only has one input) values shown at the intersection of the inputs.</p>\n\n<pre><code>AND | 0 1     OR | 0 1     XOR | 0 1    NOT | 0 1\n----+-----    ---+----     ----+----    ----+----\n 0  | 0 0      0 | 0 1       0 | 0 1        | 1 0\n 1  | 0 1      1 | 1 1       1 | 1 0\n</code></pre>\n\n<p>One example is if you only want the lower 4 bits of an integer, you AND it with 15 (binary 1111) so:</p>\n\n<pre><code>    201: 1100 1001\nAND  15: 0000 1111\n------------------\n IS   9  0000 1001\n</code></pre>\n\n<p>The zero bits in 15 in that case effectively act as a filter, forcing the bits in the result to be zero as well.</p>\n\n<p>In addition, <code>&gt;&gt;</code> and <code>&lt;&lt;</code> are often included as bitwise operators, and they \"shift\" a value respectively right and left by a certain number of bits, throwing away bits that roll of the end you're shifting towards, and feeding in zero bits at the other end.</p>\n\n<p>So, for example:</p>\n\n<pre><code>1001 0101 &gt;&gt; 2 gives 0010 0101\n1111 1111 &lt;&lt; 4 gives 1111 0000\n</code></pre>\n\n<p>Note that the left shift in Python is unusual in that it's not using a fixed width where bits are discarded - while many languages use a fixed width based on the data type, Python simply expands the width to cater for extra bits. In order to get the discarding behaviour in Python, you can follow a left shift with a bitwise <code>and</code> such as in an 8-bit value shifting left four bits:</p>\n\n<pre><code>bits8 = (bits8 &lt;&lt; 4) &amp; 255\n</code></pre>\n\n<p>With that in mind, another example of bitwise operators is if you have two 4-bit values that you want to pack into an 8-bit one, you can use all three of your operators (<code>left-shift</code>, <code>and</code> and <code>or</code>):</p>\n\n<pre><code>packed_val = ((val1 &amp; 15) &lt;&lt; 4) | (val2 &amp; 15)\n</code></pre>\n\n<ul>\n<li>The <code>&amp; 15</code> operation will make sure that both values only have the lower 4 bits.</li>\n<li>The <code>&lt;&lt; 4</code> is a 4-bit shift left to move <code>val1</code> into the top 4 bits of an 8-bit value.</li>\n<li>The <code>|</code> simply combines these two together.</li>\n</ul>\n\n<p>If <code>val1</code> is 7 and <code>val2</code> is 4:</p>\n\n<pre><code>                val1            val2\n                ====            ====\n &amp; 15 (and)   xxxx-0111       xxxx-0100  &amp; 15\n &lt;&lt; 4 (left)  0111-0000           |\n                  |               |\n                  +-------+-------+\n                          |\n| (or)                0111-0100\n</code></pre>\n"
    },
    "433": {
        "question_id": "2407398",
        "answer_id": "2407405",
        "question": "<p>What is the Pythonic approach to achieve the following?</p>\n\n<pre><code># Original lists:\n\nlist_a = [1, 2, 3, 4]\nlist_b = [5, 6, 7, 8]\n\n# List of tuples from 'list_a' and 'list_b':\n\nlist_c = [(1,5), (2,6), (3,7), (4,8)]\n</code></pre>\n\n<p>Each member of <code>list_c</code> is a tuple, whose first member is from <code>list_a</code> and the second is from <code>list_b</code>.</p>\n",
        "answer": "<p>In Python 2:</p>\n\n<pre><code>&gt;&gt;&gt; list_a = [1, 2, 3, 4]\n&gt;&gt;&gt; list_b = [5, 6, 7, 8]\n&gt;&gt;&gt; zip(list_a, list_b)\n[(1, 5), (2, 6), (3, 7), (4, 8)]\n</code></pre>\n\n<p>In Python 3:</p>\n\n<pre><code>&gt;&gt;&gt; list_a = [1, 2, 3, 4]\n&gt;&gt;&gt; list_b = [5, 6, 7, 8]\n&gt;&gt;&gt; list(zip(list_a, list_b))\n[(1, 5), (2, 6), (3, 7), (4, 8)]\n</code></pre>\n"
    },
    "434": {
        "question_id": "2553354",
        "answer_id": "2553532",
        "question": "<p>I would like to be able to get the name of a variable as a string but I don't know if Python has that much introspection capabilities. Something like:</p>\n\n<pre><code>&gt;&gt;&gt; print(my_var.__name__)\n'my_var'\n</code></pre>\n\n<p>I want to do that because I have a bunch of variables I'd like to turn into a dictionary like :</p>\n\n<pre><code>bar = True\nfoo = False\n&gt;&gt;&gt; my_dict = dict(bar=bar, foo=foo)\n&gt;&gt;&gt; print my_dict \n{'foo': False, 'bar': True}\n</code></pre>\n\n<p>But I'd like something more automatic than that.</p>\n\n<p>Python have <code>locals()</code> and <code>vars()</code>, so I guess there is a way.</p>\n",
        "answer": "<p>Are you trying to do this?</p>\n\n<pre><code>dict( (name,eval(name)) for name in ['some','list','of','vars'] )\n</code></pre>\n\n<p>Example </p>\n\n<pre><code>&gt;&gt;&gt; some= 1\n&gt;&gt;&gt; list= 2\n&gt;&gt;&gt; of= 3\n&gt;&gt;&gt; vars= 4\n&gt;&gt;&gt; dict( (name,eval(name)) for name in ['some','list','of','vars'] )\n{'list': 2, 'some': 1, 'vars': 4, 'of': 3}\n</code></pre>\n"
    },
    "435": {
        "question_id": "3480184",
        "answer_id": "3480190",
        "question": "<p>I think 'unpack' might be the wrong vocabulary here - apologies because I'm sure this is a duplicate question.</p>\n\n<p>My question is pretty simple: in a function that expects a list of items, how can I pass a Python list item without getting an error?</p>\n\n<pre><code>my_list = ['red', 'blue', 'orange']\nfunction_that_needs_strings('red', 'blue', 'orange') # works!\nfunction_that_needs_strings(my_list) # breaks!\n</code></pre>\n\n<p>Surely there must be a way to expand the list, and pass the function <code>'red','blue','orange'</code> on the hoof?</p>\n",
        "answer": "<pre><code>function_that_needs_strings(*my_list) # works!\n</code></pre>\n\n<p><a href=\"https://docs.python.org/2/tutorial/controlflow.html#unpacking-argument-lists\" rel=\"noreferrer\">You can read all about it here.</a></p>\n"
    },
    "436": {
        "question_id": "25504149",
        "answer_id": "25504196",
        "question": "<p>I'm using <a href=\"http://flask.pocoo.org/\" rel=\"noreferrer\">Flask</a> for developing a website and while in development I run flask using the following file:</p>\n\n<pre><code>#!/usr/bin/env python\nfrom datetime import datetime\nfrom app import app\nimport config\n\nif __name__ == '__main__':\n    print '################### Restarting @', datetime.utcnow(), '###################'\n    app.run(port=4004, debug=config.DEBUG, host='0.0.0.0')\n</code></pre>\n\n<p>When I start the server, or when it auto-restarts because files have been updated, it always shows the print line twice:</p>\n\n<pre><code>################### Restarting @ 2014-08-26 10:51:49.167062 ###################\n################### Restarting @ 2014-08-26 10:51:49.607096 ###################\n</code></pre>\n\n<p>Although it is not really a problem (the rest works as expected), I simply wonder why it behaves like this? Any ideas?</p>\n",
        "answer": "<p>The Werkzeug reloader spawns a child process so that it can restart that process each time your code changes. Werkzeug is the library that supplies Flask with the development server when you call <code>app.run()</code>.</p>\n\n<p>See the <a href=\"https://github.com/mitsuhiko/werkzeug/blob/49ee2786630a0307631f4184c3c58d56996cb2b4/werkzeug/_reloader.py#L90-L110\" rel=\"noreferrer\"><code>restart_with_reloader()</code> function code</a>; your script is run <em>again</em> with <code>subprocess.call()</code>.</p>\n\n<p>If you set <code>use_reloader</code> to <code>False</code> you'll see the behaviour go away, but then you also lose the reloading functionality:</p>\n\n<pre><code>app.run(port=4004, debug=config.DEBUG, host='0.0.0.0', use_reloader=False)\n</code></pre>\n\n<p>You can disable the reloader when using the <code>flask run</code> command too:</p>\n\n<pre><code>FLASK_DEBUG=1 flask run --no-reload\n</code></pre>\n\n<p>You can look for the <code>WERKZEUG_RUN_MAIN</code> environment variable if you wanted to detect when you are in the reloading child process:</p>\n\n<pre><code>import os\nif os.environ.get('WERKZEUG_RUN_MAIN') == 'true':\n    print '################### Restarting @ {} ###################'.format(\n        datetime.utcnow())\n</code></pre>\n\n<p>However, if you need to set up module globals, then you should instead use the <a href=\"http://flask.pocoo.org/docs/0.10/api/#flask.Flask.before_first_request\" rel=\"noreferrer\"><code>@app.before_first_request</code> decorator</a> on a function and have that function set up such globals. It'll be called just once after every reload when the first request comes in:</p>\n\n<pre><code>@app.before_first_request\ndef before_first_request():\n    print '########### Restarted, first request @ {} ############'.format(\n        datetime.utcnow())\n</code></pre>\n\n<p>Do take into account that if you run this in a full-scale WSGI server that uses forking or new subprocesses to handle requests, that <code>before_first_request</code> handlers <em>may</em> be invoked for each new subprocess.</p>\n"
    },
    "437": {
        "question_id": "17309889",
        "answer_id": "17322636",
        "question": "<p>How are you meant to debug errors in Flask?  Print to the console?  Flash messages to the page?  Or is there a more powerful option available to figure out what's happening when something goes wrong?</p>\n",
        "answer": "<p>Running the app in development mode will show an interactive traceback and console in the browser when there is an error. To run in development mode, set the <code>FLASK_ENV=development</code> environment variable then use the <code>flask run</code> command (remember to point <code>FLASK_APP</code> to your app as well).</p>\n\n<p>For Linux, Mac, Linux Subsystem for Windows, Git Bash on Windows, etc.:</p>\n\n<pre><code>export FLASK_APP=myapp\nexport FLASK_ENV=development\nflask run\n</code></pre>\n\n<p>For Windows CMD, use <code>set</code> instead of export:</p>\n\n<pre><code>set FLASK_ENV=development\n</code></pre>\n\n<p>For PowerShell, use <code>$env</code>:</p>\n\n<pre><code>$env:FLASK_ENV = \"development\"\n</code></pre>\n\n<p>Prior to Flask 1.0, this was controlled by the <code>FLASK_DEBUG=1</code> environment variable instead.</p>\n\n<p>If you're using the <code>app.run()</code> method instead of the <code>flask run</code> command, pass <code>debug=True</code> to enable debug mode.</p>\n\n<p>Tracebacks are also printed to the terminal running the server, regardless of development mode.</p>\n\n<p>If you're using PyCharm, VS Code, etc., you can take advantage of its debugger to step through the code with breakpoints. The run configuration can point to a script calling <code>app.run(debug=True, use_reloader=False)</code>, or point it at the <code>venv/bin/flask</code> script and use it as you would from the command line. You can leave the reloader disabled, but a reload will kill the debugging context and you will have to catch a breakpoint again.</p>\n\n<p>You can also use pdb, pudb, or another terminal debugger by calling <code>set_trace</code> in the view where you want to start debugging.</p>\n\n<hr>\n\n<p>Be sure not to use too-broad except blocks. Surrounding all your code with a catch-all <code>try... except...</code> will silence the error you want to debug. It's unnecessary in general, since Flask will already handle exceptions by showing the debugger or a 500 error and printing the traceback to the console.</p>\n"
    },
    "438": {
        "question_id": "9792664",
        "answer_id": "9792680",
        "question": "<p>Recently I noticed that when I am converting a <code>list</code> to <code>set</code> the order of elements is changed and is sorted by character.</p>\n\n<p>Consider this example:</p>\n\n<pre><code>x=[1,2,20,6,210]\nprint x \n# [1, 2, 20, 6, 210] # the order is same as initial order\n\nset(x)\n# set([1, 2, 20, 210, 6]) # in the set(x) output order is sorted\n</code></pre>\n\n<p>My questions are -</p>\n\n<ol>\n<li>Why is this happening?</li>\n<li>How can I do set operations (especially Set Difference) without losing the initial order?</li>\n</ol>\n",
        "answer": "<ol>\n<li><p>A <a href=\"https://docs.python.org/2/library/sets.html\" rel=\"noreferrer\"><code>set</code></a> is an unordered data structure.</p></li>\n<li><p>Don't use a <a href=\"https://docs.python.org/2/library/sets.html\" rel=\"noreferrer\"><code>set</code></a>, but rather <a href=\"https://docs.python.org/2/library/collections.html#collections.OrderedDict\" rel=\"noreferrer\"><code>collections.OrderedDict</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; a = collections.OrderedDict.fromkeys([1, 2, 20, 6, 210])\n&gt;&gt;&gt; b = collections.OrderedDict.fromkeys([6, 20, 1])\n&gt;&gt;&gt; collections.OrderedDict.fromkeys(x for x in a if x not in b)\nOrderedDict([(2, None), (210, None)])\n</code></pre>\n\n<p>Note that the order of <code>b</code> does not matter, so it could be any iterable, but it should be an iterable which supports O(1) membership tests.</p></li>\n</ol>\n\n<p><strong>Edit</strong>: The answer above assumes that you want to be able to perform (ordered) set operations on all occurring collections, in particular also on the result of a former set operation.  If this is not necessary, you can simply use lists for some of the collections, and sets for others, e.g.</p>\n\n<pre><code>&gt;&gt;&gt; a = [1, 2, 20, 6, 210]\n&gt;&gt;&gt; b = set([6, 20, 1])\n&gt;&gt;&gt; [x for x in a if x not in b]\n[2, 210]\n</code></pre>\n\n<p>This loses the order of <code>b</code>, does not allow fast membership tests on <code>a</code> and the result.  Sets allow fast membership tests, and lists keep order.  If you need both these features on the same collection, then use <code>collections.OrderedDict</code>.</p>\n"
    },
    "439": {
        "question_id": "6074018",
        "answer_id": "6074117",
        "question": "<p>Looking into Queue.py in Python 2.6, I found this construct that I found a bit strange:</p>\n\n<pre><code>def full(self):\n    \"\"\"Return True if the queue is full, False otherwise\n    (not reliable!).\"\"\"\n    self.mutex.acquire()\n    n = 0 &lt; self.maxsize == self._qsize()\n    self.mutex.release()\n    return n\n</code></pre>\n\n<p>If <code>maxsize</code> is 0 the queue is never full.</p>\n\n<p>My question is how does it work for this case? How <code>0 &lt; 0 == 0</code> is considered False?</p>\n\n<pre><code>&gt;&gt;&gt; 0 &lt; 0 == 0\nFalse\n&gt;&gt;&gt; (0) &lt; (0 == 0)\nTrue\n&gt;&gt;&gt; (0 &lt; 0) == 0\nTrue\n&gt;&gt;&gt; 0 &lt; (0 == 0)\nTrue\n</code></pre>\n",
        "answer": "<p>I believe Python has special case handling for sequences of relational operators to make range comparisons easy to express. It's much nicer to be able to say <code>0 &lt; x &lt;= 5</code> than to say <code>(0 &lt; x) and (x &lt;= 5)</code>.</p>\n\n<p>These are called <a href=\"https://docs.python.org/2/reference/expressions.html#not-in\" rel=\"noreferrer\">chained comparisons</a>. And that's a link to the documentation for them.</p>\n\n<p>With the other cases you talk about, the parenthesis force one relational operator to be applied before the other, and so they are no longer chained comparisons. And since <code>True</code> and <code>False</code> have values as integers you get the answers you do out of the parenthesized versions.</p>\n"
    },
    "440": {
        "question_id": "533631",
        "answer_id": "547714",
        "question": "<p>In \"<a href=\"https://rads.stackoverflow.com/amzn/click/com/0596009259\" rel=\"noreferrer\" rel=\"nofollow noreferrer\">Programming Python</a>\", Mark Lutz mentions \"mixins\". I'm from a C/C++/C# background and I have not heard the term before. What is a mixin? </p>\n\n<p>Reading between the lines of <a href=\"http://books.google.com/books?id=5zYVUIl7F0QC&amp;pg=RA1-PA584&amp;lpg=RA1-PA584&amp;dq=programming+python+guimixin&amp;source=bl&amp;ots=HU833giXzH&amp;sig=jwLpxSp4m_VbOYQ897UDkGNx_2U&amp;hl=en&amp;ei=x8iRSaTTF5iq-ganpbGPCw&amp;sa=X&amp;oi=book_result&amp;resnum=3&amp;ct=result\" rel=\"noreferrer\">this example</a> (which I've linked to because it's quite long), I'm presuming it's a case of using multiple inheritance to extend a class as opposed to 'proper' subclassing. Is this right? </p>\n\n<p>Why would I want to do that rather than put the new functionality into a subclass? For that matter, why would a mixin/multiple inheritance approach be better than using composition?</p>\n\n<p>What separates a mixin from multiple inheritance? Is it just a matter of semantics?</p>\n",
        "answer": "<p>A mixin is a special kind of multiple inheritance.  There are two main situations where mixins are used:</p>\n\n<ol>\n<li>You want to provide a lot of optional features for a class.</li>\n<li>You want to use one particular feature in a lot of different classes.</li>\n</ol>\n\n<p>For an example of number one, consider <a href=\"http://werkzeug.pocoo.org/docs/wrappers/\" rel=\"noreferrer\">werkzeug's request and response system</a>.  I can make a plain old request object by saying:</p>\n\n<pre><code>from werkzeug import BaseRequest\n\nclass Request(BaseRequest):\n    pass\n</code></pre>\n\n<p>If I want to add accept header support, I would make that</p>\n\n<pre><code>from werkzeug import BaseRequest, AcceptMixin\n\nclass Request(AcceptMixin, BaseRequest):\n    pass\n</code></pre>\n\n<p>If I wanted to make a request object that supports accept headers, etags, authentication, and user agent support, I could do this:</p>\n\n<pre><code>from werkzeug import BaseRequest, AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthenticationMixin\n\nclass Request(AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthenticationMixin, BaseRequest):\n    pass\n</code></pre>\n\n<p>The difference is subtle, but in the above examples, the mixin classes weren't made to stand on their own.  In more traditional multiple inheritance, the <code>AuthenticationMixin</code> (for example) would probably be something more like <code>Authenticator</code>.  That is, the class would probably be designed to stand on its own.</p>\n"
    },
    "441": {
        "question_id": "2349991",
        "answer_id": "2349998",
        "question": "<p>How do I import other files in Python?</p>\n\n<ol>\n<li>How exactly can I import a specific python file like <code>import file.py</code>?</li>\n<li>How can I import a folder instead of a specific file?</li>\n<li>I want to load a Python file dynamically at runtime, based on user\ninput.</li>\n<li>I want to know how to load just one specific part from the file.</li>\n</ol>\n\n<p>For example, in <code>main.py</code> I have:</p>\n\n<pre><code>from extra import * \n</code></pre>\n\n<p>Although this gives me all the definitions in <code>extra.py</code>, when maybe all I want is a single definition:</p>\n\n<pre><code>def gap():\n    print\n    print\n</code></pre>\n\n<p>What do I add to the <code>import</code> statement to just get <code>gap</code> from <code>extra.py</code>?</p>\n",
        "answer": "<p><code>importlib</code> is recent addition in Python to programmatically import a module. It just a wrapper around <code>__import__</code> \nSee <a href=\"https://docs.python.org/3/library/importlib.html#module-importlib\" rel=\"noreferrer\">https://docs.python.org/3/library/importlib.html#module-importlib</a></p>\n\n<pre><code>import importlib\n\nmoduleName = input('Enter module name:')\nimportlib.import_module(moduleName)\n</code></pre>\n\n<hr>\n\n<p><strong>Update: Answer below is outdated</strong>. Use the more recent alternative above.</p>\n\n<ol>\n<li><p>Just <code>import file</code> without the '.py' extension.</p></li>\n<li><p>You can mark a folder as a package, by adding an empty file named <code>__init__.py</code>.</p></li>\n<li><p>You can use the <code>__import__</code> function. It takes the module name as a string. (Again: module name without the '.py' extension.)</p>\n\n<pre><code>pmName = input('Enter module name:')\npm = __import__(pmName)\nprint(dir(pm))\n</code></pre>\n\n<p>Type <code>help(__import__)</code> for more details.</p></li>\n</ol>\n"
    },
    "442": {
        "question_id": "166506",
        "answer_id": "166520",
        "question": "<p>How can I find local IP addresses (i.e. 192.168.x.x or 10.0.x.x) in Python platform independently and using only the standard library?</p>\n",
        "answer": "<pre><code>import socket\nsocket.gethostbyname(socket.gethostname())\n</code></pre>\n\n<p>This won't work always (returns <code>127.0.0.1</code> on machines having the hostname in <code>/etc/hosts</code> as <code>127.0.0.1</code>), a paliative would be what gimel shows, use <code>socket.getfqdn()</code> instead. Of course your machine needs a resolvable hostname.</p>\n"
    },
    "443": {
        "question_id": "2220699",
        "answer_id": "29456463",
        "question": "<p>I've been looking at dynamic evaluation of Python code, and come across the <code>eval()</code> and <code>compile()</code> functions, and the <code>exec</code> statement.</p>\n\n<p>Can someone please explain the difference between <code>eval</code> and <code>exec</code>, and how the different modes of <code>compile()</code> fit in?</p>\n",
        "answer": "<h1>The short answer, or TL;DR</h1>\n\n<p>Basically, <a href=\"https://docs.python.org/3/library/functions.html#eval\" rel=\"noreferrer\"><code>eval</code></a> is used to <strong>eval</strong>uate a single dynamically generated Python expression, and <a href=\"https://docs.python.org/3/library/functions.html#exec\" rel=\"noreferrer\"><code>exec</code></a> is used to <strong>exec</strong>ute dynamically generated Python code only for its side effects.</p>\n\n<p><code>eval</code> and <code>exec</code> have these two differences:</p>\n\n<ol>\n<li><p><code>eval</code> accepts only a <strong>single expression</strong>, <code>exec</code> can take a code block that has Python statements: loops, <code>try: except:</code>, <code>class</code> and function/method <code>def</code>initions and so on. </p>\n\n<p>An expression in Python is whatever you can have as the value in a variable assignment:</p>\n\n<pre><code>a_variable = (anything you can put within these parentheses is an expression)\n</code></pre></li>\n<li><p><code>eval</code> <strong>returns the value</strong> of the given expression, whereas <code>exec</code> ignores the return value from its code, and always returns <code>None</code> (in Python 2 it is a statement and cannot be used as an expression, so it really does not return anything).</p></li>\n</ol>\n\n<p>In versions 1.0 - 2.7, <code>exec</code> was a statement, because CPython needed to produce a different kind of code object for functions that used <code>exec</code> for its side effects inside the function. </p>\n\n<p>In Python 3, <code>exec</code> is a function; its use has no effect on the compiled bytecode of the function where it is used.</p>\n\n<hr>\n\n<p>Thus basically:</p>\n\n<pre><code>&gt;&gt;&gt; a = 5\n&gt;&gt;&gt; eval('37 + a')   # it is an expression\n42\n&gt;&gt;&gt; exec('37 + a')   # it is an expression statement; value is ignored (None is returned)\n&gt;&gt;&gt; exec('a = 47')   # modify a global variable as a side effect\n&gt;&gt;&gt; a\n47\n&gt;&gt;&gt; eval('a = 47')  # you cannot evaluate a statement\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;string&gt;\", line 1\n    a = 47\n      ^\nSyntaxError: invalid syntax\n</code></pre>\n\n<hr>\n\n<p>The <code>compile</code> in <code>'exec'</code> mode compiles any number of statements into a bytecode that implicitly always returns <code>None</code>, whereas in <code>'eval'</code> mode it compiles a <em>single</em> expression into bytecode that <em>returns</em> the value of that expression. </p>\n\n<pre><code>&gt;&gt;&gt; eval(compile('42', '&lt;string&gt;', 'exec'))  # code returns None\n&gt;&gt;&gt; eval(compile('42', '&lt;string&gt;', 'eval'))  # code returns 42\n42\n&gt;&gt;&gt; exec(compile('42', '&lt;string&gt;', 'eval'))  # code returns 42,\n&gt;&gt;&gt;                                          # but ignored by exec\n</code></pre>\n\n<p>In the <code>'eval'</code> mode (and thus with the <code>eval</code> function if a string is passed in), the <code>compile</code> raises an exception if the source code contains statements or anything else beyond a single expression:</p>\n\n<pre><code>&gt;&gt;&gt; compile('for i in range(3): print(i)', '&lt;string&gt;', 'eval')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;string&gt;\", line 1\n    for i in range(3): print(i)\n      ^\nSyntaxError: invalid syntax\n</code></pre>\n\n<hr>\n\n<p>Actually the statement <em>\"eval accepts only a single expression\"</em> applies only when a string (which contains Python <em>source code</em>) is passed to <code>eval</code>. Then it is internally compiled to bytecode using <a href=\"https://docs.python.org/3/library/functions.html#compile\" rel=\"noreferrer\"><code>compile(source, '&lt;string&gt;', 'eval')</code></a> This is where the difference really comes from.</p>\n\n<p>If a <code>code</code> object (which contains Python <em>bytecode</em>) is passed to <code>exec</code> or <code>eval</code>, <em>they behave identically</em>, excepting for the fact that <code>exec</code> ignores the return value, still returning <code>None</code> always. So it is possible use <code>eval</code> to execute something that has statements, if you just <code>compile</code>d it into bytecode before instead of passing it as a string:</p>\n\n<pre><code>&gt;&gt;&gt; eval(compile('if 1: print(\"Hello\")', '&lt;string&gt;', 'exec'))\nHello\n&gt;&gt;&gt;\n</code></pre>\n\n<p>works without problems, even though the compiled code contains statements. It still returns <code>None</code>, because that is the return value of the code object returned from <code>compile</code>.</p>\n\n<p>In the <code>'eval'</code> mode (and thus with the <code>eval</code> function if a string is passed in), the <code>compile</code> raises an exception if the source code contains statements or anything else beyond a single expression:</p>\n\n<pre><code>&gt;&gt;&gt; compile('for i in range(3): print(i)', '&lt;string&gt;'. 'eval')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;string&gt;\", line 1\n    for i in range(3): print(i)\n      ^\nSyntaxError: invalid syntax\n</code></pre>\n\n<h1>The longer answer, a.k.a the gory details</h1>\n\n<h2><code>exec</code> and <code>eval</code></h2>\n\n<p>The <a href=\"https://docs.python.org/3/library/functions.html#exec\" rel=\"noreferrer\"><code>exec</code></a> function (which was <a href=\"https://docs.python.org/2/reference/simple_stmts.html#exec\" rel=\"noreferrer\">a statement in Python 2</a>) is used for executing a dynamically created statement or program:</p>\n\n<pre><code>&gt;&gt;&gt; program = '''\nfor i in range(3):\n    print(\"Python is cool\")\n'''\n&gt;&gt;&gt; exec(program)\nPython is cool\nPython is cool\nPython is cool\n&gt;&gt;&gt; \n</code></pre>\n\n<p>The <a href=\"https://docs.python.org/3/library/functions.html#eval\" rel=\"noreferrer\"><code>eval</code></a> function does the same for a <a href=\"https://docs.python.org/3/reference/expressions.html\" rel=\"noreferrer\">single expression</a>, <em>and</em> returns the value of the expression:</p>\n\n<pre><code>&gt;&gt;&gt; a = 2\n&gt;&gt;&gt; my_calculation = '42 * a'\n&gt;&gt;&gt; result = eval(my_calculation)\n&gt;&gt;&gt; result\n84\n</code></pre>\n\n<p><code>exec</code> and <code>eval</code> both accept the program/expression to be run either as a <code>str</code>, <code>unicode</code> or <code>bytes</code> object containing source code, or as a <em><code>code</code> object</em> which contains Python bytecode. </p>\n\n<p>If a <code>str</code>/<code>unicode</code>/<code>bytes</code> containing source code was passed to <code>exec</code>, it behaves equivalently to:</p>\n\n<pre><code>exec(compile(source, '&lt;string&gt;', 'exec'))\n</code></pre>\n\n<p>and <code>eval</code> similarly behaves equivalent to:</p>\n\n<pre><code>eval(compile(source, '&lt;string&gt;', 'eval'))\n</code></pre>\n\n<hr>\n\n<p>Since all expressions can be used as statements in Python (these are called the <code>Expr</code> nodes in the Python <a href=\"https://docs.python.org/3/library/ast.html#abstract-grammar\" rel=\"noreferrer\">abstract grammar</a>; the opposite is not true), you can always use <code>exec</code> if you do not need the return value. That is to say, you can use either <code>eval('my_func(42)')</code> or <code>exec('my_func(42)')</code>, the difference being that <code>eval</code> returns the value returned by <code>my_func</code>, and <code>exec</code> discards it:</p>\n\n<pre><code>&gt;&gt;&gt; def my_func(arg):\n...     print(\"Called with %d\" % arg)\n...     return arg * 2\n... \n&gt;&gt;&gt; exec('my_func(42)')\nCalled with 42\n&gt;&gt;&gt; eval('my_func(42)')\nCalled with 42\n84\n&gt;&gt;&gt; \n</code></pre>\n\n<p>Of the 2, only <code>exec</code> accepts source code that contains statements, like <code>def</code>, <code>for</code>, <code>while</code>, <code>import</code>, or <code>class</code>, the assignment statement (a.k.a <code>a = 42</code>), or entire programs:</p>\n\n<pre><code>&gt;&gt;&gt; exec('for i in range(3): print(i)')\n0\n1\n2\n&gt;&gt;&gt; eval('for i in range(3): print(i)')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;string&gt;\", line 1\n    for i in range(3): print(i)\n      ^\nSyntaxError: invalid syntax\n</code></pre>\n\n<hr>\n\n<p>Both <code>exec</code> and <code>eval</code> accept 2 additional positional arguments - <code>globals</code> and <code>locals</code> - which are the global and local variable scopes that the code sees. These default to the <code>globals()</code> and <code>locals()</code> within the scope that called <code>exec</code> or <code>eval</code>, but any dictionary can be used for <code>globals</code> and any <code>mapping</code> for <code>locals</code> (including <code>dict</code> of course). These can be used not only to restrict/modify the variables that the code sees, but are often also used for capturing the variables that the <code>exec</code>uted code creates:</p>\n\n<pre><code>&gt;&gt;&gt; g = dict()\n&gt;&gt;&gt; l = dict()\n&gt;&gt;&gt; exec('global a; a, b = 123, 42', g, l)\n&gt;&gt;&gt; g['a']\n123\n&gt;&gt;&gt; l\n{'b': 42}\n</code></pre>\n\n<p>(If you display the value of the entire <code>g</code>, it would be much longer, because <code>exec</code> and <code>eval</code> add the built-ins module as <code>__builtins__</code> to the globals automatically if it is missing).</p>\n\n<p>In Python 2, the official syntax for the <code>exec</code> statement is actually <code>exec code in globals, locals</code>, as in</p>\n\n<pre><code>&gt;&gt;&gt; exec 'global a; a, b = 123, 42' in g, l\n</code></pre>\n\n<p>However the alternate syntax <code>exec(code, globals, locals)</code> has always been accepted too (see below).</p>\n\n<h2><code>compile</code></h2>\n\n<p>The <a href=\"https://docs.python.org/3/library/functions.html#compile\" rel=\"noreferrer\"><code>compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)</code></a> built-in can be used to speed up repeated invocations of the same code with <code>exec</code> or <code>eval</code> by compiling the source into a <code>code</code> object beforehand. The <code>mode</code> parameter controls the kind of code fragment the <code>compile</code> function accepts and the kind of bytecode it produces. The choices are <code>'eval'</code>, <code>'exec'</code> and <code>'single'</code>:</p>\n\n<ul>\n<li><p><code>'eval'</code> mode expects a single expression, and will produce bytecode that when run will return the value of <strong>that expression</strong>:</p>\n\n<pre><code>&gt;&gt;&gt; dis.dis(compile('a + b', '&lt;string&gt;', 'eval'))\n  1           0 LOAD_NAME                0 (a)\n              3 LOAD_NAME                1 (b)\n              6 BINARY_ADD\n              7 RETURN_VALUE\n</code></pre></li>\n<li><p><code>'exec'</code> accepts any kinds of python constructs from single expressions to whole modules of code, and executes them as if they were module top-level statements. The code object returns <code>None</code>:</p>\n\n<pre><code>&gt;&gt;&gt; dis.dis(compile('a + b', '&lt;string&gt;', 'exec'))\n  1           0 LOAD_NAME                0 (a)\n              3 LOAD_NAME                1 (b)\n              6 BINARY_ADD\n              7 POP_TOP                             &lt;- discard result\n              8 LOAD_CONST               0 (None)   &lt;- load None on stack\n             11 RETURN_VALUE                        &lt;- return top of stack\n</code></pre></li>\n<li><p><code>'single'</code> is a limited form of <code>'exec'</code> which accepts a source code containing a <strong>single</strong> statement (or multiple statements separated by <code>;</code>) if the last statement is an expression statement, the resulting bytecode also <em>prints the <code>repr</code> of the value of that expression to the standard output(!)</em>.</p>\n\n<p>An <code>if</code>-<code>elif</code>-<code>else</code> chain, a loop with <code>else</code>, and <code>try</code> with its <code>except</code>, <code>else</code> and <code>finally</code> blocks is considered a single statement.</p>\n\n<p>A source fragment containing 2 top-level statements is an error for the <code>'single'</code>, except in Python 2 there is <em>a bug</em> that sometimes allows multiple toplevel statements in the code; only the first is compiled; the rest are ignored:</p>\n\n<p>In Python 2.7.8:</p>\n\n<pre><code>&gt;&gt;&gt; exec(compile('a = 5\\na = 6', '&lt;string&gt;', 'single'))\n&gt;&gt;&gt; a\n5\n</code></pre>\n\n<p>And in Python 3.4.2:</p>\n\n<pre><code>&gt;&gt;&gt; exec(compile('a = 5\\na = 6', '&lt;string&gt;', 'single'))\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;string&gt;\", line 1\n    a = 5\n        ^\nSyntaxError: multiple statements found while compiling a single statement\n</code></pre>\n\n<p>This is very useful for making interactive Python shells. However, the value of the expression is <em>not returned</em>, even if you <code>eval</code> the resulting code.</p></li>\n</ul>\n\n<p>Thus greatest distinction of <code>exec</code> and <code>eval</code> actually comes from the <code>compile</code> function and its modes.</p>\n\n<hr>\n\n<p>In addition to compiling source code to bytecode, <code>compile</code> supports compiling <a href=\"https://docs.python.org/3/library/ast.html#abstract-grammar\" rel=\"noreferrer\"><em>abstract syntax trees</em></a> (parse trees of Python code) into <code>code</code> objects; and source code into abstract syntax trees (the <code>ast.parse</code> is written in Python and just calls <code>compile(source, filename, mode, PyCF_ONLY_AST)</code>); these are used for example for modifying source code on the fly, and also for dynamic code creation, as it is often easier to handle the code as a tree of nodes instead of lines of text in complex cases.</p>\n\n<hr>\n\n<p>While <code>eval</code> only allows you to evaluate a string that contains a single expression, you can <code>eval</code> a whole statement, or even a whole module that has been <code>compile</code>d into bytecode; that is, with Python 2, <code>print</code> is a statement, and cannot be <code>eval</code>led directly:</p>\n\n<pre><code>&gt;&gt;&gt; eval('for i in range(3): print(\"Python is cool\")')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;string&gt;\", line 1\n    for i in range(3): print(\"Python is cool\")\n      ^\nSyntaxError: invalid syntax\n</code></pre>\n\n<p><code>compile</code> it with <code>'exec'</code> mode into a <code>code</code> object and you can <strong><code>eval</code>  it</strong>; the <code>eval</code> function will return <code>None</code>.</p>\n\n<pre><code>&gt;&gt;&gt; code = compile('for i in range(3): print(\"Python is cool\")',\n                   'foo.py', 'exec')\n&gt;&gt;&gt; eval(code)\nPython is cool\nPython is cool\nPython is cool\n</code></pre>\n\n<p>If one looks into <a href=\"https://hg.python.org/cpython/file/ec6ed10d611e/Python/bltinmodule.c#l805\" rel=\"noreferrer\"><code>eval</code></a> and <a href=\"https://hg.python.org/cpython/file/ec6ed10d611e/Python/bltinmodule.c#l882\" rel=\"noreferrer\"><code>exec</code></a> source code in CPython 3, this is very evident; they both call <code>PyEval_EvalCode</code> with same arguments, the only difference being that <a href=\"https://hg.python.org/cpython/file/ec6ed10d611e/Python/bltinmodule.c#l903\" rel=\"noreferrer\"><code>exec</code> explicitly returns <code>None</code></a>.</p>\n\n<h2>Syntax differences of <code>exec</code> between Python 2 and Python 3</h2>\n\n<p>One of the major differences in Python <strong>2</strong> is that <code>exec</code> is a statement and <code>eval</code> is a built-in function (both are built-in functions in Python 3).\nIt is a well-known fact that the official syntax of <code>exec</code> in Python 2 is <code>exec code [in globals[, locals]]</code>.</p>\n\n<p>Unlike majority of the Python 2-to-3 <a href=\"http://python3porting.com/differences.html#exec\" rel=\"noreferrer\">porting</a> <a href=\"http://python-future.org/reference.html?highlight=exec#future.utils.exec_\" rel=\"noreferrer\">guides</a> <a href=\"http://docs.pythonsprints.com/python3_porting/py-porting.html#exec-statement\" rel=\"noreferrer\">seem</a> <a href=\"http://nedbatchelder.com/blog/200910/running_the_same_code_on_python_2x_and_3x.html\" rel=\"noreferrer\">to suggest</a>, the <code>exec</code> statement in CPython 2 can be also used with syntax that <em>looks</em> <strong>exactly</strong> like the <code>exec</code> function invocation in Python 3. The reason is that Python 0.9.9 had the <code>exec(code, globals, locals)</code> built-in function! And that built-in function was replaced with <code>exec</code> statement <a href=\"https://hg.python.org/cpython/file/fccd415e2eb8/Python/ceval.c\" rel=\"noreferrer\">somewhere before Python 1.0 release</a>.</p>\n\n<p>Since it was desirable to not break backwards compatibility with Python 0.9.9, <a href=\"https://hg.python.org/cpython/file/fccd415e2eb8/Python/ceval.c#l2521\" rel=\"noreferrer\">Guido van Rossum added a compatibility hack in 1993</a>: if the <code>code</code> was a tuple of length 2 or 3, and <code>globals</code> and <code>locals</code> were not passed into the <code>exec</code> statement otherwise, the <code>code</code> would be interpreted as if the 2nd and 3rd element of the tuple were the <code>globals</code> and <code>locals</code> respectively. The compatibility hack was not mentioned even in <a href=\"https://docs.python.org/release/1.4/ref/ref6.html#HDR10\" rel=\"noreferrer\">Python 1.4 documentation (the earliest available version online)</a>; and thus was not known to many writers of the porting guides and tools, until it was <a href=\"https://docs.python.org/2/reference/simple_stmts.html#the-exec-statement\" rel=\"noreferrer\">documented</a> again <a href=\"https://mail.python.org/pipermail/python-dev/2012-November/122651.html\" rel=\"noreferrer\">in November 2012</a>:</p>\n\n<blockquote>\n  <p>The first expression may also be a tuple of length 2 or 3. In this case, the optional parts must be omitted. The form <code>exec(expr, globals)</code> is equivalent to <code>exec expr in globals</code>, while the form <code>exec(expr, globals, locals)</code> is equivalent to <code>exec expr in globals, locals</code>. The tuple form of <code>exec</code> provides compatibility with Python 3, where <code>exec</code> is a function rather than a statement.</p>\n</blockquote>\n\n<p>Yes, in CPython 2.7 that it is handily referred to as being a forward-compatibility option (why confuse people over that there is a backward compatibility option at all), \nwhen it actually had been there for <em>backward-compatibility for two decades</em>.</p>\n\n<p>Thus while <code>exec</code> is a statement in Python 1 and Python 2, and a built-in function in Python 3 and Python 0.9.9,</p>\n\n<pre><code>&gt;&gt;&gt; exec(\"print(a)\", globals(), {'a': 42})\n42\n</code></pre>\n\n<p>has had identical behaviour in possibly every widely released Python version ever; and works in Jython 2.5.2, PyPy 2.3.1 (Python 2.7.6) and IronPython 2.6.1 too (kudos to them following the undocumented behaviour of CPython closely).</p>\n\n<p>What you cannot do in Pythons 1.0 - 2.7 with its compatibility hack, is to store the return value of <code>exec</code> into a variable:</p>\n\n<pre><code>Python 2.7.11+ (default, Apr 17 2016, 14:00:29) \n[GCC 5.3.1 20160413] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; a = exec('print(42)')\n  File \"&lt;stdin&gt;\", line 1\n    a = exec('print(42)')\n           ^\nSyntaxError: invalid syntax\n</code></pre>\n\n<p>(which wouldn't be useful in Python 3 either, as <code>exec</code> always returns <code>None</code>), or pass a reference to <code>exec</code>:</p>\n\n<pre><code>&gt;&gt;&gt; call_later(exec, 'print(42)', delay=1000)\n  File \"&lt;stdin&gt;\", line 1\n    call_later(exec, 'print(42)', delay=1000)\n                  ^\nSyntaxError: invalid syntax\n</code></pre>\n\n<p>Which a pattern that someone might actually have used, though unlikely; </p>\n\n<p>Or use it in a list comprehension:</p>\n\n<pre><code>&gt;&gt;&gt; [exec(i) for i in ['print(42)', 'print(foo)']\n  File \"&lt;stdin&gt;\", line 1\n    [exec(i) for i in ['print(42)', 'print(foo)']\n        ^\nSyntaxError: invalid syntax\n</code></pre>\n\n<p>which is abuse of list comprehensions (use a <code>for</code> loop instead!).</p>\n"
    },
    "444": {
        "question_id": "16694907",
        "answer_id": "16696317",
        "question": "<p><a href=\"http://docs.python-requests.org/en/latest/\" rel=\"noreferrer\">Requests</a> is a really nice library. I'd like to use it for download big files (>1GB).\nThe problem is it's not possible to keep whole file in memory I need to read it in chunks. And this is a problem with the following code</p>\n\n<pre><code>import requests\n\ndef DownloadFile(url)\n    local_filename = url.split('/')[-1]\n    r = requests.get(url)\n    f = open(local_filename, 'wb')\n    for chunk in r.iter_content(chunk_size=512 * 1024): \n        if chunk: # filter out keep-alive new chunks\n            f.write(chunk)\n    f.close()\n    return \n</code></pre>\n\n<p>By some reason it doesn't work this way. It still loads response into memory before save it to a file.</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>If you need a small client (Python 2.x /3.x) which can download big files from FTP, you can find it <a href=\"https://github.com/keepitsimple/pyFTPclient\" rel=\"noreferrer\">here</a>. It supports multithreading &amp; reconnects (it does monitor connections) also it tunes socket params for the download task. </p>\n",
        "answer": "<p>With the following streaming code, the Python memory usage is restricted regardless of the size of the downloaded file:</p>\n\n<pre><code>def download_file(url):\n    local_filename = url.split('/')[-1]\n    # NOTE the stream=True parameter below\n    with requests.get(url, stream=True) as r:\n        r.raise_for_status()\n        with open(local_filename, 'wb') as f:\n            for chunk in r.iter_content(chunk_size=8192): \n                if chunk: # filter out keep-alive new chunks\n                    f.write(chunk)\n                    # f.flush()\n    return local_filename\n</code></pre>\n\n<p>Note that the number of bytes returned using <code>iter_content</code> is not exactly the <code>chunk_size</code>; it's expected to be a random number that is often far bigger, and is expected to be different in every iteration.</p>\n\n<p>See <a href=\"http://docs.python-requests.org/en/latest/user/advanced/#body-content-workflow\" rel=\"noreferrer\">http://docs.python-requests.org/en/latest/user/advanced/#body-content-workflow</a> for further reference.</p>\n"
    },
    "445": {
        "question_id": "111234",
        "answer_id": "111255",
        "question": "<p>Now that it's clear <a href=\"https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python\">what a metaclass is</a>, there is an associated concept that I use all the time without knowing what it really means. </p>\n\n<p>I suppose everybody made once a mistake with parenthesis, resulting  in an \"object is not callable\" exception. What's more, using <code>__init__</code> and <code>__new__</code> lead to wonder what this bloody <code>__call__</code> can be used for.</p>\n\n<p>Could you give me some explanations, including examples with the magic method ?</p>\n",
        "answer": "<p>A callable is anything that can be called. </p>\n\n<p>The <a href=\"http://svn.python.org/projects/python/trunk/Objects/object.c\" rel=\"noreferrer\">built-in <em>callable</em> (PyCallable_Check in objects.c)</a> checks if the argument is either:</p>\n\n<ul>\n<li>an instance of a class with a <em>__call__</em> method or</li>\n<li>is of a type that has a non null <em>tp_call</em> (c struct) member which indicates callability otherwise (such as in functions, methods etc.)</li>\n</ul>\n\n<p>The method named <em>__call__</em> is (<a href=\"https://docs.python.org/3/reference/datamodel.html#object.__call__\" rel=\"noreferrer\">according to the documentation</a>)</p>\n\n<blockquote>\n  <p>Called when the instance is ''called'' as a function</p>\n</blockquote>\n\n<h2>Example</h2>\n\n<pre><code>class Foo:\n  def __call__(self):\n    print 'called'\n\nfoo_instance = Foo()\nfoo_instance() #this is calling the __call__ method\n</code></pre>\n"
    },
    "446": {
        "question_id": "749796",
        "answer_id": "1206856",
        "question": "<p>What is the best way (or are the various ways) to pretty print XML in Python?</p>\n",
        "answer": "<pre><code>import xml.dom.minidom\n\ndom = xml.dom.minidom.parse(xml_fname) # or xml.dom.minidom.parseString(xml_string)\npretty_xml_as_string = dom.toprettyxml()\n</code></pre>\n"
    },
    "447": {
        "question_id": "15376509",
        "answer_id": "15376520",
        "question": "<p>I was told that <code>+=</code> can have different effects than the standard notation of <code>i = i +</code>. Is there a case in which <code>i += 1</code> would be different from <code>i = i + 1</code>?</p>\n",
        "answer": "<p>This depends entirely on the object <code>i</code>.  </p>\n\n<p><code>+=</code> calls the <a href=\"http://docs.python.org/2/reference/datamodel.html#object.__iadd__\" rel=\"noreferrer\"><code>__iadd__</code> method</a> (if it exists -- falling back on <code>__add__</code> if it doesn't exist) whereas <code>+</code> calls the <a href=\"http://docs.python.org/2/reference/datamodel.html#object.__add__\" rel=\"noreferrer\"><code>__add__</code> method</a><sup>1</sup> or the <a href=\"http://docs.python.org/2/reference/datamodel.html#object.__radd__\" rel=\"noreferrer\"><code>__radd__</code> method in a few cases</a><sup>2</sup>.  </p>\n\n<p>From an API perspective, <code>__iadd__</code> is supposed to be used for modifying mutable objects <em>in place</em> (returning the object which was mutated) whereas <code>__add__</code> should return a <em>new instance</em> of something.  For <em>immutable</em> objects, both methods return a new instance, but <code>__iadd__</code> will put the new instance in the current namespace with the same name that the old instance had.  This is why </p>\n\n<pre><code>i = 1\ni += 1\n</code></pre>\n\n<p>seems to increment <code>i</code>.  In reality, you get a new integer and assign it \"on top of\" <code>i</code> -- losing one reference to the old integer.  In this case, <code>i += 1</code> is exactly the same as <code>i = i + 1</code>.  But, with most mutable objects, it's a different story:</p>\n\n<p>As a concrete example:</p>\n\n<pre><code>a = [1, 2, 3]\nb = a\nb += [1, 2, 3]\nprint a  #[1, 2, 3, 1, 2, 3]\nprint b  #[1, 2, 3, 1, 2, 3]\n</code></pre>\n\n<p>compared to:</p>\n\n<pre><code>a = [1, 2, 3]\nb = a\nb = b + [1, 2, 3]\nprint a #[1, 2, 3]\nprint b #[1, 2, 3, 1, 2, 3]\n</code></pre>\n\n<p>notice how in the first example, since <code>b</code> and <code>a</code> reference the same object, when I use <code>+=</code> on <code>b</code>, it actually changes <code>b</code> (and <code>a</code> sees that change too -- After all, it's referencing the same list).  In the second case however, when I do <code>b = b + [1, 2, 3]</code>, this takes the list that <code>b</code> is referencing and concatenates it with a new list <code>[1, 2, 3]</code>.  It then stores the concatenated list in the current namespace as <code>b</code> -- With no regard for what <code>b</code> was the line before.</p>\n\n<hr>\n\n<p><sup><sup>1</sup>In the expression <code>x + y</code>, if <code>x.__add__</code> isn't implemented or if <code>x.__add__(y)</code> returns <code>NotImplemented</code> <strong>and</strong> <em><code>x</code> and <code>y</code> have different types</em>, then <code>x + y</code> tries to call <a href=\"http://docs.python.org/2/reference/datamodel.html#object.__radd__\" rel=\"noreferrer\"><code>y.__radd__(x)</code></a>.  So, in the case where you have </sup></p>\n\n<p><sup><code>foo_instance += bar_instance</code></sup></p>\n\n<p><sup>if <code>Foo</code> doesn't implement <code>__add__</code> or <code>__iadd__</code> then the result here is the same as </sup></p>\n\n<p><sup><code>foo_instance = bar_instance.__radd__(bar_instance, foo_instance)</code></sup></p>\n\n<p><sup><sup>2</sup>In the expression <code>foo_instance + bar_instance</code>, <code>bar_instance.__radd__</code> will be tried before <code>foo_instance.__add__</code> <em>if</em> the type of <code>bar_instance</code> is a subclass of the type of <code>foo_instance</code> (e.g. <code>issubclass(Bar, Foo)</code>).  The rational for this is because <code>Bar</code> is in some sense a \"higher-level\" object than <code>Foo</code> so <code>Bar</code> should get the option of overriding <code>Foo</code>'s behavior.</sup></p>\n"
    },
    "448": {
        "question_id": "2804543",
        "answer_id": "2813530",
        "question": "<p>My python script uses subprocess to call a linux utility that is very noisy.  I want to store all of the output to a log file and show some of it to the user.  I thought the following would work, but the output doesn't show up in my application until the utility has produced a significant amount of output.</p>\n\n<pre><code>#fake_utility.py, just generates lots of output over time\nimport time\ni = 0\nwhile True:\n   print hex(i)*512\n   i += 1\n   time.sleep(0.5)\n\n#filters output\nimport subprocess\nproc = subprocess.Popen(['python','fake_utility.py'],stdout=subprocess.PIPE)\nfor line in proc.stdout:\n   #the real code does filtering here\n   print \"test:\", line.rstrip()\n</code></pre>\n\n<p>The behavior I really want is for the filter script to print each line as it is received from the subprocess.  Sorta like what <a href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?tee\" rel=\"noreferrer\"><code>tee</code></a> does but with python code.</p>\n\n<p>What am I missing?  Is this even possible?</p>\n\n<hr>\n\n<p><strong>Update:</strong></p>\n\n<p>If a <code>sys.stdout.flush()</code> is added to fake_utility.py, the code has the desired behavior in python 3.1.  I'm using python 2.6.  You would think that using <code>proc.stdout.xreadlines()</code> would work the same as py3k, but it doesn't.</p>\n\n<hr>\n\n<p><strong>Update 2:</strong></p>\n\n<p>Here is the minimal working code.</p>\n\n<pre><code>#fake_utility.py, just generates lots of output over time\nimport sys, time\nfor i in range(10):\n   print i\n   sys.stdout.flush()\n   time.sleep(0.5)\n\n#display out put line by line\nimport subprocess\nproc = subprocess.Popen(['python','fake_utility.py'],stdout=subprocess.PIPE)\n#works in python 3.0+\n#for line in proc.stdout:\nfor line in iter(proc.stdout.readline,''):\n   print line.rstrip()\n</code></pre>\n",
        "answer": "<p>It's been a long time since I last worked with Python, but I think the problem is with the statement <code>for line in proc.stdout</code>, which reads the entire input before iterating over it. The solution is to use <code>readline()</code> instead:</p>\n\n<pre><code>#filters output\nimport subprocess\nproc = subprocess.Popen(['python','fake_utility.py'],stdout=subprocess.PIPE)\nwhile True:\n  line = proc.stdout.readline()\n  if not line:\n    break\n  #the real code does filtering here\n  print \"test:\", line.rstrip()\n</code></pre>\n\n<p>Of course you still have to deal with the subprocess' buffering.</p>\n\n<p>Note: <a href=\"http://docs.python.org/library/stdtypes.html#file.next\" rel=\"nofollow noreferrer\">according to the documentation</a> the solution with an iterator should be equivalent to using <code>readline()</code>, except for the read-ahead buffer, but (or exactly because of this) the proposed change did produce different results for me (Python 2.5 on Windows XP).</p>\n"
    },
    "449": {
        "question_id": "7771011",
        "answer_id": "7771071",
        "question": "<p>My project is currently receiving a JSON message in python which I need to get bits of information out of. For the purposes of this, lets set it to some simple JSON in a string:</p>\n\n<pre><code>jsonStr = '{\"one\" : \"1\", \"two\" : \"2\", \"three\" : \"3\"}'\n</code></pre>\n\n<p>So far I've been generating JSON requests using a list and then <code>json.dumps</code> but to do the opposite of this I think I need to use <code>json.loads</code> but I haven't had much luck with it. Could anyone provide me a snippet that would return \"2\" with the input of \"two\" in the above example?</p>\n",
        "answer": "<p>Very simple:</p>\n\n<pre><code>import json\nj = json.loads('{\"one\" : \"1\", \"two\" : \"2\", \"three\" : \"3\"}')\nprint j['two']\n</code></pre>\n"
    },
    "450": {
        "question_id": "49748063",
        "answer_id": "49748494",
        "question": "<p><code>pip install &lt;package name&gt;</code> is failing for every package for me. This is what I get:</p>\n\n<pre><code>Could not find a version that satisfies the requirement &lt;package-name\n(from versions: )\nNo matching distribution found for &lt;package-name&gt;\n</code></pre>\n\n<p>I <a href=\"https://stackoverflow.com/q/38903415/1526703\">saw</a> <a href=\"https://stackoverflow.com/q/31719816/1526703\">similar</a> <a href=\"https://stackoverflow.com/q/43218164/1526703\">questions</a> on Stack&nbsp;Overflow, but they don't seem to be fully related to this one.</p>\n\n<p>Also, <a href=\"https://bhch.github.io/posts/2017/04/fix-the-pip-error-couldnt-find-a-version-that-satisfies-the-requirement/\" rel=\"noreferrer\">this post</a> suggests that this might happen if PyPI is down or my IP address is blacklisted. It seems both are not true for my case.</p>\n\n<p>pip shows up-to-date on running <code>pip install --upgrade pip</code>.</p>\n",
        "answer": "<p>Upgrade pip as follows:</p>\n\n<pre><code>curl https://bootstrap.pypa.io/get-pip.py | python\n</code></pre>\n\n<h3>What's happening:</h3>\n\n<p>Python.org sites are stopping support for TLS versions 1.0 and 1.1. This means that <a href=\"https://en.wikipedia.org/wiki/MacOS_Sierra\" rel=\"noreferrer\">Mac&nbsp;OS&nbsp;X version 10.12</a> (Sierra) or older will not be able to use pip unless they upgrade pip as above.</p>\n\n<p>(Note that upgrading pip via <code>pip install --upgrade pip</code> will also not upgrade it correctly. It is a chicken-and-egg issue)</p>\n\n<p><a href=\"https://mail.python.org/pipermail/distutils-sig/2018-April/032114.html\" rel=\"noreferrer\">This</a> thread explains it (thanks to <a href=\"https://twitter.com/brainwane/status/980919000862547973\" rel=\"noreferrer\">this Twitter post</a>):</p>\n\n<blockquote>\n  <p>Mac users who use pip and PyPI:</p>\n  \n  <p>If you are running macOS/OS X version 10.12 or older, then you ought\n  to upgrade to the latest pip (9.0.3) to connect to the Python Package\n  Index securely:</p>\n\n<pre><code>curl https://bootstrap.pypa.io/get-pip.py | python\n</code></pre>\n  \n  <p>and we recommend you do that by April 8th.</p>\n  \n  <p>Pip 9.0.3 supports TLSv1.2 when running under system Python on macOS &lt;\n  10.13. Official release notes: <a href=\"https://pip.pypa.io/en/stable/news/\" rel=\"noreferrer\">https://pip.pypa.io/en/stable/news/</a></p>\n</blockquote>\n\n<p>Also, the <a href=\"https://status.python.org/\" rel=\"noreferrer\">Python status page</a>:</p>\n\n<blockquote>\n  <p><strong>Completed</strong> - The rolling brownouts are finished, and TLSv1.0 and TLSv1.1 have been disabled.  Apr 11, 15:37 UTC</p>\n  \n  <p><strong>Update</strong> - The rolling brownouts have been upgraded to a blackout, TLSv1.0 and TLSv1.1 will be rejected with a HTTP 403 at all times.\n  Apr 8, 15:49 UTC</p>\n</blockquote>\n\n<p>Lastly, to avoid other install errors, make sure you also upgrade setuptools after doing the above:</p>\n\n<pre><code>pip install --upgrade setuptools\n</code></pre>\n"
    },
    "451": {
        "question_id": "32404",
        "answer_id": "32440",
        "question": "<p>I am sketching the architecture for a set of programs that share various interrelated objects stored in a database. I want one of the programs to act as a service which provides a higher level interface for operations on these objects, and the other programs to access the objects through that service.</p>\n\n<p>I am currently aiming for Python and the Django framework as the technologies to implement that service with. I'm pretty sure I figure how to daemonize the Python program in Linux. However, it is an optional spec item that the system should support Windows. I have little experience with Windows programming and no experience at all with Windows services.</p>\n\n<p><strong>Is it possible to run a Python programs as a Windows service (i. e. run it automatically without user login)?</strong> I won't necessarily have to implement this part, but I need a rough idea how it would be done in order to decide whether to design along these lines.</p>\n\n<p><i>Edit: Thanks for all the answers so far, they are quite comprehensive. I would like to know one more thing: <b>How is Windows aware of my service? Can I manage it with the native Windows utilities?</b> <strong>What is the equivalent of putting a start/stop script in /etc/init.d?</i></strong></p>\n",
        "answer": "<p>Yes you can. I do it using the pythoncom libraries that come included with <a href=\"http://www.activestate.com/Products/activepython/index.mhtml\" rel=\"noreferrer\">ActivePython</a> or can be installed with <a href=\"https://sourceforge.net/projects/pywin32/\" rel=\"noreferrer\">pywin32</a> (Python for Windows extensions).</p>\n\n<p>This is a basic skeleton for a simple service:</p>\n\n<pre><code>import win32serviceutil\nimport win32service\nimport win32event\nimport servicemanager\nimport socket\n\n\nclass AppServerSvc (win32serviceutil.ServiceFramework):\n    _svc_name_ = \"TestService\"\n    _svc_display_name_ = \"Test Service\"\n\n    def __init__(self,args):\n        win32serviceutil.ServiceFramework.__init__(self,args)\n        self.hWaitStop = win32event.CreateEvent(None,0,0,None)\n        socket.setdefaulttimeout(60)\n\n    def SvcStop(self):\n        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)\n        win32event.SetEvent(self.hWaitStop)\n\n    def SvcDoRun(self):\n        servicemanager.LogMsg(servicemanager.EVENTLOG_INFORMATION_TYPE,\n                              servicemanager.PYS_SERVICE_STARTED,\n                              (self._svc_name_,''))\n        self.main()\n\n    def main(self):\n        pass\n\nif __name__ == '__main__':\n    win32serviceutil.HandleCommandLine(AppServerSvc)\n</code></pre>\n\n<p>Your code would go in the <code>main()</code> method\u2014usually with some kind of infinite loop that might be interrupted by checking a flag, which you set in the <code>SvcStop</code> method</p>\n"
    },
    "452": {
        "question_id": "27885397",
        "answer_id": "27909082",
        "question": "<p>I'm having trouble installing a Python package (specifically, JPype1 0.5.7) on my Windows machine, and would like to install it with Christoph Gohlke's Window binaries. (Which, to my experience, alleviated much of the fuss for many other package installations.)</p>\n\n<p>However, while Christoph used to provide .exe files in the past, recently it seems he's uploading .whl files instead.</p>\n\n<p><a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#jpype\" rel=\"noreferrer\">http://www.lfd.uci.edu/~gohlke/pythonlibs/#jpype</a></p>\n\n<p>But how do I install .whl files?</p>\n\n<blockquote>\n  <p>Notes:</p>\n  \n  <ul>\n  <li>I've found <a href=\"https://wheel.readthedocs.org/en/latest/\" rel=\"noreferrer\">documents on wheel</a>, but they don't seem so staightforward in explaining how to install .whl files.</li>\n  <li>This question is a duplicate with <a href=\"https://stackoverflow.com/questions/27041264/how-to-install-whl-file-in-python-windows\">this question</a>, which wasn't directly answered.</li>\n  </ul>\n</blockquote>\n",
        "answer": "<p>I just used the following which was quite simple. First open a console then cd to where you've downloaded your file like some-package.whl and use</p>\n\n<pre><code>pip install some-package.whl\n</code></pre>\n\n<p>Note: if pip.exe is not recognized, you may find it in the \"Scripts\" directory from where python has been installed. If pip is not installed, this page can help:\n<a href=\"https://stackoverflow.com/questions/4750806/how-to-install-pip-on-windows\">How do I install pip on Windows?</a></p>\n\n<p><em>Note: for clarification</em><br>\nIf you copy the <code>*.whl</code> file to your local drive (ex. <strong>C:\\some-dir\\some-file.whl</strong>) use the following command line parameters --  </p>\n\n<pre><code>pip install C:/some-dir/some-file.whl\n</code></pre>\n"
    },
    "453": {
        "question_id": "773",
        "answer_id": "7286",
        "question": "<p>I haven't been able to find an understandable explanation of how to actually use Python's <code>itertools.groupby()</code> function.  What I'm trying to do is this:</p>\n\n<ul>\n<li>Take a list - in this case, the children of an objectified <code>lxml</code> element</li>\n<li>Divide it into groups based on some criteria</li>\n<li>Then later iterate over each of these groups separately.</li>\n</ul>\n\n<p>I've reviewed <a href=\"https://docs.python.org/2/library/itertools.html\" rel=\"noreferrer\">the documentation</a>, and <a href=\"https://docs.python.org/2/library/itertools.html#itertools.groupby\" rel=\"noreferrer\">the examples</a>, but I've had trouble trying to apply them beyond a simple list of numbers. </p>\n\n<p>So, how do I use of <code>itertools.groupby()</code>?  Is there another technique I should be using?  Pointers to good \"prerequisite\" reading would also be appreciated.</p>\n",
        "answer": "<p><strong>IMPORTANT NOTE:</strong> You have to <strong>sort your data</strong> first.</p>\n\n<hr>\n\n<p>The part I didn't get is that in the example construction</p>\n\n<pre><code>groups = []\nuniquekeys = []\nfor k, g in groupby(data, keyfunc):\n   groups.append(list(g))    # Store group iterator as a list\n   uniquekeys.append(k)\n</code></pre>\n\n<p><code>k</code> is the current grouping key, and <code>g</code> is an iterator that you can use to iterate over the group defined by that grouping key. In other words, the <code>groupby</code> iterator itself returns iterators.</p>\n\n<p>Here's an example of that, using clearer variable names:</p>\n\n<pre><code>from itertools import groupby\n\nthings = [(\"animal\", \"bear\"), (\"animal\", \"duck\"), (\"plant\", \"cactus\"), (\"vehicle\", \"speed boat\"), (\"vehicle\", \"school bus\")]\n\nfor key, group in groupby(things, lambda x: x[0]):\n    for thing in group:\n        print \"A %s is a %s.\" % (thing[1], key)\n    print \" \"\n</code></pre>\n\n<p>This will give you the output:</p>\n\n<blockquote>\n  <p>A bear is a animal.<br>\n  A duck is a animal.</p>\n  \n  <p>A cactus is a plant.</p>\n  \n  <p>A speed boat is a vehicle.<br>\n  A school bus is a vehicle.</p>\n</blockquote>\n\n<p>In this example, <code>things</code> is a list of tuples where the first item in each tuple is the group the second item belongs to. </p>\n\n<p>The <code>groupby()</code> function takes two arguments: (1) the data to group and (2) the function to group it with. </p>\n\n<p>Here, <code>lambda x: x[0]</code> tells <code>groupby()</code> to use the first item in each tuple as the grouping key.</p>\n\n<p>In the above <code>for</code> statement, <code>groupby</code> returns three (key, group iterator) pairs - once for each unique key. You can use the returned iterator to iterate over each individual item in that group.</p>\n\n<p>Here's a slightly different example with the same data, using a list comprehension:</p>\n\n<pre><code>for key, group in groupby(things, lambda x: x[0]):\n    listOfThings = \" and \".join([thing[1] for thing in group])\n    print key + \"s:  \" + listOfThings + \".\"\n</code></pre>\n\n<p>This will give you the output:</p>\n\n<blockquote>\n  <p>animals: bear and duck.<br>\n  plants: cactus.<br>\n  vehicles: speed boat and school bus.</p>\n</blockquote>\n"
    },
    "454": {
        "question_id": "7571635",
        "answer_id": "7571665",
        "question": "<p>What is the fastest way to know if a value exists in a list (a list with millions of values in it) and what its index is?</p>\n\n<p>I know that all values in the list are unique as in this example.</p>\n\n<p><strong>The first method I try is (3.8 sec in my real code):</strong></p>\n\n<pre><code>a = [4,2,3,1,5,6]\n\nif a.count(7) == 1:\n    b=a.index(7)\n    \"Do something with variable b\"\n</code></pre>\n\n<p><strong>The second method I try is (2x faster: 1.9 sec for my real code):</strong></p>\n\n<pre><code>a = [4,2,3,1,5,6]\n\ntry:\n    b=a.index(7)\nexcept ValueError:\n    \"Do nothing\"\nelse:\n    \"Do something with variable b\"\n</code></pre>\n\n<p><strong>Proposed methods from Stack Overflow user (2.74 sec for my real code):</strong></p>\n\n<pre><code>a = [4,2,3,1,5,6]\nif 7 in a:\n    a.index(7)\n</code></pre>\n\n<p>In my real code, the first method takes 3.81 sec and the second method takes 1.88 sec.\nIt's a good improvement, but:</p>\n\n<p>I'm a beginner with Python/scripting, and is there a faster way to do the same things and save more processing time?</p>\n\n<p><strong>More specific explication for my application:</strong></p>\n\n<p>In the Blender API I can access a list of particles:</p>\n\n<pre><code>particles = [1, 2, 3, 4, etc.]\n</code></pre>\n\n<p>From there, I can access a particle's location:</p>\n\n<pre><code>particles[x].location = [x,y,z]\n</code></pre>\n\n<p>And for each particle I test if a neighbour exists by searching each particle location like so:</p>\n\n<pre><code>if [x+1,y,z] in particles.location\n    \"Find the identity of this neighbour particle in x:the particle's index\n    in the array\"\n    particles.index([x+1,y,z])\n</code></pre>\n",
        "answer": "<pre><code>7 in a\n</code></pre>\n\n<p>Clearest and fastest way to do it.</p>\n\n<p>You can also consider using a <code>set</code>, but constructing that set from your list may take more time than faster membership testing will save. The only way to be certain is to benchmark well. (this also depends on what operations you require)</p>\n"
    },
    "455": {
        "question_id": "1207457",
        "answer_id": "1207479",
        "question": "<p>How do you convert a Unicode string (containing extra characters like \u00a3 $, etc.) into a Python string?</p>\n",
        "answer": "<pre><code>title = u\"Kl\u00fcft skr\u00e4ms inf\u00f6r p\u00e5 f\u00e9d\u00e9ral \u00e9lectoral gro\u00dfe\"\nimport unicodedata\nunicodedata.normalize('NFKD', title).encode('ascii','ignore')\n'Kluft skrams infor pa federal electoral groe'\n</code></pre>\n"
    },
    "456": {
        "question_id": "11874767",
        "answer_id": "15720891",
        "question": "<p>I am trying to plot some data from a camera in real time using OpenCV. However, the real-time plotting (using matplotlib) doesn't seem to be working.</p>\n\n<p>I've isolated the problem into this simple example:</p>\n\n<pre><code>fig = plt.figure()\nplt.axis([0, 1000, 0, 1])\n\ni = 0\nx = list()\ny = list()\n\nwhile i &lt; 1000:\n    temp_y = np.random.random()\n    x.append(i)\n    y.append(temp_y)\n    plt.scatter(i, temp_y)\n    i += 1\n    plt.show()\n</code></pre>\n\n<p>I would expect this example to plot 1000 points individually. What actually happens is that the window pops up with the first point showing (ok with that), then waits for the loop to finish before it populates the rest of the graph.</p>\n\n<p>Any thoughts why I am not seeing points populated one at a time?</p>\n",
        "answer": "<p>Here's the working version of the code in question (requires at least version Matplotlib 1.1.0 from 2011-11-14):</p>\n\n<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\nplt.axis([0, 10, 0, 1])\n\nfor i in range(10):\n    y = np.random.random()\n    plt.scatter(i, y)\n    plt.pause(0.05)\n\nplt.show()\n</code></pre>\n\n<p>Note some of the changes: </p>\n\n<ol>\n<li>Call <code>plt.pause(0.05)</code> to both draw the new data and it runs the GUI's event loop (allowing for mouse interaction).</li>\n</ol>\n"
    },
    "457": {
        "question_id": "6893968",
        "answer_id": "14299004",
        "question": "<p>The function <code>foo</code> below returns a string <code>'foo'</code>. How can I get the value <code>'foo'</code> which is returned from the thread's target?</p>\n\n<pre><code>from threading import Thread\n\ndef foo(bar):\n    print('hello {}'.format(bar))\n    return 'foo'\n\nthread = Thread(target=foo, args=('world!',))\nthread.start()\nreturn_value = thread.join()\n</code></pre>\n\n<p>The \"one obvious way to do it\", shown above, doesn't work: <code>thread.join()</code> returned <code>None</code>.</p>\n",
        "answer": "<p>FWIW, the <code>multiprocessing</code> module has a nice interface for this using the <code>Pool</code> class.  And if you want to stick with threads rather than processes, you can just use the <code>multiprocessing.pool.ThreadPool</code> class as a drop-in replacement.</p>\n\n<pre><code>def foo(bar, baz):\n  print 'hello {0}'.format(bar)\n  return 'foo' + baz\n\nfrom multiprocessing.pool import ThreadPool\npool = ThreadPool(processes=1)\n\nasync_result = pool.apply_async(foo, ('world', 'foo')) # tuple of args for foo\n\n# do some other stuff in the main process\n\nreturn_val = async_result.get()  # get the return value from your function.\n</code></pre>\n"
    },
    "458": {
        "question_id": "1157106",
        "answer_id": "1157160",
        "question": "<p>In Python <code>remove()</code> will remove the first occurrence of value in a list.</p>\n\n<p>How to remove <em>all</em> occurrences of a value from a list?</p>\n\n<p>This is what I have in mind:</p>\n\n<pre><code>&gt;&gt;&gt; remove_values_from_list([1, 2, 3, 4, 2, 2, 3], 2)\n[1, 3, 4, 3]\n</code></pre>\n",
        "answer": "<p>Functional approach:</p>\n\n<p><strong>2.x</strong></p>\n\n<pre><code>&gt;&gt;&gt; x = [1,2,3,2,2,2,3,4]\n&gt;&gt;&gt; filter(lambda a: a != 2, x)\n[1, 3, 3, 4]\n</code></pre>\n\n<p><strong>3.x</strong></p>\n\n<pre><code>&gt;&gt;&gt; x = [1,2,3,2,2,2,3,4]\n&gt;&gt;&gt; list(filter((2).__ne__, x))\n[1, 3, 3, 4]\n</code></pre>\n\n<p>or </p>\n\n<pre><code>&gt;&gt;&gt; x = [1,2,3,2,2,2,3,4]\n&gt;&gt;&gt; list(filter(lambda a: a != 2, x))\n[1, 3, 3, 4]\n</code></pre>\n"
    },
    "459": {
        "question_id": "954834",
        "answer_id": "954840",
        "question": "<pre><code>import sys\nprint(sys.platform)\nprint(2**100)\nraw_input()\n</code></pre>\n\n<p>I am using Python 3.1 and can't get the <code>raw_input</code> to \"freeze\" the dos pop-up. The book I'm reading is for Python 2.5 and I'm using Python 3.1</p>\n\n<p>What should I do to fix this?</p>\n",
        "answer": "<p><code>raw_input()</code> was renamed to <code>input()</code></p>\n\n<p>From <a href=\"http://docs.python.org/dev/py3k/whatsnew/3.0.html\" rel=\"noreferrer\">http://docs.python.org/dev/py3k/whatsnew/3.0.html</a></p>\n"
    },
    "460": {
        "question_id": "1208118",
        "answer_id": "35608701",
        "question": "<p>I'm trying to run over the parameters space of a 6 parameter function to study it's numerical behavior before trying to do anything complex with it so I'm searching for a efficient way to do this.</p>\n\n<p>My function takes float values given a 6-dim numpy array as input. What I tried to do initially was this:</p>\n\n<p>First I created a function that takes 2 arrays and generate an array with all combinations of values from the two arrays</p>\n\n<pre><code>from numpy import *\ndef comb(a,b):\n    c = []\n    for i in a:\n        for j in b:\n            c.append(r_[i,j])\n    return c\n</code></pre>\n\n<p>Then I used <code>reduce()</code> to apply that to m copies of the same array:</p>\n\n<pre><code>def combs(a,m):\n    return reduce(comb,[a]*m)\n</code></pre>\n\n<p>And then I evaluate my function like this:</p>\n\n<pre><code>values = combs(np.arange(0,1,0.1),6)\nfor val in values:\n    print F(val)\n</code></pre>\n\n<p>This works but it's waaaay too slow. I know the space of parameters is huge, but this shouldn't be so slow. I have only sampled 10<sup>6</sup> (a million) points in this example and it took more than 15 seconds just to create the array <code>values</code>.</p>\n\n<p>Do you know any more efficient way of doing this with numpy? </p>\n\n<p>I can modify the way the function <code>F</code> takes it's arguments if it's necessary.</p>\n",
        "answer": "<p><strong><em>In newer version of <code>numpy</code> (>1.8.x), <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.meshgrid.html\" rel=\"nofollow noreferrer\"><code>numpy.meshgrid()</code></a> provides a much faster implementation:</em></strong></p>\n\n<p>@pv's solution</p>\n\n<pre><code>In [113]:\n\n%timeit cartesian(([1, 2, 3], [4, 5], [6, 7]))\n10000 loops, best of 3: 135 \u00b5s per loop\nIn [114]:\n\ncartesian(([1, 2, 3], [4, 5], [6, 7]))\n\nOut[114]:\narray([[1, 4, 6],\n       [1, 4, 7],\n       [1, 5, 6],\n       [1, 5, 7],\n       [2, 4, 6],\n       [2, 4, 7],\n       [2, 5, 6],\n       [2, 5, 7],\n       [3, 4, 6],\n       [3, 4, 7],\n       [3, 5, 6],\n       [3, 5, 7]])\n</code></pre>\n\n<p><a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.meshgrid.html\" rel=\"nofollow noreferrer\"><code>numpy.meshgrid()</code></a> use to be 2D only, now it is capable of ND. In this case, 3D:</p>\n\n<pre><code>In [115]:\n\n%timeit np.array(np.meshgrid([1, 2, 3], [4, 5], [6, 7])).T.reshape(-1,3)\n10000 loops, best of 3: 74.1 \u00b5s per loop\nIn [116]:\n\nnp.array(np.meshgrid([1, 2, 3], [4, 5], [6, 7])).T.reshape(-1,3)\n\nOut[116]:\narray([[1, 4, 6],\n       [1, 5, 6],\n       [2, 4, 6],\n       [2, 5, 6],\n       [3, 4, 6],\n       [3, 5, 6],\n       [1, 4, 7],\n       [1, 5, 7],\n       [2, 4, 7],\n       [2, 5, 7],\n       [3, 4, 7],\n       [3, 5, 7]])\n</code></pre>\n\n<p>Note that the order of the final resultant is slightly different.</p>\n"
    },
    "461": {
        "question_id": "5471158",
        "answer_id": "5471351",
        "question": "<pre class=\"lang-python prettyprint-override\"><code>plaintext = input(\"Please enter the text you want to compress\")\nfilename = input(\"Please enter the desired filename\")\nwith gzip.open(filename + \".gz\", \"wb\") as outfile:\n    outfile.write(plaintext) \n</code></pre>\n\n<p>The above python code is giving me following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Traceback (most recent call last):\n  File \"C:/Users/Ankur Gupta/Desktop/Python_works/gzip_work1.py\", line 33, in &lt;module&gt;\n    compress_string()\n  File \"C:/Users/Ankur Gupta/Desktop/Python_works/gzip_work1.py\", line 15, in compress_string\n    outfile.write(plaintext)\n  File \"C:\\Python32\\lib\\gzip.py\", line 312, in write\n    self.crc = zlib.crc32(data, self.crc) &amp; 0xffffffff\nTypeError: 'str' does not support the buffer interface\n</code></pre>\n",
        "answer": "<p>If you use Python3x then <code>string</code> is not the same type as for Python 2.x, you must cast it to bytes (encode it).</p>\n\n<pre><code>plaintext = input(\"Please enter the text you want to compress\")\nfilename = input(\"Please enter the desired filename\")\nwith gzip.open(filename + \".gz\", \"wb\") as outfile:\n    outfile.write(bytes(plaintext, 'UTF-8'))\n</code></pre>\n\n<p>Also do not use variable names like <code>string</code> or <code>file</code> while those are names of module or function.</p>\n\n<p><em>EDIT @Tom</em></p>\n\n<p>Yes, non-ASCII text is also compressed/decompressed. I use Polish letters with UTF-8 encoding:</p>\n\n<pre><code>plaintext = 'Polish text: \u0105\u0107\u0119\u0142\u0144\u00f3\u015b\u017a\u017c\u0104\u0106\u0118\u0141\u0143\u00d3\u015a\u0179\u017b'\nfilename = 'foo.gz'\nwith gzip.open(filename, 'wb') as outfile:\n    outfile.write(bytes(plaintext, 'UTF-8'))\nwith gzip.open(filename, 'r') as infile:\n    outfile_content = infile.read().decode('UTF-8')\nprint(outfile_content)\n</code></pre>\n"
    },
    "462": {
        "question_id": "7395542",
        "answer_id": "7396043",
        "question": "<p>In Python, if you either open a file without calling <code>close()</code>, or close the file but not using <code>try</code>-<code>finally</code> or the \"<code>with</code>\" statement, is this a problem?  Or does it suffice as a coding practice to rely on the Python garbage-collection to close all files?  For example, if one does this:</p>\n\n<pre><code>for line in open(\"filename\"):\n    # ... do stuff ...\n</code></pre>\n\n<p>... is this a problem because the file can never be closed and an exception could occur that prevents it from being closed?  Or will it definitely be closed at the conclusion of the <code>for</code> statement because the file goes out of scope?</p>\n",
        "answer": "<p>In your example the file isn't guaranteed to be closed before the interpreter exits.  In current versions of CPython the file will be closed at the end of the for loop because CPython uses reference counting as its primary garbage collection mechanism but that's an implementation detail, not a feature of the language.  Other implementations of Python aren't guaranteed to work this way.  For example IronPython, PyPy, and Jython don't use reference counting and therefore won't close the file at the end of the loop.</p>\n\n<p>It's bad practice to rely on CPython's garbage collection implementation because it makes your code less portable.  You might not have resource leaks if you use CPython, but if you ever switch to a Python implementation which doesn't use reference counting you'll need to go through all your code and make sure all your files are closed properly.</p>\n\n<p>For your example use:</p>\n\n<pre><code>with open(\"filename\") as f:\n     for line in f:\n        # ... do stuff ...\n</code></pre>\n"
    },
    "463": {
        "question_id": "4906977",
        "answer_id": "4907053",
        "question": "<p>I set an environment variable that I want to access in my Python application.  How do I get this value?</p>\n",
        "answer": "<p>Environment variables are accessed through <a href=\"https://docs.python.org/library/os.html#os.environ\" rel=\"noreferrer\">os.environ</a></p>\n\n<pre><code>import os\nprint(os.environ['HOME'])\n</code></pre>\n\n<p>Or you can see a list of all the environment variables using:</p>\n\n<pre><code>os.environ\n</code></pre>\n\n<p>As sometimes you might need to see a complete list!</p>\n\n<pre><code># using get will return `None` if a key is not present rather than raise a `KeyError`\nprint(os.environ.get('KEY_THAT_MIGHT_EXIST'))\n\n# os.getenv is equivalent, and can also give a default value instead of `None`\nprint(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))\n</code></pre>\n\n<p><a href=\"https://docs.python.org/install/index.html#how-installation-works\" rel=\"noreferrer\">Python default installation</a> on Windows is <code>C:\\Python</code>. If you want to find out while running python you can do:</p>\n\n<pre><code>import sys\nprint(sys.prefix)\n</code></pre>\n"
    },
    "464": {
        "question_id": "1952464",
        "answer_id": "1952481",
        "question": "<p>Is there a method like <code>isiterable</code>? The only solution I have found so far is to call</p>\n\n<pre><code>hasattr(myObj, '__iter__')\n</code></pre>\n\n<p>But I am not sure how fool-proof this is.</p>\n",
        "answer": "<ol>\n<li><p>Checking for <code>__iter__</code> works on sequence types, but it would fail on e.g. strings <strong>in Python 2</strong>. I would like to know the right answer too, until then, here is one possibility (which would work on strings, too):</p>\n\n<pre><code>try:\n    some_object_iterator = iter(some_object)\nexcept TypeError as te:\n    print some_object, 'is not iterable'\n</code></pre>\n\n<p>The <code>iter</code> built-in checks for the <code>__iter__</code> method or in the case of strings the <code>__getitem__</code> method.</p></li>\n<li><p>Another general pythonic approach is to assume an iterable, then fail gracefully if it does not work on the given object. The Python glossary:</p>\n\n<blockquote>\n  <p>Pythonic programming style that determines an object's type by inspection of its method or attribute signature rather than by explicit relationship to some type object (\"If it looks like a <strong>duck</strong> and quacks like a <strong>duck</strong>, it must be a <strong>duck</strong>.\") By emphasizing interfaces rather than specific types, well-designed code improves its flexibility by allowing polymorphic substitution. Duck-typing avoids tests using type() or isinstance(). <strong>Instead, it typically employs the EAFP (Easier to Ask Forgiveness than Permission) style of programming.</strong></p>\n  \n  <p>...</p>\n\n<pre><code>try:\n   _ = (e for e in my_object)\nexcept TypeError:\n   print my_object, 'is not iterable'\n</code></pre>\n</blockquote></li>\n<li><p>The <a href=\"http://docs.python.org/library/collections.html#abcs-abstract-base-classes\" rel=\"noreferrer\"><code>collections</code></a> module provides some abstract base classes, which allow to ask classes or instances if they provide particular functionality, for example:</p>\n\n<pre><code>from collections.abc import Iterable\n\nif isinstance(e, Iterable):\n    # e is iterable\n</code></pre>\n\n<p>However, this does not check for classes that are iterable through <code>__getitem__</code>.</p></li>\n</ol>\n"
    },
    "465": {
        "question_id": "7370801",
        "answer_id": "7370824",
        "question": "<p>What I want is to start counting time somewhere in my code and then get the passed time, to measure the time it took to execute few function. I think I'm using the timeit module wrong, but the docs are just confusing for me.</p>\n\n<pre><code>import timeit\n\nstart = timeit.timeit()\nprint \"hello\"\nend = timeit.timeit()\nprint end - start\n</code></pre>\n",
        "answer": "<p>If you just want to measure the elapsed wall-clock time between two points, you could use  <a href=\"http://docs.python.org/library/time.html#time.time\" rel=\"noreferrer\"><code>time.time()</code></a>:</p>\n\n<pre><code>import time\n\nstart = time.time()\nprint(\"hello\")\nend = time.time()\nprint(end - start)\n</code></pre>\n\n<p>This gives the execution time in seconds.</p>\n\n<p>Another option since 3.3 might be to use <a href=\"https://docs.python.org/3/library/time.html#time.perf_counter\" rel=\"noreferrer\"><code>perf_counter</code></a> or <a href=\"https://docs.python.org/3/library/time.html#time.process_time\" rel=\"noreferrer\"><code>process_time</code></a>, depending on your requirements. Before 3.3 it was recommended to use <a href=\"http://docs.python.org/library/time.html#time.clock\" rel=\"noreferrer\"><code>time.clock</code></a> (thanks <a href=\"https://stackoverflow.com/users/148870/amber\">Amber</a>). However, it is currently deprecated:</p>\n\n<blockquote>\n  <p>On Unix, return the current processor time as a floating point number\n  expressed in seconds. The precision, and in fact the very definition\n  of the meaning of \u201cprocessor time\u201d, depends on that of the C function\n  of the same name.</p>\n  \n  <p>On Windows, this function returns wall-clock seconds elapsed since the\n  first call to this function, as a floating point number, based on the\n  Win32 function <code>QueryPerformanceCounter()</code>. The resolution is typically\n  better than one microsecond.</p>\n  \n  <p><em>Deprecated since version 3.3</em>: The behaviour of this function depends\n  on the platform: <strong>use <code>perf_counter()</code> or <code>process_time()</code> instead</strong>,\n  depending on your requirements, to have a well defined behaviour.</p>\n</blockquote>\n"
    },
    "466": {
        "question_id": "30492623",
        "answer_id": "30493051",
        "question": "<p>I use IPython notebooks and would like to be able to select to create a 2.x or 3.x python notebook in IPython.</p>\n\n<p>I initially had Anaconda.  With Anaconda a global environment variable had to be changed to select what version of python you want and then IPython could be started.  This is not what I was looking for so I uninstalled Anaconda and now have set up my own installation using MacPorts and PiP.  It seems that I still have to use</p>\n\n<pre><code>port select --set python &lt;python version&gt; \n</code></pre>\n\n<p>to toggle between python 2.x and 3.x. which is no better than the anaconda solution.</p>\n\n<p>Is there a way to select what version of python you want to use after you start an IPython notebook, preferably with my current MacPorts build?</p>\n",
        "answer": "<p>A solution is available that allows me to keep my MacPorts installation by configuring the Ipython kernelspec.</p>\n\n<p>Requirements:</p>\n\n<ul>\n<li>MacPorts is installed in the usual /opt directory</li>\n<li>python 2.7 is installed through macports</li>\n<li>python 3.4 is installed through macports</li>\n<li>Ipython is installed for python 2.7</li>\n<li>Ipython is installed for python 3.4</li>\n</ul>\n\n<p>For python 2.x:</p>\n\n<pre><code>$ cd /opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin\n$ sudo ./ipython kernelspec install-self\n</code></pre>\n\n<p>For python 3.x:</p>\n\n<pre><code>$ cd /opt/local/Library/Frameworks/Python.framework/Versions/3.4/bin\n$ sudo ./ipython kernelspec install-self\n</code></pre>\n\n<p>Now you can open an Ipython notebook and then choose a python 2.x or a python 3.x notebook.</p>\n\n<p><a href=\"https://i.stack.imgur.com/45bUZ.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/45bUZ.png\" alt=\"Choose your python!\"></a></p>\n"
    },
    "467": {
        "question_id": "21530577",
        "answer_id": "21548557",
        "question": "<p>I am trying to build a shared library using a C extension file but first I have to generate the output file using the command below:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>gcc -Wall utilsmodule.c -o Utilc\n</code></pre>\n\n<p>After executing the command, I get this error message:</p>\n\n<blockquote>\n  <p>utilsmodule.c:1:20: fatal error: Python.h: No such file or directory\n  compilation terminated.</p>\n</blockquote>\n\n<p>in fact I have tried all the suggested solutions over the internet but the problem still exists ... also I have no problem with <code>Python.h</code>. I managed to locate the file on my machine ... anybody has faced the same problem before??</p>\n",
        "answer": "<p>I managed to solve this issue and generate the .so file in one command </p>\n\n<pre><code>gcc -shared -o UtilcS.so\n-fPIC -I/usr/include/python2.7 -lpython2.7  utilsmodule.c\n</code></pre>\n"
    },
    "468": {
        "question_id": "714063",
        "answer_id": "714070",
        "question": "<p>I am running Python 2.5.</p>\n\n<p>This is my folder tree:</p>\n\n<pre><code>ptdraft/\n  nib.py\n  simulations/\n    life/\n      life.py\n</code></pre>\n\n<p>(I also have <code>__init__.py</code> in each folder, omitted here for readability)</p>\n\n<p>How do I import the <code>nib</code> module from inside the <code>life</code> module? I am hoping it is possible to do without tinkering with sys.path.</p>\n\n<p>Note: The main module being run is in the <code>ptdraft</code> folder.</p>\n",
        "answer": "<p>It seems that the problem is not related to the module being in a parent directory or anything like that.</p>\n\n<p>You need to add the directory that contains <code>ptdraft</code> to PYTHONPATH</p>\n\n<p>You said that <code>import nib</code> worked with you, that probably means that you added <code>ptdraft</code> itself (not its parent) to PYTHONPATH.</p>\n"
    },
    "469": {
        "question_id": "14836228",
        "answer_id": "14836456",
        "question": "<p>In Python, I've seen two variable values swapped using this syntax:</p>\n\n<pre><code>left, right = right, left\n</code></pre>\n\n<p>Is this considered the standard way to swap two variable values or is there some other means by which two variables are by convention most usually swapped?</p>\n",
        "answer": "<blockquote>\n  <p>Python evaluates expressions from left to right. Notice that while\n  evaluating an assignment, the right-hand side is evaluated before the\n  left-hand side.</p>\n  \n  <p><a href=\"http://docs.python.org/3/reference/expressions.html#evaluation-order\" rel=\"noreferrer\">http://docs.python.org/3/reference/expressions.html#evaluation-order</a></p>\n</blockquote>\n\n<p>That means the following for the expression <code>a,b = b,a</code> :   </p>\n\n<ul>\n<li>the right-hand side <code>b,a</code> is evaluated, that is to say a tuple of two elements is created in the memory. The two element are the objects designated by the identifiers <code>b</code> and <code>a</code>, that were existing before the instruction is encoutered during an execution of program</li>\n<li>just after the creation of this tuple, no assignement of this tuple object have still been made, but it doesn't matter, Python internally knows where it is </li>\n<li>then, the left-hand side is evaluated, that is to say the tuple is assigned to the left-hand side</li>\n<li>as the left-hand side is composed of two identifiers, the tuple is unpacked in order that the first identifier <code>a</code> be assigned to the first element of the tuple (which is the object that was formely <strong>b</strong> before the swap because it had name <code>b</code>)<br>\nand the second identifier <code>b</code> is assigned to the second element of the tuple (which is the object that was formerly <strong>a</strong> before the swap because its identifiers was <code>a</code>)</li>\n</ul>\n\n<p>This mechanism has effectively swapped the objects assigned to the identifiers <code>a</code> and <code>b</code></p>\n\n<p>So, to answer your question: YES, it's the standard way to swap two identifiers on two objects.<br>\nBy the way, the objects are not variables, they are objects.</p>\n"
    },
    "470": {
        "question_id": "2267362",
        "answer_id": "2267446",
        "question": "<p>Python allows easy creation of an integer from a string of a given base via </p>\n\n<pre><code>int(str, base). \n</code></pre>\n\n<p>I want to perform the inverse: <strong>creation of a string from an integer</strong>, \ni.e. I want some function <code>int2base(num, base)</code>, such that:</p>\n\n<pre><code>int(int2base(x, b), b) == x\n</code></pre>\n\n<p>The function name/argument order is unimportant. </p>\n\n<p>For any number <code>x</code> and base <code>b</code> that <code>int()</code> will accept.</p>\n\n<p>This is an easy function to write: in fact it's easier than describing it in this question. However, I feel like I must be missing something.  </p>\n\n<p>I know about the functions <code>bin</code>, <code>oct</code>, <code>hex</code>, but I cannot use them for a few reasons:</p>\n\n<ul>\n<li><p>Those functions are not available on older versions of Python, with which I need compatibility with (2.2) </p></li>\n<li><p>I want a general solution that can be called the same way for different bases</p></li>\n<li><p>I want to allow bases other than 2, 8, 16</p></li>\n</ul>\n\n<h3>Related</h3>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2063425/python-elegant-inverse-function-of-intstring-base\">Python elegant inverse function of int(string, base)</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2088201/integer-to-base-x-system-using-recursion-in-python\">Integer to base-x system using recursion in python</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1119722/base-62-conversion-in-python\">Base 62 conversion in Python</a></li>\n<li><a href=\"https://stackoverflow.com/questions/561486/how-to-convert-an-integer-to-the-shortest-url-safe-string-in-python\">How to convert an integer to the shortest url-safe string in Python?</a></li>\n</ul>\n",
        "answer": "<p>If you need compatibility with ancient versions of Python, you can either use <a href=\"https://github.com/aleaxit/gmpy\" rel=\"noreferrer\">gmpy</a> (which does include a fast, completely general int-to-string conversion function, and can be built for such ancient versions -- you may need to try older releases since the recent ones have not been tested for venerable Python and GMP releases, only somewhat recent ones), or, for less speed but more convenience, use Python code -- e.g., most simply:</p>\n\n<pre><code>import string\ndigs = string.digits + string.ascii_letters\n\n\ndef int2base(x, base):\n    if x &lt; 0:\n        sign = -1\n    elif x == 0:\n        return digs[0]\n    else:\n        sign = 1\n\n    x *= sign\n    digits = []\n\n    while x:\n        digits.append(digs[int(x % base)])\n        x = int(x / base)\n\n    if sign &lt; 0:\n        digits.append('-')\n\n    digits.reverse()\n\n    return ''.join(digits)\n</code></pre>\n"
    },
    "471": {
        "question_id": "3220404",
        "answer_id": "30408520",
        "question": "<p>A <a href=\"http://twitter.com/jperras/statuses/18160589493\" rel=\"noreferrer\">tweet</a> reads: </p>\n\n<blockquote>\n  <p>Don't use easy_install, unless you\n  like stabbing yourself in the face.\n  Use pip.</p>\n</blockquote>\n\n<p>Why use pip over easy_install? Doesn't the <a href=\"http://mail.python.org/pipermail/catalog-sig/2010-June/002985.html\" rel=\"noreferrer\">fault lie with PyPI and package authors mostly</a>? If an author uploads crap source tarball (eg: missing files, no setup.py) to PyPI, then both pip and easy_install will fail. Other than cosmetic differences, why do Python people (like in the above tweet) seem to <strong>strongly</strong> favor pip over easy_install?</p>\n\n<p>(Let's assume that we're talking about easy_install from the Distribute package, that is maintained by the community)</p>\n",
        "answer": "<p>Many of the answers here are out of date for 2015 (although <a href=\"https://stackoverflow.com/a/3220572/908494\">the initially accepted one from Daniel Roseman</a> is not). Here's the current state of things:</p>\n\n<ul>\n<li>Binary packages are now distributed as wheels (<code>.whl</code> files)\u2014not just on PyPI, but in third-party repositories like <a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\" rel=\"noreferrer\">Christoph Gohlke's Extension Packages for Windows</a>. <code>pip</code> can handle wheels; <code>easy_install</code> cannot.</li>\n<li>Virtual environments (which come built-in with 3.4, or can be added to 2.6+/3.1+ with <a href=\"https://pypi.python.org/pypi/virtualenv\" rel=\"noreferrer\"><code>virtualenv</code></a>) have become a very important and prominent tool (and recommended in <a href=\"https://docs.python.org/3/installing/index.html\" rel=\"noreferrer\">the official docs</a>); they include <code>pip</code> out of the box, but don't even work properly with <code>easy_install</code>.</li>\n<li>The <code>distribute</code> package that included <code>easy_install</code> is no longer maintained. Its improvements over <code>setuptools</code> got merged back into <code>setuptools</code>. Trying to install <code>distribute</code> will just install <code>setuptools</code> instead.</li>\n<li><code>easy_install</code> itself is only quasi-maintained.</li>\n<li>All of the cases where <code>pip</code> used to be inferior to <code>easy_install</code>\u2014installing from an unpacked source tree, from a DVCS repo, etc.\u2014are long-gone; you can <code>pip install .</code>, <code>pip install git+https://</code>.</li>\n<li><code>pip</code> comes with the official Python 2.7 and 3.4+ packages from python.org, and a <code>pip</code> bootstrap is included by default if you build from source.</li>\n<li>The various incomplete bits of documentation on installing, using, and building packages have been replaced by the <a href=\"https://packaging.python.org/\" rel=\"noreferrer\">Python Packaging User Guide</a>. Python's own documentation on <a href=\"https://docs.python.org/3/installing/index.html\" rel=\"noreferrer\">Installing Python Modules</a> now defers to this user guide, and explicitly calls out <code>pip</code> as \"the preferred installer program\".</li>\n<li>Other new features have been added to <code>pip</code> over the years that will never be in <code>easy_install</code>. For example, <code>pip</code> makes it easy to clone your site-packages by building a requirements file and then installing it with a single command on each side. Or to convert your requirements file to a local repo to use for in-house development. And so on.</li>\n</ul>\n\n<p>The only good reason that I know of to use <code>easy_install</code> in 2015 is the special case of using Apple's pre-installed Python versions with OS X 10.5-10.8. Since 10.5, Apple has included <code>easy_install</code>, but as of 10.10 they still don't include <code>pip</code>. With 10.9+, you should still just use <code>get-pip.py</code>, but for 10.5-10.8, this has some problems, so it's easier to <code>sudo easy_install pip</code>. (In general, <code>easy_install pip</code> is a bad idea; it's only for OS X 10.5-10.8 that you want to do this.) Also, 10.5-10.8 include <code>readline</code> in a way that <code>easy_install</code> knows how to kludge around but <code>pip</code> doesn't, so you also want to <code>sudo easy_install readline</code> if you want to upgrade that.</p>\n"
    },
    "472": {
        "question_id": "275018",
        "answer_id": "275025",
        "question": "<p>What is the Python equivalent of Perl's <code>chomp</code> function, which removes the last character of a string if it is a newline?</p>\n",
        "answer": "<p>Try the method <code>rstrip()</code> (see doc <a href=\"http://docs.python.org/2/library/stdtypes.html#str.rstrip\" rel=\"noreferrer\">Python 2</a> and <a href=\"https://docs.python.org/3/library/stdtypes.html#str.rstrip\" rel=\"noreferrer\">Python 3</a>)</p>\n\n<pre><code>&gt;&gt;&gt; 'test string\\n'.rstrip()\n'test string'\n</code></pre>\n\n<p>Python's <code>rstrip()</code> method strips <em>all</em> kinds of trailing whitespace by default, not just one newline as Perl does with <a href=\"http://perldoc.perl.org/functions/chomp.html\" rel=\"noreferrer\"><code>chomp</code></a>.</p>\n\n<pre><code>&gt;&gt;&gt; 'test string \\n \\r\\n\\n\\r \\n\\n'.rstrip()\n'test string'\n</code></pre>\n\n<p>To strip only newlines:</p>\n\n<pre><code>&gt;&gt;&gt; 'test string \\n \\r\\n\\n\\r \\n\\n'.rstrip('\\n')\n'test string \\n \\r\\n\\n\\r '\n</code></pre>\n\n<p>There are also the methods <code>lstrip()</code> and <code>strip()</code>:</p>\n\n<pre><code>&gt;&gt;&gt; s = \"   \\n\\r\\n  \\n  abc   def \\n\\r\\n  \\n  \"\n&gt;&gt;&gt; s.strip()\n'abc   def'\n&gt;&gt;&gt; s.lstrip()\n'abc   def \\n\\r\\n  \\n  '\n&gt;&gt;&gt; s.rstrip()\n'   \\n\\r\\n  \\n  abc   def'\n</code></pre>\n"
    },
    "473": {
        "question_id": "1186789",
        "answer_id": "1186847",
        "question": "<p>I have a script named test1.py which is not in a module. It just has code that should execute when the script itself is run. There are no functions, classes, methods, etc. I have another script which runs as a service. I want to call test1.py from the script running as a service.</p>\n\n<p>For example:</p>\n\n<h3>File test1.py</h3>\n\n<pre><code>print \"I am a test\"\nprint \"see! I do nothing productive.\"\n</code></pre>\n\n<h3>File service.py</h3>\n\n<pre><code># Lots of stuff here\ntest1.py # do whatever is in test1.py\n</code></pre>\n\n<p>I'm aware of one method which is opening the file, reading the contents, and basically eval'ing it. I'm assuming there's a better way of doing this. Or at least I hope so.</p>\n",
        "answer": "<p>The usual way to do this is something like the following.</p>\n\n<p>test1.py</p>\n\n<pre><code>def some_func():\n    print 'in test 1, unproductive'\n\nif __name__ == '__main__':\n    # test1.py executed as script\n    # do something\n    some_func()\n</code></pre>\n\n<p>service.py</p>\n\n<pre><code>import test1\n\ndef service_func():\n    print 'service func'\n\nif __name__ == '__main__':\n    # service.py executed as script\n    # do something\n    service_func()\n    test1.some_func()\n</code></pre>\n"
    },
    "474": {
        "question_id": "9835762",
        "answer_id": "9835819",
        "question": "<p>How can I find the duplicates in a Python list and create another list of the duplicates? The list only contains integers.</p>\n",
        "answer": "<p>To remove duplicates use <code>set(a)</code>. To print duplicates, something like:</p>\n\n<pre><code>a = [1,2,3,2,1,5,6,5,5,5]\n\nimport collections\nprint [item for item, count in collections.Counter(a).items() if count &gt; 1]\n\n## [1, 2, 5]\n</code></pre>\n\n<p>Note that <code>Counter</code> is not particularly efficient (<a href=\"https://stackoverflow.com/a/25706298/989121\">timings</a>) and probably overkill here. <code>set</code> will perform better. This code computes a list of unique elements in the source order:</p>\n\n<pre><code>seen = set()\nuniq = []\nfor x in a:\n    if x not in seen:\n        uniq.append(x)\n        seen.add(x)\n</code></pre>\n\n<p>or, more concisely:</p>\n\n<pre><code>seen = set()\nuniq = [x for x in a if x not in seen and not seen.add(x)]    \n</code></pre>\n\n<p>I don't recommend the latter style, because it is not obvious what <code>not seen.add(x)</code> is doing  (the set <code>add()</code> method always returns <code>None</code>, hence the need for <code>not</code>).</p>\n\n<p>To compute the list of duplicated elements without libraries:</p>\n\n<pre><code>seen = {}\ndupes = []\n\nfor x in a:\n    if x not in seen:\n        seen[x] = 1\n    else:\n        if seen[x] == 1:\n            dupes.append(x)\n        seen[x] += 1\n</code></pre>\n\n<p>If list elements are not hashable, you cannot use sets/dicts and have to resort to a quadratic time solution (compare each with each). For example:</p>\n\n<pre><code>a = [[1], [2], [3], [1], [5], [3]]\n\nno_dupes = [x for n, x in enumerate(a) if x not in a[:n]]\nprint no_dupes # [[1], [2], [3], [5]]\n\ndupes = [x for n, x in enumerate(a) if x in a[:n]]\nprint dupes # [[1], [3]]\n</code></pre>\n"
    },
    "475": {
        "question_id": "136168",
        "answer_id": "692616",
        "question": "<p>I'm writing a log file viewer for a web application and for that I want to paginate through the lines of the log file.  The items in the file are line based with the newest item on the bottom.</p>\n\n<p>So I need a <code>tail()</code> method that can read <code>n</code> lines from the bottom and supports an offset.  What I came up with looks like this:</p>\n\n<pre><code>def tail(f, n, offset=0):\n    \"\"\"Reads a n lines from f with an offset of offset lines.\"\"\"\n    avg_line_length = 74\n    to_read = n + offset\n    while 1:\n        try:\n            f.seek(-(avg_line_length * to_read), 2)\n        except IOError:\n            # woops.  apparently file is smaller than what we want\n            # to step back, go to the beginning instead\n            f.seek(0)\n        pos = f.tell()\n        lines = f.read().splitlines()\n        if len(lines) &gt;= to_read or pos == 0:\n            return lines[-to_read:offset and -offset or None]\n        avg_line_length *= 1.3\n</code></pre>\n\n<p>Is this a reasonable approach?  What is the recommended way to tail log files with offsets?</p>\n",
        "answer": "<p>The code I ended up using.  I think this is the best so far:</p>\n\n<pre><code>def tail(f, n, offset=None):\n    \"\"\"Reads a n lines from f with an offset of offset lines.  The return\n    value is a tuple in the form ``(lines, has_more)`` where `has_more` is\n    an indicator that is `True` if there are more lines in the file.\n    \"\"\"\n    avg_line_length = 74\n    to_read = n + (offset or 0)\n\n    while 1:\n        try:\n            f.seek(-(avg_line_length * to_read), 2)\n        except IOError:\n            # woops.  apparently file is smaller than what we want\n            # to step back, go to the beginning instead\n            f.seek(0)\n        pos = f.tell()\n        lines = f.read().splitlines()\n        if len(lines) &gt;= to_read or pos == 0:\n            return lines[-to_read:offset and -offset or None], \\\n                   len(lines) &gt; to_read or pos &gt; 0\n        avg_line_length *= 1.3\n</code></pre>\n"
    },
    "476": {
        "question_id": "4211209",
        "answer_id": "4211228",
        "question": "<p>Let's say I have two lists, <code>l1</code> and <code>l2</code>.  I want to perform <code>l1 - l2</code>, which returns all elements of <code>l1</code> not in <code>l2</code>.</p>\n\n<p>I can think of a naive loop approach to doing this, but that is going to be really inefficient.  What is a pythonic and efficient way of doing this?</p>\n\n<p>As an example, if I have <code>l1 = [1,2,6,8] and l2 = [2,3,5,8]</code>, <code>l1 - l2</code> should return <code>[1,6]</code></p>\n",
        "answer": "<p>Python has a language feature called <a href=\"http://docs.python.org/tutorial/datastructures.html#list-comprehensions\">List Comprehensions</a> that is perfectly suited to making this sort of thing extremely easy. The following statement does exactly what you want and stores the result in <code>l3</code>:</p>\n\n<pre><code>l3 = [x for x in l1 if x not in l2]\n</code></pre>\n\n<p><code>l3</code> will contain <code>[1, 6]</code>.</p>\n\n<p>Hope this helps!</p>\n"
    },
    "477": {
        "question_id": "13269890",
        "answer_id": "13270110",
        "question": "<p>I have two pandas dataframes:</p>\n\n<pre><code>from pandas import DataFrame\ndf1 = DataFrame({'col1':[1,2],'col2':[3,4]})\ndf2 = DataFrame({'col3':[5,6]})     \n</code></pre>\n\n<p>What is the best practice to get their cartesian product (of course without writing it explicitly like me)?</p>\n\n<pre><code>#df1, df2 cartesian product\ndf_cartesian = DataFrame({'col1':[1,2,1,2],'col2':[3,4,3,4],'col3':[5,5,6,6]})\n</code></pre>\n",
        "answer": "<p>If you have a key that is repeated for each row, then you can produce a cartesian product using merge (like you would in SQL).</p>\n\n<pre><code>from pandas import DataFrame, merge\ndf1 = DataFrame({'key':[1,1], 'col1':[1,2],'col2':[3,4]})\ndf2 = DataFrame({'key':[1,1], 'col3':[5,6]})\n\nmerge(df1, df2,on='key')[['col1', 'col2', 'col3']]\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>   col1  col2  col3\n0     1     3     5\n1     1     3     6\n2     2     4     5\n3     2     4     6\n</code></pre>\n\n<p>See here for the documentation: <a href=\"http://pandas.pydata.org/pandas-docs/stable/merging.html#brief-primer-on-merge-methods-relational-algebra\" rel=\"noreferrer\">http://pandas.pydata.org/pandas-docs/stable/merging.html#brief-primer-on-merge-methods-relational-algebra</a></p>\n"
    },
    "478": {
        "question_id": "47007680",
        "answer_id": "47007761",
        "question": "<p>I'm trying to learn python and came across some code that is nice and short but doesn't totally make sense</p>\n\n<p>the context was:</p>\n\n<pre><code>def fn(*args):\n    return len(args) and max(args)-min(args)\n</code></pre>\n\n<p>I get what it's doing, but why does python do this - ie return the value rather than True/False?</p>\n\n<pre><code>10 and 7-2\n</code></pre>\n\n<p>returns 5. Similarly, changing the and to or will result in a change in functionality. So</p>\n\n<pre><code>10 or 7 - 2\n</code></pre>\n\n<p>Would return 10.</p>\n\n<p>Is this legit/reliable style, or are there any gotchas on this?</p>\n",
        "answer": "<h1><strong>TL;DR</strong></h1>\n\n<p>We start by summarising the two behaviour of the two logical operators <code>and</code> and <code>or</code>. These idioms will form the basis of our discussion below.</p>\n\n<blockquote>\n  <h3><code>and</code></h3>\n  \n  <p>Return the first Falsy value if there are any, else return the last\n  value in the expression.</p>\n</blockquote>\n\n<p></p>\n\n<blockquote>\n  <h3><code>or</code></h3>\n  \n  <p>Return the first Truthy value if there are any, else return the last\n  value in the expression.</p>\n</blockquote>\n\n<p>The behaviour is also summarised in <a href=\"https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not\" rel=\"noreferrer\">the docs</a>, especially in this table:</p>\n\n<p><a href=\"https://i.stack.imgur.com/aDOiQ.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/aDOiQ.png\" alt=\"enter image description here\"></a></p>\n\n<p>The only operator returning a boolean value regardless of its operands is the <code>not</code> operator.</p>\n\n<hr>\n\n<h1>\"Truthiness\", and \"Truthy\" Evaluations</h1>\n\n<p>The statement </p>\n\n<pre><code>len(args) and max(args) - min(args)\n</code></pre>\n\n<p>Is a <em>very</em> <s>pythonic</s> concise (and arguably less readable) way of saying \"if <code>args</code> is not empty, return the result of <code>max(args) - min(args)</code>\", otherwise return <code>0</code>. In general, it is a more concise representation of an <code>if-else</code> expression. For example,</p>\n\n<pre><code>exp1 and exp2\n</code></pre>\n\n<p>Should (roughly) translate to:</p>\n\n<pre><code>r1 = exp1\nif not r1:\n    r1 = exp2\n</code></pre>\n\n<p>Or, equivalently,</p>\n\n<pre><code>r1 = exp1 if exp1 else exp2\n</code></pre>\n\n<p>Where <code>exp1</code> and <code>exp2</code> are arbitrary python objects, or expressions that return some object. The key to understanding the uses of the logical <code>and</code> and <code>or</code> operators here is understanding that they are not restricted to operating on, or returning boolean values. Any object with a truthiness value can be tested here. This includes <code>int</code>, <code>str</code>, <code>list</code>, <code>dict</code>, <code>tuple</code>, <code>set</code>, <code>NoneType</code>, and user defined objects. Short circuiting rules still apply as well. </p>\n\n<p><strong>But what is truthiness?</strong><br>\nIt refers to how objects are evaluated when used in conditional expressions. @Patrick Haugh summarises truthiness nicely in <a href=\"https://stackoverflow.com/a/39984051/4909087\">this post</a>.</p>\n\n<blockquote>\n  <p>All values are considered \"truthy\" except for the following, which are\n  \"falsy\":</p>\n  \n  <ul>\n  <li><code>None</code></li>\n  <li><code>False</code></li>\n  <li><code>0</code></li>\n  <li><code>0.0</code></li>\n  <li><code>0j</code></li>\n  <li><code>Decimal(0)</code></li>\n  <li><code>Fraction(0, 1)</code></li>\n  <li><code>[]</code> - an empty <code>list</code></li>\n  <li><code>{}</code> - an empty <code>dict</code></li>\n  <li><code>()</code> - an empty <code>tuple</code></li>\n  <li><code>''</code> - an empty <code>str</code></li>\n  <li><code>b''</code> - an empty <code>bytes</code></li>\n  <li><code>set()</code> - an empty <code>set</code></li>\n  <li>an empty <code>range</code>, like <code>range(0)</code></li>\n  <li>objects for which \n  \n  <ul>\n  <li><code>obj.__bool__()</code> returns <code>False</code></li>\n  <li><code>obj.__len__()</code> returns <code>0</code> </li>\n  </ul></li>\n  </ul>\n  \n  <p>A \"truthy\" value will satisfy the check performed by <code>if</code> or <code>while</code>\n  statements.  We use \"truthy\" and \"falsy\" to differentiate from the\n  <code>bool</code> values <code>True</code> and <code>False</code>.</p>\n</blockquote>\n\n<hr>\n\n<h1>How <code>and</code> Works</h1>\n\n<p>We build on OP's question as a segue into a discussion on how these operators in these instances.</p>\n\n<blockquote>\n  <p>Given a function with the definition</p>\n\n<pre><code>def foo(*args):\n    ...\n</code></pre>\n  \n  <p>How do I return the difference between the minimum and maximum value\n  in a list of zero or more arguments?</p>\n</blockquote>\n\n<p>Finding the minimum and maximum is easy (use the inbuilt functions!). The only snag here is appropriately handling the corner case where the argument list could be empty (for example, calling <code>foo()</code>). We can do both in a single line thanks to the <code>and</code> operator:</p>\n\n<pre><code>def foo(*args):\n     return len(args) and max(args) - min(args)\n</code></pre>\n\n<p></p>\n\n<pre><code>foo(1, 2, 3, 4, 5)\n# 4\n\nfoo()\n# 0\n</code></pre>\n\n<p>Since <code>and</code> is used, the second expression must also be evaluated if the first is <code>True</code>. Note that, if the first expression is evaluated to be truthy, the return value is <em>always</em> the result of the <em>second expression</em>. If the first expression is evaluated to be Falsy, then the result returned is the result of the first expression. </p>\n\n<p>In the function above, If <code>foo</code> receives one or more arguments, <code>len(args)</code> is greater than <code>0</code> (a positive number), so the result returned is <code>max(args) - min(args)</code>. OTOH, if no arguments are passed, <code>len(args)</code> is <code>0</code> which is Falsy, and <code>0</code> is returned.</p>\n\n<p>Note that an alternative way to write this function would be:</p>\n\n<pre><code>def foo(*args):\n    if not len(args):\n        return 0\n\n    return max(args) - min(args)\n</code></pre>\n\n<p>Or, more concisely,</p>\n\n<pre><code>def foo(*args):\n    return 0 if not args else max(args) - min(args)\n</code></pre>\n\n<p>If course, none of these functions perform any type checking, so unless you completely trust the input provided, <em>do not</em> rely on the simplicity of these constructs.</p>\n\n<hr>\n\n<h1>How <code>or</code> Works</h1>\n\n<p>I explain the working of <code>or</code> in a similar fashion with a contrived example.</p>\n\n<blockquote>\n  <p>Given a function with the definition</p>\n\n<pre><code>def foo(*args):\n    ...\n</code></pre>\n  \n  <p>How would you complete <code>foo</code> to return all numbers over <code>9000</code>?</p>\n</blockquote>\n\n<p>We use <code>or</code> to handle the corner case here. We define <code>foo</code> as:</p>\n\n<pre><code>def foo(*args):\n     return [x for x in args if x &gt; 9000] or 'No number over 9000!'\n\nfoo(9004, 1, 2, 500)\n# [9004]\n\nfoo(1, 2, 3, 4)\n# 'No number over 9000!'\n</code></pre>\n\n<p><code>foo</code> performs a filtration on the list to retain all numbers over <code>9000</code>. If there exist any such numbers, the result of the list comprehension is a non-empty list which is Truthy, so it is returned (short circuiting in action here). If there exist no such numbers, then the result of the list comp is <code>[]</code> which is Falsy. So the second expression is now evaluated (a non-empty string) and is returned.</p>\n\n<p>Using conditionals, we could re-write this function as,</p>\n\n<pre><code>def foo(*args):\n    r = [x for x in args if x &gt; 9000]\n    if not r:\n        return 'No number over 9000!' \n\n    return r\n</code></pre>\n\n<p>As before, this structure is more flexible in terms of error handling. </p>\n"
    },
    "479": {
        "question_id": "2257441",
        "answer_id": "2257449",
        "question": "<p>I want to generate a string of size N.</p>\n\n<p>It should be made up of numbers and uppercase English letters such as:</p>\n\n<ul>\n<li>6U1S75</li>\n<li>4Z4UKK</li>\n<li>U911K4</li>\n</ul>\n\n<p>How can I achieve this in a <a href=\"https://en.wikipedia.org/wiki/Python_%28programming_language%29#Features_and_philosophy\">pythonic</a> way?</p>\n",
        "answer": "<p><strong>Answer in one line:</strong></p>\n\n<pre><code>''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))\n</code></pre>\n\n<p>or even shorter starting with Python 3.6 using <a href=\"https://docs.python.org/3/library/random.html#random.choices\" rel=\"noreferrer\"><code>random.choices()</code></a>:</p>\n\n<pre><code>''.join(random.choices(string.ascii_uppercase + string.digits, k=N))\n</code></pre>\n\n<p><strong>A cryptographically more secure version; see <a href=\"https://stackoverflow.com/a/23728630/2213647\">https://stackoverflow.com/a/23728630/2213647</a>:</strong></p>\n\n<pre><code>''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))\n</code></pre>\n\n<p><strong>In details, with a clean function for further reuse:</strong></p>\n\n<pre><code>&gt;&gt;&gt; import string\n&gt;&gt;&gt; import random\n&gt;&gt;&gt; def id_generator(size=6, chars=string.ascii_uppercase + string.digits):\n...    return ''.join(random.choice(chars) for _ in range(size))\n...\n&gt;&gt;&gt; id_generator()\n'G5G74W'\n&gt;&gt;&gt; id_generator(3, \"6793YUIO\")\n'Y3U'\n</code></pre>\n\n<p><strong>How does it work ?</strong></p>\n\n<p>We import <code>string</code>, a module that contains sequences of common ASCII characters, and <code>random</code>, a module that deals with random generation.</p>\n\n<p><code>string.ascii_uppercase + string.digits</code> just concatenates the list of characters representing uppercase ASCII chars and digits:</p>\n\n<pre><code>&gt;&gt;&gt; string.ascii_uppercase\n'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n&gt;&gt;&gt; string.digits\n'0123456789'\n&gt;&gt;&gt; string.ascii_uppercase + string.digits\n'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n</code></pre>\n\n<p>Then we use a list comprehension to create a list of 'n' elements:</p>\n\n<pre><code>&gt;&gt;&gt; range(4) # range create a list of 'n' numbers\n[0, 1, 2, 3]\n&gt;&gt;&gt; ['elem' for _ in range(4)] # we use range to create 4 times 'elem'\n['elem', 'elem', 'elem', 'elem']\n</code></pre>\n\n<p>In the example above, we use <code>[</code> to create the list, but we don't in the <code>id_generator</code> function so Python doesn't create the list in memory, but generates the elements on the fly, one by one (more about this <a href=\"https://stackoverflow.com/questions/231767/the-python-yield-keyword-explained/231855#231855\">here</a>).</p>\n\n<p>Instead of asking to create 'n' times the string <code>elem</code>, we will ask Python to create 'n' times a random character, picked from a sequence of characters:</p>\n\n<pre><code>&gt;&gt;&gt; random.choice(\"abcde\")\n'a'\n&gt;&gt;&gt; random.choice(\"abcde\")\n'd'\n&gt;&gt;&gt; random.choice(\"abcde\")\n'b'\n</code></pre>\n\n<p>Therefore <code>random.choice(chars) for _ in range(size)</code> really is creating a sequence of <code>size</code> characters. Characters that are randomly picked from <code>chars</code>:</p>\n\n<pre><code>&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]\n['a', 'b', 'b']\n&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]\n['e', 'b', 'e']\n&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]\n['d', 'a', 'c']\n</code></pre>\n\n<p>Then we just join them with an empty string so the sequence becomes a string:</p>\n\n<pre><code>&gt;&gt;&gt; ''.join(['a', 'b', 'b'])\n'abb'\n&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]\n['d', 'c', 'b']\n&gt;&gt;&gt; ''.join(random.choice('abcde') for _ in range(3))\n'dac'\n</code></pre>\n"
    },
    "480": {
        "question_id": "1024847",
        "answer_id": "1024851",
        "question": "<p>Is it possible to add a key to a Python dictionary after it has been created? It doesn't seem to have an <code>.add()</code> method.</p>\n",
        "answer": "<pre><code>d = {'key':'value'}\nprint(d)\n# {'key': 'value'}\nd['mynewkey'] = 'mynewvalue'\nprint(d)\n# {'mynewkey': 'mynewvalue', 'key': 'value'}\n</code></pre>\n"
    },
    "481": {
        "question_id": "354883",
        "answer_id": "356695",
        "question": "<p>The canonical way to return multiple values in languages that support it is often <a href=\"https://stackoverflow.com/questions/38508/whats-the-best-way-to-return-multiple-values-from-a-function-in-python\">tupling</a>.</p>\n\n<h3>Option: Using a tuple</h3>\n\n<p>Consider this trivial example:</p>\n\n<pre><code>def f(x):\n  y0 = x + 1\n  y1 = x * 3\n  y2 = y0 ** y3\n  return (y0, y1, y2)\n</code></pre>\n\n<p>However, this quickly gets problematic as the number of values returned increases. What if you want to return four or five values? Sure, you could keep tupling them, but it gets easy to forget which value is where. It's also rather ugly to unpack them wherever you want to receive them.</p>\n\n<h3>Option: Using a dictionary</h3>\n\n<p>The next logical step seems to be to introduce some sort of 'record notation'. In Python, the obvious way to do this is by means of a <code>dict</code>.</p>\n\n<p>Consider the following:</p>\n\n<pre><code>def g(x):\n  y0 = x + 1\n  y1 = x * 3\n  y2 = y0 ** y3\n  return {'y0': y0, 'y1': y1 ,'y2': y2}\n</code></pre>\n\n<p>(Just to be clear, y0, y1, and y2 are just meant as abstract identifiers. As pointed out, in practice you'd use meaningful identifiers.)</p>\n\n<p>Now, we have a mechanism whereby we can project out a particular member of the returned object. For example,</p>\n\n<pre><code>result['y0']\n</code></pre>\n\n<h3>Option: Using a class</h3>\n\n<p>However, there is another option. We could instead return a specialized structure. I've framed this in the context of Python, but I'm sure it applies to other languages as well. Indeed, if you were working in C this might very well be your only option. Here goes:</p>\n\n<pre><code>class ReturnValue:\n  def __init__(self, y0, y1, y2):\n     self.y0 = y0\n     self.y1 = y1\n     self.y2 = y2\n\ndef g(x):\n  y0 = x + 1\n  y1 = x * 3\n  y2 = y0 ** y3\n  return ReturnValue(y0, y1, y2)\n</code></pre>\n\n<p>In Python the previous two are perhaps very similar in terms of plumbing - after all <code>{ y0, y1, y2 }</code> just end up being entries in the internal <code>__dict__</code> of the <code>ReturnValue</code>.</p>\n\n<p>There is one additional feature provided by Python though for tiny objects, the <code>__slots__</code> attribute. The class could be expressed as:</p>\n\n<pre><code>class ReturnValue(object):\n  __slots__ = [\"y0\", \"y1\", \"y2\"]\n  def __init__(self, y0, y1, y2):\n     self.y0 = y0\n     self.y1 = y1\n     self.y2 = y2\n</code></pre>\n\n<p>From the <a href=\"http://www.network-theory.co.uk/docs/pylang/__slots__.html\" rel=\"noreferrer\">Python Reference Manual</a>:</p>\n\n<blockquote>\n  <p>The <code>__slots__</code> declaration takes a sequence of instance variables and reserves just enough space in each instance to hold a value for each variable. Space is saved because <code>__dict__</code> is not created for each instance.</p>\n</blockquote>\n\n<h3>Option: Using a <a href=\"https://docs.python.org/3/library/dataclasses.html\" rel=\"noreferrer\">dataclass</a> (Python 3.7+)</h3>\n\n<p>Using Python 3.7's new dataclasses, return a class with automatically added special methods, typing and other useful tools:</p>\n\n<pre><code>@dataclass\nclass Returnvalue:\n    y0: int\n    y1: float\n    y3: int\n\ndef total_cost(x):\n    y0 = x + 1\n    y1 = x * 3\n    y2 = y0 ** y3\n    return ReturnValue(y0, y1, y2)\n</code></pre>\n\n<h3>Option: Using a list</h3>\n\n<p>Another suggestion which I'd overlooked comes from Bill the Lizard:</p>\n\n<pre><code>def h(x):\n  result = [x + 1]\n  result.append(x * 3)\n  result.append(y0 ** y3)\n  return result\n</code></pre>\n\n<p>This is my least favorite method though. I suppose I'm tainted by exposure to Haskell, but the idea of mixed-type lists has always felt uncomfortable to me. In this particular example the list is -not- mixed type, but it conceivably could be.</p>\n\n<p>A list used in this way really doesn't gain anything with respect to the tuple as far as I can tell. The only real difference between lists and tuples in Python is that lists are <a href=\"http://docs.python.org/library/stdtypes.html#typesseq-mutable\" rel=\"noreferrer\">mutable</a>, whereas tuples are not.</p>\n\n<p>I personally tend to carry over the conventions from functional programming: use lists for any number of elements of the same type, and tuples for a fixed number of elements of predetermined types.</p>\n\n<h1>Question</h1>\n\n<p>After the lengthy preamble, comes the inevitable question. Which method (do you think) is best?</p>\n\n<p>I've typically found myself going the dictionary route because it involves less set-up work. From a types perspective however, you might be better off going the class route, since that may help you avoid confusing what a dictionary represents.</p>\n\n<p>On the other hand, there are some in the Python community that feel <a href=\"http://www.canonical.org/~kragen/isinstance/\" rel=\"noreferrer\">implied interfaces should be preferred to explicit interfaces</a>, at which point the type of the object really isn't relevant, since you're basically relying on the convention that the same attribute will always have the same meaning.</p>\n\n<p>So, how do -you- return multiple values in Python?</p>\n",
        "answer": "<p><a href=\"http://docs.python.org/library/collections.html#namedtuple-factory-function-for-tuples-with-named-fields\" rel=\"noreferrer\">Named tuples</a> were added in 2.6 for this purpose.  Also see <a href=\"http://docs.python.org/library/os.html#os.stat\" rel=\"noreferrer\">os.stat</a> for a similar builtin example.</p>\n\n<pre><code>&gt;&gt;&gt; import collections\n&gt;&gt;&gt; Point = collections.namedtuple('Point', ['x', 'y'])\n&gt;&gt;&gt; p = Point(1, y=2)\n&gt;&gt;&gt; p.x, p.y\n1 2\n&gt;&gt;&gt; p[0], p[1]\n1 2\n</code></pre>\n\n<p>In recent versions of Python 3 (3.6+, I think), the new <code>typing</code> library got the <a href=\"https://docs.python.org/3/library/typing.html#typing.NamedTuple\" rel=\"noreferrer\"><code>NamedTuple</code></a> class to make named tuples easier to create and more powerful. Inheriting from <code>typing.NamedTuple</code> lets you use docstrings, default values, and type annotations.</p>\n\n<p>Example (From the docs):</p>\n\n<pre><code>class Employee(NamedTuple):  # inherit from collections.NamedTuple\n    name: str\n    id: int = 3  # default value\n\nemployee = Employee('Guido')\nassert employee.id == 3\n</code></pre>\n"
    },
    "482": {
        "question_id": "735975",
        "answer_id": "735978",
        "question": "<p>Is it possible to have static methods in Python so I can call them without initializing a class, like:</p>\n\n<pre><code>ClassName.StaticMethod ( )\n</code></pre>\n",
        "answer": "<p>Yep, using the <a href=\"https://docs.python.org/2/library/functions.html#staticmethod\" rel=\"noreferrer\" title=\"staticmethod\">staticmethod</a> decorator</p>\n\n<pre><code>class MyClass(object):\n    @staticmethod\n    def the_static_method(x):\n        print x\n\nMyClass.the_static_method(2) # outputs 2\n</code></pre>\n\n<p>Note that some code might use the old method of defining a static method, using <code>staticmethod</code> as a function rather than a decorator. This should only be used if you have to support ancient versions of Python (2.2 and 2.3)</p>\n\n<pre><code>class MyClass(object):\n    def the_static_method(x):\n        print x\n    the_static_method = staticmethod(the_static_method)\n\nMyClass.the_static_method(2) # outputs 2\n</code></pre>\n\n<p>This is entirely identical to the first example (using <code>@staticmethod</code>), just not using the nice decorator syntax</p>\n\n<p>Finally, use <a href=\"https://docs.python.org/2/library/functions.html#staticmethod\" rel=\"noreferrer\" title=\"staticmethod\"><code>staticmethod()</code></a> sparingly! There are very few situations where static-methods are necessary in Python, and I've seen them used many times where a separate \"top-level\" function would have been clearer.</p>\n\n<hr>\n\n<p><a href=\"https://docs.python.org/2/library/functions.html#staticmethod\" rel=\"noreferrer\" title=\"staticmethod\">The following is verbatim from the documentation:</a>:</p>\n\n<blockquote>\n  <p>A static method does not receive an implicit first argument. To declare a static method, use this idiom:</p>\n\n<pre><code>class C:\n    @staticmethod\n    def f(arg1, arg2, ...): ...\n</code></pre>\n  \n  <p>The @staticmethod form is a function <a href=\"https://docs.python.org/2/glossary.html#term-decorator\" rel=\"noreferrer\" title=\"term-decorator\"><em>decorator</em></a> \u2013 see the description of function definitions in <a href=\"https://docs.python.org/2/reference/compound_stmts.html#function\" rel=\"noreferrer\" title=\"Function definitions\"><em>Function definitions</em></a> for details.</p>\n  \n  <p>It can be called either on the class (such as <code>C.f()</code>) or on an instance (such as <code>C().f()</code>). The instance is ignored except for its class.</p>\n  \n  <p>Static methods in Python are similar to those found in Java or C++. For a more advanced concept, see <a href=\"https://docs.python.org/2/library/functions.html#classmethod\" rel=\"noreferrer\" title=\"classmethod\"><code>classmethod()</code></a>.</p>\n  \n  <p>For more information on static methods, consult the documentation on the standard type hierarchy in <a href=\"https://docs.python.org/2/reference/datamodel.html#types\" rel=\"noreferrer\" title=\"types\"><em>The standard type hierarchy</em></a>.</p>\n  \n  <p>New in version 2.2.</p>\n  \n  <p>Changed in version 2.4: Function decorator syntax added.</p>\n</blockquote>\n"
    },
    "483": {
        "question_id": "94935",
        "answer_id": "94962",
        "question": "<p>Apparently xrange is faster but I have no idea why it's faster (and no proof besides the anecdotal so far that it is faster) or what besides that is different about</p>\n\n<pre><code>for i in range(0, 20):\nfor i in xrange(0, 20):\n</code></pre>\n",
        "answer": "<p>range creates a list, so if you do <code>range(1, 10000000)</code> it creates a list in memory with <code>9999999</code> elements.</p>\n\n<p><code>xrange</code> is a sequence object that  evaluates lazily.  </p>\n\n<p>It should be added from @Thiago's hint, that in python3, range does the equivalent of python's xrange  </p>\n"
    },
    "484": {
        "question_id": "327311",
        "answer_id": "9022835",
        "question": "<p>Does anyone know how the built in dictionary type for python is implemented?  My understanding is that it is some sort of hash table, but I haven't been able to find any sort of definitive answer.</p>\n",
        "answer": "<p>Here is everything about Python dicts that I was able to put together (probably more than anyone would like to know; but the answer is comprehensive). </p>\n\n<ul>\n<li>Python dictionaries are implemented as <strong>hash tables</strong>.</li>\n<li>Hash tables must allow for <strong>hash collisions</strong> i.e. even if two distinct keys have the same hash value, the table's implementation must have a strategy to insert and retrieve the key and value pairs unambiguously.</li>\n<li>Python <code>dict</code> uses <strong>open addressing</strong> to resolve hash collisions (explained below) (see <a href=\"http://hg.python.org/cpython/file/52f68c95e025/Objects/dictobject.c#l296\" rel=\"noreferrer\">dictobject.c:296-297</a>).</li>\n<li>Python hash table is just a contiguous block of memory (sort of like an array, so you can do an <code>O(1)</code> lookup by index). </li>\n<li><strong>Each slot in the table can store one and only one entry.</strong> This is important.</li>\n<li>Each <strong>entry</strong> in the table actually a combination of the three values: <strong>&lt; hash, key, value ></strong>. This is implemented as a C struct (see <a href=\"http://hg.python.org/cpython/file/52f68c95e025/Include/dictobject.h#l51\" rel=\"noreferrer\">dictobject.h:51-56</a>).</li>\n<li><p>The figure below is a logical representation of a Python hash table. In the figure below, <code>0, 1, ..., i, ...</code> on the left are indices of the <strong>slots</strong> in the hash table (they are just for illustrative purposes and are not stored along with the table obviously!).</p>\n\n<pre><code># Logical model of Python Hash table\n-+-----------------+\n0| &lt;hash|key|value&gt;|\n-+-----------------+\n1|      ...        |\n-+-----------------+\n.|      ...        |\n-+-----------------+\ni|      ...        |\n-+-----------------+\n.|      ...        |\n-+-----------------+\nn|      ...        |\n-+-----------------+\n</code></pre></li>\n<li><p>When a new dict is initialized it starts with 8 <em>slots</em>. (see <a href=\"http://hg.python.org/cpython/file/52f68c95e025/Include/dictobject.h#l49\" rel=\"noreferrer\">dictobject.h:49</a>)</p></li>\n<li>When adding entries to the table, we start with some slot, <code>i</code>, that is based on the hash of the key. CPython initially uses <code>i = hash(key) &amp; mask</code> (where <code>mask = PyDictMINSIZE - 1</code>, but that's not really important). Just note that the initial slot, <code>i</code>, that is checked depends on the <em>hash</em> of the key.</li>\n<li>If that slot is empty, the entry is added to the slot (by entry, I mean, <code>&lt;hash|key|value&gt;</code>). But what if that slot is occupied!? Most likely because another entry has the same hash (hash collision!)</li>\n<li>If the slot is occupied, CPython (and even PyPy) compares <strong>the hash AND the key</strong> (by compare I mean <code>==</code> comparison not the <code>is</code> comparison)  of the entry in the slot against the hash and key of the current entry to be inserted (<a href=\"http://hg.python.org/cpython/file/52f68c95e025/Objects/dictobject.c#l337\" rel=\"noreferrer\">dictobject.c:337,344-345</a>) respectively. If <em>both</em> match, then it thinks the entry already exists, gives up and moves on to the next entry to be inserted. If either hash or the key don't match, it starts <strong>probing</strong>. </li>\n<li>Probing just means it searches the slots by slot to find an empty slot. Technically we could just go one by one, <code>i+1, i+2, ...</code> and use the first available one (that's linear probing). But for reasons explained beautifully in the comments (see <a href=\"http://hg.python.org/cpython/file/52f68c95e025/Objects/dictobject.c#l33\" rel=\"noreferrer\">dictobject.c:33-126</a>), CPython uses <strong>random probing</strong>. In random probing, the next slot is picked in a pseudo random order. The entry is added to the first empty slot. For this discussion, the actual algorithm used to pick the next slot is not really important (see <a href=\"http://hg.python.org/cpython/file/52f68c95e025/Objects/dictobject.c#l33\" rel=\"noreferrer\">dictobject.c:33-126</a> for the algorithm for probing). What is important is that the slots are probed until first empty slot is found.</li>\n<li>The same thing happens for lookups, just starts with the initial slot i (where i depends on the hash of the key). If the hash and the key both don't match the entry in the slot, it starts probing, until it finds a slot with a match. If all slots are exhausted, it reports a fail.</li>\n<li>BTW, the <code>dict</code> will be resized if it is two-thirds full. This avoids slowing down lookups. (see <a href=\"http://hg.python.org/cpython/file/52f68c95e025/Include/dictobject.h#l64\" rel=\"noreferrer\">dictobject.h:64-65</a>)</li>\n</ul>\n\n<p>NOTE: I did the research on Python Dict implementation in response to my own <a href=\"https://stackoverflow.com/questions/9010222/\">question</a> about how multiple entries in a dict can have same hash values. I posted a slightly edited version of the response here because all the research is very relevant for this question as well.</p>\n"
    },
    "485": {
        "question_id": "3940128",
        "answer_id": "3940144",
        "question": "<p>How can I do the following in Python?</p>\n\n<pre><code>array = [0, 10, 20, 40]\nfor (i = array.length() - 1; i &gt;= 0; i--)\n</code></pre>\n\n<p>I need to have the elements of an array, but from the end to the beginning.</p>\n",
        "answer": "<p>You can make use of the <a href=\"https://www.python.org/dev/peps/pep-0322/\" rel=\"noreferrer\"><code>reversed</code></a> function for this as:</p>\n\n<pre><code>&gt;&gt;&gt; array=[0,10,20,40]\n&gt;&gt;&gt; for i in reversed(array):\n...     print(i)\n</code></pre>\n\n<p>Note that <code>reversed(...)</code> does not return a list. You can get a reversed list using <code>list(reversed(array))</code>.</p>\n"
    },
    "486": {
        "question_id": "8000022",
        "answer_id": "8000091",
        "question": "<pre><code>mydict = {\"key1\":\"value1\", \"key2\":\"value2\"}\n</code></pre>\n\n<p>The regular way to lookup a dictionary value in a Django template is <code>{{ mydict.key1 }}</code>,  <code>{{ mydict.key2 }}</code>. What if the key is a loop variable? ie:</p>\n\n<pre><code>{% for item in list %} # where item has an attribute NAME\n  {{ mydict.item.NAME }} # I want to look up mydict[item.NAME]\n{% endfor %}\n</code></pre>\n\n<p><code>mydict.item.NAME</code> fails. How to fix this?</p>\n",
        "answer": "<p>Write a custom template filter:</p>\n\n<pre><code>from django.template.defaulttags import register\n...\n@register.filter\ndef get_item(dictionary, key):\n    return dictionary.get(key)\n</code></pre>\n\n<p>(I use <code>.get</code> so that if the key is absent, it returns none. If you do <code>dictionary[key]</code> it will raise a <code>KeyError</code> then.)</p>\n\n<p>usage:</p>\n\n<pre><code>{{ mydict|get_item:item.NAME }}\n</code></pre>\n"
    },
    "487": {
        "question_id": "4098131",
        "answer_id": "4098938",
        "question": "<p>I'm having issues with redrawing the figure here. I allow the user to specify the units in the time scale (x-axis) and then I recalculate and call this function <code>plots()</code>. I want the plot to simply update, not append another plot to the figure.</p>\n\n<pre><code>def plots():\n    global vlgaBuffSorted\n    cntr()\n\n    result = collections.defaultdict(list)\n    for d in vlgaBuffSorted:\n        result[d['event']].append(d)\n\n    result_list = result.values()\n\n    f = Figure()\n    graph1 = f.add_subplot(211)\n    graph2 = f.add_subplot(212,sharex=graph1)\n\n    for item in result_list:\n        tL = []\n        vgsL = []\n        vdsL = []\n        isubL = []\n        for dict in item:\n            tL.append(dict['time'])\n            vgsL.append(dict['vgs'])\n            vdsL.append(dict['vds'])\n            isubL.append(dict['isub'])\n        graph1.plot(tL,vdsL,'bo',label='a')\n        graph1.plot(tL,vgsL,'rp',label='b')\n        graph2.plot(tL,isubL,'b-',label='c')\n\n    plotCanvas = FigureCanvasTkAgg(f, pltFrame)\n    toolbar = NavigationToolbar2TkAgg(plotCanvas, pltFrame)\n    toolbar.pack(side=BOTTOM)\n    plotCanvas.get_tk_widget().pack(side=TOP)\n</code></pre>\n",
        "answer": "<p>You essentially have two options:</p>\n\n<ol>\n<li><p>Do exactly what you're currently doing, but call <code>graph1.clear()</code> and <code>graph2.clear()</code> before replotting the data.  This is the slowest, but most simplest and most robust option.</p></li>\n<li><p>Instead of replotting, you can just update the data of the plot objects.  You'll need to make some changes in your code, but this should be much, much faster than replotting things every time.  However, the shape of the data that you're plotting can't change, and if the range of your data is changing, you'll need to manually reset the x and y axis limits.</p></li>\n</ol>\n\n<p>To give an example of the second option:</p>\n\n<pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 6*np.pi, 100)\ny = np.sin(x)\n\n# You probably won't need this if you're embedding things in a tkinter plot...\nplt.ion()\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nline1, = ax.plot(x, y, 'r-') # Returns a tuple of line objects, thus the comma\n\nfor phase in np.linspace(0, 10*np.pi, 500):\n    line1.set_ydata(np.sin(x + phase))\n    fig.canvas.draw()\n    fig.canvas.flush_events()\n</code></pre>\n"
    },
    "488": {
        "question_id": "12265451",
        "answer_id": "12265860",
        "question": "<p>I'm not asking for personal \"religious\" opinions about this philosophy, rather something a bit more technical.</p>\n\n<p>I understand this phrase is one of several litmus tests to see if your code is \"pythonic\".  But to me, pythonic means clean, simple and intuitive, not loaded with exception handlers for bad coding.</p>\n\n<p>So, practical example.  I define a class:</p>\n\n<pre><code>class foo(object):\n    bar = None\n\n    def __init__(self):\n        # a million lines of code\n        self.bar = \"Spike is my favorite vampire.\"\n        # a million more lines of code\n</code></pre>\n\n<p>Now, coming from a procedural background, in another function I wanna do this:</p>\n\n<pre><code>if foo.bar:\n    # do stuff\n</code></pre>\n\n<p>I'll get an attribute exception if I was impatient and <em>did not</em> do the initial foo = None.  So, \"ask forgiveness not permission\" suggests I should do this instead?</p>\n\n<pre><code>try:\n    if foo.bar:\n        # do stuff\nexcept:\n    # this runs because my other code was sloppy?\n</code></pre>\n\n<p>Why would it be better for me to add additional logic in a try block just so I can leave my class definition <em>more ambiguous</em>?  Why not define everything initially, therfore explicitly <em>grant permission</em>?</p>\n\n<p>(Don't beat me up about using try/except blocks... I use them everywhere.  I just don't think it's right to use them to catch my own errors because I wasn't a thorough programmer.)</p>\n\n<p>Or... do I completely misunderstand the \"Ask Forgivess\" mantra?</p>\n",
        "answer": "<p>The classical \"ask forgiveness not permission\" example is accessing values from a <code>dict</code> that may not exist.  E.g.:</p>\n\n<pre><code>names = { 'joe': 'Joe Nathan', 'jo': 'Jo Mama', 'joy': 'Joy Full' }\nname = 'hikaru'\n\ntry:\n    print names[name]\nexcept KeyError:\n    print \"Sorry, don't know this '{}' person\".format(name)\n</code></pre>\n\n<p>Here the exception that might occur (<code>KeyError</code>) is stated, so that you're not asking forgiveness for every error that might occur, but only the one that would naturally occur.\nFor comparison, the \"ask permission first\" approach might look like:</p>\n\n<pre><code>if name in names:\n    print names[name]\nelse:\n    print \"Sorry, don't know this '{}' person\".format(name)\n</code></pre>\n\n<p>or</p>\n\n<pre><code>real_name = names.get(name, None)\nif real_name:\n    print real_name\nelse:\n    print \"Sorry, don't know this '{}' person\".format(name)\n</code></pre>\n\n<p>Such examples of \"ask forgiveness\" are often too simple. IMO it's not crystal clear that <code>try</code>/<code>except</code> blocks are inherently better than <code>if</code>/<code>else</code>. The real value is much clearer when performing operations that might fail in a variety of ways--such as parsing; using <code>eval()</code>; accessing operating system, middleware, database, or network resources; or performing complex mathematics. When there are multiple potential failure modes, being prepared to get forgiveness is hugely valuable.</p>\n\n<p>Other notes about your code examples:</p>\n\n<p>You do not need to ladle <code>try</code>/<code>except</code> blocks around every variable usage. That would be horrible. And you don't need to set <code>self.bar</code> in your <code>__init__()</code> since it's set in your <code>class</code> definition above. It is usual to define it either in the class (if it's data likely to be shared among all instances of the class) or in the <code>__init__()</code> (if it's instance data, specific to each instance). </p>\n\n<p>A value of <code>None</code> is not undefined, or an error, by the way. It's a specific and legitimate value, meaning none, nil, null, or nothing. Many languages have such values so programmers don't \"overload\" <code>0</code>, <code>-1</code>, <code>''</code> (empty string) or similar useful values.  </p>\n"
    },
    "489": {
        "question_id": "31512422",
        "answer_id": "31512491",
        "question": "<p><code>pip install -r requirements.txt</code> fails with the exception below <code>OSError: [Errno 13] Permission denied: '/usr/local/lib/...</code>. What's wrong and how do I fix this? (I am trying to setup <a href=\"https://www.djangoproject.com\" rel=\"nofollow noreferrer\">Django</a>)</p>\n\n<pre><code>Installing collected packages: amqp, anyjson, arrow, beautifulsoup4, billiard, boto, braintree, celery, cffi, cryptography, Django, django-bower, django-braces, django-celery, django-crispy-forms, django-debug-toolbar, django-disqus, django-embed-video, django-filter, django-merchant, django-pagination, django-payments, django-storages, django-vote, django-wysiwyg-redactor, easy-thumbnails, enum34, gnureadline, idna, ipaddress, ipython, kombu, mock, names, ndg-httpsclient, Pillow, pyasn1, pycparser, pycrypto, PyJWT, pyOpenSSL, python-dateutil, pytz, requests, six, sqlparse, stripe, suds-jurko\nCleaning up...\nException:\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/dist-packages/pip/basecommand.py\", line 122, in main\n    status = self.run(options, args)\n  File \"/usr/lib/python2.7/dist-packages/pip/commands/install.py\", line 283, in run\n    requirement_set.install(install_options, global_options, root=options.root_path)\n  File \"/usr/lib/python2.7/dist-packages/pip/req.py\", line 1436, in install\n    requirement.install(install_options, global_options, *args, **kwargs)\n  File \"/usr/lib/python2.7/dist-packages/pip/req.py\", line 672, in install\n    self.move_wheel_files(self.source_dir, root=root)\n  File \"/usr/lib/python2.7/dist-packages/pip/req.py\", line 902, in move_wheel_files\n    pycompile=self.pycompile,\n  File \"/usr/lib/python2.7/dist-packages/pip/wheel.py\", line 206, in move_wheel_files\n    clobber(source, lib_dir, True)\n  File \"/usr/lib/python2.7/dist-packages/pip/wheel.py\", line 193, in clobber\n    os.makedirs(destsubdir)\n  File \"/usr/lib/python2.7/os.py\", line 157, in makedirs\n    mkdir(name, mode)\nOSError: [Errno 13] Permission denied: '/usr/local/lib/python2.7/dist-packages/amqp-1.4.6.dist-info'\n</code></pre>\n",
        "answer": "<h1>Option a) Create a virtualenv, activate it and install:</h1>\n\n<pre><code>virtualenv .venv\nsource .venv/bin/activate\npip install -r requirements.txt\n</code></pre>\n\n<h1>Option b) Install in your homedir:</h1>\n\n<pre><code>pip install --user -r requirements.txt\n</code></pre>\n\n<p>My recommendation use safe (a) option, so that requirements of this project do not interfere with other projects requirements.</p>\n"
    },
    "490": {
        "question_id": "1933451",
        "answer_id": "1933481",
        "question": "<p>I've seen this multiple times in multiple places, but never have found a satisfying explanation as to why this should be the case. </p>\n\n<p>So, hopefully, one will be presented here. Why should we (at least, generally) not use <code>exec()</code> and <code>eval()</code>?</p>\n\n<p>EDIT: I see that people are assuming that this question pertains to web servers \u2013\u00a0it doesn't. I can see why an unsanitized string being passed to <code>exec</code> could be bad. Is it bad in non-web-applications?</p>\n",
        "answer": "<p>There are often clearer, more direct ways to get the same effect. If you build a complex string and pass it to exec, the code is difficult to follow, and difficult to test. </p>\n\n<p>Example: I wrote code that read in string keys and values and set corresponding fields in an object. It looked like this: </p>\n\n<pre><code>for key, val in values:\n    fieldName = valueToFieldName[key]\n    fieldType = fieldNameToType[fieldName]\n    if fieldType is int:\n        s = 'object.%s = int(%s)' % (fieldName, fieldType) \n    #Many clauses like this...\n\nexec(s)\n</code></pre>\n\n<p>That code isn't too terrible for simple cases, but as new types cropped up it got more and more complex. When there were bugs they always triggered on the call to exec, so stack traces didn't help me find them. Eventually I switched to a slightly longer, less clever version that set each field explicitly. </p>\n\n<p>The first rule of code clarity is that each line of your code should be easy to understand by looking only at the lines near it. This is why goto and global variables are discouraged. exec and eval make it easy to break this rule badly.</p>\n"
    },
    "491": {
        "question_id": "9371238",
        "answer_id": "9371717",
        "question": "<p>I wanted to compare reading lines of string input from stdin using Python and C++ and was shocked to see my C++ code run an order of magnitude slower than the equivalent Python code. Since my C++ is rusty and I'm not yet an expert Pythonista, please tell me if I'm doing something wrong or if I'm misunderstanding something.</p>\n\n<hr>\n\n<p>(TLDR answer: include the statement: <code>cin.sync_with_stdio(false)</code> or just use <code>fgets</code> instead.</p>\n\n<p>TLDR results: scroll all the way down to the bottom of my question and look at the table.)</p>\n\n<hr>\n\n<p><strong>C++ code:</strong></p>\n\n<pre><code>#include &lt;iostream&gt;\n#include &lt;time.h&gt;\n\nusing namespace std;\n\nint main() {\n    string input_line;\n    long line_count = 0;\n    time_t start = time(NULL);\n    int sec;\n    int lps;\n\n    while (cin) {\n        getline(cin, input_line);\n        if (!cin.eof())\n            line_count++;\n    };\n\n    sec = (int) time(NULL) - start;\n    cerr &lt;&lt; \"Read \" &lt;&lt; line_count &lt;&lt; \" lines in \" &lt;&lt; sec &lt;&lt; \" seconds.\";\n    if (sec &gt; 0) {\n        lps = line_count / sec;\n        cerr &lt;&lt; \" LPS: \" &lt;&lt; lps &lt;&lt; endl;\n    } else\n        cerr &lt;&lt; endl;\n    return 0;\n}\n\n// Compiled with:\n// g++ -O3 -o readline_test_cpp foo.cpp\n</code></pre>\n\n<p><strong>Python Equivalent:</strong></p>\n\n<pre><code>#!/usr/bin/env python\nimport time\nimport sys\n\ncount = 0\nstart = time.time()\n\nfor line in  sys.stdin:\n    count += 1\n\ndelta_sec = int(time.time() - start_time)\nif delta_sec &gt;= 0:\n    lines_per_sec = int(round(count/delta_sec))\n    print(\"Read {0} lines in {1} seconds. LPS: {2}\".format(count, delta_sec,\n       lines_per_sec))\n</code></pre>\n\n<p><strong>Here are my results:</strong></p>\n\n<pre><code>$ cat test_lines | ./readline_test_cpp\nRead 5570000 lines in 9 seconds. LPS: 618889\n\n$cat test_lines | ./readline_test.py\nRead 5570000 lines in 1 seconds. LPS: 5570000\n</code></pre>\n\n<p><em>I should note that I tried this both under Mac&nbsp;OS&nbsp;X&nbsp;v10.6.8 (Snow&nbsp;Leopard) and Linux 2.6.32 (Red Hat Linux 6.2). The former is a MacBook Pro, and the latter is a very beefy server, not that this is too pertinent.</em></p>\n\n<pre><code>$ for i in {1..5}; do echo \"Test run $i at `date`\"; echo -n \"CPP:\"; cat test_lines | ./readline_test_cpp ; echo -n \"Python:\"; cat test_lines | ./readline_test.py ; done\nTest run 1 at Mon Feb 20 21:29:28 EST 2012\nCPP:   Read 5570001 lines in 9 seconds. LPS: 618889\nPython:Read 5570000 lines in 1 seconds. LPS: 5570000\nTest run 2 at Mon Feb 20 21:29:39 EST 2012\nCPP:   Read 5570001 lines in 9 seconds. LPS: 618889\nPython:Read 5570000 lines in 1 seconds. LPS: 5570000\nTest run 3 at Mon Feb 20 21:29:50 EST 2012\nCPP:   Read 5570001 lines in 9 seconds. LPS: 618889\nPython:Read 5570000 lines in 1 seconds. LPS: 5570000\nTest run 4 at Mon Feb 20 21:30:01 EST 2012\nCPP:   Read 5570001 lines in 9 seconds. LPS: 618889\nPython:Read 5570000 lines in 1 seconds. LPS: 5570000\nTest run 5 at Mon Feb 20 21:30:11 EST 2012\nCPP:   Read 5570001 lines in 10 seconds. LPS: 557000\nPython:Read 5570000 lines in  1 seconds. LPS: 5570000\n</code></pre>\n\n<hr>\n\n<p>Tiny benchmark addendum and recap</p>\n\n<p>For completeness, I thought I'd update the read speed for the same file on the same box with the original (synced) C++ code. Again, this is for a 100M line file on a fast disk. Here's the comparison, with several solutions/approaches:</p>\n\n<pre><code>Implementation      Lines per second\npython (default)           3,571,428\ncin (default/naive)          819,672\ncin (no sync)             12,500,000\nfgets                     14,285,714\nwc (not fair comparison)  54,644,808\n</code></pre>\n",
        "answer": "<p>By default, <code>cin</code> is synchronized with stdio, which causes it to avoid any input buffering.  If you add this to the top of your main, you should see much better performance:</p>\n\n<pre><code>std::ios_base::sync_with_stdio(false);\n</code></pre>\n\n<p>Normally, when an input stream is buffered, instead of reading one character at a time, the stream will be read in larger chunks.  This reduces the number of system calls, which are typically relatively expensive.  However, since the <code>FILE*</code> based <code>stdio</code> and <code>iostreams</code> often have separate implementations and therefore separate buffers, this could lead to a problem if both were used together.  For example:</p>\n\n<pre><code>int myvalue1;\ncin &gt;&gt; myvalue1;\nint myvalue2;\nscanf(\"%d\",&amp;myvalue2);\n</code></pre>\n\n<p>If more input was read by <code>cin</code> than it actually needed, then the second integer value wouldn't be available for the <code>scanf</code> function, which has its own independent buffer.  This would lead to unexpected results.</p>\n\n<p>To avoid this, by default, streams are synchronized with <code>stdio</code>.  One common way to achieve this is to have <code>cin</code> read each character one at a time as needed using <code>stdio</code> functions.  Unfortunately, this introduces a lot of overhead.  For small amounts of input, this isn't a big problem, but when you are reading millions of lines, the performance penalty is significant.</p>\n\n<p>Fortunately, the library designers decided that you should also be able to disable this feature to get improved performance if you knew what you were doing, so they provided the <a href=\"http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio\" rel=\"noreferrer\"><code>sync_with_stdio</code></a> method.</p>\n"
    },
    "492": {
        "question_id": "5137497",
        "answer_id": "5137509",
        "question": "<p>In Python, what commands can I use to find:</p>\n\n<ol>\n<li>the current directory (where I was in the terminal when I ran the Python script), and</li>\n<li>where the file I am executing is?</li>\n</ol>\n",
        "answer": "<p>To get the full path to the directory a Python file is contained in, write this in that file:</p>\n\n<pre><code>import os \ndir_path = os.path.dirname(os.path.realpath(__file__))\n</code></pre>\n\n<p>(Note that the incantation above won't work if you've already used <code>os.chdir()</code> to change your current working directory, since the value of the <code>__file__</code> constant is relative to the current working directory and is not changed by an <code>os.chdir()</code> call.)</p>\n\n<hr>\n\n<p>To get the current working directory use </p>\n\n<pre><code>import os\ncwd = os.getcwd()\n</code></pre>\n\n<hr>\n\n<p>Documentation references for the modules, constants and functions used above:</p>\n\n<ul>\n<li>The <a href=\"https://docs.python.org/library/os.html\"><code>os</code></a> and <a href=\"https://docs.python.org/library/os.path.html#module-os.path\"><code>os.path</code></a> modules.</li>\n<li>The <a href=\"https://docs.python.org/reference/datamodel.html\"><code>__file__</code></a> constant</li>\n<li><a href=\"https://docs.python.org/library/os.path.html#os.path.realpath\"><code>os.path.realpath(path)</code></a> (returns <em>\"the canonical path of the specified filename, eliminating any symbolic links encountered in the path\"</em>)</li>\n<li><a href=\"https://docs.python.org/library/os.path.html#os.path.dirname\"><code>os.path.dirname(path)</code></a> (returns <em>\"the directory name of pathname <code>path</code>\"</em>)</li>\n<li><a href=\"https://docs.python.org/library/os.html#os.getcwd\"><code>os.getcwd()</code></a> (returns <em>\"a string representing the current working directory\"</em>)</li>\n<li><a href=\"https://docs.python.org/library/os.html#os.chdir\"><code>os.chdir(path)</code></a> (<em>\"change the current working directory to <code>path</code>\"</em>)</li>\n</ul>\n"
    },
    "493": {
        "question_id": "663171",
        "answer_id": "663175",
        "question": "<p>Is there a way to substring a string in Python, to get a new string from the 3rd character to the end of the string?</p>\n\n<p>Maybe like <code>myString[2:end]</code>?</p>\n\n<p>If leaving the second part means 'till the end', if you leave the first part, does it start from the start?</p>\n",
        "answer": "<pre><code>&gt;&gt;&gt; x = \"Hello World!\"\n&gt;&gt;&gt; x[2:]\n'llo World!'\n&gt;&gt;&gt; x[:2]\n'He'\n&gt;&gt;&gt; x[:-2]\n'Hello Worl'\n&gt;&gt;&gt; x[-2:]\n'd!'\n&gt;&gt;&gt; x[2:-2]\n'llo Worl'\n</code></pre>\n\n<p>Python calls this concept \"slicing\" and it works on more than just strings. Take a look <a href=\"https://stackoverflow.com/questions/509211/good-primer-for-python-slice-notation\">here</a> for a comprehensive introduction.</p>\n"
    },
    "494": {
        "question_id": "843277",
        "answer_id": "843293",
        "question": "<p>I want to check if a variable exists. Now I'm doing something like this:</p>\n\n<pre><code>try:\n   myVar\nexcept NameError:\n   # Do something.\n</code></pre>\n\n<p>Are there other ways without exceptions?</p>\n",
        "answer": "<p>To check the existence of a local variable:</p>\n\n<pre><code>if 'myVar' in locals():\n  # myVar exists.\n</code></pre>\n\n<p>To check the existence of a global variable:</p>\n\n<pre><code>if 'myVar' in globals():\n  # myVar exists.\n</code></pre>\n\n<p>To check if an object has an attribute:</p>\n\n<pre><code>if hasattr(obj, 'attr_name'):\n  # obj.attr_name exists.\n</code></pre>\n"
    },
    "495": {
        "question_id": "10660435",
        "answer_id": "10660443",
        "question": "<p>I have a very long query. I would like to split it in several lines in Python. A way to do it in JavaScript would be using several sentences and joining them with a <code>+</code> operator (I know, maybe it's not the most efficient way to do it, but I'm not really concerned about performance in this stage, just code readability). Example:</p>\n\n<pre><code>var long_string = 'some text not important. just garbage to' +\n                  'illustrate my example';\n</code></pre>\n\n<p>I tried doing something similar in Python, but it didn't work, so I used <code>\\</code> to split the long string. However, I'm not sure if this is the only/best/pythonicest way of doing it. It looks awkward. \nActual code:</p>\n\n<pre><code>query = 'SELECT action.descr as \"action\", '\\\n    'role.id as role_id,'\\\n    'role.descr as role'\\\n    'FROM '\\\n    'public.role_action_def,'\\\n    'public.role,'\\\n    'public.record_def, '\\\n    'public.action'\\\n    'WHERE role.id = role_action_def.role_id AND'\\\n    'record_def.id = role_action_def.def_id AND'\\\n    'action.id = role_action_def.action_id AND'\\\n    'role_action_def.account_id = ' + account_id + ' AND'\\\n    'record_def.account_id=' + account_id + ' AND'\\\n    'def_id=' + def_id\n</code></pre>\n",
        "answer": "<p>Are you talking about multi-line strings? Easy, use triple quotes to start and end them.</p>\n\n<pre><code>s = \"\"\" this is a very\n        long string if I had the\n        energy to type more and more ...\"\"\"\n</code></pre>\n\n<p>You can use single quotes too (3 of them of course at start and end) and treat the resulting string <code>s</code> just like any other string.</p>\n\n<p><strong>NOTE</strong>: Just as with any string, anything between the starting and ending quotes becomes part of the string, so this example has a leading blank (as pointed out by @root45). This string will also contain both blanks and newlines.</p>\n\n<p>I.e.,:</p>\n\n<pre><code>' this is a very\\n        long string if I had the\\n        energy to type more and more ...'\n</code></pre>\n\n<p>Finally, one can also construct long lines in Python like this:</p>\n\n<pre><code> s = (\"this is a very\"\n      \"long string too\"\n      \"for sure ...\"\n     )\n</code></pre>\n\n<p>which will <strong>not</strong> include any extra blanks or newlines (this is a deliberate example showing what the effect of skipping blanks will result in):</p>\n\n<pre><code>'this is a verylong string toofor sure ...'\n</code></pre>\n\n<p>No commas required, simply place the strings to be joined together into a pair of parenthesis and be sure to account for any needed blanks and newlines.</p>\n"
    },
    "496": {
        "question_id": "22313407",
        "answer_id": "22322645",
        "question": "<p>I get the following error when attempting to install <code>psycopg2</code> via pip on Mavericks 10.9:</p>\n\n<pre><code>clang: error: unknown argument: '-mno-fused-madd' [-Wunused-command-line-argument-hard-error-in-future]\n</code></pre>\n\n<p>Not sure how to proceed and have searched here and elsewhere for this particular error.  Any help is much appreciated!</p>\n\n<p>Here is the complete output from pip:</p>\n\n<pre><code>$ pip install psycopg2\nDownloading/unpacking psycopg2\n  Downloading psycopg2-2.5.2.tar.gz (685kB): 685kB downloaded\n  Running setup.py (path:/private/var/folders/0z/ljjwsjmn4v9_zwm81vhxj69m0000gn/T/pip_build_tino/psycopg2/setup.py) egg_info for package psycopg2\n\nInstalling collected packages: psycopg2\n  Running setup.py install for psycopg2\n    building 'psycopg2._psycopg' extension\n    cc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -mno-fused-madd -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=\"2.5.2 (dt dec pq3 ext)\" -DPG_VERSION_HEX=0x090303 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -I. -I/usr/local/Cellar/postgresql/9.3.3/include -I/usr/local/Cellar/postgresql/9.3.3/include/server -c psycopg/psycopgmodule.c -o build/temp.macosx-10.9-intel-2.7/psycopg/psycopgmodule.o\n    clang: error: unknown argument: '-mno-fused-madd' [-Wunused-command-line-argument-hard-error-in-future]\n    clang: note: this will be a hard error (cannot be downgraded to a warning) in the future\n    error: command 'cc' failed with exit status 1\n    Complete output from command /usr/bin/python -c \"import setuptools, tokenize;__file__='/private/var/folders/0z/ljjwsjmn4v9_zwm81vhxj69m0000gn/T/pip_build_tino/psycopg2/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" install --record /var/folders/0z/ljjwsjmn4v9_zwm81vhxj69m0000gn/T/pip-bnWiwB-record/install-record.txt --single-version-externally-managed --compile:\n    running install\n\nrunning build\n\nrunning build_py\n\ncreating build\n\ncreating build/lib.macosx-10.9-intel-2.7\n\ncreating build/lib.macosx-10.9-intel-2.7/psycopg2\n\ncopying lib/__init__.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2\n\ncopying lib/_json.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2\n\ncopying lib/_range.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2\n\ncopying lib/errorcodes.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2\n\ncopying lib/extensions.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2\n\ncopying lib/extras.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2\n\ncopying lib/pool.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2\n\ncopying lib/psycopg1.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2\n\ncopying lib/tz.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2\n\ncreating build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/__init__.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/dbapi20.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/dbapi20_tpc.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_async.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_bug_gc.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_bugX000.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_cancel.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_connection.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_copy.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_cursor.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_dates.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_extras_dictcursor.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_green.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_lobject.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_module.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_notify.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_psycopg2_dbapi20.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_quote.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_transaction.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_types_basic.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_types_extras.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_with.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/testconfig.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/testutils.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\nrunning build_ext\n\nbuilding 'psycopg2._psycopg' extension\n\ncreating build/temp.macosx-10.9-intel-2.7\n\ncreating build/temp.macosx-10.9-intel-2.7/psycopg\n\ncc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -mno-fused-madd -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=\"2.5.2 (dt dec pq3 ext)\" -DPG_VERSION_HEX=0x090303 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -I. -I/usr/local/Cellar/postgresql/9.3.3/include -I/usr/local/Cellar/postgresql/9.3.3/include/server -c psycopg/psycopgmodule.c -o build/temp.macosx-10.9-intel-2.7/psycopg/psycopgmodule.o\n\nclang: error: unknown argument: '-mno-fused-madd' [-Wunused-command-line-argument-hard-error-in-future]\n\nclang: note: this will be a hard error (cannot be downgraded to a warning) in the future\n\nerror: command 'cc' failed with exit status 1\n\n----------------------------------------\nCleaning up...\nCommand /usr/bin/python -c \"import setuptools, tokenize;__file__='/private/var/folders/0z/ljjwsjmn4v9_zwm81vhxj69m0000gn/T/pip_build_tino/psycopg2/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" install --record /var/folders/0z/ljjwsjmn4v9_zwm81vhxj69m0000gn/T/pip-bnWiwB-record/install-record.txt --single-version-externally-managed --compile failed with error code 1 in /private/var/folders/0z/ljjwsjmn4v9_zwm81vhxj69m0000gn/T/pip_build_tino/psycopg2\n</code></pre>\n",
        "answer": "<p>You can tell clang to not raise this as an error by setting the following environment variables prior compilation:</p>\n\n<pre><code>export CFLAGS=-Qunused-arguments\nexport CPPFLAGS=-Qunused-arguments\n</code></pre>\n\n<p>Then <code>pip install psycopg2</code>should work.</p>\n\n<p>I had the same when trying to <code>pip install lxml</code>.</p>\n\n<p>Edit: if you are installing as superuser (which will likely be the case if you are trying to append to <code>/Library/Python/2.7/site-packages</code>, the native Apple factory-installed Python distribution which ships with OS X, rather than to some other Python distribution which you have subsequently installed yourself), then you will need to do, as described by @Thijs Kuipers in comments below:</p>\n\n<pre><code>sudo -E pip install psycopg2\n</code></pre>\n\n<p>or the equivalent, for whatever other package name you may be substituting in place of <code>psycopg2</code>.</p>\n\n<p>UPDATE [2014-05-16]: Apple has fixed this problem with updated system Pythons (2.7, 2.6, and 2.5) in <code>OS X 10.9.3</code> so the workaround is no longer necessary when using the latest Mavericks and <code>Xcode 5.1+</code>.  However, as of now, the workaround is still required for <code>OS X 10.8.x</code> (Mountain Lion, currently 10.8.5) if you are using <code>Xcode 5.1+</code> there.</p>\n"
    },
    "497": {
        "question_id": "1369526",
        "answer_id": "1369553",
        "question": "<p>What is the python keyword \"with\" used for?</p>\n\n<p>Example from: <a href=\"http://docs.python.org/tutorial/inputoutput.html\" rel=\"noreferrer\">http://docs.python.org/tutorial/inputoutput.html</a></p>\n\n<pre><code>&gt;&gt;&gt; with open('/tmp/workfile', 'r') as f:\n...     read_data = f.read()\n&gt;&gt;&gt; f.closed\nTrue\n</code></pre>\n",
        "answer": "<p>In python the <code>with</code> keyword is used when working with unmanaged resources (like file streams). It is similar to the <code>using</code> statement in VB.NET and C#. It allows you to ensure that a resource is \"cleaned up\" when the code that uses it finishes running, even if exceptions are thrown. It provides 'syntactic sugar' for <code>try/finally</code> blocks. </p>\n\n<p>From <a href=\"http://docs.python.org/whatsnew/2.6.html#pep-343-the-with-statement\" rel=\"noreferrer\">Python Docs</a>: </p>\n\n<blockquote>\n  <p>The <code>with</code> statement clarifies code that previously would use <code>try...finally</code> blocks to ensure that clean-up code is executed. In this section, I\u2019ll discuss the statement as it will commonly be used. In the next section, I\u2019ll examine the implementation details and show how to write objects for use with this statement.</p>\n  \n  <p>The <code>with</code> statement is a control-flow structure whose basic structure is:</p>\n\n<pre><code>with expression [as variable]:\n    with-block\n</code></pre>\n  \n  <p>The expression is evaluated, and it should result in an object that supports the context management protocol (that is, has <code>__enter__()</code> and <code>__exit__()</code> methods).</p>\n</blockquote>\n\n<p><em>Update</em> fixed VB callout per Scott Wisniewski's comment. I was indeed confusing <code>with</code> with <code>using</code>.</p>\n"
    },
    "498": {
        "question_id": "13703720",
        "answer_id": "13704307",
        "question": "<p>How do I convert a <code>numpy.datetime64</code> object to a <code>datetime.datetime</code> (or <code>Timestamp</code>)?</p>\n\n<p>In the following code, I create a datetime, timestamp and datetime64 objects.</p>\n\n<pre><code>import datetime\nimport numpy as np\nimport pandas as pd\ndt = datetime.datetime(2012, 5, 1)\n# A strange way to extract a Timestamp object, there's surely a better way?\nts = pd.DatetimeIndex([dt])[0]\ndt64 = np.datetime64(dt)\n\nIn [7]: dt\nOut[7]: datetime.datetime(2012, 5, 1, 0, 0)\n\nIn [8]: ts\nOut[8]: &lt;Timestamp: 2012-05-01 00:00:00&gt;\n\nIn [9]: dt64\nOut[9]: numpy.datetime64('2012-05-01T01:00:00.000000+0100')\n</code></pre>\n\n<p><em>Note: it's easy to get the datetime from the Timestamp:</em></p>\n\n<pre><code>In [10]: ts.to_datetime()\nOut[10]: datetime.datetime(2012, 5, 1, 0, 0)\n</code></pre>\n\n<p>But how do we extract the <code>datetime</code> or <code>Timestamp</code> from a <code>numpy.datetime64</code> (<code>dt64</code>)?</p>\n\n<p>.</p>\n\n<p>Update: a somewhat nasty example in my dataset (perhaps the motivating example) seems to be:</p>\n\n<pre><code>dt64 = numpy.datetime64('2002-06-28T01:00:00.000000000+0100')\n</code></pre>\n\n<p>which should be <code>datetime.datetime(2002, 6, 28, 1, 0)</code>, and not a long (!) (<code>1025222400000000000L</code>)...</p>\n",
        "answer": "<p>To convert <code>numpy.datetime64</code> to datetime object that represents time in UTC on <code>numpy-1.8</code>:</p>\n\n<pre><code>&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; dt = datetime.utcnow()\n&gt;&gt;&gt; dt\ndatetime.datetime(2012, 12, 4, 19, 51, 25, 362455)\n&gt;&gt;&gt; dt64 = np.datetime64(dt)\n&gt;&gt;&gt; ts = (dt64 - np.datetime64('1970-01-01T00:00:00Z')) / np.timedelta64(1, 's')\n&gt;&gt;&gt; ts\n1354650685.3624549\n&gt;&gt;&gt; datetime.utcfromtimestamp(ts)\ndatetime.datetime(2012, 12, 4, 19, 51, 25, 362455)\n&gt;&gt;&gt; np.__version__\n'1.8.0.dev-7b75899'\n</code></pre>\n\n<p>The above example assumes that a naive datetime object is interpreted by <code>np.datetime64</code> as time in UTC.</p>\n\n<hr>\n\n<p>To convert datetime to np.datetime64 and back (<code>numpy-1.6</code>):</p>\n\n<pre><code>&gt;&gt;&gt; np.datetime64(datetime.utcnow()).astype(datetime)\ndatetime.datetime(2012, 12, 4, 13, 34, 52, 827542)\n</code></pre>\n\n<p>It works both on a single np.datetime64 object and a numpy array of np.datetime64.</p>\n\n<p>Think of np.datetime64 the same way you would about np.int8, np.int16, etc and apply the same methods to convert beetween Python objects such as int, datetime and corresponding numpy objects.</p>\n\n<p>Your \"nasty example\" works correctly:</p>\n\n<pre><code>&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; import numpy \n&gt;&gt;&gt; numpy.datetime64('2002-06-28T01:00:00.000000000+0100').astype(datetime)\ndatetime.datetime(2002, 6, 28, 0, 0)\n&gt;&gt;&gt; numpy.__version__\n'1.6.2' # current version available via pip install numpy\n</code></pre>\n\n<p>I can reproduce the <code>long</code> value on <code>numpy-1.8.0</code> installed as:</p>\n\n<pre><code>pip install git+https://github.com/numpy/numpy.git#egg=numpy-dev\n</code></pre>\n\n<p>The same example:</p>\n\n<pre><code>&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; import numpy\n&gt;&gt;&gt; numpy.datetime64('2002-06-28T01:00:00.000000000+0100').astype(datetime)\n1025222400000000000L\n&gt;&gt;&gt; numpy.__version__\n'1.8.0.dev-7b75899'\n</code></pre>\n\n<p>It returns <code>long</code> because for <code>numpy.datetime64</code> type <code>.astype(datetime)</code> is equivalent to <code>.astype(object)</code> that returns Python integer (<code>long</code>) on <code>numpy-1.8</code>. </p>\n\n<p>To get datetime object you could:</p>\n\n<pre><code>&gt;&gt;&gt; dt64.dtype\ndtype('&lt;M8[ns]')\n&gt;&gt;&gt; ns = 1e-9 # number of seconds in a nanosecond\n&gt;&gt;&gt; datetime.utcfromtimestamp(dt64.astype(int) * ns)\ndatetime.datetime(2002, 6, 28, 0, 0)\n</code></pre>\n\n<p>To get datetime64 that uses seconds directly:</p>\n\n<pre><code>&gt;&gt;&gt; dt64 = numpy.datetime64('2002-06-28T01:00:00.000000000+0100', 's')\n&gt;&gt;&gt; dt64.dtype\ndtype('&lt;M8[s]')\n&gt;&gt;&gt; datetime.utcfromtimestamp(dt64.astype(int))\ndatetime.datetime(2002, 6, 28, 0, 0)\n</code></pre>\n\n<p>The <a href=\"http://docs.scipy.org/doc/numpy-dev/reference/arrays.datetime.html\">numpy docs</a> say that the datetime API is experimental and may change in future numpy versions.</p>\n"
    },
    "499": {
        "question_id": "642763",
        "answer_id": "642895",
        "question": "<p>I know how to get an intersection of two flat lists:</p>\n\n<pre><code>b1 = [1,2,3,4,5,9,11,15]\nb2 = [4,5,6,7,8]\nb3 = [val for val in b1 if val in b2]\n</code></pre>\n\n<p>or </p>\n\n<pre><code>def intersect(a, b):\n    return list(set(a) &amp; set(b))\n\nprint intersect(b1, b2)\n</code></pre>\n\n<p>But when I have to find intersection for nested lists then my problems starts:</p>\n\n<pre><code>c1 = [1, 6, 7, 10, 13, 28, 32, 41, 58, 63]\nc2 = [[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]\n</code></pre>\n\n<p>In the end I would like to receive:</p>\n\n<pre><code>c3 = [[13,32],[7,13,28],[1,6]]\n</code></pre>\n\n<p>Can you guys give me a hand with this?</p>\n\n<h3>Related</h3>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/406121/flattening-a-shallow-list-in-python\">Flattening a shallow list in python</a></li>\n</ul>\n",
        "answer": "<p><strong>If you want:</strong></p>\n\n<pre><code>c1 = [1, 6, 7, 10, 13, 28, 32, 41, 58, 63]\nc2 = [[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]\nc3 = [[13, 32], [7, 13, 28], [1,6]]\n</code></pre>\n\n<p><strong>Then here is your solution for Python 2:</strong></p>\n\n<pre><code>c3 = [filter(lambda x: x in c1, sublist) for sublist in c2]\n</code></pre>\n\n<p><strong>In Python 3 <code>filter</code> returns an iterable instead of <code>list</code>, so you need to wrap <code>filter</code> calls with <code>list()</code>:</strong></p>\n\n<pre><code>c3 = [list(filter(lambda x: x in c1, sublist)) for sublist in c2]\n</code></pre>\n\n<p><strong>Explanation:</strong> </p>\n\n<p>The filter part takes each sublist's item and checks to see if it is in the source list c1. \nThe list comprehension is executed for each sublist in c2. </p>\n"
    },
    "500": {
        "question_id": "1419046",
        "answer_id": "1419160",
        "question": "<p>How are \"keyword arguments\" different from regular arguments? Can't all arguments be passed as <code>name=value</code> instead of using positional syntax?</p>\n",
        "answer": "<p>there are two related concepts, both called \"keyword arguments\".</p>\n\n<p>On the calling side, which is what other commenters have mentioned, you have the ability to specify some function arguments by name. You have to mention them after all of the arguments without names (positional arguments), and there must be default values for any parameters which were not mentioned at all.</p>\n\n<p>The other concept is on the function definition side: You can define a function that takes parameters by name -- and you don't even have to specify what those names are. These are pure keyword arguments, and can't be passed positionally. The syntax is</p>\n\n<pre><code>def my_function(arg1, arg2, **kwargs)\n</code></pre>\n\n<p>Any keyword arguments you pass into this function will be placed into a dictionary named kwargs. You can examine the keys of this dictionary at run-time, like this:</p>\n\n<pre><code>def my_function(**kwargs):\n    print str(kwargs)\n\nmy_function(a=12, b=\"abc\")\n\n{'a': 12, 'b': 'abc'}\n</code></pre>\n"
    },
    "501": {
        "question_id": "3828723",
        "answer_id": "3828742",
        "question": "<p>I have seen few py scripts which use this at the top of the script. In what cases one should use it?</p>\n\n<pre><code>import sys\nreload(sys)\nsys.setdefaultencoding(\"utf-8\")\n</code></pre>\n",
        "answer": "<p>As per the documentation: This allows you to switch from the default ASCII to other encodings such as UTF-8, which the Python runtime will use whenever it has to decode a string buffer to unicode.  </p>\n\n<p>This function is only available at Python start-up time, when Python scans the environment. It has to be called in a system-wide module, <code>sitecustomize.py</code>, After this module has been evaluated, the <code>setdefaultencoding()</code> function is removed from the <code>sys</code> module. </p>\n\n<p>The only way to actually use it is with a reload hack that brings the attribute back. </p>\n\n<p>Also, <strong>the use of <code>sys.setdefaultencoding()</code> has always been discouraged</strong>, and it has become a no-op in py3k. The encoding of py3k is hard-wired to \"utf-8\" and changing it raises an error.</p>\n\n<p>I suggest some pointers for reading:</p>\n\n<ul>\n<li><a href=\"http://blog.ianbicking.org/illusive-setdefaultencoding.html\" rel=\"noreferrer\">http://blog.ianbicking.org/illusive-setdefaultencoding.html</a></li>\n<li><a href=\"http://nedbatchelder.com/blog/200401/printing_unicode_from_python.html\" rel=\"noreferrer\">http://nedbatchelder.com/blog/200401/printing_unicode_from_python.html</a></li>\n<li><a href=\"http://www.diveintopython3.net/strings.html#one-ring-to-rule-them-all\" rel=\"noreferrer\">http://www.diveintopython3.net/strings.html#one-ring-to-rule-them-all</a></li>\n<li><a href=\"http://web.archive.org/web/20120722170929/http://boodebr.org/main/python/all-about-python-and-unicode\" rel=\"noreferrer\">http://boodebr.org/main/python/all-about-python-and-unicode</a></li>\n<li><a href=\"http://blog.notdot.net/2010/07/Getting-unicode-right-in-Python\" rel=\"noreferrer\">http://blog.notdot.net/2010/07/Getting-unicode-right-in-Python</a></li>\n</ul>\n"
    },
    "502": {
        "question_id": "517970",
        "answer_id": "518007",
        "question": "<p>Like most Python developers, I typically keep a console window open with the Python interpreter running to test commands, <code>dir()</code> stuff, <code>help() stuff</code>, etc.</p>\n\n<p>Like any console, after a while the visible backlog of past commands and prints gets to be cluttered, and sometimes confusing when re-running the same command several times.  I'm wondering if, and how, to clear the Python interpreter console.</p>\n\n<p>I've heard about doing a system call and either calling <code>cls</code> on Windows or <code>clear</code> on Linux, but I was hoping there was something I could command the interpreter itself to do.</p>\n\n<p><strong>Note:</strong> I'm running on Windows, so <code>Ctrl+L</code> doesn't work.</p>\n",
        "answer": "<p>As you mentioned, you can do a system call:</p>\n\n<p>For Windows</p>\n\n<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; clear = lambda: os.system('cls')\n&gt;&gt;&gt; clear()\n</code></pre>\n\n<p>For Linux the lambda becomes</p>\n\n<pre><code>&gt;&gt;&gt; clear = lambda: os.system('clear')\n</code></pre>\n"
    },
    "503": {
        "question_id": "4998629",
        "answer_id": "4998688",
        "question": "<p>I found some answers online, but I have no experience with regular expressions, which I believe is what is needed here.</p>\n\n<p>I have a string that needs to be split by either a ';' or ', '\nThat is, it has to be either a semicolon or a comma followed by a space. Individual commas without trailing spaces should be left untouched</p>\n\n<p>Example string:</p>\n\n<pre><code>\"b-staged divinylsiloxane-bis-benzocyclobutene [124221-30-3], mesitylene [000108-67-8]; polymerized 1,2-dihydro-2,2,4- trimethyl quinoline [026780-96-1]\"\n</code></pre>\n\n<p>should be split into a list containing the following:</p>\n\n<pre><code>('b-staged divinylsiloxane-bis-benzocyclobutene [124221-30-3]' , 'mesitylene [000108-67-8]', 'polymerized 1,2-dihydro-2,2,4- trimethyl quinoline [026780-96-1]') \n</code></pre>\n",
        "answer": "<p>Luckily, Python has this built-in :)</p>\n\n<pre><code>import re\nre.split('; |, ',str)\n</code></pre>\n\n<p><strong>Update:</strong><br>Following your comment:</p>\n\n<pre><code>&gt;&gt;&gt; a='Beautiful, is; better*than\\nugly'\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; re.split('; |, |\\*|\\n',a)\n['Beautiful', 'is', 'better', 'than', 'ugly']\n</code></pre>\n"
    },
    "504": {
        "question_id": "772124",
        "answer_id": "773472",
        "question": "<p>While idly surfing the namespace I noticed an odd looking object called \"<strong>Ellipsis</strong>\", it does not seem to be or do anything special, but it's a globally available builtin. </p>\n\n<p>After a search I found that it is used in some obscure variant of the slicing syntax by Numpy and Scipy... but almost nothing else. </p>\n\n<p>Was this object added to the language specifically to support Numpy + Scipy? Does Ellipsis have any generic meaning or use at all?</p>\n\n<pre><code>D:\\workspace\\numpy&gt;python\nPython 2.4.4 (#71, Oct 18 2006, 08:34:43) [MSC v.1310 32 bit (Intel)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; Ellipsis\nEllipsis\n</code></pre>\n",
        "answer": "<p>This came up in another <a href=\"https://stackoverflow.com/questions/752602/slicing-in-python-expressions-documentation\">question</a> recently.  I'll elaborate on my <a href=\"https://stackoverflow.com/questions/752602/slicing-in-python-expressions-documentation/753260#753260\">answer</a> from there:</p>\n\n<p><a href=\"http://docs.python.org/dev/library/constants.html#Ellipsis\" rel=\"noreferrer\">Ellipsis</a> is an object that can appear in slice notation.  For example:</p>\n\n<pre><code>myList[1:2, ..., 0]\n</code></pre>\n\n<p>Its interpretation is purely up to whatever implements the <code>__getitem__</code> function and sees <code>Ellipsis</code> objects there, but its main (and intended) use is in the <a href=\"http://www.numpy.org/\" rel=\"noreferrer\">numeric python</a> extension, which adds a multidimensional array type.  Since there are more than one dimensions, slicing becomes more complex than just a start and stop index; it is useful to be able to slice in multiple dimensions as well. E.g., given a 4x4 array, the top left area would be defined by the slice <code>[:2,:2]</code>:</p>\n\n<pre><code>&gt;&gt;&gt; a\narray([[ 1,  2,  3,  4],\n       [ 5,  6,  7,  8],\n       [ 9, 10, 11, 12],\n       [13, 14, 15, 16]])\n\n&gt;&gt;&gt; a[:2,:2]  # top left\narray([[1, 2],\n       [5, 6]])\n</code></pre>\n\n<p>Extending this further, Ellipsis is used here to indicate a placeholder for the rest of the array dimensions not specified.  Think of it as indicating the full slice <code>[:]</code> for all the dimensions in the gap it is placed, so for a 3d array, <code>a[...,0]</code> is the same as <code>a[:,:,0]</code> and for 4d, <code>a[:,:,:,0]</code>, similarly, <code>a[0,...,0]</code> is <code>a[0,:,:,0]</code> (with however many colons in the middle make up the full number of dimensions in the array).</p>\n\n<p>Interestingly, in python3, the Ellipsis literal (<code>...</code>) is usable outside the slice syntax, so you can actually write: </p>\n\n<pre><code>&gt;&gt;&gt; ...\nEllipsis\n</code></pre>\n\n<p>Other than the various numeric types, no, I don't think it's used.  As far as I'm aware, it was added purely for numpy use and has no core support other than providing the object and corresponding syntax.  The object being there didn't require this, but the literal \"...\" support for slices did.</p>\n"
    },
    "505": {
        "question_id": "6473679",
        "answer_id": "6473724",
        "question": "<p>Let's take:</p>\n\n<pre><code>l = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n</code></pre>\n\n<p>The result I'm looking for is</p>\n\n<pre><code>r = [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n</code></pre>\n\n<p>and not</p>\n\n<pre><code>r = [(1, 4, 7), (2, 5, 8), (3, 6, 9)]\n</code></pre>\n\n<p>Much appreciated</p>\n",
        "answer": "<p>How about</p>\n\n<pre><code>map(list, zip(*l))\n--&gt; [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n</code></pre>\n\n<p>For python 3.x users can use</p>\n\n<pre><code>list(map(list, zip(*l)))\n</code></pre>\n"
    },
    "506": {
        "question_id": "4081217",
        "answer_id": "4081234",
        "question": "<p>Now I know that it is not safe to modify the list during an iterative looping. However, suppose I have a list of strings, and I want to strip the strings themselves. Does replacement of mutable values count as modification? </p>\n",
        "answer": "<p>It's considered poor form. Use a list comprehension instead, with slice assignment if you need to retain existing references to the list.</p>\n\n<pre><code>a = [1, 3, 5]\nb = a\na[:] = [x + 2 for x in a]\nprint(b)\n</code></pre>\n"
    },
    "507": {
        "question_id": "11430863",
        "answer_id": "11430936",
        "question": "<pre><code>&gt;&gt;&gt; match = re.findall(r'\\w\\w', 'hello')\n&gt;&gt;&gt; print match\n['he', 'll']\n</code></pre>\n\n<p>Since \\w\\w means two characters, 'he' and 'll' are expected. But why do 'el' and 'lo' <strong>not</strong> match the regex?</p>\n\n<pre><code>&gt;&gt;&gt; match1 = re.findall(r'el', 'hello')\n&gt;&gt;&gt; print match1\n['el']\n&gt;&gt;&gt;\n</code></pre>\n",
        "answer": "<p><code>findall</code> doesn't yield overlapping matches by default. This expression does however:</p>\n\n<pre><code>&gt;&gt;&gt; re.findall(r'(?=(\\w\\w))', 'hello')\n['he', 'el', 'll', 'lo']\n</code></pre>\n\n<p>Here <code>(?=...)</code> is a <a href=\"http://docs.python.org/library/re.html\" rel=\"noreferrer\"><strong>lookahead assertion</strong></a>:</p>\n\n<blockquote>\n  <p><code>(?=...)</code> matches if <code>...</code> matches next, but doesn\u2019t consume any of the\n  string. This is called a lookahead assertion. For example,\n  <code>Isaac (?=Asimov)</code> will match <code>'Isaac '</code> only if it\u2019s followed by <code>'Asimov'</code>.</p>\n</blockquote>\n"
    },
    "508": {
        "question_id": "17271319",
        "answer_id": "18947390",
        "question": "<p>I spent most of the day yesterday searching for a clear answer for installing <code>pip</code> (package manager for Python). I can't find a good solution.</p>\n\n<p>How do I install it?</p>\n",
        "answer": "<pre><code>easy_install pip\n</code></pre>\n\n<hr>\n\n<p>If you need admin privileges to run this, try:</p>\n\n<pre><code>sudo easy_install pip\n</code></pre>\n\n<hr>\n\n<p><strong>UPDATE (Jan 2019):</strong></p>\n\n<p><code>easy_install</code> has been <a href=\"https://setuptools.readthedocs.io/en/latest/easy_install.html\" rel=\"noreferrer\">deprecated</a>. Please use <a href=\"https://pip.pypa.io/en/stable/installing/#installing-with-get-pip-py\" rel=\"noreferrer\"><code>get-pip.py</code></a> instead.</p>\n"
    },
    "509": {
        "question_id": "70528",
        "answer_id": "70900",
        "question": "<p>Python gives us the ability to create 'private' methods and variables within a class by prepending double underscores to the name, like this: <code>__myPrivateMethod()</code>. How, then, can one explain this</p>\n\n<pre><code>>>> class MyClass:\n...     def myPublicMethod(self):\n...             print 'public method'\n...     def __myPrivateMethod(self):\n...             print 'this is private!!'\n... \n>>> obj = MyClass()\n>>> obj.myPublicMethod()\npublic method\n>>> obj.__myPrivateMethod()\nTraceback (most recent call last):\n  File \"\", line 1, in \nAttributeError: MyClass instance has no attribute '__myPrivateMethod'\n>>> dir(obj)\n['_MyClass__myPrivateMethod', '__doc__', '__module__', 'myPublicMethod']\n>>> obj._MyClass__myPrivateMethod()\nthis is private!!\n</code></pre>\n\n<p>What's the deal?!</p>\n\n<p>I'll explain this a little for those who didn't quite get that.</p>\n\n<pre><code>>>> class MyClass:\n...     def myPublicMethod(self):\n...             print 'public method'\n...     def __myPrivateMethod(self):\n...             print 'this is private!!'\n... \n>>> obj = MyClass()\n</code></pre>\n\n<p>What I did there is create a class with a public method and a private method and instantiate it.</p>\n\n<p>Next, I call its public method.</p>\n\n<pre><code>>>> obj.myPublicMethod()\npublic method\n</code></pre>\n\n<p>Next, I try and call its private method.</p>\n\n<pre><code>>>> obj.__myPrivateMethod()\nTraceback (most recent call last):\n  File \"\", line 1, in \nAttributeError: MyClass instance has no attribute '__myPrivateMethod'\n</code></pre>\n\n<p>Everything looks good here; we're unable to call it. It is, in fact, 'private'. Well, actually it isn't. Running <em>dir()</em> on the object reveals a new magical method that python creates magically for all of your 'private' methods.</p>\n\n<pre><code>>>> dir(obj)\n['_MyClass__myPrivateMethod', '__doc__', '__module__', 'myPublicMethod']\n</code></pre>\n\n<p>This new method's name is always an underscore, followed by the class name, followed by the method name.</p>\n\n<pre><code>>>> obj._MyClass__myPrivateMethod()\nthis is private!!\n</code></pre>\n\n<p>So much for encapsulation, eh?</p>\n\n<p>In any case, I'd always heard Python doesn't support encapsulation, so why even try? What gives?</p>\n",
        "answer": "<p>The name scrambling is used to ensure that subclasses don't accidentally override the private methods and attributes of their superclasses. It's not designed to prevent deliberate access from outside.</p>\n\n<p>For example:</p>\n\n<pre><code>&gt;&gt;&gt; class Foo(object):\n...     def __init__(self):\n...         self.__baz = 42\n...     def foo(self):\n...         print self.__baz\n...     \n&gt;&gt;&gt; class Bar(Foo):\n...     def __init__(self):\n...         super(Bar, self).__init__()\n...         self.__baz = 21\n...     def bar(self):\n...         print self.__baz\n...\n&gt;&gt;&gt; x = Bar()\n&gt;&gt;&gt; x.foo()\n42\n&gt;&gt;&gt; x.bar()\n21\n&gt;&gt;&gt; print x.__dict__\n{'_Bar__baz': 21, '_Foo__baz': 42}\n</code></pre>\n\n<p>Of course, it breaks down if two different classes have the same name.</p>\n"
    },
    "510": {
        "question_id": "21129020",
        "answer_id": "35444608",
        "question": "<pre><code>as3:~/ngokevin-site# nano content/blog/20140114_test-chinese.mkd\nas3:~/ngokevin-site# wok\nTraceback (most recent call last):\nFile \"/usr/local/bin/wok\", line 4, in\nEngine()\nFile \"/usr/local/lib/python2.7/site-packages/wok/engine.py\", line 104, in init\nself.load_pages()\nFile \"/usr/local/lib/python2.7/site-packages/wok/engine.py\", line 238, in load_pages\np = Page.from_file(os.path.join(root, f), self.options, self, renderer)\nFile \"/usr/local/lib/python2.7/site-packages/wok/page.py\", line 111, in from_file\npage.meta['content'] = page.renderer.render(page.original)\nFile \"/usr/local/lib/python2.7/site-packages/wok/renderers.py\", line 46, in render\nreturn markdown(plain, Markdown.plugins)\nFile \"/usr/local/lib/python2.7/site-packages/markdown/init.py\", line 419, in markdown\nreturn md.convert(text)\nFile \"/usr/local/lib/python2.7/site-packages/markdown/init.py\", line 281, in convert\nsource = unicode(source)\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xe8 in position 1: ordinal not in range(128). -- Note: Markdown only accepts unicode input!\n</code></pre>\n\n<p>How to fix it?</p>\n\n<p>In some other python-based static blog apps, Chinese post can be published successfully.\nSuch as this app: <a href=\"http://github.com/vrypan/bucket3\">http://github.com/vrypan/bucket3</a>. In my site <a href=\"http://bc3.brite.biz/\">http://bc3.brite.biz/</a>, Chinese post can be published successfully.</p>\n",
        "answer": "<h1>tl;dr / quick fix</h1>\n\n<ul>\n<li>Don't decode/encode willy nilly</li>\n<li>Don't assume your strings are UTF-8 encoded</li>\n<li>Try to convert strings to Unicode strings as soon as possible in your code</li>\n<li>Fix your locale: <a href=\"https://stackoverflow.com/questions/51026315/how-to-solve-unicodedecodeerror-in-python-3-6/51027262#51027262\">How to solve UnicodeDecodeError in Python 3.6?</a></li>\n<li>Don't be tempted to use quick <code>reload</code> hacks</li>\n</ul>\n\n<h1>Unicode Zen in Python 2.x - The Long Version</h1>\n\n<p>Without seeing the source it's difficult to know the root cause, so I'll have to speak generally.</p>\n\n<p><code>UnicodeDecodeError: 'ascii' codec can't decode byte</code> generally happens when you try to convert a Python 2.x <code>str</code> that contains non-ASCII to a Unicode string without specifying the encoding of the original string.</p>\n\n<p>In brief, Unicode strings are an entirely separate type of Python string that does not contain any encoding. They only hold Unicode <strong>point codes</strong> and therefore can hold any Unicode point from across the entire spectrum. Strings contain encoded text, beit UTF-8, UTF-16, ISO-8895-1, GBK, Big5 etc. <strong>Strings are decoded to Unicode</strong> and <strong>Unicodes are encoded to strings</strong>. Files and text data are always transferred in encoded strings.</p>\n\n<p>The Markdown module authors probably use <code>unicode()</code> (where the exception is thrown) as a quality gate to the rest of the code - it will convert ASCII or re-wrap existing Unicodes strings to a new Unicode string. The Markdown authors can't know the encoding of the incoming string so will rely on you to decode strings to Unicode strings before passing to Markdown.</p>\n\n<p>Unicode strings can be declared in your code using the <code>u</code> prefix to strings. E.g.</p>\n\n<pre><code>&gt;&gt;&gt; my_u = u'my \u00fcnic\u00f4d\u00e9 str\u012fng'\n&gt;&gt;&gt; type(my_u)\n&lt;type 'unicode'&gt;\n</code></pre>\n\n<p>Unicode strings may also come from file, databases and network modules. When this happens, you don't need to worry about the encoding.</p>\n\n<h1>Gotchas</h1>\n\n<p>Conversion from <code>str</code> to Unicode can happen even when you don't explicitly call <code>unicode()</code>.</p>\n\n<p>The following scenarios cause <code>UnicodeDecodeError</code> exceptions:</p>\n\n<pre class=\"lang-python prettyprint-override\"><code># Explicit conversion without encoding\nunicode('\u20ac')\n\n# New style format string into Unicode string\n# Python will try to convert value string to Unicode first\nu\"The currency is: {}\".format('\u20ac')\n\n# Old style format string into Unicode string\n# Python will try to convert value string to Unicode first\nu'The currency is: %s' % '\u20ac'\n\n# Append string to Unicode\n# Python will try to convert string to Unicode first\nu'The currency is: ' + '\u20ac'         \n</code></pre>\n\n<h2>Examples</h2>\n\n<p>In the following diagram, you can see how the word <code>caf\u00e9</code> has been encoded in either \"UTF-8\" or \"Cp1252\" encoding depending on the terminal type. In both examples, <code>caf</code> is just regular ascii. In UTF-8, <code>\u00e9</code> is encoded using two bytes. In \"Cp1252\", \u00e9 is 0xE9 (which is also happens to be the Unicode point value (it's no coincidence)). The correct <code>decode()</code> is invoked and conversion to a Python Unicode is successfull:\n<a href=\"https://i.stack.imgur.com/uUUBd.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/uUUBd.jpg\" alt=\"Diagram of a string being converted to a Python Unicode string\"></a></p>\n\n<p>In this diagram, <code>decode()</code> is called with <code>ascii</code> (which is the same as calling <code>unicode()</code> without an encoding given). As ASCII can't contain bytes greater than <code>0x7F</code>, this will throw a <code>UnicodeDecodeError</code> exception:</p>\n\n<p><a href=\"https://i.stack.imgur.com/oyk7O.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/oyk7O.jpg\" alt=\"Diagram of a string being converted to a Python Unicode string with the wrong encoding\"></a></p>\n\n<h1>The Unicode Sandwich</h1>\n\n<p>It's good practice to form a Unicode sandwich in your code, where you decode all incoming data to Unicode strings, work with Unicodes, then encode to <code>str</code>s on the way out. This saves you from worrying about the encoding of strings in the middle of your code.</p>\n\n<h2>Input / Decode</h2>\n\n<h3>Source code</h3>\n\n<p>If you need to bake non-ASCII into your source code, just create Unicode strings by prefixing the string with a <code>u</code>. E.g.</p>\n\n<pre><code>u'Z\u00fcrich'\n</code></pre>\n\n<p>To allow Python to decode your source code, you will need to add an encoding header to match the actual encoding of your file. For example, if your file was encoded as 'UTF-8', you would use:</p>\n\n<pre><code># encoding: utf-8\n</code></pre>\n\n<p>This is only necessary when you have non-ASCII in your <strong>source code</strong>.</p>\n\n<h3>Files</h3>\n\n<p>Usually non-ASCII data is received from a file. The <code>io</code> module provides a TextWrapper that decodes your file on the fly, using a given <code>encoding</code>. You must use the correct encoding for the file - it can't be easily guessed. For example, for a UTF-8 file:</p>\n\n<pre><code>import io\nwith io.open(\"my_utf8_file.txt\", \"r\", encoding=\"utf-8\") as my_file:\n     my_unicode_string = my_file.read() \n</code></pre>\n\n<p><code>my_unicode_string</code> would then be suitable for passing to Markdown. If a <code>UnicodeDecodeError</code> from the <code>read()</code> line, then you've probably used the wrong encoding value.</p>\n\n<h3>CSV Files</h3>\n\n<p>The Python 2.7 CSV module does not support non-ASCII characters \ud83d\ude29. Help is at hand, however, with <a href=\"https://pypi.python.org/pypi/backports.csv\" rel=\"noreferrer\">https://pypi.python.org/pypi/backports.csv</a>.</p>\n\n<p>Use it like above but pass the opened file to it:</p>\n\n<pre><code>from backports import csv\nimport io\nwith io.open(\"my_utf8_file.txt\", \"r\", encoding=\"utf-8\") as my_file:\n    for row in csv.reader(my_file):\n        yield row\n</code></pre>\n\n<h3>Databases</h3>\n\n<p>Most Python database drivers can return data in Unicode, but usually require a little configuration. Always use Unicode strings for SQL queries.</p>\n\nMySQL\n\n<p>In the connection string add:</p>\n\n<pre><code>charset='utf8',\nuse_unicode=True\n</code></pre>\n\n<p>E.g.</p>\n\n<pre><code>&gt;&gt;&gt; db = MySQLdb.connect(host=\"localhost\", user='root', passwd='passwd', db='sandbox', use_unicode=True, charset=\"utf8\")\n</code></pre>\n\nPostgreSQL\n\n<p>Add:</p>\n\n<pre><code>psycopg2.extensions.register_type(psycopg2.extensions.UNICODE)\npsycopg2.extensions.register_type(psycopg2.extensions.UNICODEARRAY)\n</code></pre>\n\n<h3>HTTP</h3>\n\n<p>Web pages can be encoded in just about any encoding. The <code>Content-type</code> header should contain a <code>charset</code> field to hint at the encoding. The content can then be decoded manually against this value. Alternatively, <a href=\"http://docs.python-requests.org/en/master/\" rel=\"noreferrer\" title=\"Python-Requests\">Python-Requests</a> returns Unicodes in <code>response.text</code>.</p>\n\n<h3>Manually</h3>\n\n<p>If you must decode strings manually, you can simply do <code>my_string.decode(encoding)</code>, where <code>encoding</code> is the appropriate encoding. Python 2.x supported codecs are given here: <a href=\"https://docs.python.org/2/library/codecs.html#standard-encodings\" rel=\"noreferrer\" title=\"Standard Encodings\">Standard Encodings</a>. Again, if you get <code>UnicodeDecodeError</code> then you've probably got the wrong encoding.</p>\n\n<h2>The meat of the sandwich</h2>\n\n<p>Work with Unicodes as you would normal strs.</p>\n\n<h2>Output</h2>\n\n<h3>stdout / printing</h3>\n\n<p><code>print</code> writes through the stdout stream. Python tries to configure an encoder on stdout so that Unicodes are encoded to the console's encoding. For example, if a Linux shell's <code>locale</code> is <code>en_GB.UTF-8</code>, the output will be encoded to <code>UTF-8</code>. On Windows, you will be limited to an 8bit code page.</p>\n\n<p>An incorrectly configured console, such as corrupt locale, can lead to unexpected print errors. <code>PYTHONIOENCODING</code> environment variable can force the encoding for stdout. </p>\n\n<h3>Files</h3>\n\n<p>Just like input, <code>io.open</code> can be used to transparently convert Unicodes to encoded byte strings.</p>\n\n<h3>Database</h3>\n\n<p>The same configuration for reading will allow Unicodes to be written directly.</p>\n\n<h1>Python 3</h1>\n\n<p>Python 3 is no more Unicode capable than Python 2.x is, however it is slightly less confused on the topic. E.g the regular <code>str</code> is now a Unicode string and the old <code>str</code> is now <code>bytes</code>. </p>\n\n<p>The default encoding is UTF-8, so if you <code>.decode()</code> a byte string without giving an encoding, Python 3 uses UTF-8 encoding. This probably fixes 50% of people's Unicode problems.</p>\n\n<p>Further, <code>open()</code> operates in text mode by default, so returns decoded <code>str</code> (Unicode ones). The encoding is derived from your locale, which tends to be UTF-8 on Un*x systems or an 8-bit code page, such as windows-1251, on Windows boxes.</p>\n\n<h1>Why you shouldn't use <code>sys.setdefaultencoding('utf8')</code></h1>\n\n<p>It's a nasty hack (there's a reason you have to use <code>reload</code>) that will only mask problems and hinder your migration to Python 3.x. Understand the problem, fix the root cause and enjoy Unicode zen.\nSee <a href=\"https://stackoverflow.com/questions/3828723/why-should-we-not-use-sys-setdefaultencodingutf-8-in-a-py-script/34378962#34378962\">Why should we NOT use sys.setdefaultencoding(&quot;utf-8&quot;) in a py script?</a> for further details</p>\n"
    },
    "511": {
        "question_id": "573618",
        "answer_id": "573659",
        "question": "<p>I've been working on a web app using Django, and I'm curious if there is a way to schedule a job to run periodically. </p>\n\n<p>Basically I just want to run through the database and make some calculations/updates on an automatic, regular basis, but I can't seem to find any documentation on doing this.</p>\n\n<p>Does anyone know how to set this up?</p>\n\n<p>To clarify:  I know I can set up a <code>cron</code> job to do this, but I'm curious if there is some feature in Django that provides this functionality.   I'd like people to be able to deploy this app themselves without having to do much config (preferably zero).</p>\n\n<p>I've considered triggering these actions \"retroactively\" by simply checking if a job should have been run since the last time a request was sent to the site, but I'm hoping for something a bit cleaner.</p>\n",
        "answer": "<p>One solution that I have employed is to do this:</p>\n\n<p>1) Create a <a href=\"http://docs.djangoproject.com/en/dev/howto/custom-management-commands/#howto-custom-management-commands\" rel=\"noreferrer\">custom management command</a>, e.g. </p>\n\n<pre><code>python manage.py my_cool_command\n</code></pre>\n\n<p>2) Use <code>cron</code> (on Linux) or <code>at</code> (on Windows) to run my command at the required times.</p>\n\n<p>This is a simple solution that doesn't require installing a heavy AMQP stack. However there are nice advantages to using something like Celery, mentioned in the other answers. In particular, with Celery it is nice to not have to spread your application logic out into crontab files. However the cron solution works quite nicely for a small to medium sized application and where you don't want a lot of external dependencies.</p>\n\n<p>EDIT:</p>\n\n<p>In later version of windows the <code>at</code> command is deprecated for Windows 8, Server 2012 and above. You can use <code>schtasks.exe</code> for same use.</p>\n"
    },
    "512": {
        "question_id": "730764",
        "answer_id": "730778",
        "question": "<p>When you just want to do a try-except without handling the exception, how do you do it in Python?</p>\n\n<p>Is the following the right way to do it?</p>\n\n<pre><code>try:\n    shutil.rmtree(path)\nexcept:\n    pass\n</code></pre>\n",
        "answer": "<pre><code>try:\n  doSomething()\nexcept: \n  pass\n</code></pre>\n\n<p>or</p>\n\n<pre><code>try:\n  doSomething()\nexcept Exception: \n  pass\n</code></pre>\n\n<p>The difference is, that the first one will also catch <code>KeyboardInterrupt</code>, <code>SystemExit</code> and stuff like that, which are derived directly from <code>exceptions.BaseException</code>, not <code>exceptions.Exception</code>.<br/> See documentation for details:</p>\n\n<ul>\n<li>try statement &mdash; <a href=\"http://docs.python.org/reference/compound_stmts.html#try\" rel=\"noreferrer\">http://docs.python.org/reference/compound_stmts.html#try</a></li>\n<li>exceptions &mdash; <a href=\"http://docs.python.org/library/exceptions\" rel=\"noreferrer\">http://docs.python.org/library/exceptions</a></li>\n</ul>\n"
    },
    "513": {
        "question_id": "7368789",
        "answer_id": "7368801",
        "question": "<p>In Python, I want to convert all strings in a list to integers.</p>\n\n<p>So if I have:</p>\n\n<pre><code>results = ['1', '2', '3']\n</code></pre>\n\n<p>How do I make it:</p>\n\n<pre><code>results = [1, 2, 3]\n</code></pre>\n",
        "answer": "<p>Use the <a href=\"https://docs.python.org/2/library/functions.html#map\" rel=\"noreferrer\"><code>map</code></a> function (in Python 2.x):</p>\n\n<pre><code>results = map(int, results)\n</code></pre>\n\n<p>In Python 3, you will need to convert the result from <a href=\"https://docs.python.org/3/library/functions.html#map\" rel=\"noreferrer\"><code>map</code></a> to a list:</p>\n\n<pre><code>results = list(map(int, results))\n</code></pre>\n"
    },
    "514": {
        "question_id": "279561",
        "answer_id": "279586",
        "question": "<p>What is the idiomatic Python equivalent of this C/C++ code?</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>void foo()\n{\n    static int counter = 0;\n    counter++;\n    printf(\"counter is %d\\n\", counter);\n}\n</code></pre>\n\n<p>specifically, how does one implement the static member at the function level, as opposed to the class level? And does placing the function into a class change anything?</p>\n",
        "answer": "<p>A bit reversed, but this should work:</p>\n\n<pre><code>def foo():\n    foo.counter += 1\n    print \"Counter is %d\" % foo.counter\nfoo.counter = 0\n</code></pre>\n\n<p>If you want the counter initialization code at the top instead of the bottom, you can create a decorator:</p>\n\n<pre><code>def static_var(varname, value):\n    def decorate(func):\n        setattr(func, varname, value)\n        return func\n    return decorate\n</code></pre>\n\n<p>Then use the code like this:</p>\n\n<pre><code>@static_var(\"counter\", 0)\ndef foo():\n    foo.counter += 1\n    print \"Counter is %d\" % foo.counter\n</code></pre>\n\n<p>It'll still require you to use the <code>foo.</code> prefix, unfortunately.</p>\n\n<hr>\n\n<p>EDIT (thanks to <a href=\"https://stackoverflow.com/questions/279561/what-is-the-python-equivalent-of-static-variables-inside-a-function/279586#comment41067162_279586\">ony</a>): This looks even nicer:</p>\n\n<pre><code>def static_vars(**kwargs):\n    def decorate(func):\n        for k in kwargs:\n            setattr(func, k, kwargs[k])\n        return func\n    return decorate\n\n@static_vars(counter=0)\ndef foo():\n    foo.counter += 1\n    print \"Counter is %d\" % foo.counter\n</code></pre>\n"
    },
    "515": {
        "question_id": "6908143",
        "answer_id": "19305076",
        "question": "<p>Should I put the shebang in my Python scripts? In what form?</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>#!/usr/bin/env python \n</code></pre>\n\n<p>or</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>#!/usr/local/bin/python\n</code></pre>\n\n<p>Are these equally portable? Which form is used most?</p>\n\n<p><strong><em>Note:</em></strong> the <a href=\"https://github.com/facebook/tornado\" rel=\"noreferrer\">tornado</a> project uses the shebang. On the other hand the <a href=\"https://www.djangoproject.com/\" rel=\"noreferrer\">Django</a> project doesn't.</p>\n",
        "answer": "<p>The shebang line in any script determines the script's ability to be executed like a standalone executable without typing <code>python</code> beforehand in the terminal or when double clicking it in a file manager (when configured properly). It isn't necessary but generally put there so when someone sees the file opened in an editor, they immediately know what they're looking at. However, which shebang line you use <strong>IS</strong> important.</p>\n\n<p><strong>Correct</strong> usage for Python 3 scripts is:</p>\n\n\n\n<pre class=\"lang-none prettyprint-override\"><code>#!/usr/bin/env python3\n</code></pre>\n\n<p>This defaults to version 3.latest. For Python 2.7.latest use <code>python2</code> in place of <code>python3</code>.</p>\n\n<p>The following <strong>should NOT be used</strong> (except for the rare case that you are writing code which is compatible with both Python 2.x and 3.x):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>#!/usr/bin/env python\n</code></pre>\n\n<p>The reason for these recommendations, given in <a href=\"https://www.python.org/dev/peps/pep-0394/#recommendation\" rel=\"noreferrer\" title=\"PEP 394\">PEP 394</a>, is that <code>python</code> can refer either to <code>python2</code> or <code>python3</code> on different systems. It currently refers to <code>python2</code> on most distributions, but that is likely to change at some point.</p>\n\n<p><strong>Also, DO NOT Use:</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>#!/usr/local/bin/python\n</code></pre>\n\n<blockquote>\n  <p>\"python may be installed at /usr/bin/python or /bin/python in those\n  cases, the above #! will fail.\"</p>\n</blockquote>\n\n<p>--<a href=\"https://mail.python.org/pipermail/tutor/2007-June/054816.html\" rel=\"noreferrer\">\"#!/usr/bin/env python\" vs \"#!/usr/local/bin/python\"</a></p>\n"
    },
    "516": {
        "question_id": "5100539",
        "answer_id": "5107878",
        "question": "<p>I could use some help complying with Django's CSRF protection mechanism via my AJAX post. I've followed the directions here:</p>\n\n<p><a href=\"http://docs.djangoproject.com/en/dev/ref/contrib/csrf/\" rel=\"noreferrer\">http://docs.djangoproject.com/en/dev/ref/contrib/csrf/</a></p>\n\n<p>I've copied the AJAX sample code they have on that page exactly:</p>\n\n<p><a href=\"http://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax\" rel=\"noreferrer\">http://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax</a></p>\n\n<p>I put an alert printing the contents of <code>getCookie('csrftoken')</code> before the <code>xhr.setRequestHeader</code> call and it is indeed populated with some data. I'm not sure how to verify that the token is correct, but I'm encouraged that it's finding and sending something.</p>\n\n<p>But Django is still rejecting my AJAX post.</p>\n\n<p>Here's my JavaScript:</p>\n\n<pre><code>$.post(\"/memorize/\", data, function (result) {\n    if (result != \"failure\") {\n        get_random_card();\n    }\n    else {\n        alert(\"Failed to save card data.\");\n    }\n});\n</code></pre>\n\n<p>Here's the error I'm seeing from Django:</p>\n\n<blockquote>\n  <p>[23/Feb/2011 22:08:29] \"POST /memorize/ HTTP/1.1\" 403 2332</p>\n</blockquote>\n\n<p>I'm sure I'm missing something, and maybe it's simple, but I don't know what it is.  I've searched around SO and saw some information about turning off the CSRF check for my view via the <code>csrf_exempt</code> decorator, but I find that unappealing.  I've tried that out and it works, but I'd rather get my POST to work the way Django was designed to expect it, if possible.</p>\n\n<p>Just in case it's helpful, here's the gist of what my view is doing:</p>\n\n<pre><code>def myview(request):\n\n    profile = request.user.profile\n\n    if request.method == 'POST':\n        \"\"\"\n        Process the post...\n        \"\"\"\n        return HttpResponseRedirect('/memorize/')\n    else: # request.method == 'GET'\n\n        ajax = request.GET.has_key('ajax')\n\n        \"\"\"\n        Some irrelevent code...\n        \"\"\"\n\n        if ajax:\n            response = HttpResponse()\n            profile.get_stack_json(response)\n            return response\n        else:\n            \"\"\"\n            Get data to send along with the content of the page.\n            \"\"\"\n\n        return render_to_response('memorize/memorize.html',\n                \"\"\" My data \"\"\"\n                context_instance=RequestContext(request))\n</code></pre>\n\n<p>Thanks for your replies!</p>\n",
        "answer": "<p><strong>Real solution</strong></p>\n\n<p>Ok, I managed to trace the problem down. It lies in the Javascript (as I suggested below) code.</p>\n\n<p>What you need is this:</p>\n\n<pre><code>$.ajaxSetup({ \n     beforeSend: function(xhr, settings) {\n         function getCookie(name) {\n             var cookieValue = null;\n             if (document.cookie &amp;&amp; document.cookie != '') {\n                 var cookies = document.cookie.split(';');\n                 for (var i = 0; i &lt; cookies.length; i++) {\n                     var cookie = jQuery.trim(cookies[i]);\n                     // Does this cookie string begin with the name we want?\n                     if (cookie.substring(0, name.length + 1) == (name + '=')) {\n                         cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                         break;\n                     }\n                 }\n             }\n             return cookieValue;\n         }\n         if (!(/^http:.*/.test(settings.url) || /^https:.*/.test(settings.url))) {\n             // Only send the token to relative URLs i.e. locally.\n             xhr.setRequestHeader(\"X-CSRFToken\", getCookie('csrftoken'));\n         }\n     } \n});\n</code></pre>\n\n<p>instead of the code posted in the official docs:\n<a href=\"https://docs.djangoproject.com/en/2.2/ref/csrf/\" rel=\"noreferrer\">https://docs.djangoproject.com/en/2.2/ref/csrf/</a></p>\n\n<p>The working code, comes from this Django entry: <a href=\"http://www.djangoproject.com/weblog/2011/feb/08/security/\" rel=\"noreferrer\">http://www.djangoproject.com/weblog/2011/feb/08/security/</a></p>\n\n<p>So the general solution is: \"use ajaxSetup handler instead of ajaxSend handler\". I don't know why it works. But it works for me :)</p>\n\n<p><strong>Previous post (without answer)</strong></p>\n\n<p>I'm experiencing the same problem actually.</p>\n\n<p>It occurs after updating to Django 1.2.5 - there were no errors with AJAX POST requests in Django 1.2.4 (AJAX wasn't protected in any way, but it worked just fine).</p>\n\n<p>Just like OP, I have tried the JavaScript snippet posted in Django documentation. I'm using jQuery 1.5. I'm also using the \"django.middleware.csrf.CsrfViewMiddleware\" middleware.</p>\n\n<p>I tried to follow the the middleware code and I know that it fails on this:</p>\n\n<pre><code>request_csrf_token = request.META.get('HTTP_X_CSRFTOKEN', '')\n</code></pre>\n\n<p>and then</p>\n\n<pre><code>if request_csrf_token != csrf_token:\n    return self._reject(request, REASON_BAD_TOKEN)\n</code></pre>\n\n<p>this \"if\" is true, because \"request_csrf_token\" is empty.</p>\n\n<p>Basically it means that the header is NOT set. So is there anything wrong with this JS line:</p>\n\n<pre><code>xhr.setRequestHeader(\"X-CSRFToken\", getCookie('csrftoken'));\n</code></pre>\n\n<p>?</p>\n\n<p>I hope that provided details will help us in resolving the issue :)</p>\n"
    },
    "517": {
        "question_id": "489861",
        "answer_id": "498505",
        "question": "<p>I need to lock a file for writing in Python. It will be accessed from multiple Python processes at once. I have found some solutions online, but most fail for my purposes as they are often only Unix based or Windows based.</p>\n",
        "answer": "<p>Alright, so I ended up going with the code I wrote <strike><a href=\"http://www.evanfosmark.com/2009/01/cross-platform-file-locking-support-in-python/\" rel=\"noreferrer\">here, on my website</a></strike><sup> <a href=\"https://web.archive.org/web/20140531203736/http://www.evanfosmark.com:80/2009/01/cross-platform-file-locking-support-in-python/\" rel=\"noreferrer\">link is dead, view on archive.org</a></sup> (<a href=\"https://github.com/dmfrey/FileLock\" rel=\"noreferrer\">also available on GitHub</a>). I can use it in the following fashion:</p>\n\n<pre><code>from filelock import FileLock\n\nwith FileLock(\"myfile.txt\"):\n    # work with the file as it is now locked\n    print(\"Lock acquired.\")\n</code></pre>\n"
    },
    "518": {
        "question_id": "21415661",
        "answer_id": "21415990",
        "question": "<p>I'm working with boolean index in Pandas.\nThe question is why the statement:</p>\n\n<pre><code>a[(a['some_column']==some_number) &amp; (a['some_other_column']==some_other_number)]\n</code></pre>\n\n<p>works fine whereas</p>\n\n<pre><code>a[(a['some_column']==some_number) and (a['some_other_column']==some_other_number)]\n</code></pre>\n\n<p>exits with error?</p>\n\n<p>Example:</p>\n\n<pre><code>a=pd.DataFrame({'x':[1,1],'y':[10,20]})\n\nIn: a[(a['x']==1)&amp;(a['y']==10)]\nOut:    x   y\n     0  1  10\n\nIn: a[(a['x']==1) and (a['y']==10)]\nOut: ValueError: The truth value of an array with more than one element is ambiguous.     Use a.any() or a.all()\n</code></pre>\n",
        "answer": "<p>When you say</p>\n\n<pre><code>(a['x']==1) and (a['y']==10)\n</code></pre>\n\n<p>You are implicitly asking Python to convert <code>(a['x']==1)</code> and <code>(a['y']==10)</code> to boolean values. </p>\n\n<p>NumPy arrays (of length greater than 1) and Pandas objects such as Series do not have a boolean value -- in other words, they raise </p>\n\n<pre><code>ValueError: The truth value of an array is ambiguous. Use a.empty, a.any() or a.all().\n</code></pre>\n\n<p>when used as a boolean value. That's because its <a href=\"http://pandas.pydata.org/pandas-docs/dev/gotchas.html#using-if-truth-statements-with-pandas\" rel=\"noreferrer\">unclear when it should be True or False</a>. Some users might assume they are True if they have non-zero length, like a Python list. Others might desire for it to be True only if <strong>all</strong> its elements are True. Others might want it to be True if <strong>any</strong> of its elements are True. </p>\n\n<p>Because there are so many conflicting expectations, the designers of NumPy and Pandas refuse to guess, and instead raise a ValueError.</p>\n\n<p>Instead, you must be explicit, by calling the <code>empty()</code>, <code>all()</code> or <code>any()</code> method to indicate which behavior you desire.</p>\n\n<p>In this case, however, it looks like you do not want boolean evaluation, you want <strong>element-wise</strong> logical-and. That is what the <code>&amp;</code> binary operator performs:</p>\n\n<pre><code>(a['x']==1) &amp; (a['y']==10)\n</code></pre>\n\n<p>returns a boolean array. </p>\n\n<hr>\n\n<p>By the way, as <a href=\"https://stackoverflow.com/questions/21415661/logic-operator-for-boolean-indexing-in-pandas/21415990?noredirect=1#comment77317569_21415990\">alexpmil notes</a>, \nthe parentheses are mandatory since <code>&amp;</code> has a higher <a href=\"https://docs.python.org/3/reference/expressions.html#operator-precedence\" rel=\"noreferrer\">operator precedence</a> than <code>==</code>.\nWithout the parentheses, <code>a['x']==1 &amp; a['y']==10</code> would be evaluated as <code>a['x'] == (1 &amp; a['y']) == 10</code> which would in turn be equivalent to the chained comparison <code>(a['x'] == (1 &amp; a['y'])) and ((1 &amp; a['y']) == 10)</code>. That is an expression of the form <code>Series and Series</code>.\nThe use of <code>and</code> with two Series would again trigger the same <code>ValueError</code> as above. That's why the parentheses are mandatory.</p>\n"
    },
    "519": {
        "question_id": "4432208",
        "answer_id": "4432235",
        "question": "<p>What does the <code>%</code> in a calculation? I can't seem to work out what it does.</p>\n\n<p>Does it work out a percent of the calculation for example: <code>4 % 2</code> is apparently equal to 0. How?</p>\n",
        "answer": "<blockquote>\n  <p>The % (modulo) operator yields the remainder from the division of the first argument by the second. The numeric arguments are first converted to a common type. A zero right argument raises the ZeroDivisionError exception. The arguments may be floating point numbers, e.g., 3.14%0.7 equals 0.34 (since 3.14 equals 4*0.7 + 0.34.) The modulo operator always yields a result with the same sign as its second operand (or zero); the absolute value of the result is strictly smaller than the absolute value of the second operand [2].</p>\n</blockquote>\n\n<p>Taken from <a href=\"http://docs.python.org/reference/expressions.html\" rel=\"noreferrer\">http://docs.python.org/reference/expressions.html</a></p>\n\n<p><strong>Example 1:</strong> \n<code>6%2</code> evaluates to <code>0</code> because there's no remainder if 6 is divided by 2 ( 3 times ).</p>\n\n<p><strong>Example 2</strong>: <code>7%2</code> evaluates to <code>1</code> because there's a remainder of <code>1</code> when 7 is divided by 2 ( 3 times ).</p>\n\n<p>So to summarise that, it returns the remainder of a division operation, or <code>0</code> if there is no remainder.  So <code>6%2</code> means find the remainder of 6 divided by 2. </p>\n"
    },
    "520": {
        "question_id": "280435",
        "answer_id": "280441",
        "question": "<p>I want to use input from a user as a regex pattern for a search over some text.  It works, but how I can handle cases where user puts characters that have meaning in regex?  For example, the user wants to search for Word <code>(s)</code>: regex engine will take the <code>(s)</code> as a group.  I want it to treat it like a string <code>\"(s)\"</code>.  I can run <code>replace</code> on user input and replace the <code>(</code> with <code>\\(</code> and the <code>)</code> with <code>\\)</code> but the problem is I will need to do replace for every possible regex symbol. Do you know some better way ?</p>\n",
        "answer": "<p>Use the <code>re.escape()</code> function for this:</p>\n\n<p><a href=\"http://docs.python.org/library/re.html#re.escape\" rel=\"noreferrer\">4.2.3 <code>re</code> Module Contents</a></p>\n\n<blockquote>\n  <p><strong>escape(string)</strong></p>\n  \n  <p>Return string with all non-alphanumerics backslashed; this is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it.</p>\n</blockquote>\n\n<p>A simplistic example, search any occurence of the provided string optionally followed by 's', and return the match object.</p>\n\n<pre><code>def simplistic_plural(word, text):\n    word_or_plural = re.escape(word) + 's?'\n    return re.match(word_or_plural, text)\n</code></pre>\n"
    },
    "521": {
        "question_id": "20639180",
        "answer_id": "20639246",
        "question": "<p>I have no problem for understanding this:</p>\n\n<pre><code>a = [1,2,3,4]\nb = [x for x in a]\n</code></pre>\n\n<p>I thought that was all, but then I found this snippet:</p>\n\n<pre><code>a = [[1,2],[3,4],[5,6]]\nb = [x for xs in a for x in xs]\n</code></pre>\n\n<p>Which makes <code>b = [1,2,3,4,5,6]</code>. The problem is I'm having troubles to understand the syntax in <code>[x for xs in a for x in xs]</code>, Could anyone explain how it works? </p>\n",
        "answer": "<p>Ah, the incomprehensible \"nested\" comprehensions.  Loops unroll in the same order as in the comprehension.</p>\n\n<pre><code>[leaf for branch in tree for leaf in branch]\n</code></pre>\n\n<p>It helps to think of it like this.</p>\n\n<pre><code>for branch in tree:\n    for leaf in branch:\n        yield leaf\n</code></pre>\n\n<p>The <a href=\"http://www.python.org/dev/peps/pep-0202/\" rel=\"noreferrer\">PEP202</a> asserts this syntax with \"the last index varying fastest\" is \"the Right One\", notably without an explanation of <em>why</em>.  </p>\n"
    },
    "522": {
        "question_id": "12281975",
        "answer_id": "12282040",
        "question": "<p>I am trying to convert time-stamps of the format \"2012-07-24T23:14:29-07:00\" \nto datetime objects in python using strptime method. The problem is with the time offset at the end(-07:00). Without the offset i can successfully do</p>\n\n<pre><code>time_str = \"2012-07-24T23:14:29\"\n\ntime_obj=datetime.datetime.strptime(time_str,'%Y-%m-%dT%H:%M:%S')\n</code></pre>\n\n<p>But with the offset i tried</p>\n\n<pre><code>time_str = \"2012-07-24T23:14:29-07:00\"\n\ntime_obj=datetime.datetime.strptime(time_str,'%Y-%m-%dT%H:%M:%S-%z').\n</code></pre>\n\n<p>But it gives a Value error saying \"z\" is a bad directive.</p>\n\n<p>Any ideas for a work around?</p>\n",
        "answer": "<p>The Python 2 <code>strptime()</code> function indeed does not support the <code>%z</code> format for timezones (because the underlying <a href=\"http://docs.python.org/library/time.html#time.strptime\" rel=\"noreferrer\"><code>time.strptime()</code> function</a> doesn't support it). You have two options:</p>\n\n<ul>\n<li><p>Ignore the timezone when parsing with <code>strptime</code>:</p>\n\n<pre><code>time_obj = datetime.datetime.strptime(time_str[:19], '%Y-%m-%dT%H:%M:%S')\n</code></pre></li>\n<li><p>use the <a href=\"http://labix.org/python-dateutil\" rel=\"noreferrer\"><code>dateutil</code> module</a>, it's parse function <em>does</em> deal with timezones:</p>\n\n<pre><code>from dateutil.parser import parse\ntime_obj = parse(time_str)\n</code></pre></li>\n</ul>\n\n<p>Quick demo on the command prompt:</p>\n\n<pre><code>&gt;&gt;&gt; from dateutil.parser import parse\n&gt;&gt;&gt; parse(\"2012-07-24T23:14:29-07:00\")\ndatetime.datetime(2012, 7, 24, 23, 14, 29, tzinfo=tzoffset(None, -25200))\n</code></pre>\n\n<p>You could also upgrade to Python 3.2 or newer, where timezone support has been improved to the point that <code>%z</code> would work, provided you remove the last <code>:</code> from the input, and the <code>-</code> from before the <code>%z</code>:</p>\n\n<pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; time_str = \"2012-07-24T23:14:29-07:00\"\n&gt;&gt;&gt; datetime.datetime.strptime(time_str, '%Y-%m-%dT%H:%M:%S%z')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/Users/mj/Development/Library/buildout.python/parts/opt/lib/python3.4/_strptime.py\", line 500, in _strptime_datetime\n    tt, fraction = _strptime(data_string, format)\n  File \"/Users/mj/Development/Library/buildout.python/parts/opt/lib/python3.4/_strptime.py\", line 337, in _strptime\n    (data_string, format))\nValueError: time data '2012-07-24T23:14:29-07:00' does not match format '%Y-%m-%dT%H:%M:%S%z'\n&gt;&gt;&gt; ''.join(time_str.rsplit(':', 1))\n'2012-07-24T23:14:29-0700'\n&gt;&gt;&gt; datetime.datetime.strptime(''.join(time_str.rsplit(':', 1)), '%Y-%m-%dT%H:%M:%S%z')\ndatetime.datetime(2012, 7, 24, 23, 14, 29, tzinfo=datetime.timezone(datetime.timedelta(-1, 61200)))\n</code></pre>\n"
    },
    "523": {
        "question_id": "14241133",
        "answer_id": "14241195",
        "question": "<p>I have a list of strings such as:  </p>\n\n<pre><code>names = ['apple','orange','banana'] \n</code></pre>\n\n<p>And I would like to create a list for each element in the list, that would be named exactly as the string:  </p>\n\n<pre><code>apple = []  \norange = []  \nbanana = []  \n</code></pre>\n\n<p>How can I do that in Python?  </p>\n",
        "answer": "<p>You would do this by creating a <code>dict</code>:</p>\n\n<pre><code>fruits = {k:[] for k in names}\n</code></pre>\n\n<p>Then access each by (for eg:) <code>fruits['apple']</code> - you do not want to go down the road of separate variables!</p>\n"
    },
    "524": {
        "question_id": "899103",
        "answer_id": "899176",
        "question": "<p>Is this the cleanest way to write a list to a file, since <code>writelines()</code> doesn't insert newline characters?</p>\n\n<pre><code>file.writelines([\"%s\\n\" % item  for item in list])\n</code></pre>\n\n<p>It seems like there would be a standard way...</p>\n",
        "answer": "<p>You can use a loop:</p>\n\n<pre><code>with open('your_file.txt', 'w') as f:\n    for item in my_list:\n        f.write(\"%s\\n\" % item)\n</code></pre>\n\n<p>In Python 2, you can also use</p>\n\n<pre><code>with open('your_file.txt', 'w') as f:\n    for item in my_list:\n        print &gt;&gt; f, item\n</code></pre>\n\n<p>If you're keen on a single function call, at least remove the square brackets <code>[]</code>, so that the strings to be printed get made one at a time (a genexp rather than a listcomp) -- no reason to take up all the memory required to materialize the whole list of strings.</p>\n"
    },
    "525": {
        "question_id": "403421",
        "answer_id": "403426",
        "question": "<p>I've got a list of Python objects that I'd like to sort by an attribute of the objects themselves.  The list looks like:</p>\n\n<pre><code>&gt;&gt;&gt; ut\n[&lt;Tag: 128&gt;, &lt;Tag: 2008&gt;, &lt;Tag: &lt;&gt;, &lt;Tag: actionscript&gt;, &lt;Tag: addresses&gt;,\n &lt;Tag: aes&gt;, &lt;Tag: ajax&gt; ...]\n</code></pre>\n\n<p>Each object has a count:</p>\n\n<pre><code>&gt;&gt;&gt; ut[1].count\n1L\n</code></pre>\n\n<p>I need to sort the list by number of counts descending.</p>\n\n<p>I've seen several methods for this, but I'm looking for best practice in Python.</p>\n",
        "answer": "<pre><code># To sort the list in place...\nut.sort(key=lambda x: x.count, reverse=True)\n\n# To return a new list, use the sorted() built-in function...\nnewlist = sorted(ut, key=lambda x: x.count, reverse=True)\n</code></pre>\n\n<p>More on <a href=\"http://wiki.python.org/moin/HowTo/Sorting#Sortingbykeys\" rel=\"noreferrer\">sorting by keys &raquo;</a> </p>\n"
    },
    "526": {
        "question_id": "5929107",
        "answer_id": "5929165",
        "question": "<p>I have a problem with the transfer of variable 'insurance_mode' by the decorator. I would do it by the following decorator statement:</p>\n\n<pre><code> @execute_complete_reservation(True)\n def test_booking_gta_object(self):\n     self.test_select_gta_object()\n</code></pre>\n\n<p>but unfortunately, this statement does not work. Perhaps maybe there is better way to solve this problem.</p>\n\n<pre><code>def execute_complete_reservation(test_case,insurance_mode):\n    def inner_function(self,*args,**kwargs):\n        self.test_create_qsf_query()\n        test_case(self,*args,**kwargs)\n        self.test_select_room_option()\n        if insurance_mode:\n            self.test_accept_insurance_crosseling()\n        else:\n            self.test_decline_insurance_crosseling()\n        self.test_configure_pax_details()\n        self.test_configure_payer_details\n\n    return inner_function\n</code></pre>\n",
        "answer": "<p>You mean <code>def test_booking_gta_object</code>, right? Anyway, the syntax for decorators with arguments is a bit different - the decorator with arguments should return a function that will <em>take a function</em> and return another function. So it should really return a normal decorator. A bit confusing, right? What I mean is:</p>\n\n<pre><code>def decorator_factory(argument):\n    def decorator(function):\n        def wrapper(*args, **kwargs):\n            funny_stuff()\n            something_with_argument(argument)\n            result = function(*args, **kwargs)\n            more_funny_stuff()\n            return result\n        return wrapper\n    return decorator\n</code></pre>\n\n<p><a href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=240845\" rel=\"noreferrer\">Here</a> you can read more on the subject - it's also possible to implement this using callable objects and that is also explained there.</p>\n"
    },
    "527": {
        "question_id": "431684",
        "answer_id": "431715",
        "question": "<p><code>cd</code> as in the shell command to change the working directory.</p>\n\n<p>How do I change the current working directory in Python?</p>\n",
        "answer": "<p>You can change the working directory with:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import os\n\nos.chdir(path)\n</code></pre>\n\n<p>There are two best practices to follow when using this method:</p>\n\n<ol>\n<li>Catch the exception (WindowsError, OSError) on invalid path.  If the exception is thrown, do not perform any recursive operations, especially destructive ones.  They will operate on the old path and not the new one.</li>\n<li>Return to your old directory when you're done.  This can be done in an exception-safe manner by wrapping your chdir call in a context manager, like Brian M. Hunt did in <a href=\"https://stackoverflow.com/questions/431684/how-do-i-cd-in-python/13197763#13197763\">his answer</a>.</li>\n</ol>\n\n<p>Changing the current working directory in a subprocess does not change the current working directory in the parent process.  This is true of the Python interpreter as well.  You cannot use <code>os.chdir()</code> to change the CWD of the calling process.</p>\n"
    },
    "528": {
        "question_id": "22171558",
        "answer_id": "22171593",
        "question": "<p>What does <code>for row_number, row in enumerate(cursor):</code> do in Python?</p>\n\n<p>What does <code>enumerate</code> mean in this context?</p>\n",
        "answer": "<p>The <a href=\"http://docs.python.org/2/library/functions.html#enumerate\" rel=\"noreferrer\"><code>enumerate()</code> function</a> adds a counter to an iterable.</p>\n\n<p>So for each element in <code>cursor</code>, a tuple is produced with <code>(counter, element)</code>; the <code>for</code> loop binds that to <code>row_number</code> and <code>row</code>, respectively.</p>\n\n<p>Demo:</p>\n\n<pre><code>&gt;&gt;&gt; elements = ('foo', 'bar', 'baz')\n&gt;&gt;&gt; for elem in elements:\n...     print elem\n... \nfoo\nbar\nbaz\n&gt;&gt;&gt; for count, elem in enumerate(elements):\n...     print count, elem\n... \n0 foo\n1 bar\n2 baz\n</code></pre>\n\n<p>By default, <code>enumerate()</code> starts counting at <code>0</code> but if you give it a second integer argument, it'll start from that number instead:</p>\n\n<pre><code>&gt;&gt;&gt; for count, elem in enumerate(elements, 42):\n...     print count, elem\n... \n42 foo\n43 bar\n44 baz\n</code></pre>\n\n<p>If you were to re-implement <code>enumerate()</code> in Python, here are two ways of achieving that; one using <a href=\"https://docs.python.org/3/library/itertools.html#itertools.count\" rel=\"noreferrer\"><code>itertools.count()</code></a> to do the counting, the other manually counting in a <a href=\"https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do\">generator function</a>:</p>\n\n<pre><code>from itertools import count\n\ndef enumerate(it, start=0):\n    # return an iterator that adds a counter to each element of it\n    return zip(count(start), it)\n</code></pre>\n\n<p>and</p>\n\n<pre><code>def enumerate(it, start=0):\n    count = start\n    for elem in it:\n        yield (count, elem)\n        count += 1\n</code></pre>\n\n<p>The <a href=\"https://github.com/python/cpython/blob/master/Objects/enumobject.c\" rel=\"noreferrer\">actual implementation in C</a> is closer to the latter, with optimisations to reuse a single tuple object for the common <code>for i, ...</code> unpacking case and using a standard C integer value for the counter until the counter becomes too large to avoid using a Python integer object (which is unbounded).</p>\n"
    },
    "529": {
        "question_id": "969285",
        "answer_id": "3908349",
        "question": "<p>I'm getting a datetime string in a format like \"2009-05-28T16:15:00\" (this is ISO 8601, I believe). One hackish option seems to be to parse the string using <code>time.strptime</code> and passing the first six elements of the tuple into the datetime constructor, like:</p>\n\n<pre><code>datetime.datetime(*time.strptime(\"2007-03-04T21:08:12\", \"%Y-%m-%dT%H:%M:%S\")[:6])\n</code></pre>\n\n<p>I haven't been able to find a \"cleaner\" way of doing this. Is there one?</p>\n",
        "answer": "<p>I prefer using the <a href=\"https://pypi.python.org/pypi/python-dateutil/2.6.0\" rel=\"noreferrer\">dateutil</a> library for timezone handling and generally solid date parsing. If you were to get an ISO 8601 string like: 2010-05-08T23:41:54.000Z you'd have a fun time parsing that with strptime, especially if you didn't know up front whether or not the timezone was included. pyiso8601 has a couple of issues (check their tracker) that I ran into during my usage and it hasn't been updated in a few years. dateutil, by contrast, has been active and worked for me: </p>\n\n<pre><code>import dateutil.parser\nyourdate = dateutil.parser.parse(datestring)\n</code></pre>\n"
    },
    "530": {
        "question_id": "1196074",
        "answer_id": "1196122",
        "question": "<p>I'm trying to port a shell script to the much more readable python version. The original shell script starts several processes (utilities, monitors, etc.) in the background with \"&amp;\". How can I achieve the same effect in python? I'd like these processes not to die when the python scripts complete. I am sure it's related to the concept of a daemon somehow, but I couldn't find how to do this easily.</p>\n",
        "answer": "<p><strong>Note</strong>: This answer is less current than it was when posted in 2009. Using the <code>subprocess</code> module shown in other answers is now recommended <a href=\"https://docs.python.org/2/library/os.html?highlight=os#os.spawnl\" rel=\"noreferrer\">in the docs</a></p>\n\n<blockquote>\n  <p>(Note that the subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using these functions.)</p>\n</blockquote>\n\n<hr>\n\n<p>If you want your process to start in the background you can either use <code>system()</code> and call it in the same way your shell script did, or you can <code>spawn</code> it:</p>\n\n<pre><code>import os\nos.spawnl(os.P_DETACH, 'some_long_running_command')\n</code></pre>\n\n<p>(or, alternatively, you may try the less portable <code>os.P_NOWAIT</code> flag).</p>\n\n<p>See the <a href=\"https://docs.python.org/2/library/os.html#os.spawnl\" rel=\"noreferrer\">documentation here</a>.  </p>\n"
    },
    "531": {
        "question_id": "10667960",
        "answer_id": "12864892",
        "question": "<p>I'm working on a simple script that involves CAS, jspring security check, redirection, etc.  I would like to use Kenneth Reitz's python requests because it's a great piece of work!  However, CAS requires getting validated via SSL so I have to get past that step first.  I don't know what Python requests is wanting?  Where is this SSL certificate supposed to reside?</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"./test.py\", line 24, in &lt;module&gt;\n  response = requests.get(url1, headers=headers)\n  File \"build/bdist.linux-x86_64/egg/requests/api.py\", line 52, in get\n  File \"build/bdist.linux-x86_64/egg/requests/api.py\", line 40, in request\n  File \"build/bdist.linux-x86_64/egg/requests/sessions.py\", line 209, in request \n  File \"build/bdist.linux-x86_64/egg/requests/models.py\", line 624, in send\n  File \"build/bdist.linux-x86_64/egg/requests/models.py\", line 300, in _build_response\n  File \"build/bdist.linux-x86_64/egg/requests/models.py\", line 611, in send\nrequests.exceptions.SSLError: [Errno 1] _ssl.c:503: error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed\n</code></pre>\n",
        "answer": "<p>The problem you are having is caused by an untrusted SSL certificate.</p>\n\n<p>Like @dirk mentioned in a previous comment, the <em>quickest</em> fix is setting <code>verify=False</code>:</p>\n\n<pre><code>requests.get('https://example.com', verify=False)\n</code></pre>\n\n<p>Please note that this will cause the certificate not to be verified. <strong>This will expose your application to security risks, such as man-in-the-middle attacks.</strong> </p>\n\n<p>Of course, apply judgment. As mentioned in the comments, this <em>may</em> be acceptable for quick/throwaway applications/scripts, <em>but really should not go to production software</em>. </p>\n\n<p>If just skipping the certificate check is not acceptable in your particular context, consider the following options, your best option is to set the <code>verify</code> parameter to a string that is the path of the <code>.pem</code> file of the certificate (which you should obtain by some sort of secure means).</p>\n\n<p>So, as of version 2.0, the <code>verify</code> parameter accepts the following values, with their respective semantics:</p>\n\n<ul>\n<li><code>True</code>: causes the certificate to validated against the library's own trusted certificate authorities (Note: you can see which Root Certificates Requests uses via the Certifi library, a trust database of RCs extracted from Requests: <a href=\"http://certifiio.readthedocs.org/en/latest/\" rel=\"noreferrer\" title=\"Certifi - Trust Database for Humans\">Certifi - Trust Database for Humans</a>).</li>\n<li><code>False</code>: bypasses certificate validation <em>completely</em>.</li>\n<li>Path to a CA_BUNDLE file for Requests to use to validate the certificates.</li>\n</ul>\n\n<p>Source: <a href=\"http://docs.python-requests.org/en/master/user/advanced/?highlight=ssl#ssl-cert-verification\" rel=\"noreferrer\">Requests - SSL Cert Verification</a></p>\n\n<p>Also take a look at the <code>cert</code> parameter on the same link.</p>\n"
    },
    "532": {
        "question_id": "2084508",
        "answer_id": "2084521",
        "question": "<p>Does any standard \"comes with batteries\" method exist to clear the terminal screen from a Python script, or do I have to go curses (the libraries, not the words)?</p>\n",
        "answer": "<p>What about escape sequences?</p>\n\n<pre><code>print(chr(27) + \"[2J\")\n</code></pre>\n"
    },
    "533": {
        "question_id": "6284396",
        "answer_id": "6285203",
        "question": "<p>itertools.permutations generates where its elements are treated as unique based on their position, not on their value. So basically I want to avoid duplicates like this:</p>\n\n<pre><code>&gt;&gt;&gt; list(itertools.permutations([1, 1, 1]))\n[(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)]\n</code></pre>\n\n<p>Filtering afterwards is not possible because the amount of permutations is too large in my case.</p>\n\n<p>Does anybody know of a suitable algorithm for this?</p>\n\n<p>Thank you very much!</p>\n\n<p><strong>EDIT:</strong></p>\n\n<p>What I basically want is the following:</p>\n\n<pre><code>x = itertools.product((0, 1, 'x'), repeat=X)\nx = sorted(x, key=functools.partial(count_elements, elem='x'))\n</code></pre>\n\n<p>which is not possible because <code>sorted</code> creates a list and the output of itertools.product is too large.</p>\n\n<p>Sorry, I should have described the actual problem.</p>\n",
        "answer": "<pre><code>class unique_element:\n    def __init__(self,value,occurrences):\n        self.value = value\n        self.occurrences = occurrences\n\ndef perm_unique(elements):\n    eset=set(elements)\n    listunique = [unique_element(i,elements.count(i)) for i in eset]\n    u=len(elements)\n    return perm_unique_helper(listunique,[0]*u,u-1)\n\ndef perm_unique_helper(listunique,result_list,d):\n    if d &lt; 0:\n        yield tuple(result_list)\n    else:\n        for i in listunique:\n            if i.occurrences &gt; 0:\n                result_list[d]=i.value\n                i.occurrences-=1\n                for g in  perm_unique_helper(listunique,result_list,d-1):\n                    yield g\n                i.occurrences+=1\n\n\n\n\na = list(perm_unique([1,1,2]))\nprint(a)\n</code></pre>\n\n<p>result:</p>\n\n<pre><code>[(2, 1, 1), (1, 2, 1), (1, 1, 2)]\n</code></pre>\n\n<p>EDIT (how this works):  </p>\n\n<p>I rewrote the upper program to be longer but more readable</p>\n\n<p>I usually have a hard time to explain how something works, but let me try.\nIn order to understand how this works you have to understand similar, but a simpler program that would yield all permutations with repetition.</p>\n\n<pre><code>def permutations_with_replacement(elements,n):\n    return permutations_helper(elements,[0]*n,n-1)#this is generator\n\ndef permutations_helper(elements,result_list,d):\n    if d&lt;0:\n        yield tuple(result_list)\n    else:\n        for i in elements:\n            result_list[d]=i\n            all_permutations = permutations_helper(elements,result_list,d-1)#this is generator\n            for g in all_permutations:\n                yield g\n</code></pre>\n\n<p>This program is obviously much simpler:\nd stands for depth in permutations_helper and has two functions. One function is stopping condition of our recursive algorithm and other is for result list, that is passed around.</p>\n\n<p>Instead of returning each result, we yield it. If there were no function/operator <code>yield</code> we had to push result in some queue at point of stopping condition. But this way once stopping condition is meet result is propagated trough all stack up to the caller. That is purpose of<br>\n<code>for g in  perm_unique_helper(listunique,result_list,d-1): yield g</code>\nso each result is propagated up to caller.</p>\n\n<p>Back to the original program:\nWe have list of unique elements. Before we can use each element, we have to check how many of them are still available to push it on result_list. Working of this program is very similar compared to <code>permutations_with_replacement</code> difference is that each element can not be repeated more times that is in perm_unique_helper.</p>\n"
    },
    "534": {
        "question_id": "4198906",
        "answer_id": "4199355",
        "question": "<p>Comprehensions are having some unexpected interactions with scoping. Is this the expected behavior?</p>\n\n<p>I've got a method:</p>\n\n<pre><code>def leave_room(self, uid):\n  u = self.user_by_id(uid)\n  r = self.rooms[u.rid]\n\n  other_uids = [ouid for ouid in r.users_by_id.keys() if ouid != u.uid]\n  other_us = [self.user_by_id(uid) for uid in other_uids]\n\n  r.remove_user(uid) # OOPS! uid has been re-bound by the list comprehension above\n\n  # Interestingly, it's rebound to the last uid in the list, so the error only shows\n  # up when len &gt; 1\n</code></pre>\n\n<p>At the risk of whining, this is a brutal source of errors. As I write new code, I just occasionally find very weird errors due to rebinding -- even now that I know it's a problem. I need to make a rule like \"always preface temp vars in list comprehensions with underscore\", but even that's not fool-proof.</p>\n\n<p>The fact that there's this random time-bomb waiting kind of negates all the nice \"ease of use\" of list comprehensions.</p>\n",
        "answer": "<p>List comprehensions leak the loop control variable in Python 2 but not in Python 3.  Here's Guido van Rossum (creator of Python) <a href=\"http://python-history.blogspot.com/2010/06/from-list-comprehensions-to-generator.html\" rel=\"noreferrer\">explaining</a> the history behind this:</p>\n\n<blockquote>\n  <p>We also made another change in Python\n  3, to improve equivalence between list\n  comprehensions and generator\n  expressions. In Python 2, the list\n  comprehension \"leaks\" the loop control\n  variable into the surrounding scope:</p>\n\n<pre><code>x = 'before'\na = [x for x in 1, 2, 3]\nprint x # this prints '3', not 'before'\n</code></pre>\n  \n  <p>This was an artifact of the original\n  implementation of list comprehensions;\n  it was one of Python's \"dirty little\n  secrets\" for years. It started out as\n  an intentional compromise to make list\n  comprehensions blindingly fast, and\n  while it was not a common pitfall for\n  beginners, it definitely stung people\n  occasionally. For generator\n  expressions we could not do this.\n  Generator expressions are implemented\n  using generators, whose execution\n  requires a separate execution frame.\n  Thus, generator expressions\n  (especially if they iterate over a\n  short sequence) were less efficient\n  than list comprehensions.</p>\n  \n  <p>However, in Python 3, we decided to\n  fix the \"dirty little secret\" of list\n  comprehensions by using the same\n  implementation strategy as for\n  generator expressions. Thus, in Python\n  3, the above example (after\n  modification to use print(x) :-) will\n  print 'before', proving that the 'x'\n  in the list comprehension temporarily\n  shadows but does not override the 'x'\n  in the surrounding scope.</p>\n</blockquote>\n"
    },
    "535": {
        "question_id": "3431676",
        "answer_id": "3431699",
        "question": "<p>I'm trying to create functions inside of a loop:</p>\n\n<pre><code>functions = []\n\nfor i in range(3):\n    def f():\n        return i\n\n    # alternatively: f = lambda: i\n\n    functions.append(f)\n</code></pre>\n\n<p>The problem is that all functions end up being the same. Instead of returning 0, 1, and 2, all three functions return 2:</p>\n\n<pre><code>print([f() for f in functions])\n# expected output: [0, 1, 2]\n# actual output:   [2, 2, 2]\n</code></pre>\n\n<p>Why is this happening, and what should I do to get 3 different functions that output 0, 1, and 2 respectively?</p>\n",
        "answer": "<p>You're running into a problem with <em>late binding</em> -- each function looks up <code>i</code> as late as possible (thus, when called after the end of the loop, <code>i</code> will be set to <code>2</code>).  </p>\n\n<p>Easily fixed by forcing early binding: change <code>def f():</code> to <code>def f(i=i):</code> like this:</p>\n\n<pre><code>def f(i=i):\n    return i\n</code></pre>\n\n<p>Default values (the right-hand <code>i</code> in <code>i=i</code> is a default value for argument name <code>i</code>, which is the left-hand <code>i</code> in <code>i=i</code>) are looked up at <code>def</code> time, not at <code>call</code> time, so essentially they're a way to specifically looking for early binding.</p>\n\n<p>If you're worried about <code>f</code> getting an extra argument (and thus potentially being called erroneously), there's a more sophisticated way which involved using a closure as a \"function factory\":</p>\n\n<pre><code>def make_f(i):\n    def f():\n        return i\n    return f\n</code></pre>\n\n<p>and in your loop use <code>f = make_f(i)</code> instead of the <code>def</code> statement.</p>\n"
    },
    "536": {
        "question_id": "25753632",
        "answer_id": "25753719",
        "question": "<p>Hey I am new to python and am using tkinter for my gui. I am having trouble using the \"after\" method.\nThe goal is to make a random letter appear every 5 seconds.</p>\n\n<p>Here is my code:</p>\n\n<pre><code>import random\nimport time\nfrom tkinter import *\n\n\nroot = Tk()\n\nw = Label(root, text=\"GAME\")\nw.pack()\n\nframe = Frame(root, width=300, height=300)\nframe.pack()\n\nL1 = Label(root, text=\"User Name\")\nL1.pack(side=LEFT)\nE1 = Entry(root, bd =5)\nE1.pack(side=LEFT)\n\n\ntiles_letter = ['a', 'b', 'c', 'd', 'e']\n\n\nwhile len(tiles_letter) &gt; 0:\n    rand = random.choice(tiles_letter)\n    tile_frame = Label(frame, text=rand)\n    tile_frame.pack()\n    frame.after(500)\n    tiles_letter.remove(rand)  # remove that tile from list of tiles\n\nroot.mainloop()\n</code></pre>\n\n<p>can someone please help me --- the problem is definitely frame.after(500):\ni'm not sure if it is correct to use \"frame\" and I don't know what which argument follows the 500.</p>\n\n<p>Thanks</p>\n",
        "answer": "<p>You need to give a function to be called after the time delay as the second argument to <a href=\"http://effbot.org/tkinterbook/widget.htm#Tkinter.Widget.after-method\"><code>after</code></a>:</p>\n\n<blockquote>\n  <p><strong>after(delay_ms, callback=None, *args)</strong></p>\n  \n  <p>Registers an alarm callback that is called after a given time.</p>\n</blockquote>\n\n<p>So what you really want to do is this:</p>\n\n<pre><code>tiles_letter = ['a', 'b', 'c', 'd', 'e']\n\ndef add_letter():\n    rand = random.choice(tiles_letter)\n    tile_frame = Label(frame, text=rand)\n    tile_frame.pack()\n    root.after(500, add_letter)\n    tiles_letter.remove(rand)  # remove that tile from list of tiles\n\n\nroot.after(0, add_letter)  # add_letter will run as soon as the mainloop starts.\nroot.mainloop()\n</code></pre>\n\n<p>You also need to schedule the function to be called again by repeating the call to <code>after</code> inside the callback function, since <code>after</code> only executes the given function once. This is also noted in the documentation:</p>\n\n<blockquote>\n  <p>The callback is only called once for each call to this method. To keep\n  calling the callback, you need to reregister the callback inside\n  itself</p>\n</blockquote>\n\n<p>Note that your example will throw an exception as soon as you've exhausted all the entries in <code>tiles_letter</code>, so you need to change your logic to handle that case whichever way you want. The simplest thing would be to add a check at the beginning of <code>add_letter</code> to make sure the list isn't empty, and just <code>return</code> if it is:</p>\n\n<pre><code>def add_letter():\n    if not tiles_letter:\n        return\n    rand = random.choice(tiles_letter)\n    tile_frame = Label(frame, text=rand)\n    tile_frame.pack()\n    root.after(500, add_letter)\n    tiles_letter.remove(rand)  # remove that tile from list of tiles\n</code></pre>\n"
    },
    "537": {
        "question_id": "3501382",
        "answer_id": "3501408",
        "question": "<p>How do I check whether a variable is an integer?</p>\n",
        "answer": "<p>If you need to do this, do</p>\n\n<pre><code>isinstance(&lt;var&gt;, int)\n</code></pre>\n\n<p>unless you are in Python 2.x in which case you want</p>\n\n<pre><code>isinstance(&lt;var&gt;, (int, long))\n</code></pre>\n\n<p>Do not use <code>type</code>. It is almost never the right answer in Python, since it blocks all the flexibility of polymorphism. For instance, if you subclass <code>int</code>, your new class should register as an <code>int</code>, which <code>type</code> will not do:</p>\n\n<pre><code>class Spam(int): pass\nx = Spam(0)\ntype(x) == int # False\nisinstance(x, int) # True\n</code></pre>\n\n<p>This adheres to Python's strong polymorphism: you should allow any object that behaves like an <code>int</code>, instead of mandating that it be one.</p>\n\n<h1>BUT</h1>\n\n<p>The classical Python mentality, though, is that it's <em>easier to ask forgiveness than permission</em>. In other words, don't check whether <code>x</code> is an integer; assume that it is and catch the exception results if it isn't:</p>\n\n<pre><code>try:\n    x += 1\nexcept TypeError:\n    ...\n</code></pre>\n\n<p>This mentality is slowly being overtaken by the use of <a href=\"http://docs.python.org/library/abc.html\" rel=\"noreferrer\">abstract base classes</a>, which let you register exactly what properties your object should have (adding? multiplying? doubling?) by making it inherit from a specially-constructed class. That would be the best solution, since it will permit <em>exactly</em> those objects with the necessary and sufficient attributes, but you will have to read the docs on how to use it.</p>\n"
    },
    "538": {
        "question_id": "3013449",
        "answer_id": "3013686",
        "question": "<p>I happened to find myself having a basic filtering need: I have a list and I have to filter it by an attribute of the items.</p>\n\n<p>My code looked like this:</p>\n\n<pre><code>my_list = [x for x in my_list if x.attribute == value]\n</code></pre>\n\n<p>But then I thought, wouldn't it be better to write it like this?</p>\n\n<pre><code>my_list = filter(lambda x: x.attribute == value, my_list)\n</code></pre>\n\n<p>It's more readable, and if needed for performance the lambda could be taken out to gain something.  </p>\n\n<p>Question is: are there any caveats in using the second way? Any performance difference? Am I missing the Pythonic Way\u2122 entirely and should do it in yet another way (such as using itemgetter instead of the lambda)?</p>\n",
        "answer": "<p>It is strange how much beauty varies for different people. I find the list comprehension much clearer than <code>filter</code>+<code>lambda</code>, but use whichever you find easier. However, do stop giving your variables names already used for built-ins, that's confusing. [<em>The question originally used <code>list</code> as a variable name but was been updated in response to this answer.</em>]</p>\n\n<p>There are two things that may slow down your use of <code>filter</code>.</p>\n\n<p>The first is the function call overhead: as soon as you use a Python function (whether created by <code>def</code> or <code>lambda</code>) it is likely that filter will be slower than the list comprehension. It almost certainly is not enough to matter, and you shouldn't think much about performance until you've timed your code and found it to be a bottleneck, but the difference will be there.</p>\n\n<p>The other overhead that might apply is that the lambda is being forced to access a scoped variable (<code>value</code>). That is slower than accessing a local variable and in Python 2.x the list comprehension only accesses local variables. If you are using Python 3.x the list comprehension runs in a separate function so it will also be accessing <code>value</code> through a closure and this difference won't apply.</p>\n\n<p>The other option to consider is to use a generator instead of a list comprehension:</p>\n\n<pre><code>def filterbyvalue(seq, value):\n   for el in seq:\n       if el.attribute==value: yield el\n</code></pre>\n\n<p>Then in your main code (which is where readability really matters) you've replaced both list comprehension and filter with a hopefully meaningful function name.</p>\n"
    },
    "539": {
        "question_id": "427453",
        "answer_id": "427533",
        "question": "<p>Suppose I have a Python function as defined below:</p>\n\n<pre><code>def foo(arg1,arg2):\n    #do something with args\n    a = arg1 + arg2\n    return a\n</code></pre>\n\n<p>I can get the name of the function using <code>foo.func_name</code>. How can I programmatically get its source code, as I typed above?</p>\n",
        "answer": "<p>If the function is from a source file available on the filesystem, then <a href=\"https://docs.python.org/3/library/inspect.html#inspect.getsource\" rel=\"noreferrer\"><code>inspect.getsource(foo)</code></a> might be of help:</p>\n\n<p>If <code>foo</code> is defined as:</p>\n\n<pre><code>def foo(arg1,arg2):         \n    #do something with args \n    a = arg1 + arg2         \n    return a  \n</code></pre>\n\n<p>Then:      </p>\n\n<pre><code>import inspect\nlines = inspect.getsource(foo)\nprint(lines)\n</code></pre>\n\n<p>Returns:    </p>\n\n<pre><code>def foo(arg1,arg2):         \n    #do something with args \n    a = arg1 + arg2         \n    return a                \n</code></pre>\n\n<p>But I believe that if the function is compiled from a string, stream or imported from a compiled file, then you cannot retrieve its source code.</p>\n"
    },
    "540": {
        "question_id": "9383740",
        "answer_id": "9383764",
        "question": "<p>In the book that I am reading on Python, it keeps using the code <code>eval(input('blah'))</code> </p>\n\n<p>I read the documentation, and I understand it, but I still do not see how it changes the <code>input()</code> function. </p>\n\n<p>What does it do? Can someone explain?</p>\n",
        "answer": "<p>The eval function lets a Python program run Python code within itself.</p>\n\n<p>eval example (interactive shell):</p>\n\n<pre><code>&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; eval('x + 1')\n2\n&gt;&gt;&gt; eval('x')\n1\n</code></pre>\n"
    },
    "541": {
        "question_id": "7894791",
        "answer_id": "7908612",
        "question": "<p>I would like to use a numpy array in shared memory for use with the multiprocessing module.  The difficulty is using it like a numpy array, and not just as a ctypes array.</p>\n\n<pre><code>from multiprocessing import Process, Array\nimport scipy\n\ndef f(a):\n    a[0] = -a[0]\n\nif __name__ == '__main__':\n    # Create the array\n    N = int(10)\n    unshared_arr = scipy.rand(N)\n    arr = Array('d', unshared_arr)\n    print \"Originally, the first two elements of arr = %s\"%(arr[:2])\n\n    # Create, start, and finish the child processes\n    p = Process(target=f, args=(arr,))\n    p.start()\n    p.join()\n\n    # Printing out the changed values\n    print \"Now, the first two elements of arr = %s\"%arr[:2]\n</code></pre>\n\n<p>This produces output such as:</p>\n\n<pre><code>Originally, the first two elements of arr = [0.3518653236697369, 0.517794725524976]\nNow, the first two elements of arr = [-0.3518653236697369, 0.517794725524976]\n</code></pre>\n\n<p>The array can be accessed in a ctypes manner, e.g. <code>arr[i]</code> makes sense.  However, it is not a numpy array, and I cannot perform operations such as <code>-1*arr</code>, or <code>arr.sum()</code>.  I suppose a solution would be to convert the ctypes array into a numpy array.  However (besides not being able to make this work), I don't believe it would be shared anymore.</p>\n\n<p>It seems there would be a standard solution to what has to be a common problem.</p>\n",
        "answer": "<p>To add to @unutbu's (not available anymore) and @Henry Gomersall's answers. You could use <code>shared_arr.get_lock()</code> to synchronize access when needed:</p>\n\n<pre><code>shared_arr = mp.Array(ctypes.c_double, N)\n# ...\ndef f(i): # could be anything numpy accepts as an index such another numpy array\n    with shared_arr.get_lock(): # synchronize access\n        arr = np.frombuffer(shared_arr.get_obj()) # no data copying\n        arr[i] = -arr[i]\n</code></pre>\n\n<h3>Example</h3>\n\n<pre><code>import ctypes\nimport logging\nimport multiprocessing as mp\n\nfrom contextlib import closing\n\nimport numpy as np\n\ninfo = mp.get_logger().info\n\ndef main():\n    logger = mp.log_to_stderr()\n    logger.setLevel(logging.INFO)\n\n    # create shared array\n    N, M = 100, 11\n    shared_arr = mp.Array(ctypes.c_double, N)\n    arr = tonumpyarray(shared_arr)\n\n    # fill with random values\n    arr[:] = np.random.uniform(size=N)\n    arr_orig = arr.copy()\n\n    # write to arr from different processes\n    with closing(mp.Pool(initializer=init, initargs=(shared_arr,))) as p:\n        # many processes access the same slice\n        stop_f = N // 10\n        p.map_async(f, [slice(stop_f)]*M)\n\n        # many processes access different slices of the same array\n        assert M % 2 # odd\n        step = N // 10\n        p.map_async(g, [slice(i, i + step) for i in range(stop_f, N, step)])\n    p.join()\n    assert np.allclose(((-1)**M)*tonumpyarray(shared_arr), arr_orig)\n\ndef init(shared_arr_):\n    global shared_arr\n    shared_arr = shared_arr_ # must be inherited, not passed as an argument\n\ndef tonumpyarray(mp_arr):\n    return np.frombuffer(mp_arr.get_obj())\n\ndef f(i):\n    \"\"\"synchronized.\"\"\"\n    with shared_arr.get_lock(): # synchronize access\n        g(i)\n\ndef g(i):\n    \"\"\"no synchronization.\"\"\"\n    info(\"start %s\" % (i,))\n    arr = tonumpyarray(shared_arr)\n    arr[i] = -1 * arr[i]\n    info(\"end   %s\" % (i,))\n\nif __name__ == '__main__':\n    mp.freeze_support()\n    main()\n</code></pre>\n\n<p>If you don't need synchronized access or you create your own locks then <code>mp.Array()</code> is unnecessary. You could use <code>mp.sharedctypes.RawArray</code> in this case.</p>\n"
    },
    "542": {
        "question_id": "14630288",
        "answer_id": "16120218",
        "question": "<p>I am writing a Python (Python 3.3) program to send some data to a webpage using POST method.  Mostly for debugging process I am getting the page result and displaying it on the screen using <code>print()</code> function.</p>\n\n<p>The code is like this:</p>\n\n<pre><code>conn.request(\"POST\", resource, params, headers)\nresponse = conn.getresponse()\nprint(response.status, response.reason)\ndata = response.read()\nprint(data.decode('utf-8'));\n</code></pre>\n\n<p>the <code>HTTPResponse</code> <code>.read()</code> method returns a <code>bytes</code> element encoding the page (which is a well formated UTF-8 document)  It seemed okay until I stopped using IDLE GUI for Windows and used the Windows console instead.  The returned page has a U+2014 character (em-dash) which the print function translates well in the Windows GUI (I presume Code Page 1252) but does not in the Windows Console (Code Page 850).  Given the <code>strict</code> default behavior I get the following error:</p>\n\n<pre><code>UnicodeEncodeError: 'charmap' codec can't encode character '\\u2014' in position 10248: character maps to &lt;undefined&gt;\n</code></pre>\n\n<p>I could fix it using this quite ugly code:</p>\n\n<pre><code>print(data.decode('utf-8').encode('cp850','replace').decode('cp850'))\n</code></pre>\n\n<p>Now it replace the offending character \"\u2014\" with a <code>?</code>.  Not the ideal case (a hyphen should be a better replacement) but good enough for my purpose.</p>\n\n<p>There are several things I do not like from my solution.</p>\n\n<ol>\n<li>The code is ugly with all that decoding, encoding, and decoding.</li>\n<li>It solves the problem for just this case.  If I port the program for a system using some other encoding (latin-1, cp437, back to cp1252, etc.) it should recognize the target encoding.  It does not.  (for instance, when using again the IDLE GUI, the emdash is also lost, which didn't happen before)</li>\n<li>It would be nicer if the emdash translated to a hyphen instead of a interrogation bang.</li>\n</ol>\n\n<p>The problem is not the emdash (I can think of several ways to solve that particularly problem) but I need to write robust code.  I am feeding the page with data from a database and that data can come back.  I can anticipate many other conflicting cases: an '\u00c1' U+00c1 (which is possible in my database) could translate into CP-850 (DOS/Windows Console encodign for Western European Languages) but not into CP-437 (encoding for US English, which is default in many Windows instalations).</p>\n\n<p>So, the question:</p>\n\n<p>Is there a nicer solution that makes my code agnostic from the output interface encoding?</p>\n",
        "answer": "<p>I see three solutions to this:</p>\n\n<ol>\n<li><p>Change the output encoding, so it will always output UTF-8. See e.g. <a href=\"https://stackoverflow.com/questions/492483/setting-the-correct-encoding-when-piping-stdout-in-python\">Setting the correct encoding when piping stdout in Python</a>, but I could not get these example to work.</p></li>\n<li><p>Following example code makes the output aware of your target charset.</p>\n\n<pre><code># -*- coding: utf-8 -*-\nimport sys\n\nprint sys.stdout.encoding\nprint u\"St\u00f6cker\".encode(sys.stdout.encoding, errors='replace')\nprint u\"\u0421\u0442\u043e\u0435\u0441\u043a\u0435\u0440\".encode(sys.stdout.encoding, errors='replace')\n</code></pre>\n\n<p>This example properly replaces any non-printable character in my name with a question mark.</p>\n\n<p>If you create a custom print function, e.g. called <code>myprint</code>, using that mechanisms to encode output properly you can simply replace print with <code>myprint</code> whereever necessary without making the whole code look ugly.</p></li>\n<li><p>Reset the output encoding globally at the begin of the software:</p>\n\n<p>The page <a href=\"http://www.macfreek.nl/memory/Encoding_of_Python_stdout\" rel=\"noreferrer\">http://www.macfreek.nl/memory/Encoding_of_Python_stdout</a> has a good summary what to do to change output encoding. Especially the section \"StreamWriter Wrapper around Stdout\" is interesting. Essentially it says to change the I/O encoding function like this:</p>\n\n<p>In Python 2:</p>\n\n<pre><code>if sys.stdout.encoding != 'cp850':\n  sys.stdout = codecs.getwriter('cp850')(sys.stdout, 'strict')\nif sys.stderr.encoding != 'cp850':\n  sys.stderr = codecs.getwriter('cp850')(sys.stderr, 'strict')\n</code></pre>\n\n<p>In Python 3:</p>\n\n<pre><code>if sys.stdout.encoding != 'cp850':\n  sys.stdout = codecs.getwriter('cp850')(sys.stdout.buffer, 'strict')\nif sys.stderr.encoding != 'cp850':\n  sys.stderr = codecs.getwriter('cp850')(sys.stderr.buffer, 'strict')\n</code></pre>\n\n<p>If used in CGI outputting HTML you can replace 'strict' by 'xmlcharrefreplace' to get HTML encoded tags for non-printable characters.</p>\n\n<p>Feel free to modify the approaches, setting different encodings, .... Note that it still wont work to output non-specified data. So any data, input, texts must be correctly convertable into unicode:</p>\n\n<pre><code># -*- coding: utf-8 -*-\nimport sys\nimport codecs\nsys.stdout = codecs.getwriter(\"iso-8859-1\")(sys.stdout, 'xmlcharrefreplace')\nprint u\"St\u00f6cker\"                # works\nprint \"St\u00f6cker\".decode(\"utf-8\") # works\nprint \"St\u00f6cker\"                 # fails\n</code></pre></li>\n</ol>\n"
    },
    "543": {
        "question_id": "12385179",
        "answer_id": "12385661",
        "question": "<p>How to send a <code>multipart/form-data</code> with requests in python? How to send a file, I understand, but how to send the form data by this method can not understand.</p>\n",
        "answer": "<p>Basically, if you specify a <code>files</code> parameter (a dictionary), then <code>requests</code> will send a <code>multipart/form-data</code> POST instead of a <code>application/x-www-form-urlencoded</code> POST. You are not limited to using actual files in that dictionary, however:</p>\n\n<pre><code>&gt;&gt;&gt; import requests\n&gt;&gt;&gt; response = requests.post('http://httpbin.org/post', files=dict(foo='bar'))\n&gt;&gt;&gt; response.status_code\n200\n</code></pre>\n\n<p>and httpbin.org lets you know what headers you posted with; in <code>response.json()</code> we have:</p>\n\n<pre><code>&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; pprint(response.json()['headers'])\n{'Accept': '*/*',\n 'Accept-Encoding': 'gzip, deflate',\n 'Connection': 'close',\n 'Content-Length': '141',\n 'Content-Type': 'multipart/form-data; '\n                 'boundary=c7cbfdd911b4e720f1dd8f479c50bc7f',\n 'Host': 'httpbin.org',\n 'User-Agent': 'python-requests/2.21.0'}\n</code></pre>\n\n<p>Better still, you can further control the filename, content type and additional headers for each part by using a tuple instead of a single string or bytes object. The tuple is expected to contain between 2 and 4 elements; the filename, the content, optionally a content type, and an optional dictionary of further headers.</p>\n\n<p>I'd use that the tuple form with <code>None</code> as the filename, so that the <code>filename=\"...\"</code> parameter is dropped from the request for those parts:</p>\n\n<pre><code>&gt;&gt;&gt; files = {'foo': 'bar'}\n&gt;&gt;&gt; print(requests.Request('POST', 'http://httpbin.org/post', files=files).prepare().body.decode('utf8'))\n--bb3f05a247b43eede27a124ef8b968c5\nContent-Disposition: form-data; name=\"foo\"; filename=\"foo\"\n\nbar\n--bb3f05a247b43eede27a124ef8b968c5--\n&gt;&gt;&gt; files = {'foo': (None, 'bar')}\n&gt;&gt;&gt; print(requests.Request('POST', 'http://httpbin.org/post', files=files).prepare().body.decode('utf8'))\n--d5ca8c90a869c5ae31f70fa3ddb23c76\nContent-Disposition: form-data; name=\"foo\"\n\nbar\n--d5ca8c90a869c5ae31f70fa3ddb23c76--\n</code></pre>\n\n<p><code>files</code> can also be a list of two-value tuples, if you need ordering and/or multiple fields with the same name:</p>\n\n<pre><code>requests.post('http://requestb.in/xucj9exu', files=(('foo', (None, 'bar')), ('spam', (None, 'eggs'))))\n</code></pre>\n\n<p>If you specify both <code>files</code> and <code>data</code>, then it depends on the <em>value</em> of <code>data</code> what will be used to create the POST body. If <code>data</code> is a string, only it willl be used; otherwise both <code>data</code> and <code>files</code> are used, with the elements in <code>data</code> listed first.</p>\n\n<p>There is also the excellent <code>requests-toolbelt</code> project, which includes <a href=\"https://toolbelt.readthedocs.io/en/latest/uploading-data.html\" rel=\"noreferrer\">advanced Multipart support</a>. It takes field definitions in the same format as the <code>files</code> parameter, but unlike <code>requests</code>, it defaults to not setting a filename parameter. In addition, it can stream the request from open file objects, where <code>requests</code> will first construct the request body in memory.</p>\n"
    },
    "544": {
        "question_id": "11548005",
        "answer_id": "51997100",
        "question": "<p>Is there a preferred way to keep the data type of a <code>numpy</code> array fixed as <code>int</code> (or <code>int64</code> or whatever), while still having an element inside listed as <code>numpy.NaN</code>?</p>\n\n<p>In particular, I am converting an in-house data structure to a Pandas DataFrame. In our structure, we have integer-type columns that still have NaN's (but the dtype of the column is int). It seems to recast everything as a float if we make this a DataFrame, but we'd really like to be <code>int</code>.</p>\n\n<p>Thoughts?</p>\n\n<p><strong>Things tried:</strong></p>\n\n<p>I tried using the <code>from_records()</code> function under pandas.DataFrame, with <code>coerce_float=False</code> and this did not help. I also tried using NumPy masked arrays, with NaN fill_value, which also did not work. All of these caused the column data type to become a float.</p>\n",
        "answer": "<p>This capability has been added to pandas (beginning with version 0.24):\n<a href=\"https://pandas.pydata.org/pandas-docs/version/0.24/whatsnew/v0.24.0.html#optional-integer-na-support\" rel=\"noreferrer\">https://pandas.pydata.org/pandas-docs/version/0.24/whatsnew/v0.24.0.html#optional-integer-na-support</a></p>\n\n<p>At this point, it requires the use of extension dtype Int64 (capitalized), rather than the default dtype int64 (lowercase).</p>\n"
    },
    "545": {
        "question_id": "4010840",
        "answer_id": "4010869",
        "question": "<p>Is there a way I can generate variable names in python in a loop and assign values to them? For example, if I have</p>\n\n<pre><code>prices = [5, 12, 45]\n</code></pre>\n\n<p>I want</p>\n\n<pre><code>price1 = 5\nprice2 = 12\nprice3 = 45\n</code></pre>\n\n<p>Can I do this in a loop or something instead of manually assigning <code>price1 = prices[0]</code>, <code>price2 = prices[1]</code> etc.</p>\n\n<p>Thank you. </p>\n\n<p><strong>EDIT</strong></p>\n\n<p>Many people suggested that I write a reason for requiring this. First, there have been times where I have thought this may be more convenient than using a list...I don't remember exactly when, but I think I have thought of using this when there are many levels of nesting. For example, if one has a list of lists of lists, defining variables in the above way may help reduce the level of nesting. Second, today I thought of this when trying to learn use of Pytables. I just came across Pytables and I saw that when defining the structure of a table, the column names and types are described in the following manner:</p>\n\n<pre><code>class TableFormat(tables.IsDescription):\n    firstColumnName = StringCol(16)\n    secondColumnName = StringCol(16)\n    thirdColumnName = StringCol(16)\n</code></pre>\n\n<p>If I have 100 columns, typing the name of each column explicitly seems a lot of work. So, I wondered whether there is a way to generate these column names on the fly. </p>\n",
        "answer": "<p>If you really want to create them on the fly you can assign to the dict that is returned by either <code>globals()</code> or <code>locals()</code> depending on what namespace you want to create them in:</p>\n\n<pre><code>globals()['somevar'] = 'someval'\nprint somevar  # prints 'someval'\n</code></pre>\n\n<p>But I wouldn't recommend doing that. In general, avoid global variables. Using <code>locals()</code> often just obscures what you are really doing. Instead, create your own dict and assign to it.</p>\n\n<pre><code>mydict = {}\nmydict['somevar'] = 'someval'\nprint mydict['somevar']\n</code></pre>\n\n<p>Learn the python zen; run this and grok it well:</p>\n\n<pre><code>&gt;&gt;&gt; import this\n</code></pre>\n"
    },
    "546": {
        "question_id": "1282945",
        "answer_id": "1282954",
        "question": "<pre><code>Python 3.1 (r31:73574, Jun 26 2009, 20:21:35) [MSC v.1500 32 bit (Intel)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; 2/2\n1.0\n</code></pre>\n\n<p>Is this intended? I strongly remember earlier versions returning <code>int/int=int</code>? What should I do, is there a new division operator or must I always cast?</p>\n",
        "answer": "<p>Take a look at <a href=\"http://www.python.org/dev/peps/pep-0238/\" rel=\"noreferrer\">PEP-238</a>: Changing the Division Operator</p>\n\n<blockquote>\n  <p>The // operator will be available to request floor division unambiguously.</p>\n</blockquote>\n"
    },
    "547": {
        "question_id": "2265357",
        "answer_id": "2265383",
        "question": "<p>I have a date string with the format 'Mon Feb 15 2010'.  I want to change the format to '15/02/2010'.  How can I do this?</p>\n",
        "answer": "<p><a href=\"http://docs.python.org/library/datetime.html\" rel=\"noreferrer\"><code>datetime</code></a> module could help you with that:</p>\n\n<pre><code>datetime.datetime.strptime(date_string, format1).strftime(format2)\n</code></pre>\n\n<p>For the specific example you could do </p>\n\n<pre><code>&gt;&gt;&gt; datetime.datetime.strptime('Mon Feb 15 2010', '%a %b %d %Y').strftime('%d/%m/%Y')\n'15/02/2010'\n&gt;&gt;&gt;\n</code></pre>\n"
    },
    "548": {
        "question_id": "25336726",
        "answer_id": "25336738",
        "question": "<p>Honestly I am a little confused here, why can't I iterate twice over the same data?</p>\n\n<pre><code>def _view(self,dbName):\n    db = self.dictDatabases[dbName]\n    data = db[3]\n\n    for row in data:\n        print(\"doing this one time\")\n\n    for row in data:\n        print(\"doing this two times\")\n</code></pre>\n\n<p>This will print out \"doing this one time\" a few times (as data has a few rows), however it will NOT print out \"doing this two times\" at all ... </p>\n\n<p>The first time I iterate over data works fine, but the second time when I run the last list \"for row in data\" this returns nothing ... so executing it one time works but not twice ... ?</p>\n\n<p>FYI - data is a csv.reader object (in case that is the reason)...</p>\n",
        "answer": "<p>It's because <code>data</code> is an iterator, an you can consume an iterator only once. For example:</p>\n\n<pre><code>lst = [1, 2, 3]\nit = iter(lst)\n\nnext(it)\n=&gt; 1\nnext(it)\n=&gt; 2\nnext(it)\n=&gt; 3\nnext(it)\n=&gt; StopIteration\n</code></pre>\n\n<p>If we are traversing some data using a <code>for</code> loop, that last <code>StopIteration</code> will cause it to exit the first time. If we try to iterate over it <em>again</em>, we'll keep getting the <code>StopIteration</code> exception, because the iterator has already been consumed.</p>\n\n<p>Now for the second question: What if we <em>do</em> need to traverse the iterator more than once? A simple solution would be to create a list with the elements, and we can traverse it as many times as needed. This is all right as long as there are few elements in the list:</p>\n\n<pre><code>data = list(db[3])\n</code></pre>\n\n<p>But if there are many elements, it's a better idea to create independent iterators using <a href=\"https://docs.python.org/2/library/itertools.html#itertools.tee\" rel=\"noreferrer\"><code>tee()</code></a>:</p>\n\n<pre><code>import itertools\nit1, it2 = itertools.tee(db[3], n=2) # create as many as needed\n</code></pre>\n\n<p>Now we can loop over each one in turn:</p>\n\n<pre><code>for e in it1:\n    print(\"doing this one time\")\n\nfor e in it2:\n    print(\"doing this two times\")\n</code></pre>\n"
    },
    "549": {
        "question_id": "19290762",
        "answer_id": "19290848",
        "question": "<p>While looping over a list in Python, I was unable to modify the elements without a list comprehension. \nFor reference:</p>\n\n<pre><code>li = [\"spam\", \"eggs\"]\nfor i in li:\n    i = \"foo\"\n\nli\n[\"spam\", \"eggs\"]\n\nli = [\"foo\" for i in li]\nli \n[\"foo\", \"foo\"]\n</code></pre>\n\n<p>So, why can't I modify elements through a loop in Python? There's definitely something I'm missing, but I don't know what. I'm sure this is a duplicate, but I couldn't find a question about this, and if there is a link, that would be more than enough. Thank you in advance!</p>\n",
        "answer": "<p>Because the way <code>for i in li</code> works is something like this:</p>\n\n<pre><code>for idx in range(len(li)):\n    i = li[idx]\n    i = 'foo'\n</code></pre>\n\n<p>So if you assign anything to <code>i</code>, it won't affect <code>li[idx]</code>.</p>\n\n<p>The solution is either what you have proposed, or looping through the indices:</p>\n\n<pre><code>for idx in range(len(li)):\n    li[idx] = 'foo'\n</code></pre>\n\n<p>or use <code>enumerate</code>:</p>\n\n<pre><code>for idx, item in enumerate(li):\n    li[idx] = 'foo'\n</code></pre>\n"
    },
    "550": {
        "question_id": "2612948",
        "answer_id": "2612954",
        "question": "<p>I am learning python and have this error . I can figure out where\\what the error is in the code.\n<code>File \"&lt;string&gt;\", line 1, in &lt;module&gt;</code>.</p>\n\n<pre><code>Name = \"\"\nDesc = \"\"\nGender = \"\"\nRace = \"\"\n# Prompt user for user-defined information\nName = input('What is your Name? ')\nDesc = input('Describe yourself: ')\n</code></pre>\n\n<p>When i run the program </p>\n\n<p>it outputs\nWhat is your Name?  (i input d )</p>\n\n<p>this gives the error </p>\n\n<pre><code>Traceback (most recent call last):\n  File \"/python/chargen.py\", line 19, in &lt;module&gt;\n    Name = input('What is your Name? ')\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\nNameError: name 'd' is not defined\n</code></pre>\n\n<p>This is an example code from Python 3 for Absolute Beginners.</p>\n",
        "answer": "<p>In Python 2.x, <code>input()</code> expects something which is a Python expression, which means that if you type <code>d</code> it interprets that as a <em>variable</em> named d. If you typed <code>\"d\"</code>, then it would be fine.</p>\n\n<p>What you probably actually want for 2.x is <code>raw_input()</code>, which returns the entered value as a raw string instead of evaluating it.</p>\n\n<p>Since you're getting this behavior, it looks like you're using a 2.x version of the Python interpreter - instead, I'd go to <a href=\"http://www.python.org\" rel=\"noreferrer\">www.python.org</a> and download a Python 3.x interpreter so that it will match up with the book you're using.</p>\n"
    },
    "551": {
        "question_id": "30328586",
        "answer_id": "30329417",
        "question": "<p>I downloaded nltk data into the data directory in my Flask app. The views reside in a blueprint in another directory on the same level as the data directory.  In the view I'm trying to set the path to the data, but it doesn't work.</p>\n\n<pre><code>nltk.data.path.append('../nltk_data/')\n</code></pre>\n\n<p>This doesn't work. If I use the whole path, it does work.</p>\n\n<pre><code>nltk.data.path.append('/home/username/myapp/app/nltk_data/')\n</code></pre>\n\n<p>Why does the first form not work?  How can I refer to the location of the data correctly?</p>\n",
        "answer": "<p>In Python (and most languages), where the code resides in a package is different than what the working directory is when running a program.  All relative paths are relative to the current working directory, not the code file it's written in.  So you would use the relative path <code>nltk_data/</code> even from a blueprint, or you would use the absolute path and leave no ambiguity.</p>\n\n<p>The <code>root_path</code> attribute on an app (or blueprint) refers to the package directory for the app (or blueprint).  Join your relative path to that to get the absolute path.</p>\n\n<pre><code>resource_path = os.path.join(app.root_path, 'enltk_data')\n</code></pre>\n\n<hr>\n\n<p>There's probably no reason to be appending this folder every time you call a view.  I'm not familiar with nltk specifically, but there's probably a way to structure this so you set up the data path once when you create your app.</p>\n\n<hr>\n\n<pre class=\"lang-none prettyprint-override\"><code>project    /    app    /    blueprint\n                       /    data\n\n                            ^ join with root_path to get here\n                ^ app.root_path always points here, no matter where cwd is\n^ current working directory\n</code></pre>\n"
    },
    "552": {
        "question_id": "56011",
        "answer_id": "56190",
        "question": "<p>According to the documentation, they're pretty much interchangeable.  Is there a stylistic reason to use one over the other?</p>\n",
        "answer": "<p>I like to use double quotes around strings that are used for interpolation or that are natural language messages, and single quotes for small symbol-like strings, but will break the rules if the strings contain quotes, or if I forget. I use triple double quotes for docstrings and raw string literals for regular expressions even if they aren't needed.</p>\n\n<p>For example:</p>\n\n<pre><code>LIGHT_MESSAGES = {\n    'English': \"There are %(number_of_lights)s lights.\",\n    'Pirate':  \"Arr! Thar be %(number_of_lights)s lights.\"\n}\n\ndef lights_message(language, number_of_lights):\n    \"\"\"Return a language-appropriate string reporting the light count.\"\"\"\n    return LIGHT_MESSAGES[language] % locals()\n\ndef is_pirate(message):\n    \"\"\"Return True if the given message sounds piratical.\"\"\"\n    return re.search(r\"(?i)(arr|avast|yohoho)!\", message) is not None\n</code></pre>\n"
    },
    "553": {
        "question_id": "12943819",
        "answer_id": "12944035",
        "question": "<p>I have a JSON file that is a mess that I want to prettyprint-- what's the easiest way to do this in python? I know PrettyPrint takes an \"object\", which I think can be a file, but I don't know how to pass a file in-- just using the filename doesn't work.</p>\n",
        "answer": "<p>The <code>json</code> module already implements some basic pretty printing with the <code>indent</code> parameter:</p>\n\n<pre><code>&gt;&gt;&gt; import json\n&gt;&gt;&gt;\n&gt;&gt;&gt; your_json = '[\"foo\", {\"bar\":[\"baz\", null, 1.0, 2]}]'\n&gt;&gt;&gt; parsed = json.loads(your_json)\n&gt;&gt;&gt; print(json.dumps(parsed, indent=4, sort_keys=True))\n[\n    \"foo\", \n    {\n        \"bar\": [\n            \"baz\", \n            null, \n            1.0, \n            2\n        ]\n    }\n]\n</code></pre>\n\n<p>To parse a file, use <code>json.load()</code>:</p>\n\n<pre><code>with open('filename.txt', 'r') as handle:\n    parsed = json.load(handle)\n</code></pre>\n"
    },
    "554": {
        "question_id": "287085",
        "answer_id": "287101",
        "question": "<p>What exactly do <code>*args</code> and <code>**kwargs</code> mean?</p>\n\n<p>According to the Python documentation, from what it seems, it passes in a tuple of arguments.</p>\n\n<pre><code>def foo(hello, *args):\n    print hello\n\n    for each in args:\n        print each\n\nif __name__ == '__main__':\n    foo(\"LOVE\", [\"lol\", \"lololol\"])\n</code></pre>\n\n<p>This prints out:</p>\n\n<pre><code>LOVE\n['lol', 'lololol']\n</code></pre>\n\n<p>How do you effectively use them?</p>\n",
        "answer": "<p>Putting <code>*args</code> and/or <code>**kwargs</code> as the last items in your function definition\u2019s argument list allows that function to accept an arbitrary number of arguments and/or keyword arguments.</p>\n\n<p>For example, if you wanted to write a function that returned the sum of all its arguments, no matter how many you supply, you could write it like this:</p>\n\n<pre><code>def my_sum(*args):\n    return sum(args)\n</code></pre>\n\n<p>It\u2019s probably more commonly used in object-oriented programming, when you\u2019re overriding a function, and want to call the original function with whatever arguments the user passes in.</p>\n\n<p>You don\u2019t actually have to call them <code>args</code> and <code>kwargs</code>, that\u2019s just a convention. It\u2019s the <code>*</code> and <code>**</code> that do the magic.</p>\n\n<p>The official Python documentation has <a href=\"http://docs.python.org/2/tutorial/controlflow.html#more-on-defining-functions\" rel=\"noreferrer\">a more in-depth look</a>.</p>\n"
    },
    "555": {
        "question_id": "13187778",
        "answer_id": "37043071",
        "question": "<p>I am interested in knowing how to convert a pandas dataframe into a NumPy array.</p>\n\n<p>dataframe:</p>\n\n<pre><code>import numpy as np\nimport pandas as pd\n\nindex = [1, 2, 3, 4, 5, 6, 7]\na = [np.nan, np.nan, np.nan, 0.1, 0.1, 0.1, 0.1]\nb = [0.2, np.nan, 0.2, 0.2, 0.2, np.nan, np.nan]\nc = [np.nan, 0.5, 0.5, np.nan, 0.5, 0.5, np.nan]\ndf = pd.DataFrame({'A': a, 'B': b, 'C': c}, index=index)\ndf = df.rename_axis('ID')\n</code></pre>\n\n<p>gives</p>\n\n<pre><code>label   A    B    C\nID                                 \n1   NaN  0.2  NaN\n2   NaN  NaN  0.5\n3   NaN  0.2  0.5\n4   0.1  0.2  NaN\n5   0.1  0.2  0.5\n6   0.1  NaN  0.5\n7   0.1  NaN  NaN\n</code></pre>\n\n<p>I would like to convert this to a NumPy array, as so:</p>\n\n<pre><code>array([[ nan,  0.2,  nan],\n       [ nan,  nan,  0.5],\n       [ nan,  0.2,  0.5],\n       [ 0.1,  0.2,  nan],\n       [ 0.1,  0.2,  0.5],\n       [ 0.1,  nan,  0.5],\n       [ 0.1,  nan,  nan]])\n</code></pre>\n\n<p>How can I do this? </p>\n\n<hr>\n\n<p>As a bonus, is it possible to preserve the dtypes, like this?</p>\n\n<pre><code>array([[ 1, nan,  0.2,  nan],\n       [ 2, nan,  nan,  0.5],\n       [ 3, nan,  0.2,  0.5],\n       [ 4, 0.1,  0.2,  nan],\n       [ 5, 0.1,  0.2,  0.5],\n       [ 6, 0.1,  nan,  0.5],\n       [ 7, 0.1,  nan,  nan]],\n     dtype=[('ID', '&lt;i4'), ('A', '&lt;f8'), ('B', '&lt;f8'), ('B', '&lt;f8')])\n</code></pre>\n\n<p>or similar?</p>\n",
        "answer": "<p>To convert a pandas dataframe (df) to a numpy ndarray, use this code:</p>\n\n<pre><code>df.values\n\narray([[nan, 0.2, nan],\n       [nan, nan, 0.5],\n       [nan, 0.2, 0.5],\n       [0.1, 0.2, nan],\n       [0.1, 0.2, 0.5],\n       [0.1, nan, 0.5],\n       [0.1, nan, nan]])\n</code></pre>\n"
    },
    "556": {
        "question_id": "842059",
        "answer_id": "842096",
        "question": "<p>Is there a portable way to get the current user's username in Python (i.e., one that works under both Linux and Windows, at least).  It would work like <code>os.getuid</code>:</p>\n\n<pre><code>&gt;&gt;&gt; os.getuid()\n42\n&gt;&gt;&gt; os.getusername()\n'slartibartfast'\n</code></pre>\n\n<p>I googled around and was surprised not to find a definitive answer (although perhaps I was just googling poorly).  The <a href=\"http://www.python.org/doc/2.5.2/lib/module-pwd.html\" rel=\"noreferrer\">pwd</a> module provides a relatively easy way to achieve this under, say, Linux, but it is not present on Windows.  Some of the search results suggested that getting the username under Windows can be complicated in certain circumstances (e.g., running as a Windows service), although I haven't verified that.</p>\n",
        "answer": "<p>Look at <a href=\"http://docs.python.org/library/getpass.html\" rel=\"noreferrer\">getpass</a> module</p>\n\n<pre><code>import getpass\ngetpass.getuser()\n'kostya'\n</code></pre>\n\n<p>Availability: Unix, Windows</p>\n\n<hr>\n\n<p>p.s. Per comment below \"<em>this function looks at the values of various environment variables to determine the user name. Therefore, this function should not be relied on for access control purposes (or possibly any other purpose, since it allows any user to impersonate any other).</em>\"</p>\n"
    },
    "557": {
        "question_id": "2281850",
        "answer_id": "2282656",
        "question": "<p>I have a shell script that loops through a text file containing URL:s that I want to visit and take screenshots of.</p>\n\n<p>All this is done and simple. The script initializes a class that when run creates a screenshot of each site in the list. Some sites take a very, very long time to load, and some might not be loaded at all. So I want to wrap the screengrabber-function in a timeout script, making the function return <code>False</code> if it couldn't finish within 10 seconds.</p>\n\n<p>I'm content with the simplest solution possible, maybe setting a asynchronous timer that will return False after 10 seconds no matter what actually happens inside the function?</p>\n",
        "answer": "<p>The process for timing out an operations is described in the documentation for <a href=\"http://docs.python.org/library/signal#example\" rel=\"noreferrer\">signal</a>.</p>\n\n<p>The basic idea is to use signal handlers to set an alarm for some time interval and raise an exception once that timer expires.</p>\n\n<p>Note that this will only work on UNIX.</p>\n\n<p>Here's an implementation that creates a decorator (save the following code as <code>timeout.py</code>).</p>\n\n<pre><code>from functools import wraps\nimport errno\nimport os\nimport signal\n\nclass TimeoutError(Exception):\n    pass\n\ndef timeout(seconds=10, error_message=os.strerror(errno.ETIME)):\n    def decorator(func):\n        def _handle_timeout(signum, frame):\n            raise TimeoutError(error_message)\n\n        def wrapper(*args, **kwargs):\n            signal.signal(signal.SIGALRM, _handle_timeout)\n            signal.alarm(seconds)\n            try:\n                result = func(*args, **kwargs)\n            finally:\n                signal.alarm(0)\n            return result\n\n        return wraps(func)(wrapper)\n\n    return decorator\n</code></pre>\n\n<p>This creates a decorator called <code>@timeout</code> that can be applied to any long running functions.</p>\n\n<p>So, in your application code, you can use the decorator like so:</p>\n\n<pre><code>from timeout import timeout\n\n# Timeout a long running function with the default expiry of 10 seconds.\n@timeout\ndef long_running_function1():\n    ...\n\n# Timeout after 5 seconds\n@timeout(5)\ndef long_running_function2():\n    ...\n\n# Timeout after 30 seconds, with the error \"Connection timed out\"\n@timeout(30, os.strerror(errno.ETIMEDOUT))\ndef long_running_function3():\n    ...\n</code></pre>\n"
    },
    "558": {
        "question_id": "8608587",
        "answer_id": "8608609",
        "question": "<p>Is there a way to see how built in functions work in python? I don't mean just how to use them, but also how were they built, what is the code behind <strong><em>sorted</em></strong> or <strong><em>enumerate</em></strong> etc...?</p>\n",
        "answer": "<p>Since Python is open source you can read the <a href=\"https://github.com/python/cpython\" rel=\"noreferrer\">source code</a>.</p>\n\n<p>To find out what file a particular module or function is implemented in you can usually print the <code>__file__</code> attribute. Alternatively, you may use the <code>inspect</code> module, see the section <a href=\"https://docs.python.org/2/library/inspect.html#retrieving-source-code\" rel=\"noreferrer\">Retrieving Source Code</a> in the documentation of <code>inspect</code>.</p>\n\n<p>For built-in classes and methods this is not so straightforward since <code>inspect.getfile</code> and <code>inspect.getsource</code> will return a type error stating that the object is built-in. However, many of the built-in types can be found in the <a href=\"https://github.com/python/cpython/blob/master/Objects/\" rel=\"noreferrer\"><code>Objects</code> sub-directory of the Python source trunk</a>. For example, see <a href=\"https://github.com/python/cpython/blob/master/Objects/enumobject.c\" rel=\"noreferrer\">here</a> for the implementation of the enumerate class or <a href=\"https://github.com/python/cpython/blob/master/Objects/listobject.c\" rel=\"noreferrer\">here</a> for the implementation of the <code>list</code> type.</p>\n"
    },
    "559": {
        "question_id": "1347791",
        "answer_id": "1347854",
        "question": "<p>I am using python 3.1, on a windows 7 machines. Russian is the default system language, and utf-8 is the default encoding.</p>\n\n<p>Looking at the answer to a <a href=\"https://stackoverflow.com/questions/778096/problem-opening-a-text-document-unicode-error\">previous question</a>, I have attempting using the \"codecs\" module to give me a little luck. Here's a few examples:</p>\n\n<pre><code>&gt;&gt;&gt; g = codecs.open(\"C:\\Users\\Eric\\Desktop\\beeline.txt\", \"r\", encoding=\"utf-8\")\nSyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-4: truncated \\UXXXXXXXX escape (&lt;pyshell#39&gt;, line 1)\n&gt;&gt;&gt; g = codecs.open(\"C:\\Users\\Eric\\Desktop\\Site.txt\", \"r\", encoding=\"utf-8\")\nSyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-4: truncated \\UXXXXXXXX escape (&lt;pyshell#40&gt;, line 1)\n&gt;&gt;&gt; g = codecs.open(\"C:\\Python31\\Notes.txt\", \"r\", encoding=\"utf-8\")\nSyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 11-12: malformed \\N character escape (&lt;pyshell#41&gt;, line 1)\n&gt;&gt;&gt; g = codecs.open(\"C:\\Users\\Eric\\Desktop\\Site.txt\", \"r\", encoding=\"utf-8\")\nSyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-4: truncated \\UXXXXXXXX escape (&lt;pyshell#44&gt;, line 1)\n</code></pre>\n\n<p>My last idea was, I thought it might have been the fact that windows \"translates\" a few folders, such as the \"users\" folder, into Russian (though typing \"users\" is still the correct path), so I tried it in the Python31 folder. Still, no luck. Any ideas?</p>\n",
        "answer": "<p>The problem is with the string</p>\n\n<pre><code>\"C:\\Users\\Eric\\Desktop\\beeline.txt\"\n</code></pre>\n\n<p>Here, <code>\\U</code> starts an eight-character Unicode escape, such as '\\U00014321`. In your code, the escape is followed by the character 's', which is invalid.</p>\n\n<p>You either need to duplicate all backslashes, or prefix the string with <code>r</code> (to produce a raw string).</p>\n"
    },
    "560": {
        "question_id": "1265665",
        "answer_id": "1267145",
        "question": "<p>Is there any way to tell whether a <strong>string</strong> represents an integer (e.g., <code>'3'</code>, <code>'-17'</code> but not <code>'3.14'</code> or <code>'asfasfas'</code>) Without using a try/except mechanism?</p>\n\n<pre><code>is_int('3.14') = False\nis_int('-7')   = True\n</code></pre>\n",
        "answer": "<p>If you're really just annoyed at using <code>try/except</code>s all over the place, please just write a helper function:</p>\n\n<pre><code>def RepresentsInt(s):\n    try: \n        int(s)\n        return True\n    except ValueError:\n        return False\n\n&gt;&gt;&gt; print RepresentsInt(\"+123\")\nTrue\n&gt;&gt;&gt; print RepresentsInt(\"10.0\")\nFalse\n</code></pre>\n\n<p>It's going to be WAY more code to exactly cover all the strings that Python considers integers.  I say just be pythonic on this one.</p>\n"
    },
    "561": {
        "question_id": "7784148",
        "answer_id": "7784214",
        "question": "<p><code>repr()</code>: evaluatable string representation of an object (can \"eval()\"\nit, meaning it is a string representation that evaluates to a Python\nobject)</p>\n\n<p>In other words:</p>\n\n<pre><code>&gt;&gt;&gt; x = 'foo'\n&gt;&gt;&gt; repr(x)\n\"'foo'\"\n</code></pre>\n\n<p>Questions:</p>\n\n<ol>\n<li>Why do I get the double quotes  when I do <code>repr(x)</code>? (I don't get them\nwhen I do <code>str(x)</code>)</li>\n<li>Why do I get <code>'foo'</code> when I do <code>eval(\"'foo'\")</code> and not x which is the\nobject?</li>\n</ol>\n",
        "answer": "<pre><code>&gt;&gt;&gt; x = 'foo'\n&gt;&gt;&gt; x\n'foo'\n</code></pre>\n\n<p>So the name <code>x</code> is attached to <code>'foo'</code> string. When you call for example <code>repr(x)</code> the interpreter puts <code>'foo'</code> instead of <code>x</code> and then calls <code>repr('foo')</code>.</p>\n\n<pre><code>&gt;&gt;&gt; repr(x)\n\"'foo'\"\n&gt;&gt;&gt; x.__repr__()\n\"'foo'\"\n</code></pre>\n\n<p><code>repr</code> actually calls a magic method <code>__repr__</code> of <code>x</code>, which gives the <strong>string</strong> containing the representation of the value <code>'foo'</code> assigned to <code>x</code>. So it returns <code>'foo'</code> inside the string <code>\"\"</code> resulting in <code>\"'foo'\"</code>. The idea of <code>repr</code> is to give a string which contains a series of symbols which we can type in the interpreter and get the same value which was sent as an argument to <code>repr</code>.</p>\n\n<pre><code>&gt;&gt;&gt; eval(\"'foo'\")\n'foo'\n</code></pre>\n\n<p>When we call <code>eval(\"'foo'\")</code>, it's the same as we type <code>'foo'</code> in the interpreter. It's as we directly type the contents of the outer string <code>\"\"</code> in the interpreter.</p>\n\n<pre><code>&gt;&gt;&gt; eval('foo')\n\nTraceback (most recent call last):\n  File \"&lt;pyshell#5&gt;\", line 1, in &lt;module&gt;\n    eval('foo')\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\nNameError: name 'foo' is not defined\n</code></pre>\n\n<p>If we call <code>eval('foo')</code>, it's the same as we type <code>foo</code> in the interpreter. But there is no <code>foo</code> variable available and an exception is raised.</p>\n\n<pre><code>&gt;&gt;&gt; str(x)\n'foo'\n&gt;&gt;&gt; x.__str__()\n'foo'\n&gt;&gt;&gt; \n</code></pre>\n\n<p><code>str</code> is just the string representation of the object (remember, <code>x</code> variable refers to <code>'foo'</code>), so this function returns string.</p>\n\n<pre><code>&gt;&gt;&gt; str(5)\n'5'\n</code></pre>\n\n<p>String representation of integer <code>5</code> is <code>'5'</code>.</p>\n\n<pre><code>&gt;&gt;&gt; str('foo')\n'foo'\n</code></pre>\n\n<p>And string representation of string <code>'foo'</code> is the same string <code>'foo'</code>.</p>\n"
    },
    "562": {
        "question_id": "7396849",
        "answer_id": "7397689",
        "question": "<p>Using this code to take a string and convert it to binary:</p>\n\n<pre><code>bin(reduce(lambda x, y: 256*x+y, (ord(c) for c in 'hello'), 0))\n</code></pre>\n\n<p>this outputs:</p>\n\n<pre><code>0b110100001100101011011000110110001101111\n</code></pre>\n\n<p>Which, if I put it into <a href=\"http://www.roubaixinteractive.com/PlayGround/Binary_Conversion/Binary_To_Text.asp\" rel=\"noreferrer\">this site</a> (on the right hand site) I get my message of <code>hello</code> back. I'm wondering what method it uses. I know I could splice apart the string of binary into 8's and then match it to the corresponding value to <code>bin(ord(character))</code> or some other way. Really looking for something simpler.</p>\n",
        "answer": "<p>For ASCII characters in the range <code>[ -~]</code> on Python 2:</p>\n\n<pre><code>&gt;&gt;&gt; import binascii\n&gt;&gt;&gt; bin(int(binascii.hexlify('hello'), 16))\n'0b110100001100101011011000110110001101111'\n</code></pre>\n\n<p>In reverse:</p>\n\n<pre><code>&gt;&gt;&gt; n = int('0b110100001100101011011000110110001101111', 2)\n&gt;&gt;&gt; binascii.unhexlify('%x' % n)\n'hello'\n</code></pre>\n\n<hr>\n\n<p>In Python 3.2+:</p>\n\n<pre><code>&gt;&gt;&gt; bin(int.from_bytes('hello'.encode(), 'big'))\n'0b110100001100101011011000110110001101111'\n</code></pre>\n\n<p>In reverse:</p>\n\n<pre><code>&gt;&gt;&gt; n = int('0b110100001100101011011000110110001101111', 2)\n&gt;&gt;&gt; n.to_bytes((n.bit_length() + 7) // 8, 'big').decode()\n'hello'\n</code></pre>\n\n<hr>\n\n<h3>To support all Unicode characters in Python 3:</h3>\n\n<pre><code>def text_to_bits(text, encoding='utf-8', errors='surrogatepass'):\n    bits = bin(int.from_bytes(text.encode(encoding, errors), 'big'))[2:]\n    return bits.zfill(8 * ((len(bits) + 7) // 8))\n\ndef text_from_bits(bits, encoding='utf-8', errors='surrogatepass'):\n    n = int(bits, 2)\n    return n.to_bytes((n.bit_length() + 7) // 8, 'big').decode(encoding, errors) or '\\0'\n</code></pre>\n\n<h3>Here's  single-source Python 2/3 compatible version:</h3>\n\n<pre><code>import binascii\n\ndef text_to_bits(text, encoding='utf-8', errors='surrogatepass'):\n    bits = bin(int(binascii.hexlify(text.encode(encoding, errors)), 16))[2:]\n    return bits.zfill(8 * ((len(bits) + 7) // 8))\n\ndef text_from_bits(bits, encoding='utf-8', errors='surrogatepass'):\n    n = int(bits, 2)\n    return int2bytes(n).decode(encoding, errors)\n\ndef int2bytes(i):\n    hex_string = '%x' % i\n    n = len(hex_string)\n    return binascii.unhexlify(hex_string.zfill(n + (n &amp; 1)))\n</code></pre>\n\n<h3>Example</h3>\n\n<pre><code>&gt;&gt;&gt; text_to_bits('hello')\n'0110100001100101011011000110110001101111'\n&gt;&gt;&gt; text_from_bits('110100001100101011011000110110001101111') == u'hello'\nTrue\n</code></pre>\n"
    },
    "563": {
        "question_id": "10623302",
        "answer_id": "10623352",
        "question": "<p>Python doc says that slicing a list returns a new list.\nNow if a \"new\" list is being returned I've the following doubts related to \"Assignment to slices\"</p>\n\n<pre><code>a = [1, 2, 3]\na[0:2] = [4, 5]\nprint a\n</code></pre>\n\n<p>Now the output would be:</p>\n\n<pre><code>[4, 5, 3] \n</code></pre>\n\n<ol>\n<li>How can something that is returning something come on the left side of expression.</li>\n<li>Yes, I read the docs and it says it is possible, now since slicing a list returns a \"new\" list,why is the original list being modified, I am not able to understand the mechanics behind it.</li>\n</ol>\n",
        "answer": "<p>You are confusing two distinct operation that use very similar syntax:</p>\n\n<p><strong>1) slicing:</strong></p>\n\n<pre><code>b = a[0:2]\n</code></pre>\n\n<p>This makes a copy of the slice of <code>a</code> and assigns it to <code>b</code>.</p>\n\n<p><strong>2) slice assignment:</strong></p>\n\n<pre><code>a[0:2] = b\n</code></pre>\n\n<p>This <em>replaces</em> the slice of <code>a</code> with the contents of <code>b</code>.</p>\n\n<p>Although the syntax is similar (I imagine by design!), these are two different operations.</p>\n"
    },
    "564": {
        "question_id": "15889131",
        "answer_id": "15889366",
        "question": "<pre><code>time_interval = [4, 6, 12]\n</code></pre>\n\n<p>I want to sum up the numbers like <code>[4, 4+6, 4+6+12]</code> in order to get the list <code>t = [4, 10, 22]</code>.</p>\n\n<p>I tried the following:</p>\n\n<pre><code>for i in time_interval:\n    t1 = time_interval[0]\n    t2 = time_interval[1] + t1\n    t3 = time_interval[2] + t2\n    print(t1, t2, t3)\n\n4 10 22\n4 10 22\n4 10 22\n</code></pre>\n",
        "answer": "<p>If you're doing much numerical work with arrays like this, I'd suggest <a href=\"https://docs.scipy.org/doc/numpy/user/whatisnumpy.html\" rel=\"noreferrer\"><code>numpy</code></a>, which comes with a cumulative sum function <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.cumsum.html\" rel=\"noreferrer\"><code>cumsum</code></a>:</p>\n\n<pre><code>import numpy as np\n\na = [4,6,12]\n\nnp.cumsum(a)\n#array([4, 10, 22])\n</code></pre>\n\n<p>Numpy is often faster than pure python for this kind of thing, see in comparison to <a href=\"https://stackoverflow.com/a/15889203/1730674\">@Ashwini's <code>accumu</code></a>:</p>\n\n<pre><code>In [136]: timeit list(accumu(range(1000)))\n10000 loops, best of 3: 161 us per loop\n\nIn [137]: timeit list(accumu(xrange(1000)))\n10000 loops, best of 3: 147 us per loop\n\nIn [138]: timeit np.cumsum(np.arange(1000))\n100000 loops, best of 3: 10.1 us per loop\n</code></pre>\n\n<p>But of course if it's the only place you'll use numpy, it might not be worth having a dependence on it.</p>\n"
    },
    "565": {
        "question_id": "10664856",
        "answer_id": "10664876",
        "question": "<p>I have the following list which contains duplicate car registration numbers with different values. I want to convert it into a dictionary which accepts this multiple keys of car registration numbers. So far when I try to convert list to dictionary it eliminates one of the keys. Can someone show me how to make dictionary with duplicate keys\nThe list is:</p>\n\n<pre><code>EDF768, Bill Meyer, 2456, Vet_Parking\nTY5678, Jane Miller, 8987, AgHort_Parking\nGEF123, Jill Black, 3456, Creche_Parking\nABC234, Fred Greenside, 2345, AgHort_Parking\nGH7682, Clara Hill, 7689, AgHort_Parking\nJU9807, Jacky Blair, 7867, Vet_Parking\nKLOI98, Martha Miller, 4563, Vet_Parking\nADF645, Cloe Freckle, 6789, Vet_Parking\nDF7800, Jacko Frizzle, 4532, Creche_Parking\nWER546, Olga Grey, 9898, Creche_Parking\nHUY768, Wilbur Matty, 8912, Creche_Parking\nEDF768, Jenny Meyer, 9987, Vet_Parking\nTY5678, Jo King, 8987, AgHort_Parking\nJU9807, Mike Green, 3212, Vet_Parking \n</code></pre>\n\n<p>The code I have tried is:</p>\n\n<pre><code>data_dict = {}\ndata_list = []\n\ndef createDictionaryModified(filename):\n  path = \"C:\\Users\\user\\Desktop\"\n  basename = \"ParkingData_Part3.txt\"\n  filename = path + \"//\" + basename\n  file = open(filename)\n  contents = file.read()\n  print contents,\"\\n\"\n  data_list = [lines.split(\",\") for lines in contents.split(\"\\n\")]\n  for line in data_list:\n    regNumber = line[0]\n    name = line[1]\n    phoneExtn = line[2]\n    carpark = line[3].strip()\n    details = (name,phoneExtn,carpark)\n    data_dict[regNumber] = details\n  print data_dict,\"\\n\"\n  print data_dict.items(),\"\\n\"\n  print data_dict.values()\n</code></pre>\n",
        "answer": "<p>Python dictionaries don't support duplicate keys. One way around is to store lists or sets inside the dictionary.</p>\n\n<p>One easy way to achieve this is by using <a href=\"http://docs.python.org/library/collections.html#collections.defaultdict\" rel=\"noreferrer\"><code>defaultdict</code></a>:</p>\n\n<pre><code>from collections import defaultdict\n\ndata_dict = defaultdict(list)\n</code></pre>\n\n<p>All you have to do is replace</p>\n\n<pre><code>data_dict[regNumber] = details\n</code></pre>\n\n<p>with</p>\n\n<pre><code>data_dict[regNumber].append(details)\n</code></pre>\n\n<p>and you'll get a dictionary of lists.</p>\n"
    },
    "566": {
        "question_id": "12876177",
        "answer_id": "12876194",
        "question": "<p>In the below example I would expect all the elements to be tuples, why is a tuple converted to a string when it only contains a single string?</p>\n\n<pre><code>&gt;&gt;&gt; a = [('a'), ('b'), ('c', 'd')]\n&gt;&gt;&gt; a\n['a', 'b', ('c', 'd')]\n&gt;&gt;&gt; \n&gt;&gt;&gt; for elem in a:\n...     print type(elem)\n... \n&lt;type 'str'&gt;\n&lt;type 'str'&gt;\n&lt;type 'tuple'&gt;\n</code></pre>\n",
        "answer": "<p>Because those first two elements aren't tuples; they're just strings. The parenthesis don't automatically make them tuples. You have to add a comma after the string to indicate to python that it should be a tuple.</p>\n\n<pre><code>&gt;&gt;&gt; type( ('a') )\n&lt;type 'str'&gt;\n\n&gt;&gt;&gt; type( ('a',) )\n&lt;type 'tuple'&gt;\n</code></pre>\n\n<p>To fix your example code, add commas here:</p>\n\n<pre><code>&gt;&gt;&gt; a = [('a',), ('b',), ('c', 'd')]\n\n             ^       ^\n</code></pre>\n\n<p>From the <a href=\"http://docs.python.org/tutorial/datastructures.html#tuples-and-sequences\" rel=\"noreferrer\">Python Docs</a>:</p>\n\n<blockquote>\n  <p>A special problem is the construction of tuples containing 0 or 1 items: the syntax has some extra quirks to accommodate these. Empty tuples are constructed by an empty pair of parentheses; a tuple with one item is constructed by following a value with a comma (it is not sufficient to enclose a single value in parentheses). Ugly, but effective.</p>\n</blockquote>\n\n<p>If you truly hate the trailing comma syntax, a workaround is to pass a <code>list</code> to the <code>tuple()</code> function:</p>\n\n<pre><code>x = tuple(['a'])\n</code></pre>\n"
    },
    "567": {
        "question_id": "20503671",
        "answer_id": "20509641",
        "question": "<p>Ok so I'm trying to run a C program from a python script. Currently I'm using a test C program:</p>\n\n<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\nwhile (1) {\n    printf(\"2000\\n\");\n    sleep(1);\n}\nreturn 0;\n}\n</code></pre>\n\n<p>To simulate the program that I will be using, which takes readings from a sensor constantly.\nThen I'm trying to read the output (in this case <code>\"2000\"</code>) from the C program with subprocess in python:</p>\n\n<pre><code>#!usr/bin/python\nimport subprocess\n\nprocess = subprocess.Popen(\"./main\", stdout=subprocess.PIPE)\nwhile True:\n    for line in iter(process.stdout.readline, ''):\n            print line,\n</code></pre>\n\n<p>but this is not working. From using print statements, it runs the <code>.Popen</code> line then waits at <code>for line in iter(process.stdout.readline, ''):</code>, until I press Ctrl-C.</p>\n\n<p>Why is this? This is exactly what most examples that I've seen have as their code, and yet it does not read the file.</p>\n\n<p><em><strong>Edit:</em></strong></p>\n\n<p>Is there a way of making it run only when there is something to be read?</p>\n",
        "answer": "<p>It is a block buffering issue.</p>\n\n<p>What follows is an extended for your case version of my answer to <a href=\"https://stackoverflow.com/a/17698359/4279\">Python: read streaming input from subprocess.communicate()</a> question.</p>\n\n<h2>Fix stdout buffer in C program directly</h2>\n\n<p><code>stdio</code>-based programs as a rule are line buffered if they are running interactively in a terminal and block buffered when their stdout is redirected to a pipe. In the latter case, you won't see new lines until the buffer overflows or flushed.</p>\n\n<p>To avoid calling <code>fflush()</code> after each <code>printf()</code> call, you could force line buffered output by calling in a C program at the very beginning:</p>\n\n<pre><code>setvbuf(stdout, (char *) NULL, _IOLBF, 0); /* make line buffered stdout */\n</code></pre>\n\n<p>As soon as a newline is printed the buffer is flushed in this case.</p>\n\n<h3>Or fix it without modifying the source of C program</h3>\n\n<p>There is <code>stdbuf</code> utility that allows you to change buffering type without modifying the source code e.g.:</p>\n\n<pre><code>from subprocess import Popen, PIPE\n\nprocess = Popen([\"stdbuf\", \"-oL\", \"./main\"], stdout=PIPE, bufsize=1)\nfor line in iter(process.stdout.readline, b''):\n    print line,\nprocess.communicate() # close process' stream, wait for it to exit\n</code></pre>\n\n<p>There are also other utilities available, see <a href=\"https://unix.stackexchange.com/q/25372/1321\">Turn off buffering in pipe</a>.</p>\n\n<h2>Or use pseudo-TTY</h2>\n\n<p>To trick the subprocess into thinking that it is running interactively, you could use <a href=\"http://pexpect.readthedocs.org/en/latest/\" rel=\"noreferrer\"><code>pexpect</code> module</a> or its analogs, for code examples that use <code>pexpect</code> and <code>pty</code> modules, see <a href=\"https://stackoverflow.com/a/12471855/4279\">Python subprocess readlines() hangs</a>. Here's a variation on the <code>pty</code> example provided there (it should work on Linux):</p>\n\n<pre><code>#!/usr/bin/env python\nimport os\nimport pty\nimport sys\nfrom select import select\nfrom subprocess import Popen, STDOUT\n\nmaster_fd, slave_fd = pty.openpty()  # provide tty to enable line buffering\nprocess = Popen(\"./main\", stdin=slave_fd, stdout=slave_fd, stderr=STDOUT,\n                bufsize=0, close_fds=True)\ntimeout = .1 # ugly but otherwise `select` blocks on process' exit\n# code is similar to _copy() from pty.py\nwith os.fdopen(master_fd, 'r+b', 0) as master:\n    input_fds = [master, sys.stdin]\n    while True:\n        fds = select(input_fds, [], [], timeout)[0]\n        if master in fds: # subprocess' output is ready\n            data = os.read(master_fd, 512) # &lt;-- doesn't block, may return less\n            if not data: # EOF\n                input_fds.remove(master)\n            else:\n                os.write(sys.stdout.fileno(), data) # copy to our stdout\n        if sys.stdin in fds: # got user input\n            data = os.read(sys.stdin.fileno(), 512)\n            if not data:\n                input_fds.remove(sys.stdin)\n            else:\n                master.write(data) # copy it to subprocess' stdin\n        if not fds: # timeout in select()\n            if process.poll() is not None: # subprocess ended\n                # and no output is buffered &lt;-- timeout + dead subprocess\n                assert not select([master], [], [], 0)[0] # race is possible\n                os.close(slave_fd) # subproces don't need it anymore\n                break\nrc = process.wait()\nprint(\"subprocess exited with status %d\" % rc)\n</code></pre>\n\n<h3>Or use <code>pty</code> via <code>pexpect</code></h3>\n\n<p><code>pexpect</code> wraps <code>pty</code> handling into <a href=\"http://pexpect.readthedocs.org/en/latest/overview.html\" rel=\"noreferrer\">higher level interface</a>:</p>\n\n<pre><code>#!/usr/bin/env python\nimport pexpect\n\nchild = pexpect.spawn(\"/.main\")\nfor line in child:\n    print line,\nchild.close()\n</code></pre>\n\n<p><a href=\"http://pexpect.readthedocs.org/en/latest/FAQ.html#whynotpipe\" rel=\"noreferrer\">Q: Why not just use a pipe (popen())?</a> explains why pseudo-TTY is useful.</p>\n"
    },
    "568": {
        "question_id": "3173320",
        "answer_id": "34325723",
        "question": "<p>Is there a good way to do the following?</p>\n\n<p>I wrote a simple console app to upload and download files from an FTP server using the ftplib.</p>\n\n<p>Each time some data chunks are downloaded, I want to update a text progress bar, even if it's just a number.</p>\n\n<p>But I don't want to erase all the text that's been printed to the console. (Doing a \"clear\" and then printing the updated percentage.)</p>\n",
        "answer": "<p>Here's an aggregate of many of the answers below that I use regularly. Note: This is for Python 3; see the comments for details on using this in Python 2.</p>\n\n<pre><code># Print iterations progress\ndef printProgressBar (iteration, total, prefix = '', suffix = '', decimals = 1, length = 100, fill = '\u2588'):\n    \"\"\"\n    Call in a loop to create terminal progress bar\n    @params:\n        iteration   - Required  : current iteration (Int)\n        total       - Required  : total iterations (Int)\n        prefix      - Optional  : prefix string (Str)\n        suffix      - Optional  : suffix string (Str)\n        decimals    - Optional  : positive number of decimals in percent complete (Int)\n        length      - Optional  : character length of bar (Int)\n        fill        - Optional  : bar fill character (Str)\n    \"\"\"\n    percent = (\"{0:.\" + str(decimals) + \"f}\").format(100 * (iteration / float(total)))\n    filledLength = int(length * iteration // total)\n    bar = fill * filledLength + '-' * (length - filledLength)\n    print('\\r%s |%s| %s%% %s' % (prefix, bar, percent, suffix), end = '\\r')\n    # Print New Line on Complete\n    if iteration == total: \n        print()\n</code></pre>\n\n<p>Sample Usage:</p>\n\n<pre><code>from time import sleep\n\n# A List of Items\nitems = list(range(0, 57))\nl = len(items)\n\n# Initial call to print 0% progress\nprintProgressBar(0, l, prefix = 'Progress:', suffix = 'Complete', length = 50)\nfor i, item in enumerate(items):\n    # Do stuff...\n    sleep(0.1)\n    # Update Progress Bar\n    printProgressBar(i + 1, l, prefix = 'Progress:', suffix = 'Complete', length = 50)\n</code></pre>\n\n<p>Sample Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Progress: |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-----| 90.0% Complete\n</code></pre>\n"
    },
    "569": {
        "question_id": "10715965",
        "answer_id": "24888331",
        "question": "<p>I understand that pandas is designed to load fully populated <code>DataFrame</code> but I need to <strong>create an empty DataFrame then add rows, one by one</strong>.\nWhat is the best way to do this ?</p>\n\n<p>I successfully created an empty DataFrame with :</p>\n\n<pre><code>res = DataFrame(columns=('lib', 'qty1', 'qty2'))\n</code></pre>\n\n<p>Then I can add a new row and fill a field with :</p>\n\n<pre><code>res = res.set_value(len(res), 'qty1', 10.0)\n</code></pre>\n\n<p>It works but seems very odd :-/ (it fails for adding string value)</p>\n\n<p>How can I add a new row to my DataFrame (with different columns type) ?</p>\n",
        "answer": "<pre><code>import pandas as pd\nfrom numpy.random import randint\n\ndf = pd.DataFrame(columns=['lib', 'qty1', 'qty2'])\nfor i in range(5):\n    df.loc[i] = ['name' + str(i)] + list(randint(10, size=2))\n</code></pre>\n\n<pre class=\"lang-python prettyprint-override\"><code>&gt;&gt;&gt; df\n     lib qty1 qty2\n0  name0    3    3\n1  name1    2    4\n2  name2    2    8\n3  name3    2    1\n4  name4    9    6\n</code></pre>\n"
    },
    "570": {
        "question_id": "4260280",
        "answer_id": "4260304",
        "question": "<p>How can I do the following in Python?</p>\n\n<pre><code>row = [unicode(x.strip()) for x in row if x is not None else '']\n</code></pre>\n\n<p>Essentially:</p>\n\n<ol>\n<li>replace all the Nones with empty strings, and then</li>\n<li>carry out a function.</li>\n</ol>\n",
        "answer": "<p>You can totally do that, it's just an ordering issue:</p>\n\n<pre><code>[unicode(x.strip()) if x is not None else '' for x in row]\n</code></pre>\n\n<p>In general,</p>\n\n<pre><code>[f(x) if condition else g(x) for x in sequence]\n</code></pre>\n\n<p>And, for list comprehensions with <code>if</code> conditions only,</p>\n\n<pre><code>[f(x) for x in sequence if condition]\n</code></pre>\n\n<p>Note that this actually uses a different language construct, a <a href=\"https://docs.python.org/3/reference/expressions.html#conditional-expressions\" rel=\"noreferrer\">conditional expression</a>, which itself is not part of the <a href=\"https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries\" rel=\"noreferrer\">comprehension syntax</a>, while the <code>if</code> after the <code>for\u2026in</code> is part of list comprehensions and used to <em>filter</em> elements from the source iterable.</p>\n\n<hr>\n\n<p>Conditional expressions can be used in all kinds of situations where you want to choose between two expression values based on some condition. This does the same as the <a href=\"https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator\" rel=\"noreferrer\">ternary operator <code>?:</code> that exists in other languages</a>. For example:</p>\n\n<pre><code>value = 123\nprint(value, 'is', 'even' if value % 2 == 0 else 'odd')\n</code></pre>\n"
    },
    "571": {
        "question_id": "3682748",
        "answer_id": "3682808",
        "question": "<p>I have a string representing a unix timestamp (i.e. \"1284101485\") in Python, and I'd like to convert it to a readable date. When I use <code>time.strftime</code>, I get a <code>TypeError</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&gt;&gt;&gt;import time\n&gt;&gt;&gt;print time.strftime(\"%B %d %Y\", \"1284101485\")\n\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: argument must be 9-item sequence, not str\n</code></pre>\n",
        "answer": "<p>Use <code>datetime</code> module:</p>\n\n<pre><code>from datetime import datetime\nts = int(\"1284101485\")\n\n# if you encounter a \"year is out of range\" error the timestamp\n# may be in milliseconds, try `ts /= 1000` in that case\nprint(datetime.utcfromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S'))\n</code></pre>\n"
    },
    "572": {
        "question_id": "1156246",
        "answer_id": "1158750",
        "question": "<p>I want users on the site to be able to download files whose paths are obscured so they cannot be directly downloaded.</p>\n\n<p>For instance, I'd like the URL to be something like this, \"<a href=\"http://example.com/download/?f=somefile.txt\" rel=\"noreferrer\">http://example.com/download/?f=somefile.txt</a></p>\n\n<p>And on the server, I know that all downloadable files reside in a folder \"/home/user/files/\".</p>\n\n<p>Is there a way to make Django serve that file for download as opposed to trying to find a URL and View to display it?</p>\n",
        "answer": "<p>For the \"best of both worlds\" you could combine S.Lott's solution with the <a href=\"http://www.google.com.ng/search?q=mod_xsendfile&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a\" rel=\"noreferrer\">xsendfile module</a>: django generates the path to the file (or the file itself), but the actual file serving is handled by Apache/Lighttpd. Once you've set up mod_xsendfile, integrating with your view takes a few lines of code:</p>\n\n<pre><code>from django.utils.encoding import smart_str\n\nresponse = HttpResponse(mimetype='application/force-download') # mimetype is replaced by content_type for django 1.7\nresponse['Content-Disposition'] = 'attachment; filename=%s' % smart_str(file_name)\nresponse['X-Sendfile'] = smart_str(path_to_file)\n# It's usually a good idea to set the 'Content-Length' header too.\n# You can also set any other required headers: Cache-Control, etc.\nreturn response\n</code></pre>\n\n<p>Of course, this will only work if you have control over your server, or your hosting company has mod_xsendfile already set up.</p>\n\n<p><strong>EDIT:</strong></p>\n\n<blockquote>\n  <p>mimetype is replaced by content_type for django 1.7</p>\n</blockquote>\n\n<pre><code>response = HttpResponse(content_type='application/force-download'  \n</code></pre>\n\n<p><strong>EDIT:</strong>\n For <code>nginx</code> check <a href=\"https://www.nginx.com/resources/wiki/start/topics/examples/xsendfile/\" rel=\"noreferrer\">this</a>, it uses <code>X-Accel-Redirect</code> instead of <code>apache</code> X-Sendfile header.</p>\n"
    },
    "573": {
        "question_id": "10695139",
        "answer_id": "10695161",
        "question": "<p>I have a list of tuples that looks something like this:</p>\n\n<pre><code>[('abc', 121),('abc', 231),('abc', 148), ('abc',221)]\n</code></pre>\n\n<p>I want to sort this list in ascending order by the integer value inside the tuples. Is it possible?</p>\n",
        "answer": "<p>Try using the <code>key</code> keyword with <code>sorted()</code>.</p>\n\n<pre><code>sorted([('abc', 121),('abc', 231),('abc', 148), ('abc',221)], key=lambda x: x[1])\n</code></pre>\n\n<p><code>key</code> should be a function that identifies how to retrieve the comparable element from your data structure.  In your case, it is the second element of the tuple, so we access <code>[1]</code>.</p>\n\n<p>For optimization, see jamylak's response using <code>itemgetter(1)</code>, which is essentially a faster version of <code>lambda x: x[1]</code>.</p>\n"
    },
    "574": {
        "question_id": "12332975",
        "answer_id": "15950647",
        "question": "<p>I need to install a package from PyPi straight within my script.\nMaybe there's some module or <code>distutils</code> (<code>distribute</code>, <code>pip</code> etc.) feature which allows me to just execute something like <code>pypi.install('requests')</code> and requests will be installed into my virtualenv.</p>\n",
        "answer": "<p>You can also use something like:</p>\n\n<pre><code>import pip\n\ndef install(package):\n    if hasattr(pip, 'main'):\n        pip.main(['install', package])\n    else:\n        pip._internal.main(['install', package])\n\n# Example\nif __name__ == '__main__':\n    install('argh')\n</code></pre>\n"
    },
    "575": {
        "question_id": "2161752",
        "answer_id": "2161801",
        "question": "<p>I need to find the frequency of elements in a list</p>\n\n<pre><code>a = [1,1,1,1,2,2,2,2,3,3,4,5,5]\n</code></pre>\n\n<p>output-></p>\n\n<pre><code>b = [4,4,2,1,2]\n</code></pre>\n\n<p>Also I want to remove the duplicates from a</p>\n\n<pre><code>a = [1,2,3,4,5]\n</code></pre>\n",
        "answer": "<p>Since the list is ordered you can do this:</p>\n\n<pre><code>a = [1,1,1,1,2,2,2,2,3,3,4,5,5]\nfrom itertools import groupby\n[len(list(group)) for key, group in groupby(a)]\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>[4, 4, 2, 1, 2]\n</code></pre>\n"
    },
    "576": {
        "question_id": "8804830",
        "answer_id": "8805244",
        "question": "<p>I am sorry that I can't reproduce the error with a simpler example, and my code is too complicated to post. If I run the program in IPython shell instead of the regular Python, things work out well. </p>\n\n<p>I looked up some previous notes on this problem. They were all caused by using pool to call function defined within a class function. But this is not the case for me.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Exception in thread Thread-3:\nTraceback (most recent call last):\n  File \"/usr/lib64/python2.7/threading.py\", line 552, in __bootstrap_inner\n    self.run()\n  File \"/usr/lib64/python2.7/threading.py\", line 505, in run\n    self.__target(*self.__args, **self.__kwargs)\n  File \"/usr/lib64/python2.7/multiprocessing/pool.py\", line 313, in _handle_tasks\n    put(task)\nPicklingError: Can't pickle &lt;type 'function'&gt;: attribute lookup __builtin__.function failed\n</code></pre>\n\n<p>I would appreciate any help. </p>\n\n<p><strong>Update</strong>: The function I pickle is defined at the top level of the module. Though it calls a function that contains a nested function. i.e, <code>f()</code> calls <code>g()</code> calls <code>h()</code> which has a nested function <code>i()</code>, and I am calling <code>pool.apply_async(f)</code>. <code>f()</code>, <code>g()</code>, <code>h()</code> are all defined at the top level. I tried simpler example with this pattern and it works though.</p>\n",
        "answer": "<p>Here is a <a href=\"http://docs.python.org/library/pickle.html#what-can-be-pickled-and-unpickled\" rel=\"noreferrer\">list of what can be pickled</a>. In particular, functions are only picklable if they are defined at the top-level of a module.</p>\n\n<p>This piece of code:</p>\n\n<pre><code>import multiprocessing as mp\n\nclass Foo():\n    @staticmethod\n    def work(self):\n        pass\n\nif __name__ == '__main__':   \n    pool = mp.Pool()\n    foo = Foo()\n    pool.apply_async(foo.work)\n    pool.close()\n    pool.join()\n</code></pre>\n\n<p>yields an error almost identical to the one you posted:</p>\n\n<pre><code>Exception in thread Thread-2:\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/threading.py\", line 552, in __bootstrap_inner\n    self.run()\n  File \"/usr/lib/python2.7/threading.py\", line 505, in run\n    self.__target(*self.__args, **self.__kwargs)\n  File \"/usr/lib/python2.7/multiprocessing/pool.py\", line 315, in _handle_tasks\n    put(task)\nPicklingError: Can't pickle &lt;type 'function'&gt;: attribute lookup __builtin__.function failed\n</code></pre>\n\n<p>The problem is that the <code>pool</code> methods all use a <code>queue.Queue</code> to pass tasks to the worker processes. Everything that goes through the <code>queue.Queue</code> must be pickable, and <code>foo.work</code> is not picklable since it is not defined at the top level of the module.</p>\n\n<p>It can be fixed by defining a function at the top level, which calls <code>foo.work()</code>:</p>\n\n<pre><code>def work(foo):\n    foo.work()\n\npool.apply_async(work,args=(foo,))\n</code></pre>\n\n<p>Notice that <code>foo</code> is pickable, since <code>Foo</code> is defined at the top level and  <code>foo.__dict__</code> is picklable.</p>\n"
    },
    "577": {
        "question_id": "13591970",
        "answer_id": "13592002",
        "question": "<p>I have the following piece of code which fails with the following error:</p>\n\n<blockquote>\n  <p>RuntimeError: maximum recursion depth exceeded</p>\n</blockquote>\n\n<p>I attempted to rewrite this to allow for tail recursion optimization (TCO). I believe that this code should have been successful if a TCO had taken place.</p>\n\n<pre><code>def trisum(n, csum):\n    if n == 0:\n        return csum\n    else:\n        return trisum(n - 1, csum + n)\n\nprint(trisum(1000, 0))\n</code></pre>\n\n<p>Should I conclude that Python does not do any type of TCO, or do I just need to define it differently?</p>\n",
        "answer": "<p>No, and it never will since Guido prefers to be able to have proper tracebacks</p>\n\n<p><a href=\"http://neopythonic.blogspot.com.au/2009/04/tail-recursion-elimination.html\" rel=\"noreferrer\">http://neopythonic.blogspot.com.au/2009/04/tail-recursion-elimination.html</a></p>\n\n<p><a href=\"http://neopythonic.blogspot.com.au/2009/04/final-words-on-tail-calls.html\" rel=\"noreferrer\">http://neopythonic.blogspot.com.au/2009/04/final-words-on-tail-calls.html</a></p>\n\n<p>You can manually eliminate the recursion with a transformation like this</p>\n\n<pre><code>&gt;&gt;&gt; def trisum(n, csum):\n...     while True:                     # change recursion to a while loop\n...         if n == 0:\n...             return csum\n...         n, csum = n - 1, csum + n   # update parameters instead of tail recursion\n\n&gt;&gt;&gt; trisum(1000,0)\n500500\n</code></pre>\n"
    },
    "578": {
        "question_id": "3718657",
        "answer_id": "3718923",
        "question": "<p>I would like to see what is the best way to determine the current script directory in python?</p>\n\n<p>I discovered that, due to the many ways of calling python code, it is hard to find a good solution.</p>\n\n<p>Here are some problems:</p>\n\n<ul>\n<li><code>__file__</code> is not defined if the script is executed with <code>exec</code>, <code>execfile</code></li>\n<li><code>__module__</code> is defined only in modules</li>\n</ul>\n\n<p>Use cases: </p>\n\n<ul>\n<li><code>./myfile.py</code></li>\n<li><code>python myfile.py</code></li>\n<li><code>./somedir/myfile.py</code></li>\n<li><code>python somedir/myfile.py</code></li>\n<li><code>execfile('myfile.py')</code> (from another script, that can be located in another directory and that can have another current directory.</li>\n</ul>\n\n<p>I know that there is no perfect solution, but I'm looking for the best approach that solves most of the cases.</p>\n\n<p>The most used approach is <code>os.path.dirname(os.path.abspath(__file__))</code> but this really doesn't work if you execute the script from another one with <code>exec()</code>.</p>\n\n<h2>Warning</h2>\n\n<p>Any solution that uses current directory will fail, this can be different based on the way the script is called or it can be changed inside the running script.</p>\n",
        "answer": "<pre><code>os.path.dirname(os.path.abspath(__file__))\n</code></pre>\n\n<p>is indeed the best you're going to get.</p>\n\n<p>It's unusual to be executing a script with <code>exec</code>/<code>execfile</code>; normally you should be using the module infrastructure to load scripts. If you must use these methods, I suggest setting <code>__file__</code> in the <code>globals</code> you pass to the script so it can read that filename.</p>\n\n<p>There's no other way to get the filename in execed code: as you note, the CWD may be in a completely different place.</p>\n"
    },
    "579": {
        "question_id": "255147",
        "answer_id": "255154",
        "question": "<p>In python, if I say</p>\n\n<pre><code>print 'h'\n</code></pre>\n\n<p>I get the letter h and a newline.  If I say </p>\n\n<pre><code>print 'h',\n</code></pre>\n\n<p>I get the letter h and no newline.  If I say</p>\n\n<pre><code>print 'h',\nprint 'm',\n</code></pre>\n\n<p>I get the letter h, a space, and the letter m.  How can I prevent Python from printing the space?</p>\n\n<p>The print statements are different iterations of the same loop so I can't just use the + operator.</p>\n",
        "answer": "<p>You can use:</p>\n\n<pre><code>sys.stdout.write('h')\nsys.stdout.write('m')\n</code></pre>\n"
    },
    "580": {
        "question_id": "3455456",
        "answer_id": "3460977",
        "question": "<p>I am setting out to do a side project that has the goal of translating code from one programming language to another. The languages I am starting with are PHP and Python (Python to PHP should be easier to start with), but ideally I would be able to add other languages with (relative) ease. The plan is:</p>\n\n<ul>\n<li><p>This is geared towards web development. The original and target code will be be sitting on top of frameworks (which I will also have to write). These frameworks will embrace an MVC design pattern and follow strict coding conventions. This should make translation somewhat easier. </p></li>\n<li><p>I am also looking at IOC and dependency injection, as they might make the translation process easier and less error prone.</p></li>\n<li><p>I'll make use of Python's <a href=\"http://docs.python.org/library/parser.html\" rel=\"noreferrer\">parser module</a>, which lets me fiddle with the Abstract Syntax Tree. Apparently the closest I can get with PHP is <a href=\"http://php.net/manual/en/function.token-get-all.php\" rel=\"noreferrer\">token_get_all()</a>, which is a start.</p></li>\n<li><p>From then on I can build the AST, symbol tables and control flow. </p></li>\n</ul>\n\n<p>Then I believe I can start outputting code. <strong>I don't need a perfect translation</strong>. I'll still have to review the generated code and fix problems. Ideally the translator should flag problematic translations.</p>\n\n<p>Before you ask \"What the hell is the point of this?\" The answer is... It'll be an interesting learning experience. If you have any insights on how to make this less daunting, please let me know.</p>\n\n<hr>\n\n<h3>EDIT:</h3>\n\n<p>I am more interested in knowing what kinds of patterns I could enforce on the code to make it easier to translate (ie: IoC, SOA ?) the code than how to do the translation.</p>\n",
        "answer": "<p>I've been <a href=\"http://www.semanticdesigns.com/Products/DMS/DMSToolkit.html\" rel=\"noreferrer\">building tools (DMS Software Reengineering Toolkit)</a> to do general purpose program manipulation (with language translation being a special case) since 1995, supported by a strong team of computer scientists.  DMS provides generic parsing, AST building, symbol tables, control and data flow analysis, application of translation rules, regeneration of source text with comments, etc., all parameterized by explicit definitions of computer languages.</p>\n\n<p>The amount of machinery you need to do this <em>well</em> is vast (especially if you want to be able to do this for multiple languages in a general way), and then you need reliable parsers for languages with unreliable definitions (PHP is perfect example of this).</p>\n\n<p>There's nothing wrong with you thinking about building a language-to-language translator or attempting it, but I think you'll find this a much bigger task for real languages than you expect.  We have some 100 man-years invested in just DMS, and another 6-12 months in each \"reliable\" language definition (including the one we painfully built for PHP), much more for nasty languages such as C++.  It will be a \"hell of a learning experience\"; it has been for us.  (You might find the technical Papers section at the above website interesting to jump start that learning).</p>\n\n<p>People often attempt to build some kind of generalized machinery by starting with some piece of technology with which they are familiar, that does a part of the job. (Python ASTs are great example).  The good news, is that part of the job is done.  The bad news is that machinery has a zillion assumptions built into it, most of which you won't discover until you try to wrestle it into doing something else.  At that point you find out the machinery is wired to do what it originally does, and will really, really resist your attempt to make it do something else. (I suspect trying to get the Python AST to model PHP is going to be a lot of fun).</p>\n\n<p>The reason I started to build DMS originally was to build foundations that had very few such assumptions built in.   It has some that give us headaches.  So far, no black holes. (The hardest part of my job over the last 15 years is to try to prevent such assumptions from creeping in).</p>\n\n<p>Lots of folks also make the mistake of assuming that if they can parse (and perhaps get an AST), they are well on the way to doing something complicated.  One of the hard lessons is that you need symbol tables and flow analysis to do good program analysis or transformation.   ASTs are necessary but not sufficient.  This is the reason that Aho&amp;Ullman's compiler book doesn't stop at chapter 2.  (The OP has this right in that he is planning to build additional machinery beyond the AST).  For more on this topic, see <a href=\"http://www.semanticdesigns.com/Products/DMS/LifeAfterParsing.html\" rel=\"noreferrer\">Life After Parsing</a>.</p>\n\n<p>The remark about \"I don't need a perfect translation\" is troublesome.  What weak translators do is convert the \"easy\" 80% of the code, leaving the hard 20% to do by hand.  If the application you intend to convert are pretty small, and you only intend to convert it once well, then that 20% is OK. If you want to convert many applications (or even the same one with minor changes over time), this is not nice.  If you attempt to convert 100K SLOC then 20% is 20,000 original lines of code that are hard to translate, understand and modify in the context of another 80,000 lines of translated program you already don't understand.  That takes a huge amount of effort.  At the million line level, this is simply impossible in practice.  (Amazingly there are people that distrust automated tools and insist on translating million line systems by hand; that's even <em>harder</em> and they normally find out painfully with long time delays, high costs and often outright failure.)</p>\n\n<p>What you have to shoot for to translate large-scale systems is high nineties percentage  conversion rates, or it is likely that you can't complete the manual part of the translation activity.</p>\n\n<p>Another key consideration is size of code to be translated.  It takes a lot of energy to build a working, robust translator, even with good tools.  While it seems sexy and cool to build a translator instead of simply doing a manual conversion, for small code bases (e.g., up to about 100K SLOC in our experience) the economics simply don't justify it. Nobody likes this answer, but if you really have to translate just 10K SLOC of code, you are probably better off just biting the bullet and doing it.  And yes, that's painful.</p>\n\n<p>I consider our tools to be extremely good (but then, I'm pretty biased).   And it is still very hard to build a good translator; it takes us about 1.5-2 man-years and we know how to use our tools.  The difference is that with this much machinery, we <a href=\"http://www.semdesigns.com/Products/Services/NorthropGrummanB2.html\" rel=\"noreferrer\">succeed</a> considerably more often than we fail.</p>\n"
    },
    "581": {
        "question_id": "8744113",
        "answer_id": "8744133",
        "question": "<p>Let's take an example</p>\n\n<pre><code>a=['help', 'copyright', 'credits', 'license']\nb=a\nb.append('XYZ')\nb\n['help', 'copyright', 'credits', 'license', 'XYZ']\na\n['help', 'copyright', 'credits', 'license', 'XYZ']\n</code></pre>\n\n<p>I wanted to append value in list 'b' but the value of list 'a' have also changed.\n<br/>\nI think I have little idea why its like this (python passes lists by reference).\n<br/>\nMy question is \"how can I pass it by value so that appending 'b' does't change values in 'a' ?\"</p>\n",
        "answer": "<p>As answered in the <a href=\"http://docs.python.org/faq/programming.html#how-do-i-copy-an-object-in-python\">official Python FAQ</a>:</p>\n\n<pre><code>b = a[:]\n</code></pre>\n"
    },
    "582": {
        "question_id": "38674027",
        "answer_id": "38674038",
        "question": "<p>I have an array X:</p>\n\n<pre><code>X = np.array([[4,  2],\n              [9,  3],\n              [8,  5],\n              [3,  3],\n              [5,  6]])\n</code></pre>\n\n<p>And I wish to find the index of the row of several values in this array:</p>\n\n<pre><code>searched_values = np.array([[4, 2],\n                            [3, 3],\n                            [5, 6]])\n</code></pre>\n\n<p>For this example I would like a result like:</p>\n\n<pre><code>[0,3,4]\n</code></pre>\n\n<p>I have a code doing this, but I think it is overly complicated:</p>\n\n<pre><code>X = np.array([[4,  2],\n              [9,  3],\n              [8,  5],\n              [3,  3],\n              [5,  6]])\n\nsearched_values = np.array([[4, 2],\n                            [3, 3],\n                            [5, 6]])\n\nresult = []\n\nfor s in searched_values:\n    idx = np.argwhere([np.all((X-s)==0, axis=1)])[0][1]\n    result.append(idx)\n\nprint(result)\n</code></pre>\n\n<p>I found <a href=\"https://stackoverflow.com/a/32191125/4876550\">this answer</a> for a similar question but it works only for 1d arrays.</p>\n\n<p>Is there a way to do what I want in a simpler way?</p>\n",
        "answer": "<p><strong>Approach #1</strong></p>\n\n<p>One approach would be to use <a href=\"http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html\" rel=\"noreferrer\"><code>NumPy broadcasting</code></a>, like so -</p>\n\n<pre><code>np.where((X==searched_values[:,None]).all(-1))[1]\n</code></pre>\n\n<p><strong>Approach #2</strong></p>\n\n<p>A memory efficient approach would be to convert each row as linear index equivalents and then using <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.in1d.html\" rel=\"noreferrer\"><code>np.in1d</code></a>, like so -</p>\n\n<pre><code>dims = X.max(0)+1\nout = np.where(np.in1d(np.ravel_multi_index(X.T,dims),\\\n                    np.ravel_multi_index(searched_values.T,dims)))[0]\n</code></pre>\n\n<p><strong>Approach #3</strong></p>\n\n<p>Another memory efficient approach using <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.searchsorted.html\" rel=\"noreferrer\"><code>np.searchsorted</code></a> and with that same philosophy of converting to linear index equivalents would be like so -</p>\n\n<pre><code>dims = X.max(0)+1\nX1D = np.ravel_multi_index(X.T,dims)\nsearched_valuesID = np.ravel_multi_index(searched_values.T,dims)\nsidx = X1D.argsort()\nout = sidx[np.searchsorted(X1D,searched_valuesID,sorter=sidx)]\n</code></pre>\n\n<p>Please note that this <code>np.searchsorted</code> method assumes there is a match for each row from <code>searched_values</code> in <code>X</code>.</p>\n\n<hr>\n\n<h2>How does <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel_multi_index.html\" rel=\"noreferrer\"><code>np.ravel_multi_index</code></a> work?</h2>\n\n<p>This function gives us the linear index equivalent numbers. It accepts a <code>2D</code> array of <a href=\"http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#integer-array-indexing\" rel=\"noreferrer\"><code>n-dimensional indices</code></a>, set as columns and the shape of that n-dimensional grid itself onto which those indices are to be mapped and equivalent linear indices are to be computed.</p>\n\n<p>Let's use the inputs we have for the problem at hand. Take the case of input <code>X</code> and note the first row of it. Since, we are trying to convert each row of <code>X</code> into its linear index equivalent and since <code>np.ravel_multi_index</code> assumes each column as one indexing tuple, we need to transpose <code>X</code> before feeding into the function. Since, the number of elements per row in <code>X</code> in this case is <code>2</code>, the n-dimensional grid to be mapped onto would be <code>2D</code>. With 3 elements per row in <code>X</code>, it would had been <code>3D</code> grid for mapping and so on.</p>\n\n<p>To see how this function would compute linear indices, consider the first row of <code>X</code> -</p>\n\n<pre><code>In [77]: X\nOut[77]: \narray([[4, 2],\n       [9, 3],\n       [8, 5],\n       [3, 3],\n       [5, 6]])\n</code></pre>\n\n<p>We have the shape of the n-dimensional grid as <code>dims</code> -</p>\n\n<pre><code>In [78]: dims\nOut[78]: array([10,  7])\n</code></pre>\n\n<p>Let's create the 2-dimensional grid to see how that mapping works and linear indices get computed with <code>np.ravel_multi_index</code> -</p>\n\n<pre><code>In [79]: out = np.zeros(dims,dtype=int)\n\nIn [80]: out\nOut[80]: \narray([[0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0]])\n</code></pre>\n\n<p>Let's set the first indexing tuple from <code>X</code>, i.e. the first row from <code>X</code> into the grid -</p>\n\n<pre><code>In [81]: out[4,2] = 1\n\nIn [82]: out\nOut[82]: \narray([[0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 1, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0]])\n</code></pre>\n\n<p>Now, to see the linear index equivalent of the element just set, let's flatten and use <code>np.where</code> to detect that <code>1</code>.</p>\n\n<pre><code>In [83]: np.where(out.ravel())[0]\nOut[83]: array([30])\n</code></pre>\n\n<p>This could also be computed if row-major ordering is taken into account.</p>\n\n<p>Let's use <code>np.ravel_multi_index</code> and verify those linear indices -</p>\n\n<pre><code>In [84]: np.ravel_multi_index(X.T,dims)\nOut[84]: array([30, 66, 61, 24, 41])\n</code></pre>\n\n<p>Thus, we would have linear indices corresponding to each indexing tuple from <code>X</code>, i.e. each row from <code>X</code>.</p>\n\n<p><strong>Choosing dimensions for <code>np.ravel_multi_index</code> to form unique linear indices</strong></p>\n\n<p>Now, the idea behind considering each row of <code>X</code> as indexing tuple of a n-dimensional grid and converting each such tuple to a scalar is to have unique scalars corresponding to unique tuples, i.e. unique rows in <code>X</code>.</p>\n\n<p>Let's take another look at <code>X</code> -</p>\n\n<pre><code>In [77]: X\nOut[77]: \narray([[4, 2],\n       [9, 3],\n       [8, 5],\n       [3, 3],\n       [5, 6]])\n</code></pre>\n\n<p>Now, as discussed in the previous section, we are considering each row as indexing tuple. Within each such indexing tuple, the first element would represent the first axis of the n-dim grid, second element would be the second axis of the grid and so on until the last element of each row in <code>X</code>. In essence, each column would represent one dimension or axis of the grid. If we are to map all elements from <code>X</code> onto the same n-dim grid, we need to consider the maximum stretch of each axis of such a proposed n-dim grid. Assuming  we are dealing with positive numbers in <code>X</code>, such a stretch would be the maximum of each column in <code>X</code> + 1. That <code>+ 1</code> is because Python follows <code>0-based</code> indexing. So, for example <strong><code>X[1,0] == 9</code> would map to the 10th row</strong> of the proposed grid. Similarly, <strong><code>X[4,1] == 6</code> would go to the <code>7th</code> column</strong> of that grid.</p>\n\n<p>So, for our sample case, we had -</p>\n\n<pre><code>In [7]: dims = X.max(axis=0) + 1 # Or simply X.max(0) + 1\n\nIn [8]: dims\nOut[8]: array([10,  7])\n</code></pre>\n\n<p>Thus, we would need a grid of at least a shape of <code>(10,7)</code> for our sample case. More lengths along the dimensions won't hurt and would give us unique linear indices too. </p>\n\n<p>Concluding remarks : One important thing to be noted here is that if we have negative numbers in <code>X</code>, we need to add proper offsets along each column in <code>X</code> to make those indexing tuples as positive numbers before using <code>np.ravel_multi_index</code>.</p>\n"
    },
    "583": {
        "question_id": "49259580",
        "answer_id": "49259581",
        "question": "<p>How to replace values in a Pandas series <code>s</code> via a dictionary <code>d</code> has been asked and re-asked many times.</p>\n\n<p>The recommended method (<a href=\"https://stackoverflow.com/a/40855794/9209546\">1</a>, <a href=\"https://stackoverflow.com/a/40528697/9209546\">2</a>, <a href=\"https://stackoverflow.com/a/45355744/9209546\">3</a>, <a href=\"https://stackoverflow.com/a/20250996/9209546\">4</a>) is to either use <code>s.replace(d)</code> or, occasionally, use <code>s.map(d)</code> if all your series values are found in the dictionary keys.</p>\n\n<p>However, performance using <code>s.replace</code> is often unreasonably slow, often 5-10x slower than a simple list comprehension.</p>\n\n<p>The alternative, <code>s.map(d)</code> has good performance, but is only recommended when all keys are found in the dictionary.</p>\n\n<p>Why is <code>s.replace</code> so slow and how can performance be improved?</p>\n\n<pre><code>import pandas as pd, numpy as np\n\ndf = pd.DataFrame({'A': np.random.randint(0, 1000, 1000000)})\nlst = df['A'].values.tolist()\n\n##### TEST 1 #####\n\nd = {i: i+1 for i in range(1000)}\n\n%timeit df['A'].replace(d)                          # 1.98s\n%timeit [d[i] for i in lst]                         # 134ms\n\n##### TEST 2 #####\n\nd = {i: i+1 for i in range(10)}\n\n%timeit df['A'].replace(d)                          # 20.1ms\n%timeit [d.get(i, i) for i in lst]                  # 243ms\n</code></pre>\n\n<p><strong>Note:</strong> This question is not marked as a duplicate because it is looking for specific advice on <em>when to use</em> different methods given different datasets. This is explicit in the answer and is an aspect not usually addressed in other questions.</p>\n",
        "answer": "<p>One trivial solution is to choose a method dependent on an estimate of how completely values are covered by dictionary keys.</p>\n\n<p><strong>General case</strong></p>\n\n<ul>\n<li>Use <code>df['A'].map(d)</code> if all values mapped; or</li>\n<li>Use <code>df['A'].map(d).fillna(df['A']).astype(int)</code> if >5% values mapped.</li>\n</ul>\n\n<p><strong>Few, e.g. &lt; 5%, values in d</strong></p>\n\n<ul>\n<li>Use <code>df['A'].replace(d)</code></li>\n</ul>\n\n<p>The \"crossover point\" of ~5% is specific to Benchmarking below.</p>\n\n<p>Interestingly, a simple list comprehension generally underperforms <code>map</code> in either scenario.</p>\n\n<p><strong>Benchmarking</strong></p>\n\n<pre><code>import pandas as pd, numpy as np\n\ndf = pd.DataFrame({'A': np.random.randint(0, 1000, 1000000)})\nlst = df['A'].values.tolist()\n\n##### TEST 1 - Full Map #####\n\nd = {i: i+1 for i in range(1000)}\n\n%timeit df['A'].replace(d)                          # 1.98s\n%timeit df['A'].map(d)                              # 84.3ms\n%timeit [d[i] for i in lst]                         # 134ms\n\n##### TEST 2 - Partial Map #####\n\nd = {i: i+1 for i in range(10)}\n\n%timeit df['A'].replace(d)                          # 20.1ms\n%timeit df['A'].map(d).fillna(df['A']).astype(int)  # 111ms\n%timeit [d.get(i, i) for i in lst]                  # 243ms\n</code></pre>\n\n<p><strong>Explanation</strong></p>\n\n<p>The reason why <code>s.replace</code> is so slow is that it does much more than simply map a dictionary. It deals with some edge cases and arguably rare situations, which typically merit more care in any case.</p>\n\n<p>This is an excerpt from <code>replace()</code> in <a href=\"http://github.com/pandas-dev/pandas/blob/v0.22.0/pandas/core/generic.py#L4373-L4621\" rel=\"noreferrer\"><code>pandas\\generic.py</code></a>.</p>\n\n<pre><code>items = list(compat.iteritems(to_replace))\nkeys, values = zip(*items)\nare_mappings = [is_dict_like(v) for v in values]\n\nif any(are_mappings):\n    # handling of nested dictionaries\nelse:\n    to_replace, value = keys, values\n\nreturn self.replace(to_replace, value, inplace=inplace,\n                    limit=limit, regex=regex)\n</code></pre>\n\n<p>There appear to be many steps involved:</p>\n\n<ul>\n<li>Converting dictionary to a list.</li>\n<li>Iterating through list and checking for nested dictionaries.</li>\n<li>Feeding an iterator of keys and values into a replace function.</li>\n</ul>\n\n<p>This can be compared to much leaner code from <code>map()</code> in <a href=\"http://github.com/pandas-dev/pandas/blob/v0.22.0/pandas/core/series.py#L2229-L2357\" rel=\"noreferrer\"><code>pandas\\series.py</code></a>:</p>\n\n<pre><code>if isinstance(arg, (dict, Series)):\n    if isinstance(arg, dict):\n        arg = self._constructor(arg, index=arg.keys())\n\n    indexer = arg.index.get_indexer(values)\n    new_values = algos.take_1d(arg._values, indexer)\n</code></pre>\n"
    },
    "584": {
        "question_id": "6470428",
        "answer_id": "6470452",
        "question": "<p>I know that I can do:</p>\n\n<pre><code>try:\n    # do something that may fail\nexcept:\n    # do this if ANYTHING goes wrong\n</code></pre>\n\n<p>I can also do this:</p>\n\n<pre><code>try:\n    # do something that may fail\nexcept IDontLikeYouException:\n    # say please\nexcept YouAreTooShortException:\n    # stand on a ladder\n</code></pre>\n\n<p>But if I want to do the same thing inside two different exceptions, the best I can think of right now is to do this:</p>\n\n<pre><code>try:\n    # do something that may fail\nexcept IDontLikeYouException:\n    # say please\nexcept YouAreBeingMeanException:\n    # say please\n</code></pre>\n\n<p>Is there any way that I can do something like this (since the action to take in both exceptions is to <code>say please</code>):</p>\n\n<pre><code>try:\n    # do something that may fail\nexcept IDontLikeYouException, YouAreBeingMeanException:\n    # say please\n</code></pre>\n\n<p>Now this really won't work, as it matches the syntax for:</p>\n\n<pre><code>try:\n    # do something that may fail\nexcept Exception, e:\n    # say please\n</code></pre>\n\n<p>So, my effort to catch the two distinct exceptions doesn't exactly come through.</p>\n\n<p>Is there a way to do this?</p>\n",
        "answer": "<p>From <a href=\"https://docs.python.org/3/tutorial/errors.html#handling-exceptions\" rel=\"noreferrer\">Python Documentation</a>:</p>\n\n<blockquote>\n  <p>An except clause may name multiple exceptions as a parenthesized tuple, for example</p>\n</blockquote>\n\n<pre><code>except (IDontLikeYouException, YouAreBeingMeanException) as e:\n    pass\n</code></pre>\n\n<p>Or, for Python 2 only:</p>\n\n<pre><code>except (IDontLikeYouException, YouAreBeingMeanException), e:\n    pass\n</code></pre>\n\n<p>Separating the exception from the variable with a comma will still work in Python 2.6 and 2.7, but is now deprecated and does not work in Python 3; now you should be using <code>as</code>.</p>\n"
    },
    "585": {
        "question_id": "134934",
        "answer_id": "134951",
        "question": "<p>Given:</p>\n\n<pre><code>a = 1\nb = 10\nc = 100\n</code></pre>\n\n<p>How do I display a leading zero for all numbers with less than two digits?</p>\n\n<p>That is,</p>\n\n<pre><code>01\n10\n100\n</code></pre>\n",
        "answer": "<p>In Python 2 you can do:</p>\n\n<pre><code>print \"%02d\" % (1,)\n</code></pre>\n\n<p>Basically <strong>%</strong> is like <code>printf</code> or <code>sprintf</code>.</p>\n\n<hr>\n\n<p>For Python 3.+ the same behavior can be achieved with:</p>\n\n<pre><code>print(\"{:02d}\".format(1))\n</code></pre>\n\n<hr>\n\n<p>For Python 3.6+ the same behavior can be achieved with f-strings:</p>\n\n<pre><code>print(f\"{1:02d}\")\n</code></pre>\n"
    },
    "586": {
        "question_id": "10147455",
        "answer_id": "10147497",
        "question": "<p>I am trying to send email (Gmail) using python, but I am getting following error.</p>\n\n<pre><code>Traceback (most recent call last):  \nFile \"emailSend.py\", line 14, in &lt;module&gt;  \nserver.login(username,password)  \nFile \"/usr/lib/python2.5/smtplib.py\", line 554, in login  \nraise SMTPException(\"SMTP AUTH extension not supported by server.\")  \nsmtplib.SMTPException: SMTP AUTH extension not supported by server.\n</code></pre>\n\n<p>The Python script is the following.</p>\n\n<pre><code>import smtplib\nfromaddr = 'user_me@gmail.com'\ntoaddrs  = 'user_you@gmail.com'\nmsg = 'Why,Oh why!'\nusername = 'user_me@gmail.com'\npassword = 'pwd'\nserver = smtplib.SMTP('smtp.gmail.com:587')\nserver.starttls()\nserver.login(username,password)\nserver.sendmail(fromaddr, toaddrs, msg)\nserver.quit()\n</code></pre>\n",
        "answer": "<p>You need to say <code>EHLO</code> before just running straight into <code>STARTTLS</code>:</p>\n\n<pre><code>server = smtplib.SMTP('smtp.gmail.com:587')\nserver.ehlo()\nserver.starttls()\n</code></pre>\n\n<hr>\n\n<p>Also you should really create <code>From:</code>, <code>To:</code> and <code>Subject:</code> message headers, separated from the message body by a blank line and use <code>CRLF</code> as EOL markers.</p>\n\n<p>E.g.</p>\n\n<pre><code>msg = \"\\r\\n\".join([\n  \"From: user_me@gmail.com\",\n  \"To: user_you@gmail.com\",\n  \"Subject: Just a message\",\n  \"\",\n  \"Why, oh why\"\n  ])\n</code></pre>\n"
    },
    "587": {
        "question_id": "16208206",
        "answer_id": "16208298",
        "question": "<p>From the <a href=\"http://docs.python.org/2/library/functions.html#open\" rel=\"noreferrer\">doc</a>, </p>\n\n<blockquote>\n  <p>Modes 'r+', 'w+' and 'a+' open the file for updating (note that 'w+' truncates the file). Append 'b' to the mode to open the file in binary mode, on systems that differentiate between binary and text files; on systems that don\u2019t have this distinction, adding the 'b' has no effect.</p>\n</blockquote>\n\n<p>and <a href=\"http://www.tutorialspoint.com/python/python_files_io.htm\" rel=\"noreferrer\">here</a></p>\n\n<blockquote>\n  <p>w+ :  Opens a file for both writing and reading. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.</p>\n</blockquote>\n\n<p>But, how to read a file open with <code>w+</code>? </p>\n",
        "answer": "<p>Let's say you're opening the file with a <code>with</code> statement like you should be. Then you'd do something like this to read from your file:</p>\n\n<pre><code>with open('somefile.txt', 'w+') as f:\n    # Note that f has now been truncated to 0 bytes, so you'll only\n    # be able to read data that you write after this point\n    f.write('somedata\\n')\n    f.seek(0)  # Important: return to the top of the file before reading, otherwise you'll just read an empty string\n    data = f.read() # Returns 'somedata\\n'\n</code></pre>\n\n<p>Note the <code>f.seek(0)</code> -- if you forget this, the <code>f.read()</code> call will try to read from the end of the file, and will return an empty string.</p>\n"
    },
    "588": {
        "question_id": "128478",
        "answer_id": "128577",
        "question": "<p><a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\">PEP 08</a> states:</p>\n\n<blockquote>\n  <p>Imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and constants.</p>\n</blockquote>\n\n<p>However if the class/method/function that I am importing is only used in rare cases, surely it is more efficient to do the import when it is needed?</p>\n\n<p>Isn't this:</p>\n\n<pre><code>class SomeClass(object):\n\n    def not_often_called(self)\n        from datetime import datetime\n        self.datetime = datetime.now()\n</code></pre>\n\n<p>more efficient than this?</p>\n\n<pre><code>from datetime import datetime\n\nclass SomeClass(object):\n\n    def not_often_called(self)\n        self.datetime = datetime.now()\n</code></pre>\n",
        "answer": "<p>Module importing is quite fast, but not instant. This means that:</p>\n\n<ul>\n<li>Putting the imports at the top of the module is fine, because it's a trivial cost that's only paid once.</li>\n<li>Putting the imports within a function will cause calls to that function to take longer.</li>\n</ul>\n\n<p>So if you care about efficiency, put the imports at the top. Only move them into a function if your profiling shows that would help (you <strong>did</strong> profile to see where best to improve performance, right??)</p>\n\n<hr>\n\n<p>The best reasons I've seen to perform lazy imports are:</p>\n\n<ul>\n<li>Optional library support. If your code has multiple paths that use different libraries, don't break if an optional library is not installed.</li>\n<li>In the <code>__init__.py</code> of a plugin, which might be imported but not actually used. Examples are Bazaar plugins, which use <code>bzrlib</code>'s lazy-loading framework.</li>\n</ul>\n"
    },
    "589": {
        "question_id": "13613336",
        "answer_id": "13613375",
        "question": "<p>I have a list of 20 file names, like <code>['file1.txt', 'file2.txt', ...]</code>. I want to write a Python script to concatenate these files into a new file. I could open each file by <code>f = open(...)</code>, read line by line by calling <code>f.readline()</code>, and write each line into that new file. It doesn't seem very \"elegant\" to me, especially the part where I have to read//write line by line. </p>\n\n<p>Is there a more \"elegant\" way to do this in Python?</p>\n",
        "answer": "<p>This should do it</p>\n\n<p><strong>For large files:</strong></p>\n\n<pre><code>filenames = ['file1.txt', 'file2.txt', ...]\nwith open('path/to/output/file', 'w') as outfile:\n    for fname in filenames:\n        with open(fname) as infile:\n            for line in infile:\n                outfile.write(line)\n</code></pre>\n\n<p><strong>For small files:</strong></p>\n\n<pre><code>filenames = ['file1.txt', 'file2.txt', ...]\nwith open('path/to/output/file', 'w') as outfile:\n    for fname in filenames:\n        with open(fname) as infile:\n            outfile.write(infile.read())\n</code></pre>\n\n<p><strong>\u2026 and another interesting one that I thought of</strong>:</p>\n\n<pre><code>filenames = ['file1.txt', 'file2.txt', ...]\nwith open('path/to/output/file', 'w') as outfile:\n    for line in itertools.chain.from_iterable(itertools.imap(open, filnames)):\n        outfile.write(line)\n</code></pre>\n\n<p>Sadly, this last method leaves a few open file descriptors, which the GC should take care of anyway. I just thought it was interesting</p>\n"
    },
    "590": {
        "question_id": "29846087",
        "answer_id": "40888720",
        "question": "<p>I've installed Python 3.5 and while running </p>\n\n<pre><code>pip install mysql-python\n</code></pre>\n\n<p>it gives me the following error </p>\n\n<pre><code>error: Microsoft Visual C++ 14.0 is required (Unable to find vcvarsall.bat)\n</code></pre>\n\n<p>I have added the following lines to my Path</p>\n\n<pre><code>C:\\Program Files\\Python 3.5\\Scripts\\;\nC:\\Program Files\\Python 3.5\\;\n\nC:\\Windows\\System32;\nC:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC;\nC:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\n</code></pre>\n\n<p>I have a 64bit win 7 setup in my PC.</p>\n\n<p>What could be the solution for mitigating this error and installing the modules correctly via <code>pip</code>.</p>\n",
        "answer": "<p>Your path only lists Visual Studio 11 and 12, it wants 14, which is <a href=\"http://landinghub.visualstudio.com/visual-cpp-build-tools\" rel=\"noreferrer\">Visual Studio 2015</a>. If you install that, and remember to tick the box for <code>Languages-&gt;C++</code> then it should work. </p>\n\n<p>On my Python 3.5 install, the error message was a little more useful, and included the URL to get it from</p>\n\n<pre><code> error: Microsoft Visual C++ 14.0 is required. Get it with \"Microsoft Visual C++ Build Tools\": http://landinghub.visualstudio.com/visual-cpp-build-tools\n</code></pre>\n\n<p>Edit: New working <a href=\"https://visualstudio.microsoft.com/visual-cpp-build-tools\" rel=\"noreferrer\">link</a></p>\n\n<p>Edit: As suggested by Lightfire228, you may also need to upgrade <code>setuptools</code> package for the error to disappear:</p>\n\n<pre><code>pip install --upgrade setuptools\n</code></pre>\n"
    },
    "591": {
        "question_id": "26566799",
        "answer_id": "26567563",
        "question": "<p>I want to scrape all the data of a page implemented by a infinite scroll. The following python code works.</p>\n\n<pre><code>for i in range(100):\n    driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n    time.sleep(5)\n</code></pre>\n\n<p>This means every time I scroll down to the bottom, I need to wait 5 seconds, which is generally enough for the page to finish loading the newly generated contents. But, this may not be time efficient. The page may finish loading the new contents within 5 seconds. How can I detect whether the page finished loading the new contents every time I scroll down? If I can detect this, I can scroll down again to see more contents once I know the page finished loading. This is more time efficient.</p>\n",
        "answer": "<p>The <code>webdriver</code> will wait for a page to load by default via <code>.get()</code> method.</p>\n\n<p>As you may be looking for some specific element as @user227215 said, you should use <code>WebDriverWait</code> to wait for an element located in your page:</p>\n\n<pre><code>from selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.by import By\nfrom selenium.common.exceptions import TimeoutException\n\nbrowser = webdriver.Firefox()\nbrowser.get(\"url\")\ndelay = 3 # seconds\ntry:\n    myElem = WebDriverWait(browser, delay).until(EC.presence_of_element_located((By.ID, 'IdOfMyElement')))\n    print \"Page is ready!\"\nexcept TimeoutException:\n    print \"Loading took too much time!\"\n</code></pre>\n\n<p>I have used it for checking alerts. You can use any other type methods to find the locator. </p>\n\n<p><strong>EDIT 1:</strong></p>\n\n<p>I should mention that the <code>webdriver</code> will wait for a page to load by default. It does not wait for loading inside frames or for ajax requests. It means when you use <code>.get('url')</code>, your browser will wait until the page is completely loaded and then go to the next command in the code. But when you are posting an ajax request, <code>webdriver</code> does not wait and it's your responsibility to wait an appropriate amount of time for the page or a part of page to load; so there is a module named <code>expected_conditions</code>.</p>\n"
    },
    "592": {
        "question_id": "11779143",
        "answer_id": "11779234",
        "question": "<p>This sort of question has been asked before in varying degrees, but I feel it has not been answered in a concise way and so I ask it again.</p>\n\n<p>I want to run a script in Python. Let's say it's this:</p>\n\n<pre><code>if __name__ == '__main__':\n    with open(sys.argv[1], 'r') as f:\n        s = f.read()\n    print s\n</code></pre>\n\n<p>Which gets a file location, reads it, then prints its contents. Not so complicated.</p>\n\n<p>Okay, so how do I run this in C#?</p>\n\n<p>This is what I have now:</p>\n\n<pre><code>    private void run_cmd(string cmd, string args)\n    {\n        ProcessStartInfo start = new ProcessStartInfo();\n        start.FileName = cmd;\n        start.Arguments = args;\n        start.UseShellExecute = false;\n        start.RedirectStandardOutput = true;\n        using (Process process = Process.Start(start))\n        {\n            using (StreamReader reader = process.StandardOutput)\n            {\n                string result = reader.ReadToEnd();\n                Console.Write(result);\n            }\n        }\n    }\n</code></pre>\n\n<p>When I pass the <code>code.py</code> location as <code>cmd</code> and the <code>filename</code> location as <code>args</code> it doesn't work. I was told I should pass <code>python.exe</code> as the <code>cmd</code>, and then <code>code.py filename</code> as the <code>args</code>.</p>\n\n<p>I have been looking for a while now and can only find people suggesting to use IronPython or such. But there must be a way to call a Python script from C#.</p>\n\n<p>Some clarification:</p>\n\n<p>I need to run it from C#, I need to capture the output, and I can't use IronPython or anything else. Whatever hack you have will be fine.</p>\n\n<p>P.S.: The actual Python code I'm running is much more complex than this, and it returns output which I need in C#, and the C# code will be constantly calling the Python.</p>\n\n<p>Pretend this is my code:</p>\n\n<pre><code>    private void get_vals()\n    {\n        for (int i = 0; i &lt; 100; i++)\n        {\n            run_cmd(\"code.py\", i);\n        }\n    }\n</code></pre>\n",
        "answer": "<p>The reason it isn't working is because you have <code>UseShellExecute = false</code>.</p>\n\n<p>If you don't use the shell, you will have to supply the complete path to the python executable as <code>FileName</code>, and build the <code>Arguments</code> string to supply both your script and the file you want to read.</p>\n\n<p>Also note, that you can't <code>RedirectStandardOutput</code> unless <code>UseShellExecute = false</code>.</p>\n\n<p>I'm not quite sure how the argument string should be formatted for python, but you will need something like this:</p>\n\n<pre><code>private void run_cmd(string cmd, string args)\n{\n     ProcessStartInfo start = new ProcessStartInfo();\n     start.FileName = \"my/full/path/to/python.exe\";\n     start.Arguments = string.Format(\"{0} {1}\", cmd, args);\n     start.UseShellExecute = false;\n     start.RedirectStandardOutput = true;\n     using(Process process = Process.Start(start))\n     {\n         using(StreamReader reader = process.StandardOutput)\n         {\n             string result = reader.ReadToEnd();\n             Console.Write(result);\n         }\n     }\n}\n</code></pre>\n"
    },
    "593": {
        "question_id": "579687",
        "answer_id": "4203897",
        "question": "<p>I'm trying to make a basic Windows application that builds a string out of user input and then adds it to the clipboard. How do I copy a string to the clipboard using Python?</p>\n",
        "answer": "<p>Actually, <code>pywin32</code> and <code>ctypes</code> seem to be an overkill for this simple task. <code>Tkinter</code> is a cross-platform GUI framework, which ships with Python by default and has clipboard accessing methods along with other cool stuff.</p>\n\n<p>If all you need is to put some text to system clipboard, this will do it:</p>\n\n<pre><code>from Tkinter import Tk\nr = Tk()\nr.withdraw()\nr.clipboard_clear()\nr.clipboard_append('i can has clipboardz?')\nr.update() # now it stays on the clipboard after the window is closed\nr.destroy()\n</code></pre>\n\n<p>And that's all, no need to mess around with platform-specific third-party libraries.</p>\n\n<p>If you are using Python 3, replace <code>TKinter</code> with <code>tkinter</code>.</p>\n"
    },
    "594": {
        "question_id": "4940032",
        "answer_id": "4944929",
        "question": "<p>I want to check if a string is in a text file. If it is, do X. If it's not, do Y. However, this code always returns <code>True</code> for some reason. Can anyone see what is wrong?</p>\n\n<pre><code>def check():\n    datafile = file('example.txt')\n    found = False\n    for line in datafile:\n        if blabla in line:\n            found = True\n            break\n\ncheck()\nif True:\n    print \"true\"\nelse:\n    print \"false\"\n</code></pre>\n",
        "answer": "<p>The reason why you always got <code>True</code> has already been given, so I'll just offer another suggestion:</p>\n\n<p>If your file is not too large, you can read it into a string, and just use that (easier and often faster than reading and checking line per line):</p>\n\n<pre><code>if 'blabla' in open('example.txt').read():\n    print(\"true\")\n</code></pre>\n\n<p>Another trick: you can alleviate the possible memory problems by using <a href=\"http://docs.python.org/library/mmap.html\" rel=\"noreferrer\"><code>mmap.mmap()</code></a> to create a \"string-like\" object that uses the underlying file (instead of reading the whole file in memory):</p>\n\n<pre><code>import mmap\n\nf = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif s.find('blabla') != -1:\n    print('true')\n</code></pre>\n\n<p>NOTE: in python 3, mmaps behave like <code>bytearray</code> objects rather than strings, so the subsequence you look for with <code>find()</code> has to be a <code>bytes</code> object rather than a string as well, eg. <code>s.find(b'blabla')</code>:</p>\n\n<pre><code>#!/usr/bin/env python3\nimport mmap\n\nwith open('example.txt', 'rb', 0) as file, \\\n     mmap.mmap(file.fileno(), 0, access=mmap.ACCESS_READ) as s:\n    if s.find(b'blabla') != -1:\n        print('true')\n</code></pre>\n\n<p>You could also use regular expressions on <code>mmap</code> e.g., case-insensitive search: <code>if re.search(br'(?i)blabla', s):</code></p>\n"
    },
    "595": {
        "question_id": "4576115",
        "answer_id": "4576128",
        "question": "<p>Let's say I have a list <code>a</code> in Python whose entries conveniently map to a dictionary. Each even element represents the key to the dictionary, and the following odd element is the value</p>\n\n<p>for example,</p>\n\n<pre><code>a = ['hello','world','1','2']\n</code></pre>\n\n<p>and I'd like to convert it to a dictionary <code>b</code>, where </p>\n\n<pre><code>b['hello'] = 'world'\nb['1'] = '2'\n</code></pre>\n\n<p>What is the syntactically cleanest way to accomplish this?</p>\n",
        "answer": "<pre><code>b = dict(zip(a[::2], a[1::2]))\n</code></pre>\n\n<p>If <code>a</code> is large, you will probably want to do something like the following, which doesn't make any temporary lists like the above.</p>\n\n<pre><code>from itertools import izip\ni = iter(a)\nb = dict(izip(i, i))\n</code></pre>\n\n<p>In Python 3 you could also use a dict comprehension, but ironically I think the simplest way to do it will be with <code>range()</code> and <code>len()</code>, which would normally be a code smell.</p>\n\n<pre><code>b = {a[i]: a[i+1] for i in range(0, len(a), 2)}\n</code></pre>\n\n<p>So the <code>iter()/izip()</code> method is still probably the most Pythonic in Python 3, although as EOL notes in a comment, <code>zip()</code> is already lazy in Python 3 so you don't need <code>izip()</code>.</p>\n\n<pre><code>i = iter(a)\nb = dict(zip(i, i))\n</code></pre>\n\n<p>If you want it on one line, you'll have to cheat and use a semicolon.  ;-)</p>\n"
    },
    "596": {
        "question_id": "125703",
        "answer_id": "125759",
        "question": "<p>I'm using Python, and would like to insert a string into a text file without deleting or copying the file. How can I do that?</p>\n",
        "answer": "<p>Unfortunately there is no way to insert into the middle of a file without re-writing it. As previous posters have indicated, you can append to a file or overwrite part of it using seek but if you want to add stuff at the beginning or the middle, you'll have to rewrite it.</p>\n\n<p>This is an operating system thing, not a Python thing. It is the same in all languages.</p>\n\n<p>What I usually do is read from the file, make the modifications and write it out to a new file called myfile.txt.tmp or something like that. This is better than reading the whole file into memory because the file may be too large for that. Once the temporary file is completed, I rename it the same as the original file.</p>\n\n<p>This is a good, safe way to do it because if the file write crashes or aborts for any reason, you still have your untouched original file.</p>\n"
    },
    "597": {
        "question_id": "2714573",
        "answer_id": "2714590",
        "question": "<p>I have Python classes, of which I need only one instance at runtime, so it would be sufficient to have the attributes only once per class and not per instance. If there would be more than one instance (which won't happen), all instance should have the same configuration. I wonder which of the following options would be better or more \"idiomatic\" Python.</p>\n\n<p>Class variables:</p>\n\n<pre><code>class MyController(Controller):\n\n  path = \"something/\"\n  children = [AController, BController]\n\n  def action(self, request):\n    pass\n</code></pre>\n\n<p>Instance variables:</p>\n\n<pre><code>class MyController(Controller):\n\n  def __init__(self):\n    self.path = \"something/\"\n    self.children = [AController, BController]\n\n  def action(self, request):\n    pass\n</code></pre>\n",
        "answer": "<p>If you have only one instance anyway, it's best to make all variables per-instance, simply because they will be accessed (a little bit) faster (one less level of \"lookup\" due to the \"inheritance\" from class to instance), and there are no downsides to weigh against this small advantage.</p>\n"
    },
    "598": {
        "question_id": "8028708",
        "answer_id": "8028772",
        "question": "<p>How do you dynamically set local variable in Python?</p>\n\n<p>(where the variable name is dynamic)</p>\n\n<p><strong>UPDATE:</strong> I'm aware this isn't good practice, and the remarks are legit, but this doesn't make it a bad question, just a more theoretical one - I don't see why this justifies downvotes.</p>\n",
        "answer": "<p>Contrary to other answers already posted you cannot modify <code>locals()</code> directly and expect it to work.</p>\n\n<pre><code>&gt;&gt;&gt; def foo():\n    lcl = locals()\n    lcl['xyz'] = 42\n    print(xyz)\n\n\n&gt;&gt;&gt; foo()\n\nTraceback (most recent call last):\n  File \"&lt;pyshell#6&gt;\", line 1, in &lt;module&gt;\n    foo()\n  File \"&lt;pyshell#5&gt;\", line 4, in foo\n    print(xyz)\nNameError: global name 'xyz' is not defined\n</code></pre>\n\n<p>Modifying <code>locals()</code> is undefined. Outside a function when <code>locals()</code> and <code>globals()</code> are the same it will work; inside a function it will <em>usually</em> not work.</p>\n\n<p>Use a dictionary, or set an attribute on an object:</p>\n\n<pre><code>d = {}\nd['xyz'] = 42\nprint(d['xyz'])\n</code></pre>\n\n<p>or if you prefer, use a class:</p>\n\n<pre><code>class C: pass\n\nobj = C()\nsetattr(obj, 'xyz', 42)\nprint(obj.xyz)\n</code></pre>\n\n<p><strong>Edit</strong>:\nAccess to variables in namespaces that aren't functions (so modules, class definitions, instances) are usually done by dictionary lookups (as Sven points out in the comments there are exceptions, for example classes that define <code>__slots__</code>). Function locals can be optimised for speed because the compiler (usually) knows all the names in advance, so there isn't a dictionary until you call <code>locals()</code>.</p>\n\n<p>In the C implementation of Python <code>locals()</code> (called from inside a function) creates an ordinary dictionary initialised from the current values of the local variables. Within each function any number of calls to <code>locals()</code> will return the same dictionary, but every call to <code>locals()</code> will update it with the current values of the local variables. This can give the impression that assignment to elements of the dictionary are ignored (I originally wrote that this was the case). Modifications to existing keys within the dictionary returned from <code>locals()</code> therefore only last until the next call to <code>locals()</code> in the same scope.</p>\n\n<p>In IronPython things work a bit differently. Any function that calls <code>locals()</code> inside it uses a dictionary for its local variables so assignments to local variables change the dictionary and assignments to the dictionary change the variables <strong>BUT</strong> that's only if you explicitly call <code>locals()</code> under that name. If you bind a different name to the <code>locals</code> function in IronPython then calling it gives you the local variables for the scope where the name was bound and there's no way to access the function locals through it:</p>\n\n<pre><code>&gt;&gt;&gt; def foo():\n...     abc = 123\n...     lcl = zzz()\n...     lcl['abc'] = 456\n...     deF = 789\n...     print(abc)\n...     print(zzz())\n...     print(lcl)\n...\n&gt;&gt;&gt; zzz =locals\n&gt;&gt;&gt; foo()\n123\n{'__doc__': None, '__builtins__': &lt;module '__builtin__' (built-in)&gt;, 'zzz': &lt;built-in function locals&gt;, 'foo': &lt;function foo at 0x000000000000002B&gt;, '__name__': '__main__', 'abc': 456}\n{'__doc__': None, '__builtins__': &lt;module '__builtin__' (built-in)&gt;, 'zzz': &lt;built-in function locals&gt;, 'foo': &lt;function foo at 0x000000000000002B&gt;, '__name__': '__main__', 'abc': 456}\n&gt;&gt;&gt;\n</code></pre>\n\n<p>This could all change at any time. The only thing guaranteed is that you cannot depend on the results of assigning to the dictionary returned by <code>locals()</code>.</p>\n"
    },
    "599": {
        "question_id": "10604409",
        "answer_id": "10605079",
        "question": "<p>I use Sublime Text 2 but it won't let me enter any value when my code asks for user input. (In other words: <code>input()</code> in Python and <code>gets</code> in Ruby fail to correctly prompt me for input).</p>\n\n<p>Python throws an <code>EOFError</code> error (what you get when user doesn't enter anything).</p>\n\n<p>Simply USER INPUT isn't working in Sublime Text 2 for me.</p>\n\n<p>EDIT: FOR EXAMPLE</p>\n\n<pre><code>try:\n    text = input('Enter something: ')\n    print text\nexcept EOFError:\n    print('\\nEOFError')\n\n=&gt; Enter something: #cannot enter anything to var \"text\"\n=&gt; EOFError\n=&gt; [Finished]\n</code></pre>\n",
        "answer": "<p>Sublime text doesn't support that. But you can get around it (at least in python) by using <a href=\"https://github.com/wuub/SublimeREPL\" rel=\"noreferrer\">SublimeREPL</a>, I use this for everything, it works pretty great. Its a little cooky though, as the tab is still editable like a normal sublime tab (which is good and bad)...</p>\n\n<p>It also allows you to run the interpreter in multiple tabs, its basically awesome.</p>\n\n<p>To install it you need <code>package control</code> this lets you easily install plugins. To get it go <a href=\"http://wbond.net/sublime_packages/package_control/installation\" rel=\"noreferrer\">here</a>, and follow the instructions. Once thats done:</p>\n\n<ul>\n<li>in Sublime press <kbd>ctrl</kbd> + <kbd>shift</kbd> + <kbd>P</kbd> (linux command in <code>ST</code> for 'goto anything'). </li>\n<li>Type in 'install', </li>\n<li>click on 'sublime package control: install package'. </li>\n<li>Then select <code>SublimeREPL</code>. It will install it automatically. </li>\n<li>To use it go to <code>Tools&gt;sublimerepl&gt;python</code> from the menus.</li>\n</ul>\n"
    },
    "600": {
        "question_id": "8725673",
        "answer_id": "8725769",
        "question": "<p>What is the difference between the following Python expressions:</p>\n\n<pre><code># First:\n\nx,y = y,x+y\n\n# Second:\n\nx = y\ny = x+y\n</code></pre>\n\n<p><em>First</em> gives different results than <em>Second</em>.</p>\n\n<p>e.g.,</p>\n\n<p><em>First:</em></p>\n\n<pre><code>&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; y = 2\n&gt;&gt;&gt; x,y = y,x+y\n&gt;&gt;&gt; x\n2\n&gt;&gt;&gt; y\n3\n</code></pre>\n\n<p><em>Second:</em></p>\n\n<pre><code>&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; y = 2\n&gt;&gt;&gt; x = y\n&gt;&gt;&gt; y = x+y\n&gt;&gt;&gt; x\n2\n&gt;&gt;&gt; y\n4\n</code></pre>\n\n<p><em>y</em> is 3 in <em>First</em> and 4 in <em>Second</em></p>\n",
        "answer": "<p>In an assignment statement, the right-hand side is always evaluated fully <em>before</em> doing the actual setting of variables. So,</p>\n\n<pre><code>x, y = y, x + y\n</code></pre>\n\n<p>evaluates <code>y</code> (let's call the result <code>ham</code>), evaluates <code>x + y</code> (call that <code>spam</code>), <em>then</em> sets <code>x</code> to <code>ham</code> and <code>y</code> to <code>spam</code>. I.e., it's like</p>\n\n<pre><code>ham = y\nspam = x + y\nx = ham\ny = spam\n</code></pre>\n\n<p>By contrast,</p>\n\n<pre><code>x = y\ny = x + y\n</code></pre>\n\n<p>sets <code>x</code> to <code>y</code>, then sets <code>y</code> to <code>x</code> (which <code>== y</code>) plus <code>y</code>, so it's equivalent to</p>\n\n<pre><code>x = y\ny = y + y\n</code></pre>\n"
    },
    "601": {
        "question_id": "11620151",
        "answer_id": "11620174",
        "question": "<p>When I type small integers with a 0 in front into python, they give weird results. Why is this?</p>\n\n<pre><code>&gt;&gt;&gt; 011\n9\n&gt;&gt;&gt; 0100\n64\n&gt;&gt;&gt; 027\n23\n</code></pre>\n\n<p>Note: Python version 2.7.3\nI have tested this in Python 3.0, and apparently this is now an error. So it is something version-specific. </p>\n\n<p>Edit: they are apparently still integers:</p>\n\n<pre><code>&gt;&gt;&gt; type(027)\n`&lt;type 'int'&gt;`\n</code></pre>\n",
        "answer": "<p>These are numbers represented in base 8 (octal numbers).\nFor example,</p>\n\n<p><code>011</code> is equal to             <code>1*(8**1) + 1*(8**0)</code> = 9,</p>\n\n<p><code>0100</code> is equal to <code>1*(8**2) + 0*(8**1) + 0*(8**0)</code> = 64,</p>\n\n<p><code>027</code> is equal to             <code>2*(8**1) + 7*(8**0)</code> = 16 + 7 = 23.</p>\n\n<p><strong>Version 3 alert</strong>:  In Python 3, one must use <code>0o</code> instead of just <code>0</code> to indicate an octal constant, e.g. <code>0o11</code> or <code>0o27</code>, etc.</p>\n"
    },
    "602": {
        "question_id": "31948285",
        "answer_id": "31951077",
        "question": "<p>I have a view that generates data and streams it in real time.  I can't figure out how to send this data to a variable that I can use in my HTML template.  My current solution just outputs the data to a blank page as it arrives, which works, but I want to include it in a larger page with formatting.  How do I update, format, and display the data as it is streamed to the page?</p>\n\n<pre><code>import flask\nimport time, math\n\napp = flask.Flask(__name__)\n\n@app.route('/')\ndef index():\n    def inner():\n        # simulate a long process to watch\n        for i in range(500):\n            j = math.sqrt(i)\n            time.sleep(1)\n            # this value should be inserted into an HTML template\n            yield str(i) + '&lt;br/&gt;\\n'\n    return flask.Response(inner(), mimetype='text/html')\n\napp.run(debug=True)\n</code></pre>\n",
        "answer": "<p>You can stream data in a response, but you can't dynamically update a template the way you describe.  The template is rendered once on the server side, then sent to the client.  You'll need to use JavaScript to read the streamed response and output the data on the client side.</p>\n\n<p>Use <code>XMLHttpRequest</code> to make a request to the endpoint that will stream the data.  Then periodically read from the stream until it is done.</p>\n\n<p>This example assumes a very simple message format: a single line of data, followed by a newline.  You can of course get as complicated in parsing as you like, as long as there's a way to identify each message.  For example, you could return a JSON object and decode it on the client.</p>\n\n<pre><code>from time import sleep\nfrom flask import Flask, render_template\nfrom math import sqrt\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    # render the template (below) that will use JavaScript to read the stream\n    return render_template('index.html')\n\n@app.route('/stream_sqrt')\ndef stream():\n    def generate():\n        for i in range(500):\n            yield '{}\\n'.format(sqrt(i))\n            sleep(1)\n\n    return app.response_class(generate(), mimetype='text/plain')\n\napp.run()\n</code></pre>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;p&gt;This is the latest output: &lt;span id=\"latest\"&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;This is all the output:&lt;/p&gt;\n&lt;ul id=\"output\"&gt;&lt;/ul&gt;\n&lt;script&gt;\n    var latest = document.getElementById('latest');\n    var output = document.getElementById('output');\n\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', '{{ url_for('stream') }}');\n    xhr.send();\n    var position = 0;\n\n    function handleNewData() {\n        // the response text include the entire response so far\n        // split the messages, then take the messages that haven't been handled yet\n        // position tracks how many messages have been handled\n        // messages end with a newline, so split will always show one extra empty message at the end\n        var messages = xhr.responseText.split('\\n');\n        messages.slice(position, -1).forEach(function(value) {\n            latest.textContent = value;  // update the latest value in place\n            // build and append a new item to a list to log all output\n            var item = document.createElement('li');\n            item.textContent = value;\n            output.appendChild(item);\n        });\n        position = messages.length - 1;\n    }\n\n    var timer;\n    timer = setInterval(function() {\n        // check the response for new data\n        handleNewData();\n        // stop checking once the response has ended\n        if (xhr.readyState == XMLHttpRequest.DONE) {\n            clearInterval(timer);\n            latest.textContent = 'Done';\n        }\n    }, 1000);\n&lt;/script&gt;\n</code></pre>\n"
    },
    "603": {
        "question_id": "13058458",
        "answer_id": "13058802",
        "question": "<p>I have experienced some problem by using a nested list in Python in the code shown bleow.</p>\n\n<p>Basically, I have a 2D list contains all 0 values, I want to update the list value in a loop.</p>\n\n<p>However, Python does not produce the result I want. Is there something that I misunderstand about <code>range()</code> and Python list indices?</p>\n\n<pre><code>some_list = 4 * [(4 * [0])]\nfor i in range(3):\n    for j in range(3):\n        some_list[i+1][j+1] = 1\nfor i in range(4):\n    print(some_list[i])\n</code></pre>\n\n<p>The results I expected are:</p>\n\n<pre><code>[0, 0, 0, 0]\n[0, 1, 1, 1]\n[0, 1, 1, 1]\n[0, 1, 1, 1]\n</code></pre>\n\n<p>But the actual results from Python are:</p>\n\n<pre><code>[0, 1, 1, 1]\n[0, 1, 1, 1]\n[0, 1, 1, 1]\n[0, 1, 1, 1]\n</code></pre>\n\n<p>What's going on here?</p>\n",
        "answer": "<p>The problem is caused by the fact that python chooses to pass lists around by reference.</p>\n\n<p>Normally variables are passed \"by value\", so they operate independently:</p>\n\n<pre><code>&gt;&gt;&gt; a = 1\n&gt;&gt;&gt; b = a\n&gt;&gt;&gt; a = 2\n&gt;&gt;&gt; print b\n1\n</code></pre>\n\n<p>But since lists might get pretty large, rather than shifting the whole list around memory, Python chooses to just use a reference ('pointer' in C terms). If you assign one to another variable, you assign just the reference to it. This means that you can have two variables pointing to the same list in memory:</p>\n\n<pre><code>&gt;&gt;&gt; a = [1]\n&gt;&gt;&gt; b = a\n&gt;&gt;&gt; a[0] = 2\n&gt;&gt;&gt; print b\n[2]\n</code></pre>\n\n<p>So, in your first line of code you have <code>4 * [0]</code>. Now <code>[0]</code> is a pointer to the value 0 in memory, and when you multiply it, you get four pointers to the same place in memory. BUT when you change one of the values then Python knows that the pointer needs to change to point to the new value:</p>\n\n<pre><code>&gt;&gt;&gt; a = 4 * [0]\n&gt;&gt;&gt; a\n[0, 0, 0, 0]\n&gt;&gt;&gt; [id(v) for v in a]\n[33302480, 33302480, 33302480, 33302480]\n&gt;&gt;&gt; a[0] = 1\n&gt;&gt;&gt; a\n[1, 0, 0, 0]\n</code></pre>\n\n<p>The problem comes when you multiply this list - you get four copies of the list pointer. Now when you change one of the values in one list, all four change together:</p>\n\n<pre><code>&gt;&gt;&gt; a[0][0] = 1\n&gt;&gt;&gt; a\n[[1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0]]\n</code></pre>\n\n<p>The solution is to avoid the second multiplication. A loop does the job:</p>\n\n<pre><code>&gt;&gt;&gt; some_list = [(4 * [0]) for _ in range(4)]\n</code></pre>\n"
    },
    "604": {
        "question_id": "32024551",
        "answer_id": "32024636",
        "question": "<p>I have a route defined like this:</p>\n\n<pre><code>@app.route('/magic/&lt;filename&gt;')\ndef moremagic(filename):\n    pass\n</code></pre>\n\n<p>And now in a template I want to call that route using <code>url_for()</code> like so:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;h1&gt;you uploaded {{ name }}&lt;h1&gt;\n&lt;a href=\"{{ url_for('/magic/&lt;filename&gt;') }}\"&gt;Click to see magic happen&lt;/a&gt;\n</code></pre>\n\n<p>I have tried:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;a href=\"{{ url_for('/magic', filename={{ name }}) }}\"&gt;Click to see magic happen&lt;/a&gt;\n</code></pre>\n\n<p>That throws a <code>jinja2.TemplateSyntaxError:  expected token  ':' got }</code></p>\n\n<p>Can anyone suggest how to get the <code>{{ name }}</code> that appears in the template into the <code>url_for()</code> so that when I click I call the correct <code>app.route</code>?</p>\n",
        "answer": "<p>Everything inside the <code>{{ ... }}</code> is a Python-like expression. You don't need to use another <code>{{ ... }}</code> inside that to reference variables.</p>\n\n<p>Drop the extra brackets:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;h1&gt;you uploaded {{ name }}&lt;h1&gt;\n&lt;a href=\"{{ url_for('moremagic', filename=name) }}\"&gt;Click to see magic happen&lt;/a&gt;\n</code></pre>\n\n<p>(Note that the <code>url_for()</code> function takes the endpoint <em>name</em>, not a URL path; the name defaults to the name of the function, <code>moremagic</code> in your example).</p>\n"
    },
    "605": {
        "question_id": "2090706",
        "answer_id": "2090711",
        "question": "<p>I'm completely lost as to why this isn't working. Should work precisely, right?</p>\n\n<pre><code>UserName = input(\"Please enter your name: \")\nprint (\"Hello Mr. \" + UserName)\nraw_input(\"&lt;Press Enter to quit.&gt;\")\n</code></pre>\n\n<p>I get this exception:</p>\n\n<pre><code>Traceback (most recent call last):  \n  File \"Test1.py\", line 1, in &lt;module&gt;\n    UserName = input(\"Please enter your name: \")\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\nNameError: name 'k' is not defined  \n</code></pre>\n\n<p>It says <code>NameError 'k'</code>, because I wrote <code>'k'</code> as the input during my tests. I've read that the print statement used to be without parenthesis but that has been deprecated right?</p>\n",
        "answer": "<p>Do not use <code>input()</code> in 2.x. Use <code>raw_input()</code> instead. Always.</p>\n"
    },
    "606": {
        "question_id": "739993",
        "answer_id": "23885252",
        "question": "<p>I would like to get a list of Python modules, which are in my Python installation (UNIX server).</p>\n\n<p>How can you get a list of Python modules installed in your computer?</p>\n",
        "answer": "<h2>Solution</h2>\n\n<p>My 50 cents for getting a <code>pip freeze</code>-like list from a Python script:</p>\n\n<pre class=\"lang-python prettyprint-override\"><code>import pip\ninstalled_packages = pip.get_installed_distributions()\ninstalled_packages_list = sorted([\"%s==%s\" % (i.key, i.version)\n     for i in installed_packages])\nprint(installed_packages_list)\n</code></pre>\n\n<p>As a (too long) one liner:</p>\n\n<pre class=\"lang-python prettyprint-override\"><code>sorted([\"%s==%s\" % (i.key, i.version) for i in pip.get_installed_distributions()])\n</code></pre>\n\n<p>Giving:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>['behave==1.2.4', 'enum34==1.0', 'flask==0.10.1', 'itsdangerous==0.24', \n 'jinja2==2.7.2', 'jsonschema==2.3.0', 'markupsafe==0.23', 'nose==1.3.3', \n 'parse-type==0.3.4', 'parse==1.6.4', 'prettytable==0.7.2', 'requests==2.3.0',\n 'six==1.6.1', 'vioozer-metadata==0.1', 'vioozer-users-server==0.1', \n 'werkzeug==0.9.4']\n</code></pre>\n\n<h2>Scope</h2>\n\n<p>This solution applies to the system scope or to a virtual environment scope, and covers packages installed by <code>setuptools</code>, <code>pip</code> and (<a href=\"https://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install\">god forbid</a>) <code>easy_install</code>.</p>\n\n<h2>My use case</h2>\n\n<p>I added the result of this call to my flask server, so when I call it with <code>http://example.com/exampleServer/environment</code> I get the list of packages installed on the server's virtualenv. It makes debugging a whole lot easier.</p>\n\n<h2>Caveats</h2>\n\n<p>I have noticed a strange behaviour of this technique - when the Python interpreter is invoked in the same directory as a <code>setup.py</code> file, it does not list the package installed by <code>setup.py</code>.</p>\n\n<h3>Steps to reproduce:</h3>\n\nCreate a virtual environment\n\n<pre><code>$ cd /tmp\n$ virtualenv test_env\nNew python executable in test_env/bin/python\nInstalling setuptools, pip...done.\n$ source test_env/bin/activate\n(test_env) $ \n</code></pre>\n\nClone a git repo with <code>setup.py</code>\n\n<pre><code>(test_env) $ git clone https://github.com/behave/behave.git\nCloning into 'behave'...\nremote: Reusing existing pack: 4350, done.\nremote: Total 4350 (delta 0), reused 0 (delta 0)\nReceiving objects: 100% (4350/4350), 1.85 MiB | 418.00 KiB/s, done.\nResolving deltas: 100% (2388/2388), done.\nChecking connectivity... done.\n</code></pre>\n\n<p>We have behave's <code>setup.py</code> in <code>/tmp/behave</code>:</p>\n\n<pre><code>(test_env) $ ls /tmp/behave/setup.py\n/tmp/behave/setup.py\n</code></pre>\n\nInstall the python package from the git repo\n\n<pre><code>(test_env) $ cd /tmp/behave &amp;&amp; python setup.py install\nrunning install\n...\nInstalled /private/tmp/test_env/lib/python2.7/site-packages/enum34-1.0-py2.7.egg\nFinished processing dependencies for behave==1.2.5a1\n</code></pre>\n\n<h3>If we run the aforementioned solution from <code>/tmp</code></h3>\n\n<pre><code>&gt;&gt;&gt; import pip\n&gt;&gt;&gt; sorted([\"%s==%s\" % (i.key, i.version) for i in pip.get_installed_distributions()])\n['behave==1.2.5a1', 'enum34==1.0', 'parse-type==0.3.4', 'parse==1.6.4', 'six==1.6.1']\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.getcwd()\n'/private/tmp'\n</code></pre>\n\n<h3>If we run the aforementioned solution from <code>/tmp/behave</code></h3>\n\n<pre><code>&gt;&gt;&gt; import pip\n&gt;&gt;&gt; sorted([\"%s==%s\" % (i.key, i.version) for i in pip.get_installed_distributions()])\n['enum34==1.0', 'parse-type==0.3.4', 'parse==1.6.4', 'six==1.6.1']\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.getcwd()\n'/private/tmp/behave'\n</code></pre>\n\n<p><code>behave==1.2.5a1</code> is missing from the second example, because the working directory contains <code>behave</code>'s <code>setup.py</code> file.</p>\n\n<p>I could not find any reference to this issue in the documentation. Perhaps I shall open a bug for it.</p>\n"
    },
    "607": {
        "question_id": "6392739",
        "answer_id": "6392768",
        "question": "<p>I'm looking at some Python code which used the <code>@</code> symbol, but I have no idea what it does. I also do not know what to search for as searching Python docs or Google does not return relevant results when the <code>@</code> symbol is included.</p>\n",
        "answer": "<p>An <code>@</code> symbol at the beginning of a line is used for class, function and method <em>decorators</em>.</p>\n\n<p>Read more here:</p>\n\n<p><a href=\"http://www.python.org/dev/peps/pep-0318/\" rel=\"noreferrer\">PEP 318: Decorators</a></p>\n\n<p><a href=\"http://wiki.python.org/moin/PythonDecorators\" rel=\"noreferrer\">Python Decorators</a></p>\n\n<p>The most common Python decorators you'll run into are:</p>\n\n<p><a href=\"http://docs.python.org/library/functions.html#property\" rel=\"noreferrer\">@property</a></p>\n\n<p><a href=\"http://docs.python.org/library/functions.html#classmethod\" rel=\"noreferrer\">@classmethod</a></p>\n\n<p><a href=\"http://docs.python.org/library/functions.html#staticmethod\" rel=\"noreferrer\">@staticmethod</a></p>\n\n<p>If you see an <code>@</code> in the middle of a line, that's a different thing, matrix multiplication. Scroll down to see other answers that address that use of <code>@</code>.</p>\n"
    },
    "608": {
        "question_id": "1388818",
        "answer_id": "1388836",
        "question": "<p>I want to take two lists and find the values that appear in both.</p>\n\n<pre><code>a = [1, 2, 3, 4, 5]\nb = [9, 8, 7, 6, 5]\n\nreturnMatches(a, b)\n</code></pre>\n\n<p>would return <code>[5]</code>, for instance.</p>\n",
        "answer": "<p>Not the most efficient one, but by far the most obvious way to do it is:</p>\n\n<pre><code>&gt;&gt;&gt; a = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; b = [9, 8, 7, 6, 5]\n&gt;&gt;&gt; set(a) &amp; set(b)\n{5}\n</code></pre>\n\n<p>if order is significant you can do it with list comprehensions like this:</p>\n\n<pre><code>&gt;&gt;&gt; [i for i, j in zip(a, b) if i == j]\n[5]\n</code></pre>\n\n<p>(only works for equal-sized lists, which order-significance implies).</p>\n"
    },
    "609": {
        "question_id": "328356",
        "answer_id": "328389",
        "question": "<p>I'd like to extract the text from an HTML file using Python.  I want essentially the same output I would get if I copied the text from a browser and pasted it into notepad.  </p>\n\n<p>I'd like something more robust than using regular expressions that may fail on poorly formed HTML.  I've seen many people recommend Beautiful Soup, but I've had a few problems using it.  For one, it picked up unwanted text, such as JavaScript source.  Also, it did not interpret HTML entities.  For example, I would expect &amp;#39; in HTML source to be converted to an apostrophe in text, just as if I'd pasted the browser content into notepad.</p>\n\n<p><strong>Update</strong> <code>html2text</code> looks promising. It handles HTML entities correctly and ignores JavaScript.  However, it does not exactly produce plain text; it produces markdown that would then have to be turned into plain text. It comes with no examples or documentation, but the code looks clean.</p>\n\n<hr>\n\n<p>Related questions:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/37486/filter-out-html-tags-and-resolve-entities-in-python\">Filter out HTML tags and resolve entities in python</a></li>\n<li><a href=\"https://stackoverflow.com/questions/57708/convert-xmlhtml-entities-into-unicode-string-in-python\">Convert XML/HTML Entities into Unicode String in Python</a></li>\n</ul>\n",
        "answer": "<p><a href=\"https://github.com/Alir3z4/html2text\" rel=\"noreferrer\">html2text</a> is a Python program that does a pretty good job at this.</p>\n"
    },
    "610": {
        "question_id": "1401712",
        "answer_id": "1401828",
        "question": "<p>I have two points in 3D:</p>\n\n<pre><code>(xa, ya, za)\n(xb, yb, zb)\n</code></pre>\n\n<p>And I want to calculate the distance:</p>\n\n<pre><code>dist = sqrt((xa-xb)^2 + (ya-yb)^2 + (za-zb)^2)\n</code></pre>\n\n<p>What's the best way to do this with NumPy, or with Python in general? I have:</p>\n\n<pre><code>a = numpy.array((xa ,ya, za))\nb = numpy.array((xb, yb, zb))\n</code></pre>\n",
        "answer": "<p>Use <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.norm.html\" rel=\"noreferrer\"><code>numpy.linalg.norm</code></a>:</p>\n\n<pre><code>dist = numpy.linalg.norm(a-b)\n</code></pre>\n"
    },
    "611": {
        "question_id": "79797",
        "answer_id": "79913",
        "question": "<p>How do I convert a datetime <em>string in local time</em> to a <em>string in UTC time</em>?</p>\n\n<p>I'm sure I've done this before, but can't find it and SO will hopefully help me (and others) do that in future.</p>\n\n<p><strong>Clarification</strong>:  For example, if I have <code>2008-09-17 14:02:00</code> in my local timezone (<code>+10</code>), I'd like to generate a string with the equivalent <code>UTC</code> time: <code>2008-09-17 04:02:00</code>.</p>\n\n<p>Also, from <a href=\"http://lucumr.pocoo.org/2011/7/15/eppur-si-muove/\" rel=\"noreferrer\">http://lucumr.pocoo.org/2011/7/15/eppur-si-muove/</a>, note that in general this isn't possible as with DST and other issues there is no unique conversion from local time to UTC time.</p>\n",
        "answer": "<p>Thanks @rofly, the full conversion from string to string is as follows:</p>\n\n<pre><code>time.strftime(\"%Y-%m-%d %H:%M:%S\", \n              time.gmtime(time.mktime(time.strptime(\"2008-09-17 14:04:00\", \n                                                    \"%Y-%m-%d %H:%M:%S\"))))\n</code></pre>\n\n<p>My summary of the <code>time</code>/<code>calendar</code> functions:</p>\n\n<p><code>time.strptime</code><br>\nstring --> tuple (no timezone applied, so matches string)</p>\n\n<p><code>time.mktime</code><br>\nlocal time tuple --> seconds since epoch (always local time)</p>\n\n<p><code>time.gmtime</code><br>\nseconds since epoch --> tuple in UTC</p>\n\n<p>and </p>\n\n<p><code>calendar.timegm</code><br>\ntuple in UTC --> seconds since epoch</p>\n\n<p><code>time.localtime</code><br>\nseconds since epoch --> tuple in local timezone</p>\n"
    },
    "612": {
        "question_id": "70797",
        "answer_id": "70833",
        "question": "<p>How do I have a Python script that a) can accept user input and how do I make it b) read in arguments if run from the command line?</p>\n",
        "answer": "<p>To read user input you can try <a href=\"https://docs.python.org/dev/library/cmd.html\" rel=\"noreferrer\">the <code>cmd</code> module</a> for easily creating a mini-command line interpreter (with help texts and autocompletion) and <a href=\"https://docs.python.org/2/library/functions.html#raw_input\" rel=\"noreferrer\"><code>raw_input</code></a> (<a href=\"https://docs.python.org/dev/library/functions.html#input\" rel=\"noreferrer\"><code>input</code></a> for Python 3+) for reading a line of text from the user.</p>\n\n<pre><code>text = raw_input(\"prompt\")  # Python 2\ntext = input(\"prompt\")  # Python 3\n</code></pre>\n\n<p>Command line inputs are in <code>sys.argv</code>. Try this in your script:</p>\n\n<pre><code>import sys\nprint (sys.argv)\n</code></pre>\n\n<p>There are two modules for parsing command line options: <a href=\"https://docs.python.org/dev/library/optparse.html\" rel=\"noreferrer\"><s><code>optparse</code></s></a> (deprecated since Python 2.7, use <a href=\"https://docs.python.org/dev/library/argparse.html\" rel=\"noreferrer\"><code>argparse</code></a> instead) and <a href=\"https://docs.python.org/dev/library/getopt.html\" rel=\"noreferrer\"><code>getopt</code></a>. If you just want to input files to your script, behold the power of <a href=\"https://docs.python.org/dev/library/fileinput.html\" rel=\"noreferrer\"><code>fileinput</code></a>.</p>\n\n<p>The <a href=\"https://docs.python.org/dev/library/\" rel=\"noreferrer\">Python library reference</a> is your friend.</p>\n"
    },
    "613": {
        "question_id": "34199233",
        "answer_id": "34200194",
        "question": "<p>I work in an environment in which computational resources are shared, i.e., we have a few server machines equipped with a few Nvidia Titan X GPUs each.</p>\n\n<p>For small to moderate size models, the 12GB of the Titan X are usually enough for 2-3 people to run training concurrently on the same GPU. If the models are small enough that a single model does not take full advantage of all the computational units of the Titan X, this can actually result in a speedup compared with running one training process after the other. Even in cases where the concurrent access to the GPU does slow down the individual training time, it is still nice to have the flexibility of having several users running things on the GPUs at once.</p>\n\n<p>The problem with TensorFlow is that, by default, it allocates the full amount of available memory on the GPU when it is launched. Even for a small 2-layer Neural Network, I see that the 12 GB of the Titan X are used up.</p>\n\n<p>Is there a way to make TensorFlow only allocate, say, 4GB of GPU memory, if one knows that that amount is enough for a given model?</p>\n",
        "answer": "<p>You can set the fraction of GPU memory to be allocated when you construct a <a href=\"https://www.tensorflow.org/api_docs/python/tf/Session\" rel=\"noreferrer\"><code>tf.Session</code></a> by passing a <a href=\"https://github.com/tensorflow/tensorflow/blob/08ed32dbb9e8f67eec9efce3807b5bdb3933eb2f/tensorflow/core/protobuf/config.proto\" rel=\"noreferrer\"><code>tf.GPUOptions</code></a> as part of the optional <code>config</code> argument:</p>\n\n<pre><code># Assume that you have 12GB of GPU memory and want to allocate ~4GB:\ngpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.333)\n\nsess = tf.Session(config=tf.ConfigProto(gpu_options=gpu_options))\n</code></pre>\n\n<p>The <code>per_process_gpu_memory_fraction</code> acts as a hard upper bound on the amount of GPU memory that will be used by the process on each GPU on the same machine. Currently, this fraction is applied uniformly to all of the GPUs on the same machine; there is no way to set this on a per-GPU basis.</p>\n"
    },
    "614": {
        "question_id": "251464",
        "answer_id": "255297",
        "question": "<p>In Python, how do I get a function name as a string, without calling the function?</p>\n\n<pre><code>def my_function():\n    pass\n\nprint get_function_name_as_string(my_function) # my_function is not in quotes\n</code></pre>\n\n<p>should output <code>\"my_function\"</code>.</p>\n\n<p>Is such function available in Python? If not, any ideas on how to implement <code>get_function_name_as_string</code>, in Python?</p>\n",
        "answer": "<pre><code>my_function.__name__\n</code></pre>\n\n<p>Using <code>__name__</code> is the preferred method as it applies uniformly. Unlike <code>func_name</code>, it works on built-in functions as well:</p>\n\n<pre><code>&gt;&gt;&gt; import time\n&gt;&gt;&gt; time.time.func_name\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in ?\nAttributeError: 'builtin_function_or_method' object has no attribute 'func_name'\n&gt;&gt;&gt; time.time.__name__ \n'time'\n</code></pre>\n\n<p>Also the double underscores indicate to the reader this is a special attribute. As a bonus, classes and modules have a <code>__name__</code> attribute too, so you only have remember one special name.</p>\n"
    },
    "615": {
        "question_id": "2502833",
        "answer_id": "2502883",
        "question": "<p>I'm trying to make a system call in Python and store the output to a string that I can manipulate in the Python program.</p>\n\n<pre><code>#!/usr/bin/python\nimport subprocess\np2 = subprocess.Popen(\"ntpq -p\")\n</code></pre>\n\n<p>I've tried a few things including some of the suggestions here:</p>\n\n<p><a href=\"https://stackoverflow.com/questions/1996518/retrieving-the-output-of-subprocess-call\">Retrieving the output of subprocess.call()</a></p>\n\n<p>but without any luck.</p>\n",
        "answer": "<p><strong>In Python 2.7 or Python 3</strong></p>\n\n<p>Instead of making a <code>Popen</code> object directly, you can use the <a href=\"http://docs.python.org/2/library/subprocess.html#subprocess.check_output\" rel=\"noreferrer\"><code>subprocess.check_output()</code> function</a> to store output of a command in a string:</p>\n\n<pre><code>from subprocess import check_output\nout = check_output([\"ntpq\", \"-p\"])\n</code></pre>\n\n<p><strong>In Python 2.4-2.6</strong></p>\n\n<p>Use the <code>communicate</code> method.</p>\n\n<pre><code>import subprocess\np = subprocess.Popen([\"ntpq\", \"-p\"], stdout=subprocess.PIPE)\nout, err = p.communicate()\n</code></pre>\n\n<p><code>out</code> is what you want.</p>\n\n<p><strong>Important note about the other answers</strong></p>\n\n<p>Note how I passed in the command. The <code>\"ntpq -p\"</code> example brings up another matter. Since <code>Popen</code> does not invoke the shell, you would use a list of the command and options\u2014<code>[\"ntpq\", \"-p\"]</code>.</p>\n"
    },
    "616": {
        "question_id": "2081836",
        "answer_id": "2081880",
        "question": "<p>I'm using a for loop to read a file, but I only want to read specific lines, say line #26 and #30. Is there any built-in feature to achieve this?</p>\n\n<p>Thanks</p>\n",
        "answer": "<p>If the file to read is big, and you don't want to read the whole file in memory at once:</p>\n\n<pre><code>fp = open(\"file\")\nfor i, line in enumerate(fp):\n    if i == 25:\n        # 26th line\n    elif i == 29:\n        # 30th line\n    elif i &gt; 29:\n        break\nfp.close()\n</code></pre>\n\n<p>Note that <code>i == n-1</code> for the <code>n</code>th line.</p>\n\n<hr>\n\n<p>In Python 2.6 or later:</p>\n\n<pre><code>with open(\"file\") as fp:\n    for i, line in enumerate(fp):\n        if i == 25:\n            # 26th line\n        elif i == 29:\n            # 30th line\n        elif i &gt; 29:\n            break\n</code></pre>\n"
    },
    "617": {
        "question_id": "11892729",
        "answer_id": "11892838",
        "question": "<p>I am trying to post a request to log in to a website using the Requests module in Python but its not really working. I'm new to this...so I can't figure out if I should make my Username and Password cookies or some type of HTTP authorization thing I found (??). </p>\n\n<pre><code>from pyquery import PyQuery\nimport requests\n\nurl = 'http://www.locationary.com/home/index2.jsp'\n</code></pre>\n\n<p>So now, I think I'm supposed to use \"post\" and cookies....</p>\n\n<pre><code>ck = {'inUserName': 'USERNAME/EMAIL', 'inUserPass': 'PASSWORD'}\n\nr = requests.post(url, cookies=ck)\n\ncontent = r.text\n\nq = PyQuery(content)\n\ntitle = q(\"title\").text()\n\nprint title\n</code></pre>\n\n<p>I have a feeling that I'm doing the cookies thing wrong...I don't know.</p>\n\n<p>If it doesn't log in correctly, the title of the home page should come out to \"Locationary.com\" and if it does, it should be \"Home Page.\"</p>\n\n<p>If you could maybe explain a few things about requests and cookies to me and help me out with this, I would greatly appreciate it. :D</p>\n\n<p>Thanks.</p>\n\n<p>...It still didn't really work yet. Okay...so this is what the home page HTML says before you log in:</p>\n\n<pre><code>&lt;/td&gt;&lt;td&gt;&lt;img src=\"http://www.locationary.com/img/LocationaryImgs/icons/txt_email.gif\"&gt;    &lt;/td&gt;\n&lt;td&gt;&lt;input class=\"Data_Entry_Field_Login\" type=\"text\" name=\"inUserName\" id=\"inUserName\"  size=\"25\"&gt;&lt;/td&gt;\n&lt;td&gt;&lt;img src=\"http://www.locationary.com/img/LocationaryImgs/icons/txt_password.gif\"&gt; &lt;/td&gt;\n&lt;td&gt;&lt;input  class=\"Data_Entry_Field_Login\"  type=\"password\" name=\"inUserPass\"     id=\"inUserPass\"&gt;&lt;/td&gt;\n</code></pre>\n\n<p>So I think I'm doing it right, but the output is still \"Locationary.com\"</p>\n\n<p>2nd EDIT:</p>\n\n<p>I want to be able to stay logged in for a long time and whenever I request a page under that domain, I want the content to show up as if I were logged in.</p>\n",
        "answer": "<h2>If the information you want is on the page you are directed to immediately after login...</h2>\n\n<p>Lets call your <code>ck</code> variable <code>payload</code> instead, like in the <a href=\"http://docs.python-requests.org/en/latest/user/quickstart/#more-complicated-post-requests\" rel=\"noreferrer\">python-requests</a> docs:</p>\n\n<pre><code>payload = {'inUserName': 'USERNAME/EMAIL', 'inUserPass': 'PASSWORD'}\nurl = 'http://www.locationary.com/home/index2.jsp'\nrequests.post(url, data=payload)\n</code></pre>\n\n<h2>Otherwise...</h2>\n\n<p>See <a href=\"https://stackoverflow.com/a/17633072/111362\">https://stackoverflow.com/a/17633072/111362</a> below.</p>\n"
    },
    "618": {
        "question_id": "13332268",
        "answer_id": "13332300",
        "question": "<p>I want to use <code>subprocess.check_output()</code> with <code>ps -A | grep 'process_name'</code>.\nI tried various solutions but so far nothing worked. Can someone guide me how to do it?</p>\n",
        "answer": "<p>To use a pipe with the <code>subprocess</code> module, you have to pass <code>shell=True</code>.</p>\n\n<p>However, this isn't really advisable for various reasons, not least of which is security. Instead, create the <code>ps</code> and <code>grep</code> processes separately, and pipe the output from one into the other, like so:</p>\n\n<pre><code>ps = subprocess.Popen(('ps', '-A'), stdout=subprocess.PIPE)\noutput = subprocess.check_output(('grep', 'process_name'), stdin=ps.stdout)\nps.wait()\n</code></pre>\n\n<p>In your particular case, however, the simple solution is to call <code>subprocess.check_output(('ps', '-A'))</code> and then <code>str.find</code> on the output.</p>\n"
    },
    "619": {
        "question_id": "3939660",
        "answer_id": "3941967",
        "question": "<p>Just to clarify, this is not a homework problem :)</p>\n\n<p>I wanted to find primes for a math application I am building &amp; came across <a href=\"http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\" rel=\"noreferrer\"><strong>Sieve of Eratosthenes</strong></a> approach. </p>\n\n<p>I have written an implementation of it in Python. But it's terribly slow. For say, if I want to find all primes less than 2 million. It takes > 20 mins. (I stopped it at this point). How can I speed this up?</p>\n\n<pre><code>def primes_sieve(limit):\n    limitn = limit+1\n    primes = range(2, limitn)\n\n    for i in primes:\n        factors = range(i, limitn, i)\n        for f in factors[1:]:\n            if f in primes:\n                primes.remove(f)\n    return primes\n\nprint primes_sieve(2000)\n</code></pre>\n\n<p><strong>UPDATE:</strong>\nI ended up doing profiling on this code &amp; found that quite a lot of time was spent on removing an element from the list. Quite understandable considering it has to traverse the entire list (worst-case) to find the element &amp; then remove it and then readjust the list (maybe some copy goes on?). Anyway, I chucked out list for dictionary. My new implementation - </p>\n\n<pre><code>def primes_sieve1(limit):\n    limitn = limit+1\n    primes = dict()\n    for i in range(2, limitn): primes[i] = True\n\n    for i in primes:\n        factors = range(i,limitn, i)\n        for f in factors[1:]:\n            primes[f] = False\n    return [i for i in primes if primes[i]==True]\n\nprint primes_sieve1(2000000)\n</code></pre>\n",
        "answer": "<p>You're not quite implementing the correct algorithm:</p>\n\n<p>In your first example, <code>primes_sieve</code> doesn't maintain a list of primality flags to strike/unset (as in the algorithm), but instead resizes a list of integers continuously, which is very expensive: removing an item from a list requires shifting all subsequent items down by one.</p>\n\n<p>In the second example, <code>primes_sieve1</code> maintains a <em>dictionary</em> of primality flags, which is a step in the right direction, but it iterates over the dictionary in undefined order, and redundantly strikes out factors of factors (instead of only factors of primes, as in the algorithm). You could fix this by sorting the keys, and skipping non-primes (which already makes it an order of magnitude faster), but it's still much more efficient to just use a list directly.</p>\n\n<p>The correct algorithm (with a list instead of a dictionary) looks something like:</p>\n\n<pre><code>def primes_sieve2(limit):\n    a = [True] * limit                          # Initialize the primality list\n    a[0] = a[1] = False\n\n    for (i, isprime) in enumerate(a):\n        if isprime:\n            yield i\n            for n in range(i*i, limit, i):     # Mark factors non-prime\n                a[n] = False\n</code></pre>\n\n<p>(Note that this also includes the algorithmic optimization of starting the non-prime marking at the prime's square (<code>i*i</code>) instead of its double.)</p>\n"
    },
    "620": {
        "question_id": "2301789",
        "answer_id": "2301792",
        "question": "<p>How to read a file in reverse order using python? I want to read a file from last line to first line.</p>\n",
        "answer": "<pre><code>for line in reversed(open(\"filename\").readlines()):\n    print line.rstrip()\n</code></pre>\n\n<p>And in Python 3:</p>\n\n<pre><code>for line in reversed(list(open(\"filename\"))):\n    print(line.rstrip())\n</code></pre>\n"
    },
    "621": {
        "question_id": "10825926",
        "answer_id": "10825998",
        "question": "<p>I was just re-reading <a href=\"http://docs.python.org/py3k/whatsnew/3.0.html\" rel=\"noreferrer\">What\u2019s New In Python 3.0</a> and it states:</p>\n\n<blockquote>\n  <p>The round() function rounding strategy and return type have changed.\n  Exact halfway cases are now rounded to the nearest even result instead\n  of away from zero. (For example, round(2.5) now returns 2 rather than\n  3.)</p>\n</blockquote>\n\n<p>and\nthe documentation for <a href=\"http://docs.python.org/release/3.1.5/library/functions.html#round\" rel=\"noreferrer\">round</a>:</p>\n\n<blockquote>\n  <p>For the built-in types supporting round(), values are rounded to the\n  closest multiple of 10 to the power minus n; if two multiples are\n  equally close, rounding is done toward the even choice</p>\n</blockquote>\n\n<p>So, under <strong>v2.7.3</strong>:</p>\n\n<pre><code>In [85]: round(2.5)\nOut[85]: 3.0\n\nIn [86]: round(3.5)\nOut[86]: 4.0\n</code></pre>\n\n<p>as I'd have expected. However, now under <strong>v3.2.3</strong>:</p>\n\n<pre><code>In [32]: round(2.5)\nOut[32]: 2\n\nIn [33]: round(3.5)\nOut[33]: 4\n</code></pre>\n\n<p>This seems counter-intuitive and contrary to what I understand about\nrounding (and bound to trip up people). English isn't my native language but\nuntil I read this I thought I knew what rounding meant :-/  I am sure\nat the time v3 was introduced there must have been some discussion of\nthis, but I was unable to find a good reason in my search.</p>\n\n<ol>\n<li>Does anyone have insight into why this was changed to this?</li>\n<li>Are there any other mainstream programming languages (e.g., <em>C, C++, Java, Perl,</em> ..) that do this sort of (to  me inconsistent) rounding?</li>\n</ol>\n\n<p>What am I missing here?</p>\n\n<p>UPDATE: @Li-aungYip's comment re \"Banker's rounding\" gave me the right search term/keywords to search for and I found this SO question: <a href=\"https://stackoverflow.com/questions/311696/why-does-net-use-bankers-rounding-as-default\">Why does .NET use banker&#39;s rounding as default?</a>, so I will be reading that carefully.</p>\n",
        "answer": "<p>Python 3.0's way is considered the standard rounding method these days, though some language implementations aren't on the bus yet.</p>\n\n<p>The simple \"always round 0.5 up\" technique results in a slight bias toward the higher number. With large numbers of calculations, this can be significant. The Python 3.0 approach eliminates this issue.</p>\n\n<p>There is more than one method of rounding in common use. IEEE 754, the international standard for floating-point math, defines <a href=\"https://en.wikipedia.org/w/index.php?title=IEEE_754#Rounding_rules\" rel=\"noreferrer\">five different rounding methods</a> (the one used by Python 3.0 is the default). And there are others.</p>\n\n<p>This behavior is not as widely known as it ought to be. AppleScript was, if I remember correctly, an early adopter of this rounding method. The <code>round</code> command in AppleScript actually does offer several options, but round-toward-even is the default as it is in IEEE 754. Apparently the engineer who implemented the <code>round</code> command got so fed up with all the requests to \"make it work like I learned in school\" that he implemented just that: <code>round 2.5 rounding as taught in school</code> is a valid AppleScript command.  :-)</p>\n"
    },
    "622": {
        "question_id": "25675943",
        "answer_id": "25675944",
        "question": "<p>If I try to do the following:</p>\n\n<pre><code>things = 5\nprint(\"You have \" + things + \" things.\")\n</code></pre>\n\n<p>I get the following error in Python 3.x:</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: must be str, not int\n</code></pre>\n\n<p>... and a similar error in Python 2.x:</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: cannot concatenate 'str' and 'int' objects\n</code></pre>\n\n<p>How can I get around this problem?</p>\n",
        "answer": "<p>The problem here is that the <code>+</code> operator has (at least) two different meanings in Python: for numeric types, it means \"add the numbers together\":</p>\n\n<pre><code>&gt;&gt;&gt; 1 + 2\n3\n&gt;&gt;&gt; 3.4 + 5.6\n9.0\n</code></pre>\n\n<p>... and for sequence types, it means \"concatenate the sequences\":</p>\n\n<pre><code>&gt;&gt;&gt; [1, 2, 3] + [4, 5, 6]\n[1, 2, 3, 4, 5, 6]\n&gt;&gt;&gt; 'abc' + 'def'\n'abcdef'\n</code></pre>\n\n<p>As a rule, Python doesn't implicitly convert objects from one type to another<sup>1</sup> in order to make operations \"make sense\", because that would be confusing: for instance, you might think that <code>'3' + 5</code> should mean <code>'35'</code>, but someone else might think it should mean <code>8</code> or even <code>'8'</code>.</p>\n\n<p>Similarly, Python won't let you concatenate two different types of sequence:</p>\n\n<pre><code>&gt;&gt;&gt; [7, 8, 9] + 'ghi'\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: can only concatenate list (not \"str\") to list\n</code></pre>\n\n<p>Because of this, you need to do the conversion explicitly, whether what you want is concatenation or addition:</p>\n\n<pre><code>&gt;&gt;&gt; 'Total: ' + str(123)\n'Total: 123'\n&gt;&gt;&gt; int('456') + 789\n1245\n</code></pre>\n\n<p>However, <strong>there is a better way</strong>. Depending on which version of Python you use, there are three different kinds of string formatting available<sup>2</sup>, which not only allow you to avoid multiple <code>+</code> operations:</p>\n\n<pre><code>&gt;&gt;&gt; things = 5\n</code></pre>\n\n<p></p>\n\n<pre><code>&gt;&gt;&gt; 'You have %d things.' % things  # % interpolation\n'You have 5 things.'\n</code></pre>\n\n<p></p>\n\n<pre><code>&gt;&gt;&gt; 'You have {} things.'.format(things)  # str.format()\n'You have 5 things.'\n</code></pre>\n\n<p></p>\n\n<pre><code>&gt;&gt;&gt; f'You have {things} things.'  # f-string (since Python 3.6)\n'You have 5 things.'\n</code></pre>\n\n<p>... but also allow you to control how values are displayed:</p>\n\n<pre><code>&gt;&gt;&gt; value = 5\n&gt;&gt;&gt; sq_root = value ** 0.5\n&gt;&gt;&gt; sq_root\n2.23606797749979\n</code></pre>\n\n<p></p>\n\n<pre><code>&gt;&gt;&gt; 'The square root of %d is %.2f (roughly).' % (value, sq_root)\n'The square root of 5 is 2.24 (roughly).'\n</code></pre>\n\n<p></p>\n\n<pre><code>&gt;&gt;&gt; 'The square root of {v} is {sr:.2f} (roughly).'.format(v=value, sr=sq_root)\n'The square root of 5 is 2.24 (roughly).'\n</code></pre>\n\n<p></p>\n\n<pre><code>&gt;&gt;&gt; f'The square root of {value} is {sq_root:.2f} (roughly).'\n'The square root of 5 is 2.24 (roughly).'\n</code></pre>\n\n<p>Whether you use <a href=\"https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting\" rel=\"noreferrer\">% interpolation</a>, <a href=\"https://docs.python.org/3/library/stdtypes.html#str.format\" rel=\"noreferrer\"><code>str.format()</code></a>, or <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#f-strings\" rel=\"noreferrer\">f-strings</a> is up to you: % interpolation has been around the longest (and is familiar to people with a background in C), <code>str.format()</code> is often more powerful, and f-strings are more powerful still (but available only in Python 3.6 and later).</p>\n\n<p>Another alternative is to use the fact that if you give <code>print</code> multiple positional arguments, it will join their string representations together using the <code>sep</code> keyword argument (which defaults to <code>' '</code>):</p>\n\n<pre><code>&gt;&gt;&gt; things = 5\n&gt;&gt;&gt; print('you have', things, 'things.')\nyou have 5 things.\n&gt;&gt;&gt; print('you have', things, 'things.', sep=' ... ')\nyou have ... 5 ... things.\n</code></pre>\n\n<p>... but that's usually not as flexible as using Python's built-in string formatting abilities.</p>\n\n<hr>\n\n<p><sup>1</sup> Although it makes an exception for numeric types, where most people would agree on the 'right' thing to do:</p>\n\n<pre><code>&gt;&gt;&gt; 1 + 2.3\n3.3\n&gt;&gt;&gt; 4.5 + (5.6+7j)\n(10.1+7j)\n</code></pre>\n\n<p><sup>2</sup> Actually four ... but <a href=\"https://docs.python.org/3/library/string.html#template-strings\" rel=\"noreferrer\">template strings</a> are rarely used and somewhat awkward.</p>\n"
    },
    "623": {
        "question_id": "19095796",
        "answer_id": "19095831",
        "question": "<p>When I write:</p>\n\n<p><code>print '\\'</code> or <code>print \"\\\"</code> or <code>print \"'\\'\"</code></p>\n\n<p>Python doesn't print me the backslash <code>\\</code> symbol.</p>\n\n<p><strong>What should I do to get the expected result?</strong></p>\n",
        "answer": "<p>You need to escape your backslash by preceding it with, yes, another backslash:</p>\n\n<pre><code>print \"\\\\\"\n</code></pre>\n\n<p>The <code>\\</code> character is called an escape character, which interprets the character following it differently. For example, <code>n</code> by itself is simply a letter, but when you precede it with a backslash, it becomes <code>\\n</code>, which is the <code>newline</code> character.</p>\n\n<p>As you can probably guess, <code>\\</code> also needs to be escaped so it doesn't function like an escape character. You have to... escape the escape, essentially.</p>\n"
    },
    "624": {
        "question_id": "48193502",
        "answer_id": "48193692",
        "question": "<pre><code>{\n  \"status\": \"200\",\n  \"msg\": \"\",\n  \"data\": {\n    \"time\": \"1515580011\",\n    \"video_info\": [\n      {\n          \"announcement\": \"{\\\"announcement_id\\\":\\\"6\\\",\\\"name\\\":\\\"INS\\\\u8d26\\\\u53f7\\\",\\\"icon\\\":\\\"http:\\\\\\/\\\\\\/liveme.cms.ksmobile.net\\\\\\/live\\\\\\/announcement\\\\\\/2017-08-18_19:44:54\\\\\\/ins.png\\\",\\\"icon_new\\\":\\\"http:\\\\\\/\\\\\\/liveme.cms.ksmobile.net\\\\\\/live\\\\\\/announcement\\\\\\/2017-10-20_22:24:38\\\\\\/4.png\\\",\\\"videoid\\\":\\\"15154610218328614178\\\",\\\"content\\\":\\\"FOLLOW ME PLEASE\\\",\\\"x_coordinate\\\":\\\"0.22\\\",\\\"y_coordinate\\\":\\\"0.23\\\"}\",\n          \"announcement_shop\": \"\",\n</code></pre>\n\n<p>How do I grab the content \"FOLLOW ME PLEASE\" from this json?</p>\n\n<pre><code>replay_data = raw_replay_data['data']['video_info'][0]\nannouncement = replay_data['announcement']\n</code></pre>\n\n<p>This grab the everything withing <code>['announcement']</code> and I can't do <code>['announcement']['content']</code>.</p>\n\n<p>What is the right way to do this?</p>\n\n<p>Thank you in advance for helping me figuring this.</p>\n",
        "answer": "<p>In a single line - </p>\n\n<pre><code>&gt;&gt;&gt; json.loads(data['data']['video_info'][0]['announcement'])['content']\n'FOLLOW ME PLEASE'\n</code></pre>\n\n<hr>\n\n<p>To help you understand how to access data (so you don't have to ask again), you'll need to <em>stare at your data</em>. </p>\n\n<p>First, let's lay out your data nicely. You can either use <code>json.dumps(data, indent=4)</code>, or you can use an online tool like <a href=\"https://jsonlint.com\" rel=\"noreferrer\">JSONLint.com</a>.</p>\n\n<pre><code>{\n    'data': {\n        'time': '1515580011',\n        'video_info': [{\n            'announcement': (    # ***\n            \"\"\"{\n                \"announcement_id\": \"6\",\n                \"name\": \"INS\\\\u8d26\\\\u53f7\",\n                \"icon\": \"http:\\\\\\\\/\\\\\\\\/liveme.cms.ksmobile.net\\\\\\\\/live\\\\\\\\/announcement\\\\\\\\/2017-08-18_19:44:54\\\\\\\\/ins.png\",\n                \"icon_new\": \"http:\\\\\\\\/\\\\\\\\/liveme.cms.ksmobile.net\\\\\\\\/live\\\\\\\\/announcement\\\\\\\\/2017-10-20_22:24:38\\\\\\\\/4.png\",\n                \"videoid\": \"15154610218328614178\",\n                \"content\": \"FOLLOW ME PLEASE\",\n                \"x_coordinate\": \"0.22\",\n                \"y_coordinate\": \"0.23\"\n            }\"\"\"),\n            'announcement_shop': ''\n        }]\n    },\n    'msg': '',\n    'status': '200'\n} \n</code></pre>\n\n<p>*** Note that the data in the <code>announcement</code> key is actually <em>more</em> json data, which I've laid out on separate lines.</p>\n\n<p>First, find out where your data resides. You're looking for the data in the <code>content</code> key, which is accessed by the <code>announcement</code> key, which is part of a dictionary inside a list of dicts, which can be accessed by the <code>video_info</code> key, which is in turn accessed by <code>data</code>.</p>\n\n<p>So, in summary, \"descend\" the ladder that is \"data\" using the following \"rungs\" -</p>\n\n<ol>\n<li><code>data</code>, a dictionary</li>\n<li><code>video_info</code>, a list of dicts</li>\n<li><code>announcement</code>, a dict in the first dict of the list of dicts</li>\n<li><code>content</code> residing as part of json data.</li>\n</ol>\n\n<hr>\n\n<p>First, </p>\n\n<pre><code>i = data['data']\n</code></pre>\n\n<p>Next,</p>\n\n<pre><code>j = i['video_info']\n</code></pre>\n\n<p>Next,</p>\n\n<pre><code>k = j[0] # since this is a list\n</code></pre>\n\n<p>If you only want the first element, this suffices. Otherwise, you'd need to <em>iterate</em>:</p>\n\n<pre><code>for k in j:\n    ...\n</code></pre>\n\n<p>Next, </p>\n\n<pre><code>l = k['announcement']\n</code></pre>\n\n<p>Now, <code>l</code> is JSON data. Load it - </p>\n\n<pre><code>import json\nm = json.loads(l)\n</code></pre>\n\n<p>Lastly, </p>\n\n<pre><code>content = m['content']\n</code></pre>\n\n<p></p>\n\n<pre><code>print(content)\n'FOLLOW ME PLEASE'\n</code></pre>\n\n<p>This should hopefully serve as a guide should you have future queries of this nature.</p>\n"
    },
    "625": {
        "question_id": "30081275",
        "answer_id": "30081318",
        "question": "<p>It is my understanding that the <code>range()</code> function, which is actually <a href=\"https://docs.python.org/3/library/stdtypes.html#typesseq-range\" rel=\"noreferrer\">an object type in Python 3</a>, generates its contents on the fly, similar to a generator. </p>\n\n<p>This being the case, I would have expected the following line to take an inordinate amount of time, because in order to determine whether 1 quadrillion is in the range, a quadrillion values would have to be generated: </p>\n\n<pre><code>1000000000000000 in range(1000000000000001)\n</code></pre>\n\n<p>Furthermore: it seems that no matter how many zeroes I add on, the calculation more or less takes the same amount of time (basically instantaneous). </p>\n\n<p>I have also tried things like this, but the calculation is still almost instant: </p>\n\n<pre><code>1000000000000000000000 in range(0,1000000000000000000001,10) # count by tens\n</code></pre>\n\n<p>If I try to implement my own range function, the result is not so nice!! </p>\n\n<pre><code>def my_crappy_range(N):\n    i = 0\n    while i &lt; N:\n        yield i\n        i += 1\n    return\n</code></pre>\n\n<p>What is the <code>range()</code> object doing under the hood that makes it so fast? </p>\n\n<hr>\n\n<p><a href=\"https://stackoverflow.com/a/30081318/2437514\">Martijn Pieters' answer</a> was chosen for its completeness, but also see <a href=\"https://stackoverflow.com/a/30081894/2437514\">abarnert's first answer</a> for a good discussion of what it means for <code>range</code> to be a full-fledged <em>sequence</em> in Python 3, and some information/warning regarding potential inconsistency for <code>__contains__</code> function optimization across Python implementations. <a href=\"https://stackoverflow.com/a/30088140/2437514\">abarnert's other answer</a> goes into some more detail and provides links for those interested in the history behind the optimization in Python 3 (and lack of optimization of <code>xrange</code> in Python 2). Answers <a href=\"https://stackoverflow.com/a/30081467/2437514\">by poke</a> and <a href=\"https://stackoverflow.com/a/30081470/2437514\">by wim</a> provide the relevant C source code and explanations for those who are interested. </p>\n",
        "answer": "<p>The Python 3 <code>range()</code> object doesn't produce numbers immediately; it is a smart sequence object that produces numbers <em>on demand</em>. All it contains is your start, stop and step values, then as you iterate over the object the next integer is calculated each iteration.</p>\n\n<p>The object also implements the <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__contains__\"><code>object.__contains__</code> hook</a>, and <em>calculates</em> if your number is part of its range. Calculating is a O(1) constant time operation. There is never a need to scan through all possible integers in the range.</p>\n\n<p>From the <a href=\"https://docs.python.org/3/library/stdtypes.html#range\"><code>range()</code> object documentation</a>:</p>\n\n<blockquote>\n  <p>The advantage of the <code>range</code> type over a regular <code>list</code> or <code>tuple</code> is that a range object will always take the same (small) amount of memory, no matter the size of the range it represents (as it only stores the <code>start</code>, <code>stop</code> and <code>step</code> values, calculating individual items and subranges as needed).</p>\n</blockquote>\n\n<p>So at a minimum, your <code>range()</code> object would do:</p>\n\n<pre><code>class my_range(object):\n    def __init__(self, start, stop=None, step=1):\n        if stop is None:\n            start, stop = 0, start\n        self.start, self.stop, self.step = start, stop, step\n        if step &lt; 0:\n            lo, hi = stop, start\n        else:\n            lo, hi = start, stop\n        self.length = ((hi - lo - 1) // abs(step)) + 1\n\n    def __iter__(self):\n        current = self.start\n        if self.step &lt; 0:\n            while current &gt; self.stop:\n                yield current\n                current += self.step\n        else:\n            while current &lt; self.stop:\n                yield current\n                current += self.step\n\n    def __len__(self):\n        return self.length\n\n    def __getitem__(self, i):\n        if i &lt; 0:\n            i += self.length\n        if 0 &lt;= i &lt; self.length:\n            return self.start + i * self.step\n        raise IndexError('Index out of range: {}'.format(i))\n\n    def __contains__(self, num):\n        if self.step &lt; 0:\n            if not (self.stop &lt; num &lt;= self.start):\n                return False\n        else:\n            if not (self.start &lt;= num &lt; self.stop):\n                return False\n        return (num - self.start) % self.step == 0\n</code></pre>\n\n<p>This is still missing several things that a real <code>range()</code> supports (such as the <code>.index()</code> or <code>.count()</code> methods, hashing, equality testing, or slicing), but should give you an idea.</p>\n\n<p>I also simplified the <code>__contains__</code> implementation to only focus on integer tests; if you give a real <code>range()</code> object a non-integer value (including subclasses of <code>int</code>), a slow scan is initiated to see if there is a match, just as if you use a containment test against a list of all the contained values. This was done to continue to support other numeric types that just happen to support equality testing with integers but are not expected to support integer arithmetic as well. See the original <a href=\"http://bugs.python.org/issue1766304\">Python issue</a> that implemented the containment test.</p>\n"
    },
    "626": {
        "question_id": "2018026",
        "answer_id": "14804320",
        "question": "<p>In Python, what are the differences between the <code>urllib</code>, <code>urllib2</code>, and <a href=\"http://docs.python-requests.org/en/latest/index.html\" rel=\"noreferrer\"><code>requests</code></a> module? Why are there three? They seem to do the same thing...</p>\n",
        "answer": "<p>I know it's been said already, but I'd highly recommend the <a href=\"https://2.python-requests.org//en/latest/index.html\" rel=\"noreferrer\"><code>requests</code></a> Python package.</p>\n\n<p>If you've used languages other than python, you're probably thinking <code>urllib</code> and <code>urllib2</code> are easy to use, not much code, and highly capable, that's how I used to think.  But the <code>requests</code> package is so unbelievably useful and short that everyone should be using it.</p>\n\n<p>First, it supports a fully restful API, and is as easy as:</p>\n\n<pre><code>import requests\n\nresp = requests.get('http://www.mywebsite.com/user')\nresp = requests.post('http://www.mywebsite.com/user')\nresp = requests.put('http://www.mywebsite.com/user/put')\nresp = requests.delete('http://www.mywebsite.com/user/delete')\n</code></pre>\n\n<p>Regardless of whether GET / POST, you never have to encode parameters again, it simply takes a dictionary as an argument and is good to go:</p>\n\n<pre><code>userdata = {\"firstname\": \"John\", \"lastname\": \"Doe\", \"password\": \"jdoe123\"}\nresp = requests.post('http://www.mywebsite.com/user', data=userdata)\n</code></pre>\n\n<p>Plus it even has a built in JSON decoder (again, I know <code>json.loads()</code> isn't a lot more to write, but this sure is convenient):</p>\n\n<pre><code>resp.json()\n</code></pre>\n\n<p>Or if your response data is just text, use:</p>\n\n<pre><code>resp.text\n</code></pre>\n\n<p>This is just the tip of the iceberg. This is the list of features from the requests site:</p>\n\n<ul>\n<li>International Domains and URLs</li>\n<li>Keep-Alive &amp; Connection Pooling</li>\n<li>Sessions with Cookie Persistence</li>\n<li>Browser-style SSL Verification</li>\n<li>Basic/Digest Authentication</li>\n<li>Elegant Key/Value Cookies</li>\n<li>Automatic Decompression</li>\n<li>Unicode Response Bodies</li>\n<li>Multipart File Uploads</li>\n<li>Connection Timeouts</li>\n<li>.netrc support</li>\n<li>List item</li>\n<li>Python 2.6\u20143.4</li>\n<li>Thread-safe.</li>\n</ul>\n"
    },
    "627": {
        "question_id": "12555323",
        "answer_id": "12555510",
        "question": "<p>I have the following indexed DataFrame with named columns and rows not- continuous numbers:</p>\n\n<pre><code>          a         b         c         d\n2  0.671399  0.101208 -0.181532  0.241273\n3  0.446172 -0.243316  0.051767  1.577318\n5  0.614758  0.075793 -0.451460 -0.012493\n</code></pre>\n\n<p>I would like to add a new column, <code>'e'</code>, to the existing data frame and do not want to change anything in the data frame (i.e., the new column always has the same length as the DataFrame). </p>\n\n<pre><code>0   -0.335485\n1   -1.166658\n2   -0.385571\ndtype: float64\n</code></pre>\n\n<p>I tried different versions of <code>join</code>, <code>append</code>, <code>merge</code>, but I did not get the result I wanted, only errors at most. How can I add column <code>e</code> to the above example? </p>\n",
        "answer": "<p>Use the original df1 indexes to create the series:</p>\n\n<pre><code>df1['e'] = pd.Series(np.random.randn(sLength), index=df1.index)\n</code></pre>\n\n<hr>\n\n<p><strong>Edit 2015</strong><br>\nSome reported getting the <code>SettingWithCopyWarning</code> with this code.<br>\nHowever, the code still runs perfectly with the current pandas version 0.16.1.</p>\n\n<pre><code>&gt;&gt;&gt; sLength = len(df1['a'])\n&gt;&gt;&gt; df1\n          a         b         c         d\n6 -0.269221 -0.026476  0.997517  1.294385\n8  0.917438  0.847941  0.034235 -0.448948\n\n&gt;&gt;&gt; df1['e'] = pd.Series(np.random.randn(sLength), index=df1.index)\n&gt;&gt;&gt; df1\n          a         b         c         d         e\n6 -0.269221 -0.026476  0.997517  1.294385  1.757167\n8  0.917438  0.847941  0.034235 -0.448948  2.228131\n\n&gt;&gt;&gt; p.version.short_version\n'0.16.1'\n</code></pre>\n\n<p>The <code>SettingWithCopyWarning</code> aims to inform of a possibly invalid assignment on a copy of the Dataframe. It doesn't necessarily say you did it wrong (it can trigger false positives) but from 0.13.0 it let you know there are more adequate methods for the same purpose. Then, if you get the warning, just follow its advise: <em>Try using .loc[row_index,col_indexer] = value instead</em></p>\n\n<pre><code>&gt;&gt;&gt; df1.loc[:,'f'] = pd.Series(np.random.randn(sLength), index=df1.index)\n&gt;&gt;&gt; df1\n          a         b         c         d         e         f\n6 -0.269221 -0.026476  0.997517  1.294385  1.757167 -0.050927\n8  0.917438  0.847941  0.034235 -0.448948  2.228131  0.006109\n&gt;&gt;&gt; \n</code></pre>\n\n<p>In fact, this is currently the more efficient method as <a href=\"http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\" rel=\"nofollow noreferrer\">described in pandas docs</a></p>\n\n<hr>\n\n<p><strong>Edit 2017</strong></p>\n\n<p>As indicated in the comments and by @Alexander, currently the best method to add the values of a Series as a new column of a DataFrame could be using <code>assign</code>:</p>\n\n<pre><code>df1 = df1.assign(e=pd.Series(np.random.randn(sLength)).values)\n</code></pre>\n"
    },
    "628": {
        "question_id": "13148429",
        "answer_id": "13148611",
        "question": "<p>I have the following <code>DataFrame</code> (<code>df</code>):</p>\n\n<pre><code>import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame(np.random.rand(10, 5))\n</code></pre>\n\n<p>I add more column(s) by assignment:</p>\n\n<pre><code>df['mean'] = df.mean(1)\n</code></pre>\n\n<p>How can I move the column <code>mean</code> to the front, i.e. set it as first column leaving the order of the other columns untouched?</p>\n",
        "answer": "<p>One easy way would be to reassign the dataframe with a list of the columns, rearranged as needed. </p>\n\n<p>This is what you have now: </p>\n\n<pre><code>In [6]: df\nOut[6]:\n          0         1         2         3         4      mean\n0  0.445598  0.173835  0.343415  0.682252  0.582616  0.445543\n1  0.881592  0.696942  0.702232  0.696724  0.373551  0.670208\n2  0.662527  0.955193  0.131016  0.609548  0.804694  0.632596\n3  0.260919  0.783467  0.593433  0.033426  0.512019  0.436653\n4  0.131842  0.799367  0.182828  0.683330  0.019485  0.363371\n5  0.498784  0.873495  0.383811  0.699289  0.480447  0.587165\n6  0.388771  0.395757  0.745237  0.628406  0.784473  0.588529\n7  0.147986  0.459451  0.310961  0.706435  0.100914  0.345149\n8  0.394947  0.863494  0.585030  0.565944  0.356561  0.553195\n9  0.689260  0.865243  0.136481  0.386582  0.730399  0.561593\n\nIn [7]: cols = df.columns.tolist()\n\nIn [8]: cols\nOut[8]: [0L, 1L, 2L, 3L, 4L, 'mean']\n</code></pre>\n\n<p>Rearrange <code>cols</code> in any way you want. This is how I moved the last element to the first position: </p>\n\n<pre><code>In [12]: cols = cols[-1:] + cols[:-1]\n\nIn [13]: cols\nOut[13]: ['mean', 0L, 1L, 2L, 3L, 4L]\n</code></pre>\n\n<p>Then reorder the dataframe like this: </p>\n\n<pre><code>In [16]: df = df[cols]  #    OR    df = df.ix[:, cols]\n\nIn [17]: df\nOut[17]:\n       mean         0         1         2         3         4\n0  0.445543  0.445598  0.173835  0.343415  0.682252  0.582616\n1  0.670208  0.881592  0.696942  0.702232  0.696724  0.373551\n2  0.632596  0.662527  0.955193  0.131016  0.609548  0.804694\n3  0.436653  0.260919  0.783467  0.593433  0.033426  0.512019\n4  0.363371  0.131842  0.799367  0.182828  0.683330  0.019485\n5  0.587165  0.498784  0.873495  0.383811  0.699289  0.480447\n6  0.588529  0.388771  0.395757  0.745237  0.628406  0.784473\n7  0.345149  0.147986  0.459451  0.310961  0.706435  0.100914\n8  0.553195  0.394947  0.863494  0.585030  0.565944  0.356561\n9  0.561593  0.689260  0.865243  0.136481  0.386582  0.730399\n</code></pre>\n"
    },
    "629": {
        "question_id": "1093322",
        "answer_id": "1093331",
        "question": "<p>How can I check what version of the Python Interpreter is interpreting my script?</p>\n",
        "answer": "<p>This information is available in the <a href=\"http://docs.python.org/2/library/sys.html#sys.version\" rel=\"noreferrer\">sys.version</a> string in the <a href=\"http://docs.python.org/2/library/sys.html\" rel=\"noreferrer\">sys</a> module:</p>\n\n<pre><code>&gt;&gt;&gt; import sys\n</code></pre>\n\n<p>Human readable:</p>\n\n<pre><code>&gt;&gt;&gt; print(sys.version)  # parentheses necessary in python 3.       \n2.5.2 (r252:60911, Jul 31 2008, 17:28:52) \n[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)]\n</code></pre>\n\n<p>For further processing:</p>\n\n<pre><code>&gt;&gt;&gt; sys.version_info\n(2, 5, 2, 'final', 0)\n# or\n&gt;&gt;&gt; sys.hexversion\n34014192\n</code></pre>\n\n<p>To ensure a script runs with a minimal version requirement of the Python interpreter add this to your code:</p>\n\n<pre><code>assert sys.version_info &gt;= (2, 5)\n</code></pre>\n\n<p>This compares major and minor version information. Add micro (=<code>0</code>, <code>1</code>, etc) and even releaselevel (=<code>'alpha'</code>,<code>'final'</code>, etc) to the tuple as you like. Note however, that it is almost always better to \"duck\" check if a certain feature is there, and if not, workaround (or bail out). Sometimes features go away in newer releases, being replaced by others.</p>\n"
    },
    "630": {
        "question_id": "273946",
        "answer_id": "273962",
        "question": "<p>Is there an obvious way to do this that I'm missing?  I'm just trying to make thumbnails.</p>\n",
        "answer": "<p>Define a maximum size.\nThen, compute a resize ratio by taking <code>min(maxwidth/width, maxheight/height)</code>.</p>\n\n<p>The proper size is <code>oldsize*ratio</code>.</p>\n\n<p>There is of course also a library method to do this: the method <code>Image.thumbnail</code>.<br>\nBelow is an (edited) example from the <a href=\"http://effbot.org/imagingbook/introduction.htm\" rel=\"noreferrer\">PIL documentation</a>.</p>\n\n<pre><code>import os, sys\nimport Image\n\nsize = 128, 128\n\nfor infile in sys.argv[1:]:\n    outfile = os.path.splitext(infile)[0] + \".thumbnail\"\n    if infile != outfile:\n        try:\n            im = Image.open(infile)\n            im.thumbnail(size, Image.ANTIALIAS)\n            im.save(outfile, \"JPEG\")\n        except IOError:\n            print \"cannot create thumbnail for '%s'\" % infile\n</code></pre>\n"
    },
    "631": {
        "question_id": "2428092",
        "answer_id": "2428119",
        "question": "<p>I'm trying to convert a server side Ajax response script into a Django HttpResponse, but apparently it's not working.</p>\n\n<p>This is the server-side script:</p>\n\n<pre><code>/* RECEIVE VALUE */\n$validateValue=$_POST['validateValue'];\n$validateId=$_POST['validateId'];\n$validateError=$_POST['validateError'];\n\n/* RETURN VALUE */\n$arrayToJs = array();\n$arrayToJs[0] = $validateId;\n$arrayToJs[1] = $validateError;\n\nif($validateValue ==\"Testuser\"){  // Validate??\n    $arrayToJs[2] = \"true\";       // RETURN TRUE\n    echo '{\"jsonValidateReturn\":'.json_encode($arrayToJs).'}';  // RETURN ARRAY WITH success\n}\nelse{\n    for($x=0;$x&lt;1000000;$x++){\n        if($x == 990000){\n            $arrayToJs[2] = \"false\";\n            echo '{\"jsonValidateReturn\":'.json_encode($arrayToJs).'}';   // RETURNS ARRAY WITH ERROR.\n        }\n    }\n}\n</code></pre>\n\n<p>And this is the converted code</p>\n\n<pre><code>def validate_user(request):\n    if request.method == 'POST':\n        vld_value = request.POST.get('validateValue')\n        vld_id = request.POST.get('validateId')\n        vld_error = request.POST.get('validateError')\n\n        array_to_js = [vld_id, vld_error, False]\n\n        if vld_value == \"TestUser\":\n            array_to_js[2] = True\n            x = simplejson.dumps(array_to_js)\n            return HttpResponse(x)\n        else:\n            array_to_js[2] = False\n            x = simplejson.dumps(array_to_js)\n            error = 'Error'\n            return render_to_response('index.html',{'error':error},context_instance=RequestContext(request))\n    return render_to_response('index.html',context_instance=RequestContext(request))\n</code></pre>\n\n<p>I'm using simplejson to encode the Python list (so it will return a JSON array). I couldn't figure out the problem yet. But I think that I did something wrong about the 'echo'.</p>\n",
        "answer": "<p>I usually use a dictionary, not a list to return JSON content. </p>\n\n<pre><code>import json\n\nfrom django.http import HttpResponse\n\nresponse_data = {}\nresponse_data['result'] = 'error'\nresponse_data['message'] = 'Some error message'\n</code></pre>\n\n<p>Pre-Django 1.7 you'd return it like this:</p>\n\n<pre><code>return HttpResponse(json.dumps(response_data), content_type=\"application/json\")\n</code></pre>\n\n<p>For Django 1.7+, use <a href=\"https://docs.djangoproject.com/en/dev/ref/request-response/#jsonresponse-objects\" rel=\"noreferrer\"><code>JsonResponse</code></a> as shown in <a href=\"https://stackoverflow.com/a/24411716/7376\">this SO answer</a> like so : </p>\n\n<pre><code>from django.http import JsonResponse\nreturn JsonResponse({'foo':'bar'})\n</code></pre>\n"
    },
    "632": {
        "question_id": "14745022",
        "answer_id": "14745484",
        "question": "<p>I have a data frame with one column and I'd like to split it into two columns, with one column header as '<code>fips'</code> and the other <code>'row'</code></p>\n\n<p>My dataframe <code>df</code> looks like this:</p>\n\n<pre><code>          row\n0    00000 UNITED STATES\n1    01000 ALABAMA\n2    01001 Autauga County, AL\n3    01003 Baldwin County, AL\n4    01005 Barbour County, AL\n</code></pre>\n\n<p>I do not know how to use <code>df.row.str[:]</code> to achieve my goal of splitting the row cell. I can use <code>df['fips'] = hello</code> to add a new column and populate it with <code>hello</code>. Any ideas? </p>\n\n<pre><code>         fips       row\n0    00000 UNITED STATES\n1    01000 ALABAMA \n2    01001 Autauga County, AL\n3    01003 Baldwin County, AL\n4    01005 Barbour County, AL\n</code></pre>\n",
        "answer": "<p>There might be a better way, but this here's one approach:</p>\n\n<pre><code>In [34]: import pandas as pd\n\nIn [35]: df\nOut[35]: \n                        row\n0       00000 UNITED STATES\n1             01000 ALABAMA\n2  01001 Autauga County, AL\n3  01003 Baldwin County, AL\n4  01005 Barbour County, AL\n\nIn [36]: df = pd.DataFrame(df.row.str.split(' ',1).tolist(),\n                                   columns = ['flips','row'])\n\nIn [37]: df\nOut[37]: \n   flips                 row\n0  00000       UNITED STATES\n1  01000             ALABAMA\n2  01001  Autauga County, AL\n3  01003  Baldwin County, AL\n4  01005  Barbour County, AL\n</code></pre>\n"
    },
    "633": {
        "question_id": "3503879",
        "answer_id": "3503909",
        "question": "<p>I want to assign the output of a command I run using <code>os.system</code> to a variable and prevent it from being output to the screen. But, in the below code ,the output is sent to the screen and the value printed for <code>var</code> is 0, which I guess signifies whether the command ran successfully or not. Is there any way to assign the command output to the variable and also stop it from being displayed on the screen?</p>\n\n<pre><code>var = os.system(\"cat /etc/services\")\nprint var #Prints 0\n</code></pre>\n",
        "answer": "<p>From \"<a href=\"https://stackoverflow.com/questions/1410976/equivalent-of-backticks-in-python\">Equivalent of Bash Backticks in Python</a>\", which I asked a long time ago, what you may want to use is <code>popen</code>:</p>\n\n<pre><code>os.popen('cat /etc/services').read()\n</code></pre>\n\n<p>From the <a href=\"https://docs.python.org/3.6/library/os.html#os.popen\" rel=\"noreferrer\">docs for Python 3.6</a>, </p>\n\n<blockquote>\n  <p>This is implemented using subprocess.Popen; see that class\u2019s\n  documentation for more powerful ways to manage and communicate with\n  subprocesses.</p>\n</blockquote>\n\n<hr>\n\n<p>Here's the corresponding code for <code>subprocess</code>:</p>\n\n<pre><code>import subprocess\n\nproc = subprocess.Popen([\"cat\", \"/etc/services\"], stdout=subprocess.PIPE, shell=True)\n(out, err) = proc.communicate()\nprint \"program output:\", out\n</code></pre>\n"
    },
    "634": {
        "question_id": "6475328",
        "answer_id": "6475407",
        "question": "<p>I need to read a large file, line by line. Lets say that file has more than 5GB and I need to read each line, but obviously I do not want to use <code>readlines()</code> because it will create a very large list in the memory.</p>\n\n<p>How will the code below work for this case? Is <code>xreadlines</code> itself reading one by one into memory? Is the generator expression needed?</p>\n\n<pre><code>f = (line for line in open(\"log.txt\").xreadlines())  # how much is loaded in memory?\n\nf.next()  \n</code></pre>\n\n<p>Plus, what can I do to read this in reverse order, just as the Linux <code>tail</code> command?</p>\n\n<p>I found:</p>\n\n<p><a href=\"http://code.google.com/p/pytailer/\" rel=\"noreferrer\">http://code.google.com/p/pytailer/</a></p>\n\n<p>and</p>\n\n<p>\"<a href=\"https://stackoverflow.com/questions/5896079/python-head-tail-and-backward-read-by-lines-of-a-text-file/5896210#5896210\">python head, tail and backward read by lines of a text file</a>\"</p>\n\n<p>Both worked very well!</p>\n",
        "answer": "<p>I provided this answer because Keith's, while succinct, doesn't close the file <em>explicitly</em></p>\n\n<pre><code>with open(\"log.txt\") as infile:\n    for line in infile:\n        do_something_with(line)\n</code></pre>\n"
    },
    "635": {
        "question_id": "1996518",
        "answer_id": "1996540",
        "question": "<p>How can I get the output of a process run using <code>subprocess.call()</code>?</p>\n\n<p>Passing a <code>StringIO.StringIO</code> object to <code>stdout</code> gives this error:</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/subprocess.py\", line 444, in call\n    return Popen(*popenargs, **kwargs).wait()\n  File \"/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/subprocess.py\", line 588, in __init__\n    errread, errwrite) = self._get_handles(stdin, stdout, stderr)\n  File \"/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/subprocess.py\", line 945, in _get_handles\n    c2pwrite = stdout.fileno()\nAttributeError: StringIO instance has no attribute 'fileno'\n&gt;&gt;&gt; \n</code></pre>\n",
        "answer": "<p>Output from <code>subprocess.call()</code> should only be redirected to files.</p>\n\n<p>You should use <code>subprocess.Popen()</code> instead. Then you can pass <code>subprocess.PIPE</code> for the stderr, stdout, and/or stdin parameters and read from the pipes by using the <code>communicate()</code> method:</p>\n\n<pre><code>from subprocess import Popen, PIPE\n\np = Popen(['program', 'arg1'], stdin=PIPE, stdout=PIPE, stderr=PIPE)\noutput, err = p.communicate(b\"input data that is passed to subprocess' stdin\")\nrc = p.returncode\n</code></pre>\n\n<p>The reasoning is that the file-like object used by <code>subprocess.call()</code> must have a real file descriptor, and thus implement the <code>fileno()</code> method. Just using any file-like object won't do the trick.</p>\n\n<p>See <a href=\"http://docs.python.org/library/subprocess.html#replacing-shell-pipeline\" rel=\"noreferrer\">here</a> for more info.</p>\n"
    },
    "636": {
        "question_id": "4697882",
        "answer_id": "4697884",
        "question": "<p>In a program I'm writing I have Python use the <code>re.search()</code> function to find matches in a block of text and print the results. However, the program exits once it finds the first match in the block of text.</p>\n\n<p>How do I do this repeatedly where the program doesn't stop until ALL matches have been found? Is there a separate function to do this?</p>\n",
        "answer": "<p>Use <code>re.findall</code> or <code>re.finditer</code> instead.</p>\n\n<p><a href=\"http://docs.python.org/library/re.html#re.findall\" rel=\"noreferrer\"><code>re.findall(pattern, string)</code></a> returns a list of matching strings.</p>\n\n<p><a href=\"http://docs.python.org/library/re.html#re.finditer\" rel=\"noreferrer\"><code>re.finditer(pattern, string)</code></a> returns an iterator over <a href=\"http://docs.python.org/library/re.html#re.MatchObject\" rel=\"noreferrer\"><code>MatchObject</code></a> objects.</p>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>re.findall( r'all (.*?) are', 'all cats are smarter than dogs, all dogs are dumber than cats')\n# Output: ['cats', 'dogs']\n</code></pre>\n"
    },
    "637": {
        "question_id": "2154249",
        "answer_id": "47642650",
        "question": "<p>I'd like to identify groups of continuous numbers in a list, so that:</p>\n\n<pre><code>myfunc([2, 3, 4, 5, 12, 13, 14, 15, 16, 17, 20])\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>[(2,5), (12,17), 20]\n</code></pre>\n\n<p>And was wondering what the best way to do this was (particularly if there's something inbuilt into Python).</p>\n\n<p>Edit: Note I originally forgot to mention that individual numbers should be returned as individual numbers, not ranges.</p>\n",
        "answer": "<p><a href=\"https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.consecutive_groups\" rel=\"noreferrer\"><code>more_itertools.consecutive_groups</code></a> was added in version 4.0.</p>\n\n<p><strong>Demo</strong></p>\n\n<pre><code>import more_itertools as mit\n\n\niterable = [2, 3, 4, 5, 12, 13, 14, 15, 16, 17, 20]\n[list(group) for group in mit.consecutive_groups(iterable)]\n# [[2, 3, 4, 5], [12, 13, 14, 15, 16, 17], [20]]\n</code></pre>\n\n<p><strong>Code</strong></p>\n\n<p>Applying this tool, we make a generator function that finds ranges of consecutive numbers.</p>\n\n<pre><code>def find_ranges(iterable):\n    \"\"\"Yield range of consecutive numbers.\"\"\"\n    for group in mit.consecutive_groups(iterable):\n        group = list(group)\n        if len(group) == 1:\n            yield group[0]\n        else:\n            yield group[0], group[-1]\n\n\niterable = [2, 3, 4, 5, 12, 13, 14, 15, 16, 17, 20]\nlist(find_ranges(iterable))\n# [(2, 5), (12, 17), 20]\n</code></pre>\n\n<p>The <a href=\"https://github.com/erikrose/more-itertools/blob/master/more_itertools/more.py#L1623-L1657\" rel=\"noreferrer\">source</a> implementation emulates a <a href=\"https://docs.python.org/2.6/library/itertools.html#examples\" rel=\"noreferrer\">classic recipe</a> (as demonstrated by @Nadia Alramli).</p>\n\n<p><em>Note: <code>more_itertools</code> is a third-party package installable via <a href=\"https://github.com/erikrose/more-itertools\" rel=\"noreferrer\"><code>pip install more_itertools</code></a>.</em></p>\n"
    },
    "638": {
        "question_id": "24245324",
        "answer_id": "24245514",
        "question": "<p>Something about the <code>id</code> of objects of type <code>str</code> (in python 2.7) puzzles me. The <code>str</code> type is immutable, so I would expect that once it is created, it will always have the same <code>id</code>. I believe I don't phrase myself so well, so instead I'll post an example of input and output sequence.</p>\n\n<pre><code>&gt;&gt;&gt; id('so')\n140614155123888\n&gt;&gt;&gt; id('so')\n140614155123848\n&gt;&gt;&gt; id('so')\n140614155123808\n</code></pre>\n\n<p>so in the meanwhile, it changes all the time. However, after having a variable pointing at that string, things change:</p>\n\n<pre><code>&gt;&gt;&gt; so = 'so'\n&gt;&gt;&gt; id('so')\n140614155123728\n&gt;&gt;&gt; so = 'so'\n&gt;&gt;&gt; id(so)\n140614155123728\n&gt;&gt;&gt; not_so = 'so'\n&gt;&gt;&gt; id(not_so)\n140614155123728\n</code></pre>\n\n<p>So it looks like it freezes the id, once a variable holds that value. Indeed, after <code>del so</code> and <code>del not_so</code>, the output of <code>id('so')</code> start changing again.</p>\n\n<p>This is <strong>not</strong> the same behaviour as with (small) integers.</p>\n\n<p>I know there is not real connection between immutability and having the same <code>id</code>; still, I am trying to figure out the source of this behaviour. I believe that someone whose familiar with python's internals would be less surprised than me, so I am trying to reach the same point...</p>\n\n<h1>Update</h1>\n\n<p>Trying the same with a different string gave different results...</p>\n\n<pre><code>&gt;&gt;&gt; id('hello')\n139978087896384\n&gt;&gt;&gt; id('hello')\n139978087896384\n&gt;&gt;&gt; id('hello')\n139978087896384\n</code></pre>\n\n<p>Now it <strong>is</strong> equal...</p>\n",
        "answer": "<p>CPython does <strong>not</strong> promise to intern strings by default, but in practice, a lot of places in the Python codebase do reuse already-created string objects. A lot of Python internals use (the C-equivalent of) the <a href=\"https://docs.python.org/2/library/functions.html#intern\" rel=\"noreferrer\"><code>intern()</code> function call</a> to explicitly intern Python strings, but unless you hit one of those special cases, two identical Python string literals will produce different strings.</p>\n\n<p>Python is also free to <em>reuse</em> memory locations, and Python will also optimize immutable <em>literals</em> by storing them once, at compile time, with the bytecode in code objects. The Python REPL (interactive interpreter) also stores the most recent expression result in the <code>_</code> name, which muddles up things some more.</p>\n\n<p>As such, you <em>will</em> see the same id crop up from time to time.</p>\n\n<p>Running just the line <code>id(&lt;string literal&gt;)</code> in the REPL goes through several steps:</p>\n\n<ol>\n<li><p>The line is compiled, which includes creating a constant for the string object:</p>\n\n<pre><code>&gt;&gt;&gt; compile(\"id('foo')\", '&lt;stdin&gt;', 'single').co_consts\n('foo', None)\n</code></pre>\n\n<p>This shows the stored constants with the compiled bytecode; in this case a string <code>'foo'</code> and the <code>None</code> singleton.</p></li>\n<li><p>On execution, the string is loaded from the code constants, and <code>id()</code> returns the memory location. The resulting <code>int</code> value is bound to <code>_</code>, as well as printed:</p>\n\n<pre><code>&gt;&gt;&gt; import dis\n&gt;&gt;&gt; dis.dis(compile(\"id('foo')\", '&lt;stdin&gt;', 'single'))\n  1           0 LOAD_NAME                0 (id)\n              3 LOAD_CONST               0 ('foo')\n              6 CALL_FUNCTION            1\n              9 PRINT_EXPR          \n             10 LOAD_CONST               1 (None)\n             13 RETURN_VALUE        \n</code></pre></li>\n<li><p>The code object is not referenced by anything, reference count drops to 0 and the code object is deleted. As a consequence, so is the string object.</p></li>\n</ol>\n\n<p>Python can then <em>perhaps</em> reuse the same memory location for a new string object, if you re-run the same code. This usually leads to the same memory address being printed if you repeat this code. <em>This does depend on what else you do with your Python memory</em>.</p>\n\n<p>ID reuse is <em>not</em> predictable; if in the meantime the garbage collector runs to clear circular references, other memory could be freed and you'll get new memory addresses.</p>\n\n<p>Next, the Python compiler will also intern any Python string stored as a constant, provided it looks enough like a valid identifier. The Python <a href=\"http://hg.python.org/cpython/file/f254ceec0d45/Objects/codeobject.c#l43\" rel=\"noreferrer\">code object factory function PyCode_New</a> will intern any string object that contains only ASCII letters, digits or underscores:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>/* Intern selected string constants */\nfor (i = PyTuple_Size(consts); --i &gt;= 0; ) {\n    PyObject *v = PyTuple_GetItem(consts, i);\n    if (!PyString_Check(v))\n        continue;\n    if (!all_name_chars((unsigned char *)PyString_AS_STRING(v)))\n        continue;\n    PyString_InternInPlace(&amp;PyTuple_GET_ITEM(consts, i));\n}\n</code></pre>\n\n<p>Since you created strings that fit that criterion, they are interned, which is why you see the same ID being used for the <code>'so'</code> string in your second test: as long as a reference to the interned version survives, interning will cause future <code>'so'</code> literals to reuse the interned string object, even in new code blocks and bound to different identifiers. In your first test, you don't save a reference to the string, so the interned strings are discarded before they can be reused.</p>\n\n<p>Incidentally, your new name <code>so = 'so'</code> binds a string to a name that <em>contains the same characters</em>. In other words, you are creating a global whose name and value are equal. As Python interns both identifiers and qualifying constants, you end up using the same string object for both the identifier and its value:</p>\n\n<pre><code>&gt;&gt;&gt; compile(\"so = 'so'\", '&lt;stdin&gt;', 'single').co_names[0] is compile(\"so = 'so'\", '&lt;stdin&gt;', 'single').co_consts[0]\nTrue\n</code></pre>\n\n<p>If you create strings that are either not code object constants, or contain characters outside of the letters + numbers + underscore range, you'll see the <code>id()</code> value not being reused:</p>\n\n<pre><code>&gt;&gt;&gt; some_var = 'Look ma, spaces and punctuation!'\n&gt;&gt;&gt; some_other_var = 'Look ma, spaces and punctuation!'\n&gt;&gt;&gt; id(some_var)\n4493058384\n&gt;&gt;&gt; id(some_other_var)\n4493058456\n&gt;&gt;&gt; foo = 'Concatenating_' + 'also_helps_if_long_enough'\n&gt;&gt;&gt; bar = 'Concatenating_' + 'also_helps_if_long_enough'\n&gt;&gt;&gt; foo is bar\nFalse\n&gt;&gt;&gt; foo == bar\nTrue\n</code></pre>\n\n<p>The Python peephole optimizer does pre-calculate the results of simple expressions, but if this results in a sequence longer than 20 the output is ignored (to prevent bloating code objects and memory use); so concatenating shorter strings consisting only of name characters <em>can</em> still lead to interned strings if the result is 20 characters or shorter.</p>\n"
    },
    "639": {
        "question_id": "48541444",
        "answer_id": "48590850",
        "question": "<p>I need to filter rows in a <code>pandas</code> dataframe so that a specific string column contains at least one of a list of provided substrings. The substrings may have unusual / regex characters. The comparison should not involve regex and is case insensitive.</p>\n\n<p>For example:</p>\n\n<pre><code>lst = ['kdSj;af-!?', 'aBC+dsfa?\\-', 'sdKaJg|dksaf-*']\n</code></pre>\n\n<p>I currently apply the mask like this:</p>\n\n<pre><code>mask = np.logical_or.reduce([df[col].str.contains(i, regex=False, case=False) for i in lst])\ndf = df[mask]\n</code></pre>\n\n<p>My dataframe is large (~1mio rows) and <code>lst</code> has length 100. Is there a more efficient way? For example, if the first item in <code>lst</code> is found, we should not have to test any subsequent strings for that row.</p>\n",
        "answer": "<p>If you're sticking to using pure-pandas, for both performance and practicality I think you <em>should</em> use regex for this task. However, you will need to properly escape any special characters in the substrings first to ensure that they are matched literally (and not used as regex meta characters).</p>\n\n<p>This is easy to do using <a href=\"https://docs.python.org/3/library/re.html#re.escape\" rel=\"noreferrer\"><code>re.escape</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; esc_lst = [re.escape(s) for s in lst]\n</code></pre>\n\n<p>These escaped substrings can then be joined using a regex pipe <code>|</code>. Each of the substrings can be checked against a string until one matches (or they have all been tested). </p>\n\n<pre><code>&gt;&gt;&gt; pattern = '|'.join(esc_lst)\n</code></pre>\n\n<p>The masking stage then becomes a single low-level loop through the rows:</p>\n\n<pre><code>df[col].str.contains(pattern, case=False)\n</code></pre>\n\n<hr>\n\n<p>Here's a simple setup to get a sense of performance:</p>\n\n<pre><code>from random import randint, seed\n\nseed(321)\n\n# 100 substrings of 5 characters\nlst = [''.join([chr(randint(0, 256)) for _ in range(5)]) for _ in range(100)]\n\n# 50000 strings of 20 characters\nstrings = [''.join([chr(randint(0, 256)) for _ in range(20)]) for _ in range(50000)]\n\ncol = pd.Series(strings)\nesc_lst = [re.escape(s) for s in lst]\npattern = '|'.join(esc_lst)\n</code></pre>\n\n<p>The proposed method takes about 1 second (so maybe up to 20 seconds for 1 million rows):</p>\n\n<pre><code>%timeit col.str.contains(pattern, case=False)\n1 loop, best of 3: 981 ms per loop\n</code></pre>\n\n<p>The method in the question took approximately 5 seconds using the same input data. </p>\n\n<p>It's worth noting that these times are 'worst case' in the sense that there were no matches (so <em>all</em> substrings were checked). If there are matches than the timing will improve. </p>\n"
    },
    "640": {
        "question_id": "9490058",
        "answer_id": "9490148",
        "question": "<p>Why doesn't <code>'example'[999:9999]</code> result in error? Since <code>'example'[9]</code> does, what is the motivation behind it?</p>\n\n<p>From this behavior I can assume that <code>'example'[3]</code> is, essentially/internally, not the same as <code>'example'[3:4]</code>, even though both result in the same <code>'m'</code> string.</p>\n",
        "answer": "<p>You're correct! <code>'example'[3:4]</code> and <code>'example'[3]</code> are fundamentally different, and slicing outside the bounds of a sequence (at least for built-ins) doesn't cause an error. </p>\n\n<p>It might be surprising at first, but it makes sense when you think about it. Indexing returns a single item, but slicing returns a subsequence of items. So when you try to index a nonexistent value, there's nothing to return. But when you slice a sequence outside of bounds, you can still return an empty sequence.</p>\n\n<p>Part of what's confusing here is that strings behave a little differently from lists. Look what happens when you do the same thing to a list: </p>\n\n<pre><code>&gt;&gt;&gt; [0, 1, 2, 3, 4, 5][3]\n3\n&gt;&gt;&gt; [0, 1, 2, 3, 4, 5][3:4]\n[3]\n</code></pre>\n\n<p>Here the difference is obvious. In the case of strings, the results appear to be identical because in Python, there's no such thing as an individual character outside of a string. A single character is just a 1-character string. </p>\n\n<p>(For the exact semantics of slicing outside the range of a sequence, see <a href=\"https://stackoverflow.com/a/42680568/577088\">mgilson's answer</a>.)</p>\n"
    },
    "641": {
        "question_id": "8269096",
        "answer_id": "8269141",
        "question": "<p>I'm new to Python and trying to write a program with tkinter.\nWhy is the Hello-function below executed? As I understand it, the callback would only be executed when the button is pressed? I am very confused...</p>\n\n<pre><code>&gt;&gt;&gt; def Hello():\n        print(\"Hi there!\")\n\n&gt;&gt;&gt; hi=Button(frame,text=\"Hello\",command=Hello())\nHi there!\n&gt;&gt;&gt; \n</code></pre>\n",
        "answer": "<p>It is called while the parameters for <code>Button</code> are being assigned:</p>\n\n<pre><code>command=Hello()\n</code></pre>\n\n<p>If you want to pass the function (not it's returned value) you should instead:</p>\n\n<pre><code>command=Hello\n</code></pre>\n\n<p>in general <code>function_name</code> is a function object, <code>function_name()</code> is whatever the function returns. See if this helps further:</p>\n\n<pre><code>&gt;&gt;&gt; def func():\n...     return 'hello'\n... \n&gt;&gt;&gt; type(func)\n&lt;type 'function'&gt;\n&gt;&gt;&gt; type(func())\n&lt;type 'str'&gt;\n</code></pre>\n\n<hr>\n\n<p>If you want to pass arguments, you can use a <a href=\"https://docs.python.org/2/tutorial/controlflow.html#lambda-expressions\">lambda expression</a> to construct a parameterless callable.</p>\n\n<pre><code>&gt;&gt;&gt; hi=Button(frame, text=\"Hello\", command=lambda: Goodnight(\"Moon\"))\n</code></pre>\n\n<p>Simply put, because <code>Goodnight(\"Moon\")</code> is in a lambda, it won't execute right away, instead waiting until the button is clicked.</p>\n"
    },
    "642": {
        "question_id": "122327",
        "answer_id": "46071447",
        "question": "<p>How do I find the location of my site-packages directory?</p>\n",
        "answer": "<p>There are two types of site-packages directories, <em>global</em> and <em>per user</em>.</p>\n\n<ol>\n<li><p><strong>Global</strong> site-packages (\"<a href=\"https://stackoverflow.com/questions/9387928/whats-the-difference-between-dist-packages-and-site-packages\">dist-packages</a>\") directories are listed in <code>sys.path</code> when you run:</p>\n\n<pre><code>python -m site\n</code></pre>\n\n<p>For a more concise list run <code>getsitepackages</code> from the <a href=\"https://docs.python.org/3.5/library/site.html#site.getsitepackages\" rel=\"noreferrer\">site module</a> in Python code:</p>\n\n<pre><code>python -c \"import site; print(site.getsitepackages())\"\n</code></pre>\n\n<p><em>Note:</em> With virtualenvs <a href=\"https://github.com/pypa/virtualenv/issues/228\" rel=\"noreferrer\">getsitepackages is not available</a>, <code>sys.path</code> from above will list the virtualenv's site-packages directory correctly, though.</p></li>\n<li><p>The <strong>per user</strong> site-packages directory (<a href=\"https://www.python.org/dev/peps/pep-0370/\" rel=\"noreferrer\">PEP 370</a>) is where Python installs your local packages:</p>\n\n<pre><code>python -m site --user-site\n</code></pre>\n\n<p>If this points to a non-existing directory check the exit status of Python and see <code>python -m site --help</code> for explanations.</p>\n\n<p><em>Hint:</em> Running <code>pip list --user</code> or <code>pip freeze --user</code> gives you a list of all installed <em>per user</em> site-packages.</p></li>\n</ol>\n\n<hr>\n\n<h2>Practical Tips</h2>\n\n<ul>\n<li><p><code>&lt;package&gt;.__path__</code> lets you identify the location(s) of a specific package: (<a href=\"https://stackoverflow.com/questions/2699287/what-is-path-useful-for\">details</a>)</p>\n\n<pre><code>$ python -c \"import setuptools as _; print(_.__path__)\"\n['/usr/lib/python2.7/dist-packages/setuptools']\n</code></pre></li>\n<li><p><code>&lt;module&gt;.__file__</code> lets you identify the location of a specific module: (<a href=\"https://softwareengineering.stackexchange.com/questions/111871/module-vs-package\">difference</a>)</p>\n\n<pre><code>$ python3 -c \"import os as _; print(_.__file__)\"\n/usr/lib/python3.6/os.py\n</code></pre></li>\n<li><p>Run <code>pip show &lt;package&gt;</code> to show Debian-style package information:</p>\n\n<pre><code>$ pip show pytest\nName: pytest\nVersion: 3.8.2\nSummary: pytest: simple powerful testing with Python\nHome-page: https://docs.pytest.org/en/latest/\nAuthor: Holger Krekel, Bruno Oliveira, Ronny Pfannschmidt, Floris Bruynooghe, Brianna Laugher, Florian Bruhin and others\nAuthor-email: None\nLicense: MIT license\nLocation: /home/peter/.local/lib/python3.4/site-packages\nRequires: more-itertools, atomicwrites, setuptools, attrs, pathlib2, six, py, pluggy\n</code></pre></li>\n</ul>\n"
    },
    "643": {
        "question_id": "627435",
        "answer_id": "627453",
        "question": "<p>How do I remove an element from a list by index in Python?</p>\n\n<p>I found the <code>list.remove</code> method, but say I want to remove the last element, how do I do this? It seems like the default remove searches the list, but I don't want any search to be performed.</p>\n",
        "answer": "<p>Use <code>del</code> and specify the index of the element you want to delete:</p>\n\n<pre><code>&gt;&gt;&gt; a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n&gt;&gt;&gt; del a[-1]\n&gt;&gt;&gt; a\n[0, 1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre>\n\n<p>Also supports slices:</p>\n\n<pre><code>&gt;&gt;&gt; del a[2:4]\n&gt;&gt;&gt; a\n[0, 1, 4, 5, 6, 7, 8, 9]\n</code></pre>\n\n<p><a href=\"http://docs.python.org/tutorial/datastructures.html#the-del-statement\" rel=\"noreferrer\">Here</a> is the section from the tutorial.</p>\n"
    },
    "644": {
        "question_id": "8369219",
        "answer_id": "8369345",
        "question": "<p>I use the following code segment to read a file in python:</p>\n\n<pre><code>with open (\"data.txt\", \"r\") as myfile:\n    data=myfile.readlines()\n</code></pre>\n\n<p>Input file is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>LLKKKKKKKKMMMMMMMMNNNNNNNNNNNNN\nGGGGGGGGGHHHHHHHHHHHHHHHHHHHHEEEEEEEE\n</code></pre>\n\n<p>and when I print data I get</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>['LLKKKKKKKKMMMMMMMMNNNNNNNNNNNNN\\n', 'GGGGGGGGGHHHHHHHHHHHHHHHHHHHHEEEEEEEE']\n</code></pre>\n\n<p>As I see data is in <code>list</code> form. How do I make it string? And also how do I remove the <code>\"\\n\"</code>, <code>\"[\"</code>, and <code>\"]\"</code> characters from it?</p>\n",
        "answer": "<p>You could use:</p>\n\n<pre><code>with open('data.txt', 'r') as file:\n    data = file.read().replace('\\n', '')\n</code></pre>\n"
    },
    "645": {
        "question_id": "11875770",
        "answer_id": "11875813",
        "question": "<p>I have a basic dict as follows:</p>\n\n<pre><code>sample = {}\nsample['title'] = \"String\"\nsample['somedate'] = somedatetimehere\n</code></pre>\n\n<p>When I try to do <code>jsonify(sample)</code> I get:</p>\n\n<p><code>TypeError: datetime.datetime(2012, 8, 8, 21, 46, 24, 862000) is not JSON serializable</code></p>\n\n<p>What can I do such that my dictionary sample can overcome the error above?</p>\n\n<p>Note: Though it may not be relevant, the dictionaries are generated from the retrieval of records out of mongodb where when I print out <code>str(sample['somedate'])</code>, the output is <code>2012-08-08 21:46:24.862000</code>.</p>\n",
        "answer": "<h1>Updated for 2018</h1>\n\n<p>The original answer accommodated the way MongoDB \"date\" fields were represented as:</p>\n\n<p><code>{\"$date\": 1506816000000}</code></p>\n\n<p>If you want a generic Python solution for serializing <code>datetime</code> to json, check out <a href=\"https://stackoverflow.com/a/36142844/293064\">@jjmontes' answer</a> for a quick solution which requires no dependencies.</p>\n\n<hr>\n\n<p>As you are using mongoengine (per comments) and pymongo is a dependency, pymongo has built-in utilities to help with json serialization:<br>\n<a href=\"http://api.mongodb.org/python/1.10.1/api/bson/json_util.html\" rel=\"noreferrer\">http://api.mongodb.org/python/1.10.1/api/bson/json_util.html</a></p>\n\n<p>Example usage (serialization):</p>\n\n<pre><code>from bson import json_util\nimport json\n\njson.dumps(anObject, default=json_util.default)\n</code></pre>\n\n<p>Example usage (deserialization):</p>\n\n<pre><code>json.loads(aJsonString, object_hook=json_util.object_hook)\n</code></pre>\n\n<hr>\n\n<h2>Django</h2>\n\n<p>Django provides a native <code>DjangoJSONEncoder</code> serializer that deals with this kind of properly.</p>\n\n<p>See <a href=\"https://docs.djangoproject.com/en/dev/topics/serialization/#djangojsonencoder\" rel=\"noreferrer\">https://docs.djangoproject.com/en/dev/topics/serialization/#djangojsonencoder</a></p>\n\n<pre><code>from django.core.serializers.json import DjangoJSONEncoder\n\nreturn json.dumps(\n  item,\n  sort_keys=True,\n  indent=1,\n  cls=DjangoJSONEncoder\n)\n</code></pre>\n\n<p>One difference I've noticed between <code>DjangoJSONEncoder</code> and using a custom <code>default</code> like this:</p>\n\n<pre><code>import datetime\nimport json\n\ndef default(o):\n    if isinstance(o, (datetime.date, datetime.datetime)):\n        return o.isoformat()\n\nreturn json.dumps(\n  item,\n  sort_keys=True,\n  indent=1,\n  default=default\n)\n</code></pre>\n\n<p>Is that Django strips a bit of the data:</p>\n\n<pre><code> \"last_login\": \"2018-08-03T10:51:42.990\", # DjangoJSONEncoder \n \"last_login\": \"2018-08-03T10:51:42.990239\", # default\n</code></pre>\n\n<p>So, you may need to be careful about that in some cases.</p>\n"
    },
    "646": {
        "question_id": "15300550",
        "answer_id": "15300671",
        "question": "<p>Consider three functions:</p>\n\n<pre><code>def my_func1():\n  print \"Hello World\"\n  return None\n\ndef my_func2():\n  print \"Hello World\"\n  return\n\ndef my_func3():\n  print \"Hello World\"\n</code></pre>\n\n<p>They all appear to return None. Are there any differences between how the returned value of these functions behave?  Are there any reasons to prefer one versus the other?</p>\n",
        "answer": "<p>On the actual behavior, there is no difference. They all return <code>None</code> and that's it. However, there is a time and  place for all of these.\nThe following instructions are basically how the different methods should be used (or at least how I was taught they should be used), but they are not absolute rules so you can mix them up if you feel necessary to.</p>\n\n<h2>Using <code>return None</code></h2>\n\n<p>This tells that the function is indeed meant to return a value for later use, and in this case it returns <code>None</code>. This value <code>None</code> can then be used elsewhere. <code>return None</code> is never used if there are no other possible return values from the function.</p>\n\n<p>In the following example, we return <code>person</code>'s <code>mother</code> if the <code>person</code> given is a human. If it's not a human, we return <code>None</code> since the <code>person</code> doesn't have a <code>mother</code> (let's suppose it's not an animal or so).</p>\n\n<pre><code>def get_mother(person):\n    if is_human(person):\n        return person.mother\n    else:\n        return None\n</code></pre>\n\n<h2>Using <code>return</code></h2>\n\n<p>This is used for the same reason as <code>break</code> in loops. The return value doesn't matter and you only want to exit the whole function. It's extremely useful in some places, even tho you don't need it that often.</p>\n\n<p>We got 15 <code>prisoners</code> and we know one of them has a knife. We loop through each <code>prisoner</code> one by one to check if they have a knife. If we hit the person with a knife, we can just exit the function cause we know there's only one knife and no reason the check rest of the <code>prisoners</code>. If we don't find the <code>prisoner</code> with a knife, we raise an the alert. This could be done in many different ways and using <code>return</code> is probably not even the best way, but it's just an example to show how to use <code>return</code> for exiting a function.</p>\n\n<pre><code>def find_prisoner_with_knife(prisoners):\n    for prisoner in prisoners:\n        if \"knife\" in prisoner.items:\n            prisoner.move_to_inquisition()\n            return # no need to check rest of the prisoners nor raise an alert\n    raise_alert()\n</code></pre>\n\n<p>Note: You should never do <code>var = find_prisoner_with_knife()</code>, since the return value is not meant to be caught.</p>\n\n<h2>Using no <code>return</code> at all</h2>\n\n<p>This will also return <code>None</code>, but that value is not meant to be used or caught. It simply means that the function ended successfully. It's basically the same as <code>return</code> in <code>void</code> functions in languages such as C++ or Java.</p>\n\n<p>In the following example, we set person's mother's name, and then the function exits after completing successfully.</p>\n\n<pre><code>def set_mother(person, mother):\n    if is_human(person):\n        person.mother = mother\n</code></pre>\n\n<p>Note: You should never do <code>var = set_mother(my_person, my_mother)</code>, since the return value is not meant to be caught.</p>\n"
    },
    "647": {
        "question_id": "8858008",
        "answer_id": "8858026",
        "question": "<p>I looked into the Python <a href=\"http://docs.python.org/library/os.html\"><code>os</code></a> interface, but was unable to locate a method to move a file. How would I do the equivalent of <code>$ mv ...</code> in Python?</p>\n\n<pre><code>&gt;&gt;&gt; source_files = '/PATH/TO/FOLDER/*'\n&gt;&gt;&gt; destination_folder = 'PATH/TO/FOLDER'\n&gt;&gt;&gt; # equivalent of $ mv source_files destination_folder\n</code></pre>\n",
        "answer": "<p><a href=\"http://docs.python.org/library/os.html#os.rename\" rel=\"noreferrer\"><code>os.rename()</code></a> or <a href=\"http://docs.python.org/library/shutil.html#shutil.move\" rel=\"noreferrer\"><code>shutil.move()</code></a></p>\n\n<p>Both employ the same syntax:</p>\n\n<pre><code>import os\nimport shutil\n\nos.rename(\"path/to/current/file.foo\", \"path/to/new/destination/for/file.foo\")\nshutil.move(\"path/to/current/file.foo\", \"path/to/new/destination/for/file.foo\")\n</code></pre>\n\n<p>Note that in both cases the directory in which the new file is being created must already exist, (but, on Windows, a file with that name must not exist or an exception will be raised). Note also, you must include the file name (<code>file.foo</code>) in both the source and destination arguments. If it is changed, the file will be renamed as well as moved.</p>\n\n<p>As has been noted in comments on other answers, <code>shutil.move</code> simply calls <code>os.rename</code> in most cases. However, if the destination is on a different disk than the source, it will instead copy and then delete the source file.</p>\n"
    },
    "648": {
        "question_id": "882712",
        "answer_id": "882770",
        "question": "<p>How can I send the HTML content in an email using Python? I can send simple text.</p>\n",
        "answer": "<p>From <a href=\"https://docs.python.org/2/library/email-examples.html#id5\" rel=\"noreferrer\">Python v2.7.14 documentation - 18.1.11. email: Examples</a>:</p>\n\n<blockquote>\n  <p>Here\u2019s an example of how to create an HTML message with an alternative plain text version:</p>\n</blockquote>\n\n<pre class=\"lang-python prettyprint-override\"><code>#! /usr/bin/python\n\nimport smtplib\n\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\n# me == my email address\n# you == recipient's email address\nme = \"my@email.com\"\nyou = \"your@email.com\"\n\n# Create message container - the correct MIME type is multipart/alternative.\nmsg = MIMEMultipart('alternative')\nmsg['Subject'] = \"Link\"\nmsg['From'] = me\nmsg['To'] = you\n\n# Create the body of the message (a plain-text and an HTML version).\ntext = \"Hi!\\nHow are you?\\nHere is the link you wanted:\\nhttp://www.python.org\"\nhtml = \"\"\"\\\n&lt;html&gt;\n  &lt;head&gt;&lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;Hi!&lt;br&gt;\n       How are you?&lt;br&gt;\n       Here is the &lt;a href=\"http://www.python.org\"&gt;link&lt;/a&gt; you wanted.\n    &lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n# Record the MIME types of both parts - text/plain and text/html.\npart1 = MIMEText(text, 'plain')\npart2 = MIMEText(html, 'html')\n\n# Attach parts into message container.\n# According to RFC 2046, the last part of a multipart message, in this case\n# the HTML message, is best and preferred.\nmsg.attach(part1)\nmsg.attach(part2)\n\n# Send the message via local SMTP server.\ns = smtplib.SMTP('localhost')\n# sendmail function takes 3 arguments: sender's address, recipient's address\n# and message to send - here it is sent as one string.\ns.sendmail(me, you, msg.as_string())\ns.quit()\n</code></pre>\n"
    },
    "649": {
        "question_id": "3518778",
        "answer_id": "3519314",
        "question": "<p>I wonder if there is a direct way to import the contents of a CSV file into a record array, much in the way that R's <code>read.table()</code>, <code>read.delim()</code>, and <code>read.csv()</code> family imports data to R's data frame?</p>\n\n<p>Or is the best way to use <a href=\"https://stackoverflow.com/questions/2859404/reading-csv-files-in-scipy-numpy-in-python\">csv.reader()</a> and then apply something like <code>numpy.core.records.fromrecords()</code>?</p>\n",
        "answer": "<p>You can use Numpy's <code>genfromtxt()</code> method to do so, by setting the <code>delimiter</code> kwarg to a comma.</p>\n\n<pre><code>from numpy import genfromtxt\nmy_data = genfromtxt('my_file.csv', delimiter=',')\n</code></pre>\n\n<p>More information on the function can be found at its respective <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.genfromtxt.html\" rel=\"noreferrer\">documentation</a>.</p>\n"
    },
    "650": {
        "question_id": "3167494",
        "answer_id": "3168436",
        "question": "<ol>\n<li>How often does Python flush to a file?</li>\n<li>How often does Python flush to stdout?</li>\n</ol>\n\n<p>I'm unsure about (1).</p>\n\n<p>As for (2), I believe Python flushes to stdout after every new line.  But, if you overload stdout to be to a file, does it flush as often?</p>\n",
        "answer": "<p>For file operations, Python uses the operating system's default buffering unless you configure it do otherwise.  You can specify a buffer size, unbuffered, or line buffered.</p>\n\n<p>For example, the open function takes a buffer size argument.</p>\n\n<p><a href=\"http://docs.python.org/library/functions.html#open\" rel=\"noreferrer\">http://docs.python.org/library/functions.html#open</a></p>\n\n<p>\"The optional buffering argument specifies the file\u2019s desired buffer size:\" </p>\n\n<ul>\n<li>0 means unbuffered, </li>\n<li>1 means line buffered, </li>\n<li>any other positive value means use a buffer of (approximately) that size. </li>\n<li>A negative buffering means to use the system default, which is usually line buffered for tty devices and fully buffered for other files. </li>\n<li>If omitted, the system default is used. </li>\n</ul>\n\n<p>code:</p>\n\n<pre><code>bufsize = 0\nf = open('file.txt', 'w', buffering=bufsize)\n</code></pre>\n"
    },
    "651": {
        "question_id": "1396668",
        "answer_id": "1396739",
        "question": "<p>Let's say I have an id of a Python object, which I retrieved by doing <code>id(thing)</code>. How do I find <code>thing</code> again by the id number I was given?</p>\n",
        "answer": "<p>You'll probably want to consider implementing it another way. Are you aware of the weakref module?</p>\n\n<p>(Edited) The Python <a href=\"http://docs.python.org/library/weakref.html\" rel=\"noreferrer\">weakref module</a> lets you keep references, dictionary references, and proxies to objects without having those references count in the reference counter. They're like symbolic links.</p>\n"
    },
    "652": {
        "question_id": "2361426",
        "answer_id": "2364277",
        "question": "<p>I would like to get the first item from a list matching a condition. It's important that the resulting method not process the entire list, which could be quite large. For example, the following function is adequate:</p>\n\n<pre><code>def first(the_iterable, condition = lambda x: True):\n    for i in the_iterable:\n        if condition(i):\n            return i\n</code></pre>\n\n<p>This function could be used something like this:</p>\n\n<pre><code>&gt;&gt;&gt; first(range(10))\n0\n&gt;&gt;&gt; first(range(10), lambda i: i &gt; 3)\n4\n</code></pre>\n\n<p>However, I can't think of a good built-in / one-liner to let me do this. I don't particularly want to copy this function around if I don't have to. Is there a built-in way to get the first item matching a condition?</p>\n",
        "answer": "<p>In Python 2.6 or better:</p>\n\n<p>If you want <code>StopIteration</code> to be raised if no matching element is found:</p>\n\n<p><code>next(x for x in the_iterable if x &gt; 3)</code></p>\n\n<p>If you want <code>default_value</code> (e.g. <code>None</code>) to be returned instead:</p>\n\n<p><code>next( (x for x in the_iterable if x&gt;3), default_value)</code></p>\n\n<p>Note that you need an extra pair of parentheses around the generator expression in this case - they are needed always when the generator expression isn't the only argument.</p>\n\n<p>I see most answers resolutely ignore the <a href=\"https://docs.python.org/2/library/functions.html#next\" rel=\"noreferrer\"><code>next</code></a> built-in and so I assume that for some mysterious reason they're 100% focused on versions 2.5 and older -- without mentioning the Python-version issue (but then I don't see that mention in the answers that <em>do</em> mention the <code>next</code> built-in, which is why I thought it necessary to provide an answer myself -- at least the \"correct version\" issue gets on record this way;-).</p>\n\n<p>In 2.5, the <a href=\"https://docs.python.org/2.5/ref/yieldexpr.html#l2h-407\" rel=\"noreferrer\"><code>.next()</code></a> method of iterators immediately raises <code>StopIteration</code> if the iterator immediately finishes -- i.e., for your use case, if no item in the iterable satisfies the condition.  If you don't care (i.e., you know there <strong>must</strong> be at least one satisfactory item) then just use <code>.next()</code> (best on a genexp, line for the <code>next</code> built-in in Python 2.6 and better).</p>\n\n<p>If you <em>do</em> care, wrapping things in a function as you had first indicated in your Q seems best, and while the function implementation you proposed is just fine, you could alternatively use <code>itertools</code>, a <code>for...: break</code> loop, or a genexp, or a <code>try/except StopIteration</code> as the function's body, as various answers suggested.  There's not much added value in any of these alternatives so I'd go for the starkly-simple version you first proposed.</p>\n"
    },
    "653": {
        "question_id": "11950819",
        "answer_id": "11950951",
        "question": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"https://stackoverflow.com/questions/5997027/python-rounding-error-with-float-numbers\">Python rounding error with float numbers</a>  </p>\n</blockquote>\n\n\n\n<pre><code>Python 2.7.3 (v2.7.3:70274d53c1dd, Apr  9 2012, 20:52:43) \n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\nType \"copyright\", \"credits\" or \"license()\" for more information.\n&gt;&gt;&gt; 4.2 - 1.8\n2.4000000000000004\n&gt;&gt;&gt; 1.20 - 1.18\n0.020000000000000018\n&gt;&gt;&gt; 5.1 - 4\n1.0999999999999996\n&gt;&gt;&gt; 5 - 4\n1\n&gt;&gt;&gt; 5.0 - 4.0\n1.0\n</code></pre>\n\n<p>Why is Python getting its maths wrong?</p>\n",
        "answer": "<p>You have reached a new level in computer science, and you are coming of age.</p>\n\n<p>You therefore are now ready for the next step. I have been authorized by the BDFL <em>himself</em> to reveal the following Super Secret document to you. The ancients understood it and deciphered it first, and now, so will you!</p>\n\n<h1><a href=\"http://floating-point-gui.de/basic/\" rel=\"noreferrer\">The Floating Point Guide</a></h1>\n\n<p>Treat this document with care! Only share this with people you know have reached the same baffling conclusions!</p>\n\n<hr>\n\n<blockquote>\n  <p><strong>Moderator's Note</strong></p>\n  \n  <p>This answer is not representative of the expected quality standards on Stack Overflow. However, it has unexpectedly developed a life of its own and is solely preserved for historical significance now.</p>\n</blockquote>\n"
    },
    "654": {
        "question_id": "18425225",
        "answer_id": "18425275",
        "question": "<p>This thread discusses how to get the name of a function as a string in Python:\n<a href=\"https://stackoverflow.com/questions/251464/how-to-get-the-function-name-as-string-in-python\">How to get a function name as a string in Python?</a></p>\n\n<p>How can I do the same for a variable? As opposed to functions, Python variables do not have the <code>__name__</code> attribute.</p>\n\n<p>In other words, if I have a variable such as:</p>\n\n<pre><code>foo = dict()\nfoo['bar'] = 2\n</code></pre>\n\n<p>I am looking for a function/attribute, e.g. <code>retrieve_name</code>:</p>\n\n<pre><code>retrieve_name(foo) \n</code></pre>\n\n<p>that returns the string <code>'foo'</code></p>\n\n<h3>Update:</h3>\n\n<p>Since people are asking why I want to do this, here is an example. I would like to <a href=\"http://pandas.pydata.org/pandas-docs/dev/dsintro.html#from-a-list-of-dicts\" rel=\"nofollow noreferrer\">create a DataFrame in Pandas from this list</a>, where <strong>the column names</strong>  are given by the names of the actual dictionaries:</p>\n\n<pre><code># List of dictionaries for my DataFrame\nlist_of_dicts = [n_jobs, users, queues, priorities]\n</code></pre>\n",
        "answer": "<p>The only objects in Python that have canonical names are modules, functions, and classes, and of course there is no guarantee that this canonical name has any meaning in any namespace after the function or class has been defined or the module imported. These names can also be modified after the objects are created so they may not always be particularly trustworthy.</p>\n\n<p>What you want to do is not possible <a href=\"https://stackoverflow.com/a/18425523/623735\">without recursively walking the tree of named objects</a>; a name is a one-way reference to an object. A common or garden-variety Python object contains no references to its names. Imagine if every integer, every dict, every list, every Boolean needed to maintain a list of strings that represented names that referred to it! It would be an implementation nightmare, with little benefit to the programmer.</p>\n"
    },
    "655": {
        "question_id": "2970608",
        "answer_id": "2970722",
        "question": "<p>Reading the <a href=\"http://docs.python.org/py3k/whatsnew/3.1.html#new-improved-and-deprecated-modules\" rel=\"noreferrer\">changes in Python 3.1</a>, I found something... unexpected:</p>\n\n<blockquote>\n  <p>The sys.version_info tuple is now a <strong>named tuple</strong>:</p>\n</blockquote>\n\n<p>I never heard about named tuples before, and I thought elements could either be indexed by numbers (like in tuples and lists) or by keys (like in dicts). I never expected they could be indexed both ways.</p>\n\n<p>Thus, my questions are:</p>\n\n<ul>\n<li>What are named tuples?</li>\n<li>How to use them?</li>\n<li>Why/when should I use named tuples instead of normal tuples?</li>\n<li>Why/when should I use normal tuples instead of named tuples?</li>\n<li>Is there any kind of \"named list\" (a mutable version of the named tuple)?</li>\n</ul>\n",
        "answer": "<p>Named tuples are basically easy-to-create, lightweight object types.  Named tuple instances can be referenced using object-like variable dereferencing or the standard tuple syntax.  They can be used similarly to <code>struct</code> or other common record types, except that they are immutable.  They were added in Python 2.6 and Python 3.0, although there is a <a href=\"http://code.activestate.com/recipes/500261/\" rel=\"noreferrer\">recipe for implementation in Python 2.4</a>.</p>\n\n<p>For example, it is common to represent a point as a tuple <code>(x, y)</code>.  This leads to code like the following:</p>\n\n<pre><code>pt1 = (1.0, 5.0)\npt2 = (2.5, 1.5)\n\nfrom math import sqrt\nline_length = sqrt((pt1[0]-pt2[0])**2 + (pt1[1]-pt2[1])**2)\n</code></pre>\n\n<p>Using a named tuple it becomes more readable:</p>\n\n<pre><code>from collections import namedtuple\nPoint = namedtuple('Point', 'x y')\npt1 = Point(1.0, 5.0)\npt2 = Point(2.5, 1.5)\n\nfrom math import sqrt\nline_length = sqrt((pt1.x-pt2.x)**2 + (pt1.y-pt2.y)**2)\n</code></pre>\n\n<p>However, named tuples are still backwards compatible with normal tuples, so the following will still work:</p>\n\n<pre><code>Point = namedtuple('Point', 'x y')\npt1 = Point(1.0, 5.0)\npt2 = Point(2.5, 1.5)\n\nfrom math import sqrt\n# use index referencing\nline_length = sqrt((pt1[0]-pt2[0])**2 + (pt1[1]-pt2[1])**2)\n # use tuple unpacking\nx1, y1 = pt1\n</code></pre>\n\n<p>Thus, <strong>you should use named tuples instead of tuples anywhere you think object notation will make your code more pythonic and more easily readable</strong>.  I personally have started using them to represent very simple value types, particularly when passing them as parameters to functions.  It makes the functions more readable, without seeing the context of the tuple packing.</p>\n\n<p>Furthermore, <strong>you can also replace ordinary <em>immutable</em> classes that have no functions</strong>, only fields with them.  You can even use your named tuple types as base classes:</p>\n\n<pre><code>class Point(namedtuple('Point', 'x y')):\n    [...]\n</code></pre>\n\n<p>However, as with tuples, attributes in named tuples are immutable:</p>\n\n<pre><code>&gt;&gt;&gt; Point = namedtuple('Point', 'x y')\n&gt;&gt;&gt; pt1 = Point(1.0, 5.0)\n&gt;&gt;&gt; pt1.x = 2.0\nAttributeError: can't set attribute\n</code></pre>\n\n<p>If you want to be able change the values, you need another type.  There is a handy recipe for <a href=\"http://code.activestate.com/recipes/576555/\" rel=\"noreferrer\">mutable recordtypes</a> which allow you to set new values to attributes.</p>\n\n<pre><code>&gt;&gt;&gt; from rcdtype import *\n&gt;&gt;&gt; Point = recordtype('Point', 'x y')\n&gt;&gt;&gt; pt1 = Point(1.0, 5.0)\n&gt;&gt;&gt; pt1 = Point(1.0, 5.0)\n&gt;&gt;&gt; pt1.x = 2.0\n&gt;&gt;&gt; print(pt1[0])\n    2.0\n</code></pre>\n\n<p>I am not aware of any form of \"named list\" that lets you add new fields, however.  You may just want to use a dictionary in this situation. Named tuples can be converted to dictionaries using <code>pt1._asdict()</code> which returns <code>{'x': 1.0, 'y': 5.0}</code> and can be operated upon with all the usual dictionary functions.  </p>\n\n<p>As already noted, you should <a href=\"http://docs.python.org/py3k/library/collections.html?highlight=namedtuple#collections.namedtuple\" rel=\"noreferrer\">check the documentation</a> for more information from which these examples were constructed.</p>\n"
    },
    "656": {
        "question_id": "13411544",
        "answer_id": "13485766",
        "question": "<p>When deleting a column in a DataFrame I use:</p>\n\n<pre><code>del df['column_name']\n</code></pre>\n\n<p>And this works great. Why can't I use the following?</p>\n\n<pre><code>del df.column_name\n</code></pre>\n\n<p><em>As you can access the column/Series as <code>df.column_name</code>, I expect this to work.</em></p>\n",
        "answer": "<p>As you've guessed, the right syntax is </p>\n\n<pre><code>del df['column_name']\n</code></pre>\n\n<p>It's difficult to make <code>del df.column_name</code> work simply as the result of syntactic limitations in Python. <code>del df[name]</code> gets translated to <code>df.__delitem__(name)</code> under the covers by Python.</p>\n"
    },
    "657": {
        "question_id": "2225038",
        "answer_id": "2225066",
        "question": "<p>Is there a simple way to determine if a variable is a list, dictionary, or something else? I am getting an object back that may be either type and I need to be able to tell the difference.</p>\n",
        "answer": "<p>To get the type of an object, you can use the built-in <a href=\"http://docs.python.org/3/library/functions.html#type\" rel=\"noreferrer\"><code>type()</code></a> function. Passing an object as the only parameter will return the type object of that object:</p>\n\n<pre><code>&gt;&gt;&gt; type([]) is list\nTrue\n&gt;&gt;&gt; type({}) is dict\nTrue\n&gt;&gt;&gt; type('') is str\nTrue\n&gt;&gt;&gt; type(0) is int\nTrue\n&gt;&gt;&gt; type({})\n&lt;type 'dict'&gt;\n&gt;&gt;&gt; type([])\n&lt;type 'list'&gt;\n</code></pre>\n\n<p>This of course also works for custom types:</p>\n\n<pre><code>&gt;&gt;&gt; class Test1 (object):\n        pass\n&gt;&gt;&gt; class Test2 (Test1):\n        pass\n&gt;&gt;&gt; a = Test1()\n&gt;&gt;&gt; b = Test2()\n&gt;&gt;&gt; type(a) is Test1\nTrue\n&gt;&gt;&gt; type(b) is Test2\nTrue\n</code></pre>\n\n<p>Note that <code>type()</code> will only return the immediate type of the object, but won\u2019t be able to tell you about type inheritance.</p>\n\n<pre><code>&gt;&gt;&gt; type(b) is Test1\nFalse\n</code></pre>\n\n<p>To cover that, you should use the <a href=\"http://docs.python.org/3/library/functions.html#isinstance\" rel=\"noreferrer\"><code>isinstance</code></a> function. This of course also works for built-in types:</p>\n\n<pre><code>&gt;&gt;&gt; isinstance(b, Test1)\nTrue\n&gt;&gt;&gt; isinstance(b, Test2)\nTrue\n&gt;&gt;&gt; isinstance(a, Test1)\nTrue\n&gt;&gt;&gt; isinstance(a, Test2)\nFalse\n&gt;&gt;&gt; isinstance([], list)\nTrue\n&gt;&gt;&gt; isinstance({}, dict)\nTrue\n</code></pre>\n\n<p><code>isinstance()</code> is usually the preferred way to ensure the type of an object because it will also accept derived types. So unless you actually need the type object (for whatever reason), using <code>isinstance()</code> is preferred over <code>type()</code>.</p>\n\n<p>The second parameter of <code>isinstance()</code> also accepts a tuple of types, so it\u2019s possible to check for multiple types at once. <code>isinstance</code> will then return true, if the object is of any of those types:</p>\n\n<pre><code>&gt;&gt;&gt; isinstance([], (tuple, list, set))\nTrue\n</code></pre>\n"
    },
    "658": {
        "question_id": "11285613",
        "answer_id": "11287278",
        "question": "<p>I have data in different columns but I don't know how to extract it to save it in another variable.</p>\n\n<pre><code>index  a   b   c\n1      2   3   4\n2      3   4   5\n</code></pre>\n\n<p>How do I select <code>'a'</code>, <code>'b'</code> and save it in to df1?</p>\n\n<p>I tried </p>\n\n<pre><code>df1 = df['a':'b']\ndf1 = df.ix[:, 'a':'b']\n</code></pre>\n\n<p>None seem to work.</p>\n",
        "answer": "<p>The column names (which are strings) cannot be sliced in the manner you tried.</p>\n\n<p>Here you have a couple of options. If you know from context which variables you want to slice out, you can just return a view of only those columns by passing a list into the <code>__getitem__</code> syntax (the []'s).</p>\n\n<pre><code>df1 = df[['a','b']]\n</code></pre>\n\n<p>Alternatively, if it matters to index them numerically and not by their name (say your code should automatically do this without knowing the names of the first two columns) then you can do this instead:</p>\n\n<pre><code>df1 = df.iloc[:,0:2] # Remember that Python does not slice inclusive of the ending index.\n</code></pre>\n\n<p>Additionally, you should familiarize yourself with the idea of a view into a Pandas object vs. a copy of that object. The first of the above methods will return a new copy in memory of the desired sub-object (the desired slices). </p>\n\n<p>Sometimes, however, there are indexing conventions in Pandas that don't do this and instead give you a new variable that just refers to the same chunk of memory as the sub-object or slice in the original object. This will happen with the second way of indexing, so you can modify it with the <code>copy()</code> function to get a regular copy. When this happens, changing what you think is the sliced object can sometimes alter the original object. Always good to be on the look out for this.</p>\n\n<pre><code>df1 = df.iloc[0,0:2].copy() # To avoid the case where changing df1 also changes df\n</code></pre>\n\n<p>To use <code>iloc</code>, you need to know the column positions (or indices). As the column positions may change, instead of hard-coding indices, you can use <code>iloc</code> along with <code>get_loc</code> function of <code>columns</code> method of dataframe object to obtain column indices.</p>\n\n<pre><code>{df.columns.get_loc(c):c for idx, c in enumerate(df.columns)}\n</code></pre>\n\n<p>Now you can use this dictionary to access columns through names and using <code>iloc</code>. </p>\n"
    },
    "659": {
        "question_id": "13287490",
        "answer_id": "15699761",
        "question": "<p>I want to use <a href=\"http://phantomjs.org/\">PhantomJS</a> in <a href=\"http://www.python.org/\">Python</a>. I googled this problem but couldn't find proper solutions.</p>\n\n<p>I find <code>os.popen()</code>  may be a good choice. But I couldn't pass some arguments to it.</p>\n\n<p>Using <code>subprocess.Popen()</code> may be a proper solution for now. I want to know whether there's a better solution or not.</p>\n\n<p>Is there a way to use PhantomJS in Python?</p>\n",
        "answer": "<p>The easiest way to use PhantomJS in python is via Selenium. The simplest installation method is</p>\n\n<ol>\n<li>Install <a href=\"https://nodejs.org/\" rel=\"noreferrer\">NodeJS</a></li>\n<li>Using Node's package manager install phantomjs: <code>npm -g install phantomjs-prebuilt</code></li>\n<li>install selenium (in your virtualenv, if you are using that)</li>\n</ol>\n\n<p>After installation, you may use phantom as simple as:</p>\n\n<pre><code>from selenium import webdriver\n\ndriver = webdriver.PhantomJS() # or add to your PATH\ndriver.set_window_size(1024, 768) # optional\ndriver.get('https://google.com/')\ndriver.save_screenshot('screen.png') # save a screenshot to disk\nsbtn = driver.find_element_by_css_selector('button.gbqfba')\nsbtn.click()\n</code></pre>\n\n<p>If your system path environment variable isn't set correctly, you'll need to specify the exact path as an argument to <code>webdriver.PhantomJS()</code>.  Replace this:</p>\n\n<pre><code>driver = webdriver.PhantomJS() # or add to your PATH\n</code></pre>\n\n<p>... with the following:</p>\n\n<pre><code>driver = webdriver.PhantomJS(executable_path='/usr/local/lib/node_modules/phantomjs/lib/phantom/bin/phantomjs')\n</code></pre>\n\n<p>References:</p>\n\n<ul>\n<li><a href=\"http://selenium-python.readthedocs.io/\" rel=\"noreferrer\">http://selenium-python.readthedocs.io/</a></li>\n<li><a href=\"https://stackoverflow.com/questions/14699718/how-do-i-set-a-proxy-for-phantomjs-ghostdriver-in-python-webdriver/15699530#15699530\">How do I set a proxy for phantomjs/ghostdriver in python webdriver?</a></li>\n<li><a href=\"https://dzone.com/articles/python-testing-phantomjs\" rel=\"noreferrer\">https://dzone.com/articles/python-testing-phantomjs</a></li>\n</ul>\n"
    },
    "660": {
        "question_id": "701802",
        "answer_id": "701810",
        "question": "<p>How do I execute a string containing Python code in Python?</p>\n",
        "answer": "<p>In the example a string is executed as code using the exec function.</p>\n\n<pre><code>import sys\nimport StringIO\n\n# create file-like string to capture output\ncodeOut = StringIO.StringIO()\ncodeErr = StringIO.StringIO()\n\ncode = \"\"\"\ndef f(x):\n    x = x + 1\n    return x\n\nprint 'This is my output.'\n\"\"\"\n\n# capture output and errors\nsys.stdout = codeOut\nsys.stderr = codeErr\n\nexec code\n\n# restore stdout and stderr\nsys.stdout = sys.__stdout__\nsys.stderr = sys.__stderr__\n\nprint f(4)\n\ns = codeErr.getvalue()\n\nprint \"error:\\n%s\\n\" % s\n\ns = codeOut.getvalue()\n\nprint \"output:\\n%s\" % s\n\ncodeOut.close()\ncodeErr.close()\n</code></pre>\n"
    },
    "661": {
        "question_id": "12172791",
        "answer_id": "12173406",
        "question": "<p>I don't understand the following from <a href=\"http://www.python.org/dev/peps/pep-0404/\" rel=\"noreferrer\">pep-0404</a></p>\n\n<blockquote>\n  <p>In Python 3, implicit relative imports within packages are no longer\n  available - only absolute imports and explicit relative imports are\n  supported. In addition, star imports (e.g. from x import *) are only\n  permitted in module level code.</p>\n</blockquote>\n\n<p>What is a relative import?\nIn what other places star import was allowed in python2?\nPlease explain with examples.</p>\n",
        "answer": "<p>Relative import happens whenever you are importing a package relative to the current script/package.</p>\n\n<p>Consider the following tree for example:</p>\n\n<pre><code>mypkg\n\u251c\u2500\u2500 base.py\n\u2514\u2500\u2500 derived.py\n</code></pre>\n\n<p>Now, your <code>derived.py</code> requires something from <code>base.py</code>. In Python 2, you could do it like this (in <code>derived.py</code>):</p>\n\n<pre><code>from base import BaseThing\n</code></pre>\n\n<p>Python 3 no longer supports that since it's not explicit whether you want the 'relative' or 'absolute' <code>base</code>. In other words, if there was a Python package named <code>base</code> installed in the system, you'd get the wrong one.</p>\n\n<p>Instead it requires you to use <em>explicit imports</em> which explicitly specify location of a module on a path-alike basis. Your <code>derived.py</code> would look like:</p>\n\n<pre><code>from .base import BaseThing\n</code></pre>\n\n<p>The leading <code>.</code> says 'import <code>base</code> from module directory'; in other words, <code>.base</code> maps to <code>./base.py</code>.</p>\n\n<p>Similarly, there is <code>..</code> prefix which goes up the directory hierarchy like <code>../</code> (with <code>..mod</code> mapping to <code>../mod.py</code>), and then <code>...</code> which goes two levels up (<code>../../mod.py</code>) and so on.</p>\n\n<p>Please however note that the relative paths listed above were relative to directory where current module (<code>derived.py</code>) resides in, <em>not</em> the current working directory.</p>\n\n<hr>\n\n<p><em>@BrenBarn</em> has already explained the star import case. For completeness, I will have to say the same ;).</p>\n\n<p>For example, you need to use a few <code>math</code> functions but you use them only in a single function. In Python 2 you were permitted to be semi-lazy:</p>\n\n<pre><code>def sin_degrees(x):\n    from math import *\n    return sin(degrees(x))\n</code></pre>\n\n<p>Note that it already triggers a warning in Python 2:</p>\n\n<pre><code>a.py:1: SyntaxWarning: import * only allowed at module level\n  def sin_degrees(x):\n</code></pre>\n\n<p>In modern Python 2 code you should and in Python 3 you have to do either:</p>\n\n<pre><code>def sin_degrees(x):\n    from math import sin, degrees\n    return sin(degrees(x))\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>from math import *\n\ndef sin_degrees(x):\n    return sin(degrees(x))\n</code></pre>\n"
    },
    "662": {
        "question_id": "7908636",
        "answer_id": "47166787",
        "question": "<p>I am using matplotlib to make scatter plots. Each point on the scatter plot is associated with a named object. I would like to be able to see the name of an object when I hover my cursor over the point on the scatter plot associated with that object. In particular, it would be nice to be able to quickly see the names of the points that are outliers. The closest thing I have been able to find while searching here is the annotate command, but that appears to create a fixed label on the plot. Unfortunately, with the number of points that I have, the scatter plot would be unreadable if I labeled each point. Does anyone know of a way to create labels that only appear when the cursor hovers in the vicinity of that point?</p>\n",
        "answer": "<p>It seems none of the other answers here actually answer the question. So here is a code that uses a <strong>scatter</strong> and shows an <strong>annotation</strong> upon <strong>hovering</strong> over the scatter points.</p>\n\n<pre><code>import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(1)\n\nx = np.random.rand(15)\ny = np.random.rand(15)\nnames = np.array(list(\"ABCDEFGHIJKLMNO\"))\nc = np.random.randint(1,5,size=15)\n\nnorm = plt.Normalize(1,4)\ncmap = plt.cm.RdYlGn\n\nfig,ax = plt.subplots()\nsc = plt.scatter(x,y,c=c, s=100, cmap=cmap, norm=norm)\n\nannot = ax.annotate(\"\", xy=(0,0), xytext=(20,20),textcoords=\"offset points\",\n                    bbox=dict(boxstyle=\"round\", fc=\"w\"),\n                    arrowprops=dict(arrowstyle=\"-&gt;\"))\nannot.set_visible(False)\n\ndef update_annot(ind):\n\n    pos = sc.get_offsets()[ind[\"ind\"][0]]\n    annot.xy = pos\n    text = \"{}, {}\".format(\" \".join(list(map(str,ind[\"ind\"]))), \n                           \" \".join([names[n] for n in ind[\"ind\"]]))\n    annot.set_text(text)\n    annot.get_bbox_patch().set_facecolor(cmap(norm(c[ind[\"ind\"][0]])))\n    annot.get_bbox_patch().set_alpha(0.4)\n\n\ndef hover(event):\n    vis = annot.get_visible()\n    if event.inaxes == ax:\n        cont, ind = sc.contains(event)\n        if cont:\n            update_annot(ind)\n            annot.set_visible(True)\n            fig.canvas.draw_idle()\n        else:\n            if vis:\n                annot.set_visible(False)\n                fig.canvas.draw_idle()\n\nfig.canvas.mpl_connect(\"motion_notify_event\", hover)\n\nplt.show()\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/y3ll8.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/y3ll8.png\" alt=\"enter image description here\"></a></p>\n\n<p>Because people suddenly also want to use this solution for a line <code>plot</code> instead of a scatter, the following would be the same solution for <code>plot</code> (which works slightly differently).</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>import matplotlib.pyplot as plt\r\nimport numpy as np; np.random.seed(1)\r\n\r\nx = np.sort(np.random.rand(15))\r\ny = np.sort(np.random.rand(15))\r\nnames = np.array(list(\"ABCDEFGHIJKLMNO\"))\r\n\r\nnorm = plt.Normalize(1,4)\r\ncmap = plt.cm.RdYlGn\r\n\r\nfig,ax = plt.subplots()\r\nline, = plt.plot(x,y, marker=\"o\")\r\n\r\nannot = ax.annotate(\"\", xy=(0,0), xytext=(-20,20),textcoords=\"offset points\",\r\n                    bbox=dict(boxstyle=\"round\", fc=\"w\"),\r\n                    arrowprops=dict(arrowstyle=\"-&gt;\"))\r\nannot.set_visible(False)\r\n\r\ndef update_annot(ind):\r\n    x,y = line.get_data()\r\n    annot.xy = (x[ind[\"ind\"][0]], y[ind[\"ind\"][0]])\r\n    text = \"{}, {}\".format(\" \".join(list(map(str,ind[\"ind\"]))), \r\n                           \" \".join([names[n] for n in ind[\"ind\"]]))\r\n    annot.set_text(text)\r\n    annot.get_bbox_patch().set_alpha(0.4)\r\n\r\n\r\ndef hover(event):\r\n    vis = annot.get_visible()\r\n    if event.inaxes == ax:\r\n        cont, ind = line.contains(event)\r\n        if cont:\r\n            update_annot(ind)\r\n            annot.set_visible(True)\r\n            fig.canvas.draw_idle()\r\n        else:\r\n            if vis:\r\n                annot.set_visible(False)\r\n                fig.canvas.draw_idle()\r\n\r\nfig.canvas.mpl_connect(\"motion_notify_event\", hover)\r\n\r\nplt.show()</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>In case someone is looking for a solution for lines in twin axes, refer to <a href=\"https://stackoverflow.com/questions/55891285/how-to-make-labels-appear-when-hovering-over-a-point-in-multiple-axis/55892690#55892690\">How to make labels appear when hovering over a point in multiple axis?</a></p>\n\n<p>In case someone is looking for a solution for bar plots, please refer to e.g. <a href=\"https://stackoverflow.com/a/50560826/4124317\">this answer</a>.</p>\n"
    },
    "663": {
        "question_id": "285061",
        "answer_id": "285076",
        "question": "<p>Suppose I have a python object <code>x</code> and a string <code>s</code>, how do I set the attribute <code>s</code> on <code>x</code>? So:</p>\n\n<pre><code>&gt;&gt;&gt; x = SomeObject()\n&gt;&gt;&gt; attr = 'myAttr'\n&gt;&gt;&gt; # magic goes here\n&gt;&gt;&gt; x.myAttr\n'magic'\n</code></pre>\n\n<p>What's the magic? The goal of this, incidentally, is to cache calls to <code>x.__getattr__()</code>. </p>\n",
        "answer": "<pre><code>setattr(x, attr, 'magic')\n</code></pre>\n\n<p>For help on it:</p>\n\n<pre><code>&gt;&gt;&gt; help(setattr)\nHelp on built-in function setattr in module __builtin__:\n\nsetattr(...)\n    setattr(object, name, value)\n\n    Set a named attribute on an object; setattr(x, 'y', v) is equivalent to\n    ``x.y = v''.\n</code></pre>\n\n<p>Edit: However, you should note (as pointed out in a comment) that you can't do that to a \"pure\" instance of <code>object</code>. But it is likely you have a simple subclass of object where it will work fine. I would strongly urge the O.P. to never make instances of object like that.</p>\n"
    },
    "664": {
        "question_id": "22108488",
        "answer_id": "22108640",
        "question": "<p>In terms of performance in Python, is a list-comprehension, or functions like map(), filter() and reduce() faster than a for loop? Why, technically, they \"run in a C speed\", while \"the for loop runs in the python virtual machine speed\"?.</p>\n\n<p>Suppose that in a game that I'm developing I need to draw complex and huge maps using for loops. This question would be definitely relevant, for if a list-comprehension, for example, is indeed faster, it would be a much better option in order to avoid lags (Despite the visual complexity of the code).</p>\n",
        "answer": "<p>The following are rough guidelines and educated guesses based on experience. You should <code>timeit</code> or profile your concrete use case to get hard numbers, and those numbers may occasionally disagree with the below.</p>\n\n<p>A list comprehension is usually a tiny bit faster than the precisely equivalent <code>for</code> loop (that actually builds a list), most likely because it doesn't have to look up the list and its <code>append</code> method on every iteration. However, a list comprehension still does a bytecode-level loop:</p>\n\n<pre><code>&gt;&gt;&gt; dis.dis(&lt;the code object for `[x for x in range(10)]`&gt;)\n 1           0 BUILD_LIST               0\n             3 LOAD_FAST                0 (.0)\n       &gt;&gt;    6 FOR_ITER                12 (to 21)\n             9 STORE_FAST               1 (x)\n            12 LOAD_FAST                1 (x)\n            15 LIST_APPEND              2\n            18 JUMP_ABSOLUTE            6\n       &gt;&gt;   21 RETURN_VALUE\n</code></pre>\n\n<p>Using a list comprehension in place of a loop that <em>doesn't</em> build a list, nonsensically accumulating a list of meaningless values and then throwing the list away, is often <em>slower</em> because of the overhead of creating and extending the list. List comprehensions aren't magic that is inherently faster than a good old loop.</p>\n\n<p>As for functional list processing functions: While these are written in C and probably outperform equivalent functions written in Python, they are <em>not</em> necessarily the fastest option. Some speed up is expected <strong>if</strong> the function is written in C too. But most cases using a <code>lambda</code> (or other Python function), the overhead of repeatedly setting up Python stack frames etc. eats up any savings. Simply doing the same work in-line, without function calls (e.g. a list comprehension instead of <code>map</code> or <code>filter</code>) is often slightly faster.</p>\n\n<blockquote>\n  <p>Suppose that in a game that I'm developing I need to draw complex and huge maps using for loops. This question would be definitely relevant, for if a list-comprehension, for example, is indeed faster, it would be a much better option in order to avoid lags (Despite the visual complexity of the code).</p>\n</blockquote>\n\n<p>Chances are, if code like this isn't already fast enough when written in good non-\"optimized\" Python, no amount of Python level micro optimization is going to make it fast enough and you should start thinking about dropping to C. While extensive micro optimizations can often speed up Python code considerably, there is a low (in absolute terms) limit to this. Moreover, even before you hit that ceiling, it becomes simply more cost efficient (15% speedup vs. 300% speed up with the same effort) to bite the bullet and write some C.</p>\n"
    },
    "665": {
        "question_id": "11709079",
        "answer_id": "11709155",
        "question": "<p>I'm looking for an HTML Parser module for Python that can help me get the tags in the form of Python lists/dictionaries/objects.</p>\n\n<p>If I have a document of the form:</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;Heading&lt;/head&gt;\n&lt;body attr1='val1'&gt;\n    &lt;div class='container'&gt;\n        &lt;div id='class'&gt;Something here&lt;/div&gt;\n        &lt;div&gt;Something else&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>then it should give me a way to access the nested tags via the name or id of the HTML tag so that I can basically ask it to get me the content/text in the <code>div</code> tag with <code>class='container'</code> contained within the <code>body</code> tag, or something similar.</p>\n\n<p>If you've used Firefox's \"Inspect element\" feature (view HTML) you would know that it gives you all the tags in a nice nested manner like a tree.</p>\n\n<p>I'd prefer a built-in module but that might be asking a little too much.</p>\n\n<hr>\n\n<p>I went through a lot of questions on Stack Overflow and a few blogs on the internet and most of them suggest BeautifulSoup or lxml or HTMLParser but few of these detail the functionality and simply end as a debate over which one is faster/more efficent.</p>\n",
        "answer": "<blockquote>\n  <p>So that I can basically ask it to get me the content/text in the div tag with class='container' contained within the body tag, Or something similar.</p>\n</blockquote>\n\n<pre><code>try: \n    from BeautifulSoup import BeautifulSoup\nexcept ImportError:\n    from bs4 import BeautifulSoup\nhtml = #the HTML code you've written above\nparsed_html = BeautifulSoup(html)\nprint parsed_html.body.find('div', attrs={'class':'container'}).text\n</code></pre>\n\n<p>You don't need performance descriptions I guess - just read how BeautifulSoup works. Look at its <a href=\"http://www.crummy.com/software/BeautifulSoup/bs4/doc/\" rel=\"noreferrer\">official documentation</a>.</p>\n"
    },
    "666": {
        "question_id": "647769",
        "answer_id": "647787",
        "question": "<p>Technically, any odd number of backslashes, as described in <a href=\"http://docs.python.org/reference/lexical_analysis.html##string-and-bytes-literals\" rel=\"noreferrer\">the docs</a>.</p>\n\n<pre><code>&gt;&gt;&gt; r'\\'\n  File \"&lt;stdin&gt;\", line 1\n    r'\\'\n       ^\nSyntaxError: EOL while scanning string literal\n&gt;&gt;&gt; r'\\\\'\n'\\\\\\\\'\n&gt;&gt;&gt; r'\\\\\\'\n  File \"&lt;stdin&gt;\", line 1\n    r'\\\\\\'\n         ^\nSyntaxError: EOL while scanning string literal\n</code></pre>\n\n<p>It seems like the parser could just treat backslashes in raw strings as regular characters (isn't that what raw strings are all about?), but I'm probably missing something obvious. TIA!</p>\n",
        "answer": "<p>The reason is explained in the part of that section which I highlighted in bold:</p>\n\n<blockquote>\n  <p><strong>String quotes can be escaped with a\n  backslash,</strong> but the backslash remains\n  in the string; for example, <code>r\"\\\"\"</code> is a\n  valid string literal consisting of two\n  characters: a backslash and a double\n  quote; <code>r\"\\\"</code> is not a valid string\n  literal (even a raw string cannot end\n  in an odd number of backslashes).\n  Specifically, a raw string cannot end\n  in a single backslash (since the\n  backslash would escape the following\n  quote character). Note also that a\n  single backslash followed by a newline\n  is interpreted as those two characters\n  as part of the string, not as a line\n  continuation.</p>\n</blockquote>\n\n<p>So raw strings are not 100% raw, there is still some rudimentary backslash-processing.</p>\n"
    },
    "667": {
        "question_id": "4020539",
        "answer_id": "4020824",
        "question": "<p>Sometimes when I get input from a file or the user, I get a string with escape sequences in it. I would like to process the escape sequences <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals\" rel=\"nofollow noreferrer\">in the same way that Python processes escape sequences in string literals</a>.</p>\n\n<p>For example, let's say <code>myString</code> is defined as:</p>\n\n<pre><code>&gt;&gt;&gt; myString = \"spam\\\\neggs\"\n&gt;&gt;&gt; print(myString)\nspam\\neggs\n</code></pre>\n\n<p>I want a function (I'll call it <code>process</code>) that does this:</p>\n\n<pre><code>&gt;&gt;&gt; print(process(myString))\nspam\neggs\n</code></pre>\n\n<p>It's important that the function can process all of the escape sequences in Python (listed in a table in the link above).</p>\n\n<p>Does Python have a function to do this?</p>\n",
        "answer": "<p>The correct thing to do is use the 'string-escape' code to decode the string.</p>\n\n<pre><code>&gt;&gt;&gt; myString = \"spam\\\\neggs\"\n&gt;&gt;&gt; decoded_string = bytes(myString, \"utf-8\").decode(\"unicode_escape\") # python3 \n&gt;&gt;&gt; decoded_string = myString.decode('string_escape') # python2\n&gt;&gt;&gt; print(decoded_string)\nspam\neggs\n</code></pre>\n\n<p>Don't use the AST or eval. Using the string codecs is much safer.</p>\n"
    },
    "668": {
        "question_id": "57708",
        "answer_id": "12614706",
        "question": "<p>I'm doing some web scraping and sites frequently use HTML entities to represent non ascii characters. Does Python have a utility that takes a string with HTML entities and returns a unicode type?</p>\n\n<p>For example:</p>\n\n<p>I get back:</p>\n\n<pre><code>&amp;#x01ce;\n</code></pre>\n\n<p>which represents an \"\u01ce\" with a tone mark.  In binary, this is represented as the 16 bit 01ce.  I want to convert the html entity into the value  <code>u'\\u01ce'</code></p>\n",
        "answer": "<p>The standard lib\u2019s very own HTMLParser has an undocumented function unescape() which does exactly what you think it does:</p>\n\n<pre><code>import HTMLParser\nh = HTMLParser.HTMLParser()\nh.unescape('&amp;copy; 2010') # u'\\xa9 2010'\nh.unescape('&amp;#169; 2010') # u'\\xa9 2010'\n</code></pre>\n"
    },
    "669": {
        "question_id": "2933399",
        "answer_id": "2933423",
        "question": "<p>in python, is there a way to, while waiting for a user input, count time so that after, say 30 seconds, the <code>raw_input()</code> function is automatically skipped?</p>\n",
        "answer": "<p>The <a href=\"http://docs.python.org/library/signal.html?highlight=signal#signal.alarm\" rel=\"noreferrer\">signal.alarm</a> function, on which @jer's recommended solution is based, is unfortunately Unix-only.  If you need a cross-platform or Windows-specific solution, you can base it on <a href=\"http://docs.python.org/library/threading.html?#timer-objects\" rel=\"noreferrer\">threading.Timer</a> instead, using <a href=\"http://docs.python.org/library/thread.html?highlight=interrupt_main#thread.interrupt_main\" rel=\"noreferrer\">thread.interrupt_main</a> to send a <code>KeyboardInterrupt</code> to the main thread from the timer thread.  I.e.:</p>\n\n<pre><code>import thread\nimport threading\n\ndef raw_input_with_timeout(prompt, timeout=30.0):\n    print prompt,    \n    timer = threading.Timer(timeout, thread.interrupt_main)\n    astring = None\n    try:\n        timer.start()\n        astring = raw_input(prompt)\n    except KeyboardInterrupt:\n        pass\n    timer.cancel()\n    return astring\n</code></pre>\n\n<p>this will return None whether the 30 seconds time out or the user explicitly decides to hit control-C to give up on inputting anything, but it seems OK to treat the two cases in the same way (if you need to distinguish, you could use for the timer a function of your own that, before interrupting the main thread, records somewhere the fact that a timeout <em>has</em> happened, and in your handler for <code>KeyboardInterrupt</code> access that \"somewhere\" to discriminate which of the two cases occurred).</p>\n\n<p><strong>Edit</strong>: I could have sworn this was working but I must have been wrong -- the code above omits the obviously-needed <code>timer.start()</code>, <em>and</em> even with it I can't make it work any more.  <code>select.select</code> would be the obvious other thing to try but it won't work on a \"normal file\" (including stdin) in Windows -- in Unix it works on all files, in Windows, only on sockets.</p>\n\n<p>So I don't know how to do a cross-platform \"raw input with timeout\".  A windows-specific one can be constructed with a tight loop polling <a href=\"http://docs.python.org/library/msvcrt.html?highlight=msvcrt#msvcrt.kbhit\" rel=\"noreferrer\">msvcrt.kbhit</a>, performing a <code>msvcrt.getche</code> (and checking if it's a return to indicate the output's done, in which case it breaks out of the loop, otherwise accumulates and keeps waiting) and checking the time to time out if needed.  I cannot test because I have no Windows machine (they're all Macs and Linux ones), but here the <strong>untested code</strong> I would suggest:</p>\n\n<pre><code>import msvcrt\nimport time\n\ndef raw_input_with_timeout(prompt, timeout=30.0):\n    print prompt,    \n    finishat = time.time() + timeout\n    result = []\n    while True:\n        if msvcrt.kbhit():\n            result.append(msvcrt.getche())\n            if result[-1] == '\\r':   # or \\n, whatever Win returns;-)\n                return ''.join(result)\n            time.sleep(0.1)          # just to yield to other processes/threads\n        else:\n            if time.time() &gt; finishat:\n                return None\n</code></pre>\n\n<p>The OP in a comment says he does not want to <code>return None</code> upon timeout, but what's the alternative?  Raising an exception?  Returning a different default value?  Whatever alternative he wants he can clearly put it in place of my <code>return None</code>;-).</p>\n\n<p>If you don't want to time out just because the user is typing <em>slowly</em> (as opposed to, not typing at all!-), you could recompute finishat after every successful character input.</p>\n"
    },
    "670": {
        "question_id": "3995034",
        "answer_id": "3995061",
        "question": "<p>While trying to learn a little more about regular expressions, a tutorial suggested that you can use the <code>\\b</code> to match a word boundary. However, the following snippet in the Python interpreter does not work as expected:</p>\n\n<pre><code>&gt;&gt;&gt; x = 'one two three'\n&gt;&gt;&gt; y = re.search(\"\\btwo\\b\", x)\n</code></pre>\n\n<p>It should have been a match object if anything was matched, but it is <code>None</code>.</p>\n\n<p>Is the <code>\\b</code> expression not supported in Python or am I using it wrong?</p>\n",
        "answer": "<p>Why don't you try </p>\n\n<pre><code>word = 'two'\nre.compile(r'\\b%s\\b' % word, re.I)\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&gt;&gt;&gt; word = 'two'\n&gt;&gt;&gt; k = re.compile(r'\\b%s\\b' % word, re.I)\n&gt;&gt;&gt; x = 'one two three'\n&gt;&gt;&gt; y = k.search( x)\n&gt;&gt;&gt; y\n&lt;_sre.SRE_Match object at 0x100418850&gt;\n</code></pre>\n\n<p>Also forgot to mention, you should be using raw strings in your code</p>\n\n<pre><code>&gt;&gt;&gt; x = 'one two three'\n&gt;&gt;&gt; y = re.search(r\"\\btwo\\b\", x)\n&gt;&gt;&gt; y\n&lt;_sre.SRE_Match object at 0x100418a58&gt;\n&gt;&gt;&gt; \n</code></pre>\n"
    },
    "671": {
        "question_id": "33346591",
        "answer_id": "33346694",
        "question": "<p>That is the difference between <code>groupby(\"x\").count</code> and <code>groupby(\"x\").size</code> in pandas ?</p>\n\n<p>Does size just exclude nil ?</p>\n",
        "answer": "<p><a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.core.groupby.GroupBy.size.html#pandas.core.groupby.GroupBy.size\"><code>size</code></a> includes <code>NaN</code> values, <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.core.groupby.GroupBy.count.html#pandas.core.groupby.GroupBy.count\"><code>count</code></a> does not:</p>\n\n<pre><code>In [46]:\ndf = pd.DataFrame({'a':[0,0,1,2,2,2], 'b':[1,2,3,4,np.NaN,4], 'c':np.random.randn(6)})\ndf\n\nOut[46]:\n   a   b         c\n0  0   1  1.067627\n1  0   2  0.554691\n2  1   3  0.458084\n3  2   4  0.426635\n4  2 NaN -2.238091\n5  2   4  1.256943\n\nIn [48]:\nprint(df.groupby(['a'])['b'].count())\nprint(df.groupby(['a'])['b'].size())\n\na\n0    2\n1    1\n2    2\nName: b, dtype: int64\n\na\n0    2\n1    1\n2    3\ndtype: int64 \n</code></pre>\n"
    },
    "672": {
        "question_id": "40084931",
        "answer_id": "40085052",
        "question": "<p>Lets say I have a Python Numpy array <code>a</code>.</p>\n\n<pre><code>a = numpy.array([1,2,3,4,5,6,7,8,9,10,11])\n</code></pre>\n\n<p>I want to create a matrix of sub sequences from this array of length 5 with stride 3. The results matrix hence will look as follows:</p>\n\n<pre><code>numpy.array([[1,2,3,4,5],[4,5,6,7,8],[7,8,9,10,11]])\n</code></pre>\n\n<p>One possible way of implementing this would be using a for-loop.</p>\n\n<pre><code>result_matrix = np.zeros((3, 5))\nfor i in range(0, len(a), 3):\n  result_matrix[i] = a[i:i+5]\n</code></pre>\n\n<p>Is there a cleaner way to implement this in Numpy?</p>\n",
        "answer": "<p><strong>Approach #1 :</strong>  Using <a href=\"https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html\" rel=\"noreferrer\"><code>broadcasting</code></a> -</p>\n\n<pre><code>def broadcasting_app(a, L, S ):  # Window len = L, Stride len/stepsize = S\n    nrows = ((a.size-L)//S)+1\n    return a[S*np.arange(nrows)[:,None] + np.arange(L)]\n</code></pre>\n\n<p><strong>Approach #2 :</strong> Using more efficient <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.strides.html\" rel=\"noreferrer\"><code>NumPy strides</code></a> -</p>\n\n<pre><code>def strided_app(a, L, S ):  # Window len = L, Stride len/stepsize = S\n    nrows = ((a.size-L)//S)+1\n    n = a.strides[0]\n    return np.lib.stride_tricks.as_strided(a, shape=(nrows,L), strides=(S*n,n))\n</code></pre>\n\n<p>Sample run -</p>\n\n<pre><code>In [143]: a\nOut[143]: array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])\n\nIn [144]: broadcasting_app(a, L = 5, S = 3)\nOut[144]: \narray([[ 1,  2,  3,  4,  5],\n       [ 4,  5,  6,  7,  8],\n       [ 7,  8,  9, 10, 11]])\n\nIn [145]: strided_app(a, L = 5, S = 3)\nOut[145]: \narray([[ 1,  2,  3,  4,  5],\n       [ 4,  5,  6,  7,  8],\n       [ 7,  8,  9, 10, 11]])\n</code></pre>\n"
    },
    "673": {
        "question_id": "10376604",
        "answer_id": "10376655",
        "question": "<p>I hope someone can answer this that has a good deep understanding of Python :)</p>\n\n<p>Consider the following code:</p>\n\n<pre><code>&gt;&gt;&gt; class A(object):\n...     pass\n...\n&gt;&gt;&gt; def __repr__(self):\n...     return \"A\"\n...\n&gt;&gt;&gt; from types import MethodType\n&gt;&gt;&gt; a = A()\n&gt;&gt;&gt; a\n&lt;__main__.A object at 0x00AC6990&gt;\n&gt;&gt;&gt; repr(a)\n'&lt;__main__.A object at 0x00AC6990&gt;'\n&gt;&gt;&gt; setattr(a, \"__repr__\", MethodType(__repr__, a, a.__class__))\n&gt;&gt;&gt; a\n&lt;__main__.A object at 0x00AC6990&gt;\n&gt;&gt;&gt; repr(a)\n'&lt;__main__.A object at 0x00AC6990&gt;'\n&gt;&gt;&gt;\n</code></pre>\n\n<p>Notice how repr(a) does not yield the expected result of \"A\" ?\nI want to know why this is the case and if there is a way to achieve this...</p>\n\n<p>I contrast, the following example works however (<em>Maybe because we're not trying to override a special method?</em>):</p>\n\n<pre><code>&gt;&gt;&gt; class A(object):\n...     def foo(self):\n...             return \"foo\"\n...\n&gt;&gt;&gt; def bar(self):\n...     return \"bar\"\n...\n&gt;&gt;&gt; from types import MethodType\n&gt;&gt;&gt; a = A()\n&gt;&gt;&gt; a.foo()\n'foo'\n&gt;&gt;&gt; setattr(a, \"foo\", MethodType(bar, a, a.__class__))\n&gt;&gt;&gt; a.foo()\n'bar'\n&gt;&gt;&gt;\n</code></pre>\n",
        "answer": "<p>Python doesn't call the special methods, those with name surrounded by <code>__</code> on the instance, but only on the class, apparently to improve performance. So there's no way to override <code>__repr__()</code> directly on an instance and make it work. Instead, you need to do something like so:</p>\n\n<pre><code>class A(object):\n    def __repr__(self):\n        return self._repr()\n    def _repr(self):\n        return object.__repr__(self)\n</code></pre>\n\n<p>Now you can override <code>__repr__()</code> on an instance by substituting <code>_repr()</code>.</p>\n"
    },
    "674": {
        "question_id": "9413216",
        "answer_id": "9620295",
        "question": "<p>I am trying to implement a \"Digit Recognition OCR\" in OpenCV-Python (cv2). It is just for learning purposes. I would like to learn both KNearest and SVM features in OpenCV. </p>\n\n<p>I have 100 samples (i.e. images) of each digit. I would like to train with them.</p>\n\n<p>There is a sample <code>letter_recog.py</code> that comes with OpenCV sample. But I still couldn't figure out on how to use it. I don't understand what are the samples, responses etc. Also, it loads a txt file at first, which I didn't understand first.</p>\n\n<p>Later on searching a little bit, I could find a letter_recognition.data in cpp samples. I used it and made a code for cv2.KNearest in the model of letter_recog.py (just for testing):</p>\n\n<pre><code>import numpy as np\nimport cv2\n\nfn = 'letter-recognition.data'\na = np.loadtxt(fn, np.float32, delimiter=',', converters={ 0 : lambda ch : ord(ch)-ord('A') })\nsamples, responses = a[:,1:], a[:,0]\n\nmodel = cv2.KNearest()\nretval = model.train(samples,responses)\nretval, results, neigh_resp, dists = model.find_nearest(samples, k = 10)\nprint results.ravel()\n</code></pre>\n\n<p>It gave me an array of size 20000, I don't understand what it is.</p>\n\n<p><strong>Questions:</strong></p>\n\n<p>1) What is letter_recognition.data file? How to build that file from my own data set?</p>\n\n<p>2) What does <code>results.reval()</code> denote? </p>\n\n<p>3) How we can write a simple digit recognition tool using letter_recognition.data file (either KNearest or SVM)?</p>\n",
        "answer": "<p>Well, I decided to workout myself on my question to solve above problem. What I wanted is to implement a simpl OCR using KNearest or SVM features in OpenCV. And below is what I did and how. ( it is just for learning how to use KNearest for simple OCR purposes).</p>\n\n<p><strong>1)</strong> My first question was about letter_recognition.data file that comes with OpenCV samples. I wanted to know what is inside that file.</p>\n\n<p>It contains a letter, along with 16 features of that letter.</p>\n\n<p>And <a href=\"https://stackoverflow.com/questions/1270798/how-to-create-data-fom-image-like-letter-image-recognition-dataset-from-uci\"><code>this SOF</code></a> helped me to find it. These 16 features are explained in the paper<a href=\"http://cns-classes.bu.edu/cn550/Readings/frey-slate-91.pdf\" rel=\"noreferrer\"><strong><code>Letter Recognition Using Holland-Style Adaptive Classifiers</code></strong></a>.\n( Although I didn't understand some of the features at end)</p>\n\n<p><strong>2)</strong> Since I knew, without understanding all those features, it is difficult to do that method. I tried some other papers, but all were a little difficult for a beginner.</p>\n\n<p><code>So I just decided to take all the pixel values as my features.</code> (I was not worried about accuracy or performance, I just wanted it to work, at least with the least accuracy)</p>\n\n<p>I took below image for my training data:</p>\n\n<p><img src=\"https://i.stack.imgur.com/IwQY6.png\" alt=\"enter image description here\"></p>\n\n<p>( I know the amount of training data is less. But, since all letters are of same font and size, I decided to try on this).</p>\n\n<p><strong>To prepare the data for training, I made a small code in OpenCV. It does following things:</strong></p>\n\n<ol>\n<li>It loads the image.</li>\n<li>Selects the digits ( obviously by contour finding and applying constraints on area and height of letters to avoid false detections).</li>\n<li>Draws the bounding rectangle around one letter and wait for <code>key press manually</code>. This time we <strong>press the digit key ourselves</strong> corresponding to the letter in box.</li>\n<li>Once corresponding digit key is pressed, it resizes this box to 10x10 and saves 100 pixel values in an array (here, samples) and corresponding manually entered digit in another array(here, responses).</li>\n<li>Then save both the arrays in separate txt files.</li>\n</ol>\n\n<p>At the end of manual classification of digits, all the digits in the train data( train.png) are labeled manually by ourselves, image will look like below:</p>\n\n<p><img src=\"https://i.stack.imgur.com/jyAhT.png\" alt=\"enter image description here\"></p>\n\n<p>Below is the code I used for above purpose ( of course, not so clean):</p>\n\n<pre><code>import sys\n\nimport numpy as np\nimport cv2\n\nim = cv2.imread('pitrain.png')\nim3 = im.copy()\n\ngray = cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)\nblur = cv2.GaussianBlur(gray,(5,5),0)\nthresh = cv2.adaptiveThreshold(blur,255,1,1,11,2)\n\n#################      Now finding Contours         ###################\n\ncontours,hierarchy = cv2.findContours(thresh,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)\n\nsamples =  np.empty((0,100))\nresponses = []\nkeys = [i for i in range(48,58)]\n\nfor cnt in contours:\n    if cv2.contourArea(cnt)&gt;50:\n        [x,y,w,h] = cv2.boundingRect(cnt)\n\n        if  h&gt;28:\n            cv2.rectangle(im,(x,y),(x+w,y+h),(0,0,255),2)\n            roi = thresh[y:y+h,x:x+w]\n            roismall = cv2.resize(roi,(10,10))\n            cv2.imshow('norm',im)\n            key = cv2.waitKey(0)\n\n            if key == 27:  # (escape to quit)\n                sys.exit()\n            elif key in keys:\n                responses.append(int(chr(key)))\n                sample = roismall.reshape((1,100))\n                samples = np.append(samples,sample,0)\n\nresponses = np.array(responses,np.float32)\nresponses = responses.reshape((responses.size,1))\nprint \"training complete\"\n\nnp.savetxt('generalsamples.data',samples)\nnp.savetxt('generalresponses.data',responses)\n</code></pre>\n\n<hr>\n\n<p><strong>Now we enter in to training and testing part.</strong></p>\n\n<p>For testing part I used below image, which has same type of letters I used to train.</p>\n\n<p><img src=\"https://i.stack.imgur.com/dPaE8.png\" alt=\"enter image description here\"></p>\n\n<p><strong>For training we do as follows</strong>:</p>\n\n<ol>\n<li>Load the txt files we already saved earlier</li>\n<li>create a instance of classifier we are using ( here, it is KNearest)</li>\n<li>Then we use KNearest.train function to train the data</li>\n</ol>\n\n<p><strong>For testing purposes, we do as follows:</strong></p>\n\n<ol>\n<li>We load the image used for testing</li>\n<li>process the image as earlier and extract each digit using contour methods</li>\n<li>Draw bounding box for it, then resize to 10x10, and store its pixel values in an array as done earlier. </li>\n<li>Then we use KNearest.find_nearest() function to find the nearest item to the one we gave. ( If lucky, it recognises the correct digit.)</li>\n</ol>\n\n<p>I included last two steps ( training and testing) in single code below:</p>\n\n<pre><code>import cv2\nimport numpy as np\n\n#######   training part    ############### \nsamples = np.loadtxt('generalsamples.data',np.float32)\nresponses = np.loadtxt('generalresponses.data',np.float32)\nresponses = responses.reshape((responses.size,1))\n\nmodel = cv2.KNearest()\nmodel.train(samples,responses)\n\n############################# testing part  #########################\n\nim = cv2.imread('pi.png')\nout = np.zeros(im.shape,np.uint8)\ngray = cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)\nthresh = cv2.adaptiveThreshold(gray,255,1,1,11,2)\n\ncontours,hierarchy = cv2.findContours(thresh,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)\n\nfor cnt in contours:\n    if cv2.contourArea(cnt)&gt;50:\n        [x,y,w,h] = cv2.boundingRect(cnt)\n        if  h&gt;28:\n            cv2.rectangle(im,(x,y),(x+w,y+h),(0,255,0),2)\n            roi = thresh[y:y+h,x:x+w]\n            roismall = cv2.resize(roi,(10,10))\n            roismall = roismall.reshape((1,100))\n            roismall = np.float32(roismall)\n            retval, results, neigh_resp, dists = model.find_nearest(roismall, k = 1)\n            string = str(int((results[0][0])))\n            cv2.putText(out,string,(x,y+h),0,1,(0,255,0))\n\ncv2.imshow('im',im)\ncv2.imshow('out',out)\ncv2.waitKey(0)\n</code></pre>\n\n<p>And it worked, below is the result I got:</p>\n\n<p><img src=\"https://i.stack.imgur.com/xS3gF.png\" alt=\"enter image description here\"></p>\n\n<hr>\n\n<p>Here it worked with 100% accuracy. I assume this is because all the digits are of same kind and same size.</p>\n\n<p>But any way, this is a good start to go for beginners ( I hope so).</p>\n"
    },
    "675": {
        "question_id": "10458437",
        "answer_id": "10458567",
        "question": "<p>Are there any applicable differences between <a href=\"http://docs.python.org/library/stdtypes.html#dict.items\" rel=\"noreferrer\"><code>dict.items()</code></a> and <a href=\"http://docs.python.org/library/stdtypes.html#dict.iteritems\" rel=\"noreferrer\"><code>dict.iteritems()</code></a>?</p>\n\n<p>From the Python docs:</p>\n\n<blockquote>\n  <p><code>dict.items()</code>: Return a <strong>copy</strong> of the dictionary\u2019s list of (key, value) pairs.</p>\n  \n  <p><code>dict.iteritems()</code>: Return an <strong>iterator</strong> over the dictionary\u2019s (key, value) pairs.</p>\n</blockquote>\n\n<p>If I run the code below, each seems to return a reference to the same object. Are there any subtle differences that I am missing?</p>\n\n<pre><code>#!/usr/bin/python\n\nd={1:'one',2:'two',3:'three'}\nprint 'd.items():'\nfor k,v in d.items():\n   if d[k] is v: print '\\tthey are the same object' \n   else: print '\\tthey are different'\n\nprint 'd.iteritems():'   \nfor k,v in d.iteritems():\n   if d[k] is v: print '\\tthey are the same object' \n   else: print '\\tthey are different'   \n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>d.items():\n    they are the same object\n    they are the same object\n    they are the same object\nd.iteritems():\n    they are the same object\n    they are the same object\n    they are the same object\n</code></pre>\n",
        "answer": "<p>It's part of an evolution. </p>\n\n<p>Originally, Python <code>items()</code> built a real list of tuples and returned that. That could potentially take a lot of extra memory. </p>\n\n<p>Then, generators were introduced to the language in general, and that method was reimplemented as an iterator-generator method named <code>iteritems()</code>. The original remains for backwards compatibility. </p>\n\n<p>One of Python 3\u2019s changes is that  <code>items()</code> now return iterators, and a list is never fully built. The <code>iteritems()</code> method is also gone, since <code>items()</code> in Python 3 works like <code>viewitems()</code> in Python 2.7. </p>\n"
    },
    "676": {
        "question_id": "20101834",
        "answer_id": "20101940",
        "question": "<p>Trying to <code>pip</code> install a repo's specific branch. Google tells me to  </p>\n\n<blockquote>\n  <p>pip install git+<a href=\"https://github.com/user/repo.git@branch\" rel=\"noreferrer\">https://github.com/user/repo.git@branch</a></p>\n</blockquote>\n\n<p>The branch's name is <code>issue/34/oscar-0.6</code> so I did <code>pip  install https://github.com/tangentlabs/django-oscar-paypal.git@/issue/34/oscar-0.6</code> but its returning a 404.</p>\n\n<p>How do I install this branch?</p>\n",
        "answer": "<p>Prepend the url prefix <code>git+</code> (See <a href=\"https://pip.pypa.io/en/stable/reference/pip_install/#vcs-support\">VCS Support</a>):</p>\n\n<pre><code>pip install git+https://github.com/tangentlabs/django-oscar-paypal.git@issue/34/oscar-0.6\n</code></pre>\n\n<p>And specify the branch name without the leading <code>/</code>.</p>\n"
    },
    "677": {
        "question_id": "441147",
        "answer_id": "441152",
        "question": "<p>I have a Python <a href=\"https://docs.python.org/library/datetime.html#datetime-objects\" rel=\"noreferrer\"><code>datetime.datetime</code></a> object. What is the best way to subtract one day?</p>\n",
        "answer": "<p>You can use a <a href=\"http://docs.python.org/3.3/library/datetime.html?highlight=datetime#timedelta-objects\" rel=\"noreferrer\">timedelta</a> object:</p>\n\n<pre><code>from datetime import datetime, timedelta\n\nd = datetime.today() - timedelta(days=days_to_subtract)\n</code></pre>\n"
    },
    "678": {
        "question_id": "4770297",
        "answer_id": "4771733",
        "question": "<p>I've never had to convert time to and from UTC. Recently had a request to have my app be timezone aware, and I've been running myself in circles. Lots of information on converting local time to UTC, which I found fairly elementary (maybe I'm doing that wrong as well), but I can not find any information on easily converting the UTC time to the end-users timezone.</p>\n\n<p>In a nutshell, and android app sends me (appengine app) data and within that data is a timestamp. To store that timestamp to utc time I am using:</p>\n\n<pre><code>datetime.utcfromtimestamp(timestamp)\n</code></pre>\n\n<p>That seems to be working. When my app stores the data, it is being store as 5 hours ahead (I am EST -5)</p>\n\n<p>The data is being stored on appengine's BigTable, and when retrieved it comes out as a string like so: </p>\n\n<pre><code>\"2011-01-21 02:37:21\"\n</code></pre>\n\n<p>How do I convert this string to a DateTime in the users correct time zone?</p>\n\n<p>Also, what is the recommended storage for a users timezone information?  (How do you typically store tz info ie: \"-5:00\" or \"EST\" etc etc ?) I'm sure the answer to my first question might contain a parameter the answers the second.  </p>\n",
        "answer": "<p>If you don't want to provide your own <code>tzinfo</code> objects, check out the <a href=\"http://niemeyer.net/python-dateutil\">python-dateutil</a> library.  It provides <code>tzinfo</code> implementations on top of a <a href=\"http://en.wikipedia.org/wiki/Tz_database\">zoneinfo (Olson) database</a> such that you can refer to time zone rules by a somewhat canonical name.</p>\n\n<pre><code>from datetime import datetime\nfrom dateutil import tz\n\n# METHOD 1: Hardcode zones:\nfrom_zone = tz.gettz('UTC')\nto_zone = tz.gettz('America/New_York')\n\n# METHOD 2: Auto-detect zones:\nfrom_zone = tz.tzutc()\nto_zone = tz.tzlocal()\n\n# utc = datetime.utcnow()\nutc = datetime.strptime('2011-01-21 02:37:21', '%Y-%m-%d %H:%M:%S')\n\n# Tell the datetime object that it's in UTC time zone since \n# datetime objects are 'naive' by default\nutc = utc.replace(tzinfo=from_zone)\n\n# Convert time zone\ncentral = utc.astimezone(to_zone)\n</code></pre>\n\n<p><strong>Edit</strong> Expanded example to show <code>strptime</code> usage</p>\n\n<p><strong>Edit 2</strong> Fixed API usage to show better entry point method</p>\n\n<p><strong>Edit 3</strong> Included auto-detect methods for timezones (Yarin)</p>\n"
    },
    "679": {
        "question_id": "6910641",
        "answer_id": "6910672",
        "question": "<p>NumPy proposes a way to get the index of the maximum value of an array via <code>np.argmax</code>.</p>\n\n<p>I would like a similar thing, but returning the indexes of the <code>N</code> maximum values.</p>\n\n<p>For instance, if I have an array, <code>[1, 3, 2, 4, 5]</code>, <code>function(array, n=3)</code> would return the indices <code>[4, 3, 1]</code> which correspond to the elements <code>[5, 4, 3]</code>.</p>\n",
        "answer": "<p>The simplest I've been able to come up with is:</p>\n\n<pre><code>In [1]: import numpy as np\n\nIn [2]: arr = np.array([1, 3, 2, 4, 5])\n\nIn [3]: arr.argsort()[-3:][::-1]\nOut[3]: array([4, 3, 1])\n</code></pre>\n\n<p>This involves a complete sort of the array. I wonder if <code>numpy</code> provides a built-in way to do a partial sort; so far I haven't been able to find one.</p>\n\n<p>If this solution turns out to be too slow (especially for small <code>n</code>), it may be worth looking at coding something up in <a href=\"http://cython.org/\">Cython</a>.</p>\n"
    },
    "680": {
        "question_id": "14507794",
        "answer_id": "14508355",
        "question": "<p>I have a data frame with a hierarchical index in axis 1 (columns) (from a <code>groupby.agg</code> operation):</p>\n\n<pre><code>     USAF   WBAN  year  month  day  s_PC  s_CL  s_CD  s_CNT  tempf       \n                                     sum   sum   sum    sum   amax   amin\n0  702730  26451  1993      1    1     1     0    12     13  30.92  24.98\n1  702730  26451  1993      1    2     0     0    13     13  32.00  24.98\n2  702730  26451  1993      1    3     1    10     2     13  23.00   6.98\n3  702730  26451  1993      1    4     1     0    12     13  10.04   3.92\n4  702730  26451  1993      1    5     3     0    10     13  19.94  10.94\n</code></pre>\n\n<p>I want to flatten it, so that it looks like this (names aren't critical - I could rename):</p>\n\n<pre><code>     USAF   WBAN  year  month  day  s_PC  s_CL  s_CD  s_CNT  tempf_amax  tmpf_amin   \n0  702730  26451  1993      1    1     1     0    12     13  30.92          24.98\n1  702730  26451  1993      1    2     0     0    13     13  32.00          24.98\n2  702730  26451  1993      1    3     1    10     2     13  23.00          6.98\n3  702730  26451  1993      1    4     1     0    12     13  10.04          3.92\n4  702730  26451  1993      1    5     3     0    10     13  19.94          10.94\n</code></pre>\n\n<p>How do I do this? (I've tried a lot, to no avail.) </p>\n\n<p>Per a suggestion, here is the head in dict form</p>\n\n<pre><code>{('USAF', ''): {0: '702730',\n  1: '702730',\n  2: '702730',\n  3: '702730',\n  4: '702730'},\n ('WBAN', ''): {0: '26451', 1: '26451', 2: '26451', 3: '26451', 4: '26451'},\n ('day', ''): {0: 1, 1: 2, 2: 3, 3: 4, 4: 5},\n ('month', ''): {0: 1, 1: 1, 2: 1, 3: 1, 4: 1},\n ('s_CD', 'sum'): {0: 12.0, 1: 13.0, 2: 2.0, 3: 12.0, 4: 10.0},\n ('s_CL', 'sum'): {0: 0.0, 1: 0.0, 2: 10.0, 3: 0.0, 4: 0.0},\n ('s_CNT', 'sum'): {0: 13.0, 1: 13.0, 2: 13.0, 3: 13.0, 4: 13.0},\n ('s_PC', 'sum'): {0: 1.0, 1: 0.0, 2: 1.0, 3: 1.0, 4: 3.0},\n ('tempf', 'amax'): {0: 30.920000000000002,\n  1: 32.0,\n  2: 23.0,\n  3: 10.039999999999999,\n  4: 19.939999999999998},\n ('tempf', 'amin'): {0: 24.98,\n  1: 24.98,\n  2: 6.9799999999999969,\n  3: 3.9199999999999982,\n  4: 10.940000000000001},\n ('year', ''): {0: 1993, 1: 1993, 2: 1993, 3: 1993, 4: 1993}}\n</code></pre>\n",
        "answer": "<p>I think the easiest way to do this would be to set the columns to the top level:</p>\n\n<pre><code>df.columns = df.columns.get_level_values(0)\n</code></pre>\n\n<p><em>Note: if the to level has a name you can also access it by this, rather than 0.</em></p>\n\n<p>.</p>\n\n<p>If you want to combine/<a href=\"http://docs.python.org/2/library/stdtypes.html#str.join\"><code>join</code></a> your MultiIndex into one Index <em>(assuming you have just string entries in your columns)</em> you could:</p>\n\n<pre><code>df.columns = [' '.join(col).strip() for col in df.columns.values]\n</code></pre>\n\n<p><em>Note: we must <a href=\"http://docs.python.org/2/library/stdtypes.html#str.strip\"><code>strip</code></a> the whitespace for when there is no second index.</em></p>\n\n<pre><code>In [11]: [' '.join(col).strip() for col in df.columns.values]\nOut[11]: \n['USAF',\n 'WBAN',\n 'day',\n 'month',\n 's_CD sum',\n 's_CL sum',\n 's_CNT sum',\n 's_PC sum',\n 'tempf amax',\n 'tempf amin',\n 'year']\n</code></pre>\n"
    },
    "681": {
        "question_id": "629551",
        "answer_id": "629691",
        "question": "<p>I query a model:</p>\n\n<pre><code>Members.objects.all()\n</code></pre>\n\n<p>And it returns:</p>\n\n<pre><code>Eric, Salesman, X-Shop\nFreddie, Manager, X2-Shop\nTeddy, Salesman, X2-Shop\nSean, Manager, X2-Shop\n</code></pre>\n\n<p>What I want is to know the best Django way to fire\na <code>group_by</code> query to my database, like:</p>\n\n<pre><code>Members.objects.all().group_by('designation')\n</code></pre>\n\n<p>Which doesn't work, of course.\nI know we can do some tricks on <code>django/db/models/query.py</code>, but I am just curious to know how to do it without patching.</p>\n",
        "answer": "<p>If you mean to do aggregation you can use the <a href=\"http://docs.djangoproject.com/en/dev/topics/db/aggregation/#topics-db-aggregation\" rel=\"noreferrer\">aggregation features of the ORM</a>:</p>\n\n<pre><code>from django.db.models import Count\nMembers.objects.values('designation').annotate(dcount=Count('designation'))\n</code></pre>\n\n<p>This results in a query similar to</p>\n\n<pre><code>SELECT designation, COUNT(designation) AS dcount\nFROM members GROUP BY designation\n</code></pre>\n\n<p>and the output would be of the form</p>\n\n<pre><code>[{'designation': 'Salesman', 'dcount': 2}, \n {'designation': 'Manager', 'dcount': 2}]\n</code></pre>\n"
    },
    "682": {
        "question_id": "1228299",
        "answer_id": "1228597",
        "question": "<p>What is the easiest way in Python to replace a character in a string ?</p>\n\n<p>For example:</p>\n\n<pre><code>text = \"abcdefg\";\ntext[1] = \"Z\";\n           ^\n</code></pre>\n",
        "answer": "<p>Don't modify strings.</p>\n\n<p>Work with them as lists; turn them into strings only when needed.</p>\n\n<pre><code>&gt;&gt;&gt; s = list(\"Hello zorld\")\n&gt;&gt;&gt; s\n['H', 'e', 'l', 'l', 'o', ' ', 'z', 'o', 'r', 'l', 'd']\n&gt;&gt;&gt; s[6] = 'W'\n&gt;&gt;&gt; s\n['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']\n&gt;&gt;&gt; \"\".join(s)\n'Hello World'\n</code></pre>\n\n<p>Python strings are immutable (i.e. they can't be modified).  There are <a href=\"http://effbot.org/pyfaq/why-are-python-strings-immutable.htm\" rel=\"noreferrer\">a lot</a> of reasons for this.  Use lists until you have no choice, only then turn them into strings.</p>\n"
    },
    "683": {
        "question_id": "13437727",
        "answer_id": "13437772",
        "question": "<p>I am new to Python. I need to write some data from my program to a spreadsheet. I've searched online and there seem to be many packages available (xlwt, XlsXcessive, openpyxl). Others suggest to write to a .csv file (never used CSV and don't really understand what it is).</p>\n\n<p>The program is very simple. I have two lists (float) and three variables (strings). I don't know the lengths of the two lists and they probably won't be the same length.</p>\n\n<p>I want the layout to be as in the picture below:</p>\n\n<p><img src=\"https://i.stack.imgur.com/Ih3fa.png\" alt=\"Layout sample\"></p>\n\n<p>The pink column will have the values of the first list and the green column will have the values of the second list.</p>\n\n<p>So what's the best way to do this?</p>\n\n<p>P.S. I am running Windows 7 but I won't necessarily have Office installed on the computers running this program.</p>\n\n<pre><code>import xlwt\n\nx=1\ny=2\nz=3\n\nlist1=[2.34,4.346,4.234]\n\nbook = xlwt.Workbook(encoding=\"utf-8\")\n\nsheet1 = book.add_sheet(\"Sheet 1\")\n\nsheet1.write(0, 0, \"Display\")\nsheet1.write(1, 0, \"Dominance\")\nsheet1.write(2, 0, \"Test\")\n\nsheet1.write(0, 1, x)\nsheet1.write(1, 1, y)\nsheet1.write(2, 1, z)\n\nsheet1.write(4, 0, \"Stimulus Time\")\nsheet1.write(4, 1, \"Reaction Time\")\n\ni=4\n\nfor n in list1:\n    i = i+1\n    sheet1.write(i, 0, n)\n\n\n\nbook.save(\"trial.xls\")\n</code></pre>\n\n<p>I wrote this using all your suggestions. It gets the job done but it can be slightly improved.</p>\n\n<p>How do I format the cells created in the for loop (list1 values) as scientific or number?</p>\n\n<p>I do not want to truncate the values. The actual values used in the program would have around 10 digits after the decimal.</p>\n",
        "answer": "<pre><code>import xlwt\n\ndef output(filename, sheet, list1, list2, x, y, z):\n    book = xlwt.Workbook()\n    sh = book.add_sheet(sheet)\n\n    variables = [x, y, z]\n    x_desc = 'Display'\n    y_desc = 'Dominance'\n    z_desc = 'Test'\n    desc = [x_desc, y_desc, z_desc]\n\n    col1_name = 'Stimulus Time'\n    col2_name = 'Reaction Time'\n\n    #You may need to group the variables together\n    #for n, (v_desc, v) in enumerate(zip(desc, variables)):\n    for n, v_desc, v in enumerate(zip(desc, variables)):\n        sh.write(n, 0, v_desc)\n        sh.write(n, 1, v)\n\n    n+=1\n\n    sh.write(n, 0, col1_name)\n    sh.write(n, 1, col2_name)\n\n    for m, e1 in enumerate(list1, n+1):\n        sh.write(m, 0, e1)\n\n    for m, e2 in enumerate(list2, n+1):\n        sh.write(m, 1, e2)\n\n    book.save(filename)\n</code></pre>\n\n<p>for more explanation:\n    <a href=\"https://github.com/python-excel\" rel=\"noreferrer\">https://github.com/python-excel</a></p>\n"
    },
    "684": {
        "question_id": "5971312",
        "answer_id": "5971326",
        "question": "<p>I need to set some environment variables in the python script and I want all the other scripts that are called from python (shell scripts) which will be child process to see the environment variables set. The value is a number.</p>\n\n<p>If I do <code>os.environ[\"DEBUSSY\"] = 1</code>, it complains saying that <code>1</code> has to be string.\nI also want to know how to read the environment variables in python (in the later part of the script) once I set it. </p>\n",
        "answer": "<p>Environment variables must be strings, so use</p>\n\n<pre><code>os.environ[\"DEBUSSY\"] = \"1\"\n</code></pre>\n\n<p>to set the variable <code>DEBUSSY</code> to the string <code>1</code>.</p>\n\n<p>To access this variable later, simply use:</p>\n\n<pre><code>print(os.environ[\"DEBUSSY\"])\n</code></pre>\n\n<p>Child processes automatically inherit the environment variables of the parent process -- no special action on your part is required.</p>\n"
    },
    "685": {
        "question_id": "21608228",
        "answer_id": "44311454",
        "question": "<p>I'm probably doing something very stupid, but I'm stumped.</p>\n\n<p>I have a dataframe, and I want to replace the values in a particular column that exceed a value with zero. I had thought this was a way of achieving this:</p>\n\n<pre><code>df[df.my_channel &gt; 20000].my_channel = 0\n</code></pre>\n\n<p>If I copy the channel into a new data frame it's simple:</p>\n\n<pre><code>df2 = df.my_channel \n\ndf2[df2 &gt; 20000] = 0\n</code></pre>\n\n<p>this does exactly what I want, but seems not to work with the channel as part of the original dataframe.</p>\n",
        "answer": "<p><code>.ix</code> indexer works okay for pandas version prior to 0.20.0, but since pandas 0.20.0, the <code>.ix</code> indexer is <a href=\"http://pandas.pydata.org/pandas-docs/stable/indexing.html#ix-indexer-is-deprecated\" rel=\"noreferrer\">deprecated</a>, so you should avoid using it. Instead, you can use <code>.loc</code> or <code>iloc</code> indexers. You can solve this problem by:</p>\n\n<pre><code>mask = df.my_channel &gt; 20000\ncolumn_name = 'my_channel'\ndf.loc[mask, column_name] = 0\n</code></pre>\n\n<p>Or, in one line,</p>\n\n<pre><code>df.loc[df.my_channel &gt; 20000, 'my_channel'] = 0\n</code></pre>\n\n<p><code>mask</code> helps you to select the rows in which <code>df.my_channel &gt; 20000</code> is <code>True</code>, while <code>df.loc[mask, column_name] = 0</code> sets the value 0 to the selected rows where <code>mask</code>holds in the column which name is <code>column_name</code>.</p>\n\n<p><strong>Update:</strong>\nIn this case, you should use <code>loc</code> because if you use <code>iloc</code>, you will get a <code>NotImplementedError</code> telling you that <em>iLocation based boolean indexing on an integer type is not available</em>.</p>\n"
    },
    "686": {
        "question_id": "5292303",
        "answer_id": "5292332",
        "question": "<p>I have been reading the <em>Core Python</em> programming book, and the author shows an example like: </p>\n\n<pre><code>(4, 5) &lt; (3, 5) # Equals false\n</code></pre>\n\n<p>So, I'm wondering, how/why does it equal false? How does python compare these two tuples?</p>\n\n<p>Btw, it's not explained in the book.</p>\n",
        "answer": "<p>Tuples are compared position by position: \nthe first item of the first tuple is compared to the first item of the second tuple; if they are not equal (i.e. the first is greater or smaller than the second) then that's the result of the comparison, else the second item is considered, then the third and so on.</p>\n\n<p>See <a href=\"http://docs.python.org/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange\" rel=\"noreferrer\">doc</a>:</p>\n\n<blockquote>\n  <p>Sequence types also support comparisons. In particular, tuples and lists are compared lexicographically by comparing corresponding elements. This means that to compare equal, every element must compare equal and the two sequences must be of the same type and have the same length.</p>\n</blockquote>\n\n<p>Also <a href=\"http://docs.python.org/reference/expressions.html#notin\" rel=\"noreferrer\">this</a>:</p>\n\n<blockquote>\n  <p>Tuples and lists are compared lexicographically using comparison of corresponding elements. This means that to compare equal, each element must compare equal and the two sequences must be of the same type and have the same length.</p>\n</blockquote>\n\n<p>If not equal, the sequences are ordered the same as their first differing elements. For example, cmp([1,2,x], [1,2,y]) returns the same as cmp(x,y). If the corresponding element does not exist, the shorter sequence is considered smaller (for example, [1,2] &lt; [1,2,3] returns True).</p>\n\n<p><strong>Note 1</strong>: <code>&lt;</code> and <code>&gt;</code> do not mean \"smaller than\" and \"greater than\" but \"is before\" and \"is after\": so (0, 1) \"is before\" (1, 0).</p>\n\n<p><strong>Note 2</strong>: tuples must not be considered as <em>vectors in a n-dimensional space</em>, compared according to their length.</p>\n\n<p><strong>Note 3</strong>: referring to question <a href=\"https://stackoverflow.com/questions/36911617/python-2-tuple-comparison\">Python 2 tuple comparison</a>: do not think that a tuple is \"greater\" than another only if any element of the first is greater than the corresponding one in the second.</p>\n"
    },
    "687": {
        "question_id": "3877230",
        "answer_id": "3877275",
        "question": "<p>Why does CPython (no clue about other Python implementations) have the following behavior?</p>\n\n<pre><code>tuple1 = ()\ntuple2 = ()                                                                                                   \ndict1 = {}\ndict2 = {}\nlist1 = []\nlist2 = []\n# makes sense, tuples are immutable\nassert(id(tuple1) == id(tuple2))\n# also makes sense dicts are mutable\nassert(id(dict1) != id(dict2))\n# lists are mutable too\nassert(id(list1) != id(list2))\nassert(id(()) == id(()))\n# why no assertion error on this?\nassert(id({}) == id({}))\n# or this?\nassert(id([]) == id([]))\n</code></pre>\n\n<p>I have a few ideas why it <em>may</em>, but can't find a <em>concrete</em> reason why.</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>To further prove Glenn's and Thomas' point:</p>\n\n<pre><code>[1] id([])\n4330909912\n[2] x = []\n[3] id(x)\n4330909912\n[4] id([])\n4334243440\n</code></pre>\n",
        "answer": "<p>CPython is garbage collecting objects as soon as they go out of scope, so the second <code>[]</code> is created after the first <code>[]</code> is collected.  So, most of the time it ends up in the same memory location.</p>\n\n<p>This shows what's happening very clearly (the output is likely to be different in other implementations of Python):</p>\n\n<pre><code>class A(object):\n    def __init__(self): print \"a\",\n    def __del__(self): print \"b\",\n\n# a a b b False\nprint A() is A()\n# a b a b True\nprint id(A()) == id(A())\n</code></pre>\n"
    },
    "688": {
        "question_id": "30720665",
        "answer_id": "30720727",
        "question": "<p>I started using pygame and I want to do simple game. One of the elements which I need is countdown timer. \nHow can I do the countdown time (eg 10 seconds) in PyGame?</p>\n",
        "answer": "<p>On this page you will find what you are looking for <a href=\"http://www.pygame.org/docs/ref/time.html#pygame.time.get_ticks\" rel=\"noreferrer\">http://www.pygame.org/docs/ref/time.html#pygame.time.get_ticks</a>\n<br>\nYou download ticks once before beginning the countdown (which can be a trigger in the game - the key event, whatever).\nFor example:\n<br></p>\n\n<pre><code>start_ticks=pygame.time.get_ticks() #starter tick\nwhile mainloop: # mainloop\n    seconds=(pygame.time.get_ticks()-start_ticks)/1000 #calculate how many seconds\n    if seconds&gt;10: # if more than 10 seconds close the game\n        break\n    print (seconds) #print how many seconds\n</code></pre>\n"
    },
    "689": {
        "question_id": "22053050",
        "answer_id": "22074424",
        "question": "<p>In <code>numpy</code>, some of the operations return in shape <code>(R, 1)</code> but some return <code>(R,)</code>. This will make matrix multiplication more tedious since explicit <code>reshape</code> is required. For example, given a matrix <code>M</code>, if we want to do <code>numpy.dot(M[:,0], numpy.ones((1, R)))</code> where <code>R</code> is the number of rows (of course, the same issue also occurs column-wise). We will get <code>matrices are not aligned</code> error since <code>M[:,0]</code> is in shape <code>(R,)</code> but <code>numpy.ones((1, R))</code> is in shape <code>(1, R)</code>.</p>\n\n<p>So my questions are:</p>\n\n<ol>\n<li><p>What's the difference between shape <code>(R, 1)</code> and <code>(R,)</code>. I know literally it's list of numbers and list of lists where all list contains only a number. Just wondering why not design <code>numpy</code> so that it favors shape <code>(R, 1)</code> instead of <code>(R,)</code> for easier matrix multiplication.</p></li>\n<li><p>Are there better ways for the above example? Without explicitly reshape like this: <code>numpy.dot(M[:,0].reshape(R, 1), numpy.ones((1, R)))</code></p></li>\n</ol>\n",
        "answer": "<h3>1. The meaning of shapes in NumPy</h3>\n\n<p>You write, \"I know literally it's list of numbers and list of lists where all list contains only a number\" but that's a bit of an unhelpful way to think about it.</p>\n\n<p>The best way to think about NumPy arrays is that they consist of two parts, a <em>data buffer</em> which is just a block of raw elements, and a <em>view</em> which describes how to interpret the data buffer.</p>\n\n<p>For example, if we create an array of 12 integers:</p>\n\n<pre><code>&gt;&gt;&gt; a = numpy.arange(12)\n&gt;&gt;&gt; a\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])\n</code></pre>\n\n<p>Then <code>a</code> consists of a data buffer, arranged something like this:</p>\n\n<pre><code>\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u2502  0 \u2502  1 \u2502  2 \u2502  3 \u2502  4 \u2502  5 \u2502  6 \u2502  7 \u2502  8 \u2502  9 \u2502 10 \u2502 11 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n</code></pre>\n\n<p>and a view which describes how to interpret the data:</p>\n\n<pre><code>&gt;&gt;&gt; a.flags\n  C_CONTIGUOUS : True\n  F_CONTIGUOUS : True\n  OWNDATA : True\n  WRITEABLE : True\n  ALIGNED : True\n  UPDATEIFCOPY : False\n&gt;&gt;&gt; a.dtype\ndtype('int64')\n&gt;&gt;&gt; a.itemsize\n8\n&gt;&gt;&gt; a.strides\n(8,)\n&gt;&gt;&gt; a.shape\n(12,)\n</code></pre>\n\n<p>Here the <em>shape</em> <code>(12,)</code> means the array is indexed by a single index which runs from 0\u00a0to\u00a011. Conceptually, if we label this single index <code>i</code>, the array <code>a</code> looks like this:</p>\n\n<pre><code>i= 0    1    2    3    4    5    6    7    8    9   10   11\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u2502  0 \u2502  1 \u2502  2 \u2502  3 \u2502  4 \u2502  5 \u2502  6 \u2502  7 \u2502  8 \u2502  9 \u2502 10 \u2502 11 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n</code></pre>\n\n<p>If we <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html\" rel=\"noreferrer\">reshape</a> an array, this doesn't change the data buffer. Instead, it creates a new view that describes a different way to interpret the data. So after:</p>\n\n<pre><code>&gt;&gt;&gt; b = a.reshape((3, 4))\n</code></pre>\n\n<p>the array <code>b</code> has the same data buffer as <code>a</code>, but now it is indexed by <em>two</em> indices which run from 0\u00a0to\u00a02 and 0\u00a0to\u00a03 respectively. If we label the two indices <code>i</code> and <code>j</code>, the array <code>b</code> looks like this:</p>\n\n<pre><code>i= 0    0    0    0    1    1    1    1    2    2    2    2\nj= 0    1    2    3    0    1    2    3    0    1    2    3\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u2502  0 \u2502  1 \u2502  2 \u2502  3 \u2502  4 \u2502  5 \u2502  6 \u2502  7 \u2502  8 \u2502  9 \u2502 10 \u2502 11 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n</code></pre>\n\n<p>which means that:</p>\n\n<pre><code>&gt;&gt;&gt; b[2,1]\n9\n</code></pre>\n\n<p>You can see that the second index changes quickly and the first index changes slowly. If you prefer this to be the other way round, you can specify the <code>order</code> parameter:</p>\n\n<pre><code>&gt;&gt;&gt; c = a.reshape((3, 4), order='F')\n</code></pre>\n\n<p>which results in an array indexed like this:</p>\n\n<pre><code>i= 0    1    2    0    1    2    0    1    2    0    1    2\nj= 0    0    0    1    1    1    2    2    2    3    3    3\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u2502  0 \u2502  1 \u2502  2 \u2502  3 \u2502  4 \u2502  5 \u2502  6 \u2502  7 \u2502  8 \u2502  9 \u2502 10 \u2502 11 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n</code></pre>\n\n<p>which means that:</p>\n\n<pre><code>&gt;&gt;&gt; c[2,1]\n5\n</code></pre>\n\n<p>It should now be clear what it means for an array to have a shape with one or more dimensions of size\u00a01. After:</p>\n\n<pre><code>&gt;&gt;&gt; d = a.reshape((12, 1))\n</code></pre>\n\n<p>the array <code>d</code> is indexed by two indices, the first of which runs from 0\u00a0to\u00a011, and the second index is always\u00a00:</p>\n\n<pre><code>i= 0    1    2    3    4    5    6    7    8    9   10   11\nj= 0    0    0    0    0    0    0    0    0    0    0    0\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u2502  0 \u2502  1 \u2502  2 \u2502  3 \u2502  4 \u2502  5 \u2502  6 \u2502  7 \u2502  8 \u2502  9 \u2502 10 \u2502 11 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n</code></pre>\n\n<p>and so:</p>\n\n<pre><code>&gt;&gt;&gt; d[10,0]\n10\n</code></pre>\n\n<p>A dimension of length\u00a01 is \"free\" (in some sense), so there's nothing stopping you from going to town:</p>\n\n<pre><code>&gt;&gt;&gt; e = a.reshape((1, 2, 1, 6, 1))\n</code></pre>\n\n<p>giving an array indexed like this:</p>\n\n<pre><code>i= 0    0    0    0    0    0    0    0    0    0    0    0\nj= 0    0    0    0    0    0    1    1    1    1    1    1\nk= 0    0    0    0    0    0    0    0    0    0    0    0\nl= 0    1    2    3    4    5    0    1    2    3    4    5\nm= 0    0    0    0    0    0    0    0    0    0    0    0\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\n\u2502  0 \u2502  1 \u2502  2 \u2502  3 \u2502  4 \u2502  5 \u2502  6 \u2502  7 \u2502  8 \u2502  9 \u2502 10 \u2502 11 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n</code></pre>\n\n<p>and so:</p>\n\n<pre><code>&gt;&gt;&gt; e[0,1,0,0,0]\n6\n</code></pre>\n\n<p>See the <a href=\"http://docs.scipy.org/doc/numpy/reference/internals.html\" rel=\"noreferrer\">NumPy internals documentation</a> for more details about how arrays are implemented.</p>\n\n<h3>2. What to do?</h3>\n\n<p>Since <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html\" rel=\"noreferrer\"><code>numpy.reshape</code></a> just creates a new view, you shouldn't be scared about using it whenever necessary. It's the right tool to use when you want to index an array in a different way.</p>\n\n<p>However, in a long computation it's usually possible to arrange to construct arrays with the \"right\" shape in the first place, and so minimize the number of reshapes and transposes. But without seeing the actual context that led to the need for a reshape, it's hard to say what should be changed.</p>\n\n<p>The example in your question is:</p>\n\n<pre><code>numpy.dot(M[:,0], numpy.ones((1, R)))\n</code></pre>\n\n<p>but this is not realistic. First, this expression:</p>\n\n<pre><code>M[:,0].sum()\n</code></pre>\n\n<p>computes the result more simply. Second, is there really something special about column 0? Perhaps what you actually need is:</p>\n\n<pre><code>M.sum(axis=0)\n</code></pre>\n"
    },
    "690": {
        "question_id": "13413590",
        "answer_id": "13413845",
        "question": "<p>I have a <code>DataFrame</code>:</p>\n\n<pre><code>&gt;&gt;&gt; df\n                 STK_ID  EPS  cash\nSTK_ID RPT_Date                   \n601166 20111231  601166  NaN   NaN\n600036 20111231  600036  NaN    12\n600016 20111231  600016  4.3   NaN\n601009 20111231  601009  NaN   NaN\n601939 20111231  601939  2.5   NaN\n000001 20111231  000001  NaN   NaN\n</code></pre>\n\n<p>Then I just want the records whose <code>EPS</code> is not <code>NaN</code>, that is, <code>df.drop(....)</code> will return the dataframe as below:</p>\n\n<pre><code>                  STK_ID  EPS  cash\nSTK_ID RPT_Date                   \n600016 20111231  600016  4.3   NaN\n601939 20111231  601939  2.5   NaN\n</code></pre>\n\n<p>How do I do that?</p>\n",
        "answer": "<p>Don't <code>drop</code>. Just take rows where <code>EPS</code> is <strong>finite</strong>:</p>\n\n<pre><code>df = df[np.isfinite(df['EPS'])]\n</code></pre>\n"
    },
    "691": {
        "question_id": "8220801",
        "answer_id": "8220943",
        "question": "<p>I understand the concept of what <code>timeit</code> does but I am not sure how to implement it in my code.</p>\n\n<p>How can I compare two functions, say <code>insertion_sort</code> and <code>tim_sort</code>, with <code>timeit</code>?</p>\n",
        "answer": "<p>The way <em><a href=\"http://docs.python.org/library/timeit.html#module-timeit\" rel=\"noreferrer\">timeit</a></em> works is to run setup code once and then make repeated calls to a series of statements.  So, if you want to test sorting, some care is required so that one pass at an in-place sort doesn't affect the next pass with already sorted data (that, of course, would make the <a href=\"http://en.wikipedia.org/wiki/Timsort\" rel=\"noreferrer\">Timsort</a> really shine because it performs best when the data already partially ordered).</p>\n\n<p>Here is an example of how to set up a test for sorting:</p>\n\n<pre><code>&gt;&gt;&gt; import timeit\n\n&gt;&gt;&gt; setup = '''\nimport random\n\nrandom.seed('slartibartfast')\ns = [random.random() for i in range(1000)]\ntimsort = list.sort\n'''\n\n&gt;&gt;&gt; print min(timeit.Timer('a=s[:]; timsort(a)', setup=setup).repeat(7, 1000))\n0.334147930145\n</code></pre>\n\n<p>Note that the series of statements makes a fresh copy of the unsorted data on every pass.</p>\n\n<p>Also, note the timing technique of running the measurement suite seven times and keeping only the best time -- this can really help reduce measurement distortions due to other processes running on your system.</p>\n\n<p>Those are my tips for using timeit correctly.  Hope this helps :-)</p>\n"
    },
    "692": {
        "question_id": "881388",
        "answer_id": "881434",
        "question": "<p>I'm trying to create a daemon in python. I've found the <a href=\"https://stackoverflow.com/questions/473620/how-do-you-create-a-daemon-in-python\">following question</a>, which has some good resources in it which I am currently following, but I'm curious as to why a double fork is necessary. I've scratched around google and found plenty of resources declaring that one is necessary, but not why.</p>\n\n<p>Some mention that it is to prevent the daemon from acquiring a controlling terminal. How would it do this without the second fork? What are the repercussions?</p>\n",
        "answer": "<p>Looking at the code referenced in the question, the justification is:</p>\n\n<pre><code># Fork a second child and exit immediately to prevent zombies.  This\n# causes the second child process to be orphaned, making the init\n# process responsible for its cleanup.  And, since the first child is\n# a session leader without a controlling terminal, it's possible for\n# it to acquire one by opening a terminal in the future (System V-\n# based systems).  This second fork guarantees that the child is no\n# longer a session leader, preventing the daemon from ever acquiring\n# a controlling terminal.\n</code></pre>\n\n<p>So it is to ensure that the daemon is re-parented onto init (just in case the process kicking off the daemon is long lived), and removes any chance of the daemon reacquiring a controlling tty. So if neither of these cases apply, then one fork should be sufficient. \"<a href=\"https://rads.stackoverflow.com/amzn/click/com/0201433079\" rel=\"nofollow noreferrer\" rel=\"nofollow noreferrer\">Unix Network Programming - Stevens</a>\" has a good section on this.</p>\n"
    },
    "693": {
        "question_id": "1060279",
        "answer_id": "1060330",
        "question": "<p>I have the following code to do this, but how can I do it better? Right now I think it's better than nested loops, but it starts to get Perl-one-linerish when you have a generator in a list comprehension. </p>\n\n<pre class=\"lang-py prettyprint-override\"><code>day_count = (end_date - start_date).days + 1\nfor single_date in [d for d in (start_date + timedelta(n) for n in range(day_count)) if d &lt;= end_date]:\n    print strftime(\"%Y-%m-%d\", single_date.timetuple())\n</code></pre>\n\n<h2>Notes</h2>\n\n<ul>\n<li>I'm not actually using this to print. That's just for demo purposes. </li>\n<li>The <code>start_date</code> and <code>end_date</code> variables are <code>datetime.date</code> objects because I don't need the timestamps. (They're going to be used to generate a report).</li>\n</ul>\n\n<h2>Sample Output</h2>\n\n<p>For a start date of <code>2009-05-30</code> and an end date of <code>2009-06-09</code>:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>2009-05-30\n2009-05-31\n2009-06-01\n2009-06-02\n2009-06-03\n2009-06-04\n2009-06-05\n2009-06-06\n2009-06-07\n2009-06-08\n2009-06-09\n</code></pre>\n",
        "answer": "<p>Why are there two nested iterations? For me it produces the same list of data with only one iteration:</p>\n\n<pre><code>for single_date in (start_date + timedelta(n) for n in range(day_count)):\n    print ...\n</code></pre>\n\n<p>And no list gets stored, only one generator is iterated over. Also the \"if\" in the generator seems to be unnecessary.</p>\n\n<p>After all, a linear sequence should only require one iterator, not two.</p>\n\n<h2>Update after discussion with John Machin:</h2>\n\n<p>Maybe the most elegant solution is using a generator function to completely hide/abstract the iteration over the range of dates:</p>\n\n<pre><code>from datetime import timedelta, date\n\ndef daterange(start_date, end_date):\n    for n in range(int ((end_date - start_date).days)):\n        yield start_date + timedelta(n)\n\nstart_date = date(2013, 1, 1)\nend_date = date(2015, 6, 2)\nfor single_date in daterange(start_date, end_date):\n    print single_date.strftime(\"%Y-%m-%d\")\n</code></pre>\n\n<p>NB: For consistency with the built-in <code>range()</code> function this iteration stops <strong>before</strong> reaching the <code>end_date</code>. So for inclusive iteration use the next day, as you would with <code>range()</code>.</p>\n"
    },
    "694": {
        "question_id": "2828059",
        "answer_id": "2828371",
        "question": "<p>How can I sort an array in NumPy by the nth column?</p>\n\n<p>For example,</p>\n\n<pre><code>a = array([[9, 2, 3],\n           [4, 5, 6],\n           [7, 0, 5]])\n</code></pre>\n\n<p>I'd like to sort rows by the second column, such that I get back:</p>\n\n<pre><code>array([[7, 0, 5],\n       [9, 2, 3],\n       [4, 5, 6]])\n</code></pre>\n",
        "answer": "<p><a href=\"https://stackoverflow.com/users/208339/steve-tjoa\">@steve</a>'s is actually the most elegant way of doing it.</p>\n\n<p>For the \"correct\" way see the order keyword argument of <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.sort.html#numpy.ndarray.sort\" rel=\"noreferrer\">numpy.ndarray.sort</a> </p>\n\n<p>However, you'll need to view your array as an array with fields (a structured array).</p>\n\n<p>The \"correct\" way is quite ugly if you didn't initially define your array with fields...</p>\n\n<p>As a quick example, to sort it and return a copy:</p>\n\n<pre><code>In [1]: import numpy as np\n\nIn [2]: a = np.array([[1,2,3],[4,5,6],[0,0,1]])\n\nIn [3]: np.sort(a.view('i8,i8,i8'), order=['f1'], axis=0).view(np.int)\nOut[3]: \narray([[0, 0, 1],\n       [1, 2, 3],\n       [4, 5, 6]])\n</code></pre>\n\n<p>To sort it in-place:</p>\n\n<pre><code>In [6]: a.view('i8,i8,i8').sort(order=['f1'], axis=0) #&lt;-- returns None\n\nIn [7]: a\nOut[7]: \narray([[0, 0, 1],\n       [1, 2, 3],\n       [4, 5, 6]])\n</code></pre>\n\n<p>@Steve's really is the most elegant way to do it, as far as I know... </p>\n\n<p>The only advantage to this method is that the \"order\" argument is a list of the fields to order the search by. For example, you can sort by the second column, then the third column, then the first column by supplying order=['f1','f2','f0'].</p>\n"
    },
    "695": {
        "question_id": "4984647",
        "answer_id": "14620633",
        "question": "<p>I find it more conveniant to access dict keys as <code>obj.foo</code> instead of <code>obj['foo']</code>, so I wrote this snippet:</p>\n\n<pre><code>class AttributeDict(dict):\n    def __getattr__(self, attr):\n        return self[attr]\n    def __setattr__(self, attr, value):\n        self[attr] = value\n</code></pre>\n\n<p>However, I assume there must be some reason that Python doesn't provide this functionality out of the box. What would be the caveats and pitfalls of accessing dict keys in this manner?</p>\n",
        "answer": "<p>The best way to do this is:</p>\n\n<pre><code>class AttrDict(dict):\n    def __init__(self, *args, **kwargs):\n        super(AttrDict, self).__init__(*args, **kwargs)\n        self.__dict__ = self\n</code></pre>\n\n<p>Some pros:</p>\n\n<ul>\n<li>It actually works!</li>\n<li>No dictionary class methods are shadowed (e.g. <code>.keys()</code> work just fine)</li>\n<li>Attributes and items are always in sync</li>\n<li>Trying to access non-existent key as an attribute correctly raises <code>AttributeError</code> instead of <code>KeyError</code></li>\n</ul>\n\n<p>Cons:</p>\n\n<ul>\n<li>Methods like <code>.keys()</code> will <strong>not</strong> work just fine if they get overwritten by incoming data</li>\n<li>Causes a <a href=\"http://bugs.python.org/issue1469629\">memory leak</a> in Python &lt; 2.7.4 / Python3 &lt; 3.2.3</li>\n<li>Pylint goes bananas with <code>E1123(unexpected-keyword-arg)</code> and <code>E1103(maybe-no-member)</code></li>\n<li>For the uninitiated it seems like pure magic.</li>\n</ul>\n\n<h3>A short explanation on how this works</h3>\n\n<ul>\n<li>All python objects internally store their attributes in a dictionary that is named <code>__dict__</code>.</li>\n<li>There is no requirement that the internal dictionary <code>__dict__</code> would need to be \"just a plain dict\", so we can assign any subclass of <code>dict()</code> to the internal dictionary.</li>\n<li>In our case we simply assign the <code>AttrDict()</code> instance we are instantiating (as we are in <code>__init__</code>).</li>\n<li>By calling <code>super()</code>'s <code>__init__()</code> method we made sure that it (already) behaves exactly like a dictionary, since that function calls all the <em>dictionary instantiation</em> code.</li>\n</ul>\n\n<h3>One reason why Python doesn't provide this functionality out of the box</h3>\n\n<p>As noted in the \"cons\" list, this combines the namespace of stored keys (which may come from arbitrary and/or untrusted data!) with the namespace of builtin dict method attributes. For example:</p>\n\n<pre><code>d = AttrDict()\nd.update({'items':[\"jacket\", \"necktie\", \"trousers\"]})\nfor k, v in d.items():    # TypeError: 'list' object is not callable\n    print \"Never reached!\"\n</code></pre>\n"
    },
    "696": {
        "question_id": "13034496",
        "answer_id": "13034908",
        "question": "<p>I'm bit confused about how the global variables work. I have a large project, with around 50 files, and I need to define global variables for all those files.</p>\n\n<p>What I did was define them in my projects <code>main.py</code> file, as following:</p>\n\n<pre><code># ../myproject/main.py\n\n# Define global myList\nglobal myList\nmyList = []\n\n# Imports\nimport subfile\n\n# Do something\nsubfile.stuff()\nprint(myList[0])\n</code></pre>\n\n<p>I'm trying to use <code>myList</code> in <code>subfile.py</code>, as following</p>\n\n<pre><code># ../myproject/subfile.py\n\n# Save \"hey\" into myList\ndef stuff():\n    globals()[\"myList\"].append(\"hey\")\n</code></pre>\n\n<p><strong>An other way I tried, but didn't work either</strong></p>\n\n<pre><code># ../myproject/main.py\n\n# Import globfile    \nimport globfile\n\n# Save myList into globfile\nglobfile.myList = []\n\n# Import subfile\nimport subfile\n\n# Do something\nsubfile.stuff()\nprint(globfile.myList[0])\n</code></pre>\n\n<p>And inside <code>subfile.py</code> I had this:</p>\n\n<pre><code># ../myproject/subfile.py\n\n# Import globfile\nimport globfile\n\n# Save \"hey\" into myList\ndef stuff():\n    globfile.myList.append(\"hey\")\n</code></pre>\n\n<p>But again, it didn't work. How should I implement this? I understand that it cannot work like that, when the two files don't really know each other (well subfile doesn't know main), but I can't think of how to do it, without using io writing or pickle, which I don't want to do.</p>\n",
        "answer": "<p>The problem is you defined <code>myList</code> from <code>main.py</code>, but <code>subfile.py</code> needs to use it. Here is a clean way to solve this problem: move all globals to a file, I call this file <code>settings.py</code>. This file is responsible for defining globals and initializing them:</p>\n\n<pre><code># settings.py\n\ndef init():\n    global myList\n    myList = []\n</code></pre>\n\n<p>Next, your <code>subfile</code> can import globals:</p>\n\n<pre><code># subfile.py\n\nimport settings\n\ndef stuff():\n    settings.myList.append('hey')\n</code></pre>\n\n<p>Note that <code>subfile</code> does not call <code>init()</code>\u2014 that task belongs to <code>main.py</code>:</p>\n\n<pre><code># main.py\n\nimport settings\nimport subfile\n\nsettings.init()          # Call only once\nsubfile.stuff()         # Do stuff with global var\nprint settings.myList[0] # Check the result\n</code></pre>\n\n<p>This way, you achieve your objective while avoid initializing global variables more than once.</p>\n"
    },
    "697": {
        "question_id": "6183276",
        "answer_id": "6183321",
        "question": "<p>I'm on EC2 instance. So there is no GUI.</p>\n\n<pre><code>$pip install selenium\n$sudo apt-get install firefox xvfb\n</code></pre>\n\n<p>Then I do this:</p>\n\n<pre><code>$Xvfb :1 -screen 0 1024x768x24 2&gt;&amp;1 &gt;/dev/null &amp;\n\n$DISPLAY=:1 java -jar selenium-server-standalone-2.0b3.jar\n05:08:31.227 INFO - Java: Sun Microsystems Inc. 19.0-b09\n05:08:31.229 INFO - OS: Linux 2.6.32-305-ec2 i386\n05:08:31.233 INFO - v2.0 [b3], with Core v2.0 [b3]\n05:08:32.121 INFO - RemoteWebDriver instances should connect to: http://127.0.0.1:4444/wd/hub\n05:08:32.122 INFO - Version Jetty/5.1.x\n05:08:32.123 INFO - Started HttpContext[/selenium-server/driver,/selenium-server/driver]\n05:08:32.124 INFO - Started HttpContext[/selenium-server,/selenium-server]\n05:08:32.124 INFO - Started HttpContext[/,/]\n05:08:32.291 INFO - Started org.openqa.jetty.jetty.servlet.ServletHandler@1186fab\n05:08:32.292 INFO - Started HttpContext[/wd,/wd]\n05:08:32.295 INFO - Started SocketListener on 0.0.0.0:4444\n05:08:32.295 INFO - Started org.openqa.jetty.jetty.Server@1ffb8dc\n</code></pre>\n\n<p>Great, everything should work now, right?</p>\n\n<p>When I run my code:</p>\n\n<pre><code>from selenium import webdriver\nfrom selenium.common.exceptions import NoSuchElementException\nfrom selenium.webdriver.common.keys import Keys\n\nbrowser = webdriver.Firefox() \nbrowser.get(\"http://www.yahoo.com\") \n</code></pre>\n\n<p>I get this:</p>\n\n<pre><code>Error: cannot open display: :0\n</code></pre>\n",
        "answer": "<p>open a terminal and run this command  <code>xhost +</code>. This commands needs to be run every time you restart your machine. If everything works fine may be you can add this to startup commands</p>\n\n<p>Also make sure in your /etc/environment file there is a line </p>\n\n<pre><code>export DISPLAY=:0.0 \n</code></pre>\n\n<p>And then, run your tests to see if your issue is resolved.</p>\n\n<p>All please note the comment from sardathrion below before using this.</p>\n"
    },
    "698": {
        "question_id": "130763",
        "answer_id": "41930586",
        "question": "<p>I want my Python script to copy files on Vista. When I run it from a normal <code>cmd.exe</code> window, no errors are generated, yet the files are NOT copied. If I run <code>cmd.exe</code> \"as administator\" and then run my script, it works fine.</p>\n\n<p>This makes sense since User Account Control (UAC) normally prevents many file system actions.</p>\n\n<p>Is there a way I can, from within a Python script, invoke a UAC elevation request (those dialogs that say something like \"such and such app needs admin access, is this OK?\")</p>\n\n<p>If that's not possible, is there a way my script can at least detect that it is not elevated so it can fail gracefully?</p>\n",
        "answer": "<p>As of 2017, an easy method to achieve this is the following:</p>\n\n<pre><code>import ctypes, sys\n\ndef is_admin():\n    try:\n        return ctypes.windll.shell32.IsUserAnAdmin()\n    except:\n        return False\n\nif is_admin():\n    # Code of your program here\nelse:\n    # Re-run the program with admin rights\n    ctypes.windll.shell32.ShellExecuteW(None, \"runas\", sys.executable, __file__, None, 1)\n</code></pre>\n\n<p>If you are using Python 2.x, then you should replace the last line for:</p>\n\n<pre><code>ctypes.windll.shell32.ShellExecuteW(None, u\"runas\", unicode(sys.executable), unicode(__file__), None, 1)\n</code></pre>\n\n<p>Also note that if you converted you python script into an executable file (using tools like <code>py2exe</code>, <code>cx_freeze</code>, <code>pyinstaller</code>) then you should replace the fourth parameter for an empty string (<code>\"\"</code>).</p>\n\n<p>Some of the advantages here are:</p>\n\n<ul>\n<li>No external libraries required (nor Python for Windows extension). It only uses <code>ctypes</code> from standard library.</li>\n<li>Works on both Python 2 and Python 3.</li>\n<li>There is no need to modify the file resources nor creating a manifest file.</li>\n<li>If you don't add code below if/else statement, the code won't ever be executed twice.</li>\n<li>You can easily modify it to have a special behavior if the user rejects the UAC prompt. </li>\n<li>You can specify arguments modifying the fourth parameter.</li>\n<li>You can specify the display method modifying the sixth parameter.</li>\n</ul>\n\n<p>Documentation for the underlying ShellExecute call is <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/bb762153%28v=vs.85%29.aspx?f=255&amp;MSPPError=-2147217396\" rel=\"noreferrer\">here</a>. </p>\n"
    },
    "699": {
        "question_id": "2150108",
        "answer_id": "2150125",
        "question": "<p>What is the most efficient way to shift a list in python? \nRight now I have something like this:</p>\n\n<pre><code>&gt;&gt;&gt; def shift(l, n):\n...     return l[n:] + l[:n]\n... \n&gt;&gt;&gt; l = [1,2,3,4]\n&gt;&gt;&gt; shift(l,1)\n[2, 3, 4, 1]\n&gt;&gt;&gt; shift(l,2)\n[3, 4, 1, 2]\n&gt;&gt;&gt; shift(l,0)\n[1, 2, 3, 4]\n&gt;&gt;&gt; shift(l,-1)\n[4, 1, 2, 3]\n</code></pre>\n\n<p>Is there a better way?</p>\n",
        "answer": "<p>A <a href=\"http://docs.python.org/library/collections.html#deque-objects\" rel=\"noreferrer\"><code>collections.deque</code></a> is optimized for pulling and pushing on both ends. They even have a dedicated <code>rotate()</code> method. </p>\n\n<pre><code>from collections import deque\nitems = deque([1, 2])\nitems.append(3)        # deque == [1, 2, 3]\nitems.rotate(1)        # The deque is now: [3, 1, 2]\nitems.rotate(-1)       # Returns deque to original state: [1, 2, 3]\nitem = items.popleft() # deque == [2, 3]\n</code></pre>\n"
    },
    "700": {
        "question_id": "5615648",
        "answer_id": "5615674",
        "question": "<p>I have this code which calculates the distance between two coordinates. The two functions are both within the same class.</p>\n\n<p>However how do I call the function <code>distToPoint</code> in the function <code>isNear</code>?</p>\n\n<pre><code>class Coordinates:\n    def distToPoint(self, p):\n        \"\"\"\n        Use pythagoras to find distance\n        (a^2 = b^2 + c^2)\n        \"\"\"\n        ...\n\n    def isNear(self, p):\n        distToPoint(self, p)\n        ...\n</code></pre>\n",
        "answer": "<p>Since these are member functions, call it as a member function on the instance, <code>self</code>.</p>\n\n<pre><code>def isNear(self, p):\n    self.distToPoint(p)\n    ...\n</code></pre>\n"
    },
    "701": {
        "question_id": "949098",
        "answer_id": "950591",
        "question": "<p>What's the best way, both aesthetically and from a performance perspective, to split a list of items into multiple lists based on a conditional? The equivalent of:</p>\n\n<pre><code>good = [x for x in mylist if x in goodvals]\nbad  = [x for x in mylist if x not in goodvals]\n</code></pre>\n\n<p>is there a more elegant way to do this?</p>\n\n<p>Update: here's the actual use case, to better explain what I'm trying to do:</p>\n\n<pre><code># files looks like: [ ('file1.jpg', 33L, '.jpg'), ('file2.avi', 999L, '.avi'), ... ]\nIMAGE_TYPES = ('.jpg','.jpeg','.gif','.bmp','.png')\nimages = [f for f in files if f[2].lower() in IMAGE_TYPES]\nanims  = [f for f in files if f[2].lower() not in IMAGE_TYPES]\n</code></pre>\n",
        "answer": "<blockquote>\n<pre><code>good = [x for x in mylist if x in goodvals]\nbad  = [x for x in mylist if x not in goodvals]\n</code></pre>\n  \n  <p>is there a more elegant way to do this?</p>\n</blockquote>\n\n<p>That code is perfectly readable, and extremely clear!</p>\n\n<pre><code># files looks like: [ ('file1.jpg', 33L, '.jpg'), ('file2.avi', 999L, '.avi'), ... ]\nIMAGE_TYPES = ('.jpg','.jpeg','.gif','.bmp','.png')\nimages = [f for f in files if f[2].lower() in IMAGE_TYPES]\nanims  = [f for f in files if f[2].lower() not in IMAGE_TYPES]\n</code></pre>\n\n<p>Again, this is <em>fine!</em></p>\n\n<p>There might be slight performance improvements using sets, but it's a trivial difference, and I find the list comprehension far easier to read, and you don't have to worry about the order being messed up, duplicates being removed as so on.</p>\n\n<p>In fact, I may go another step \"backward\", and just use a simple for loop:</p>\n\n<pre><code>images, anims = [], []\n\nfor f in files:\n    if f.lower() in IMAGE_TYPES:\n        images.append(f)\n    else:\n        anims.append(f)\n</code></pre>\n\n<p>The a list-comprehension or using <code>set()</code> is fine until you need to add some other check or another bit of logic - say you want to remove all 0-byte jpeg's, you just add something like..</p>\n\n<pre><code>if f[1] == 0:\n    continue\n</code></pre>\n"
    },
    "702": {
        "question_id": "538666",
        "answer_id": "538721",
        "question": "<p>I'm a Python newbie (2 weeks) and I'm having trouble formatting a <code>datetime.timedelta</code> object.</p>\n\n<p>Here's what I'm trying to do: \n  I have a list of objects and one of the members of the class of the object is a timedelta object that shows the duration of an event.  I would like to display that duration in the format of hours:minutes.</p>\n\n<p>I have tried a variety of methods for doing this and I'm having difficulty.  My current approach is to add methods to the class for my objects that return hours and minutes.  I can get the hours by dividing the timedelta.seconds by 3600 and rounding it. I'm having trouble with getting the remainder seconds and converting that to minutes.</p>\n\n<p>By the way, I'm using <code>Google AppEngine</code> with <code>Django Templates</code> for presentation.</p>\n",
        "answer": "<p>You can just convert the timedelta to a string with str(). Here's an example:</p>\n\n<pre><code>import datetime\nstart = datetime.datetime(2009,2,10,14,00)\nend   = datetime.datetime(2009,2,10,16,00)\ndelta = end-start\nprint(str(delta))\n# prints 2:00:00\n</code></pre>\n"
    },
    "703": {
        "question_id": "7456807",
        "answer_id": "7456865",
        "question": "<p>In other languages, a general guideline that helps produce better code is always make everything as hidden as possible. If in doubt about whether a variable should be private or protected, it's better to go with private.</p>\n\n<p>Does the same hold true for Python? Should I use two leading underscores on everything at first, and only make them less hidden (only one underscore) as I need them?</p>\n\n<p>If the convention is to use only one underscore, I'd also like to know the rationale.</p>\n\n<p>Here's a comment I left on <a href=\"https://stackoverflow.com/questions/7456807/python-name-mangling-when-in-doubt-do-what/7456958#7456958\">JBernardo's answer</a>. It explains why I asked this question and also why I'd like to know why Python is different from the other languages:</p>\n\n<blockquote>\n  <p>I come from languages that train you to think everything should be only as public as needed and no more. The reasoning is that this will reduce dependencies and make the code safer to alter. The Python way of doing things in reverse -- starting from public and going towards hidden -- is odd to me.</p>\n</blockquote>\n",
        "answer": "<p>When in doubt, leave it \"public\" - I mean, do not add anything to obscure the name of your attribute. If you have a class with some internal value, do not bother about it. Instead of writing:</p>\n\n<pre><code>class Stack(object):\n\n    def __init__(self):\n        self.__storage = [] # Too uptight\n\n    def push(self, value):\n        self.__storage.append(value)\n</code></pre>\n\n<p>write this by default:</p>\n\n<pre><code>class Stack(object):\n\n    def __init__(self):\n        self.storage = [] # No mangling\n\n    def push(self, value):\n        self.storage.append(value)\n</code></pre>\n\n<p>This is for sure a controversial way of doing things. Python newbies just hate it and even some old Python guys despise this default - but it is the default anyway, so I really recommend you to follow it, even if you feel uncomfortable.</p>\n\n<p>If you <em>really</em> want to send the message \"Can't touch this!\" to your users, the usual way is to precede the variable with <em>one</em> underscore. This is just a convention, but people understand it and take double care when dealing with such stuff:</p>\n\n<pre><code>class Stack(object):\n\n    def __init__(self):\n        self._storage = [] # This is ok but pythonistas use it to be relaxed about it\n\n    def push(self, value):\n        self._storage.append(value)\n</code></pre>\n\n<p>This can be useful, too, for avoiding conflict between property names and attribute names:</p>\n\n<pre><code> class Person(object):\n     def __init__(self, name, age):\n         self.name = name\n         self._age = age if age &gt;= 0 else 0\n\n     @property\n     def age(self):\n         return self._age\n\n     @age.setter\n     def age(self, age):\n         if age &gt;= 0:\n             self._age = age\n         else:\n             self._age  = 0\n</code></pre>\n\n<p>What about the double underscore? Well, the double underscore magic is used mainly <a href=\"https://stackoverflow.com/questions/70528/why-are-pythons-private-methods-not-actually-private/70900#70900\">to avoid accidental overloading of methods and name conflicts with superclasses' attributes</a>. It can be quite useful if you write a class that is expected to be extended many times.</p>\n\n<p>If you want to use it for other purposes, you can, but it is neither usual nor recommended.</p>\n\n<p><strong>EDIT</strong>: Why is this so? Well, the usual Python style does not emphasize making things private - on the contrary! There are a lot of reasons for that - most of them controversial... Let us see some of them.</p>\n\n<h1>Python has properties</h1>\n\n<p>Most OO languages today use the opposite approach: what should not be used should not be visible, so attributes should be private. Theoretically, this would yield more manageable, less coupled classes, because no one would change values inside the objects recklessly.</p>\n\n<p>However, it is not so simple. For example, Java classes do have a lot attributes <em>and</em> getters that just <em>get</em> the values <em>and</em> setters that just <em>set</em> the values. You need, let us say, seven lines of code to declare a single attribute - which a Python programmer would say is needlessly complex. Also, in practice, you just write this whole lot of code to get one public field, since you can change its value using the getters and setters.</p>\n\n<p>So why to follow this private-by-default policy? Just make your attributes public by default. Of course, this is problematic in Java, because if you decide to add some validation to your attribute, it would require you to change all</p>\n\n<pre><code>person.age = age;\n</code></pre>\n\n<p>in your code to, let us say,</p>\n\n<pre><code>person.setAge(age);\n</code></pre>\n\n<p><code>setAge()</code> being:</p>\n\n<pre><code>public void setAge(int age) {\n    if (age &gt;= 0) {\n        this.age = age;\n    } else {\n        this.age = 0;\n    }\n}\n</code></pre>\n\n<p>So in Java (and other languages), the default is to use getters and setters anyway, because they can be annoying to write but can spare you a lot of time if you find yourself in the situation I've described.</p>\n\n<p>However, you do not need to do it in Python, since Python has properties. If you have this class:</p>\n\n<pre><code> class Person(object):\n     def __init__(self, name, age):\n         self.name = name\n         self.age = age\n</code></pre>\n\n<p>and then you decide to validate ages, you do not need to change the <code>person.age = age</code> pieces of your code. Just add a property (as shown below)</p>\n\n<pre><code> class Person(object):\n     def __init__(self, name, age):\n         self.name = name\n         self._age = age if age &gt;= 0 else 0\n\n     @property\n     def age(self):\n         return self._age\n\n     @age.setter\n     def age(self, age):\n         if age &gt;= 0:\n             self._age = age\n         else:\n             self._age  = 0\n</code></pre>\n\n<p>If you can do it and still use  <code>person.age = age</code>, why would you add private fields and getters and setters?</p>\n\n<p>(Also, see <a href=\"http://dirtsimple.org/2004/12/python-is-not-java.html\" rel=\"noreferrer\">Python is not Java</a> and <a href=\"http://www.javaworld.com/javaworld/jw-09-2003/jw-0905-toolbox.html?page=1\" rel=\"noreferrer\">this article about the harms of using getters and setters</a>.).</p>\n\n<h1>Everything is visible anyway - and trying to hide just complicates your work</h1>\n\n<p>Even in languages where there are private attributes, you can access them through some kind of reflection/introspection library. And people do it a lot, in frameworks and for solving urgent needs. The problem is that introspection libraries are just a hard way of doing what you could do with public attributes.</p>\n\n<p>Since Python is a very dynamic language, it is just counterproductive to add this burden to your classes.</p>\n\n<h1>The problem is not being possible to see - it is being <em>required</em> to see</h1>\n\n<p>For a Pythonista, encapsulation is not the inability of seeing the internals of classes, but the possibility of avoiding looking at it. What I mean is, encapsulation is the property of a component which allows it to be used without the user being concerned about the internal details. If you can use a component without bothering yourself about its implementation, then it is encapsulated (in the opinion of a Python programmer).</p>\n\n<p>Now, if you wrote your class in such a way you can use it without having to think about implementation details, there is no problem if you <em>want</em> to look inside the class for some reason. The point is: your API should be good and the rest is details.</p>\n\n<h1>Guido said so</h1>\n\n<p>Well, this is not controversial: <a href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=211430\" rel=\"noreferrer\">he said so, actually</a>. (Look for \"open kimono.\")</p>\n\n<h1>This is culture</h1>\n\n<p>Yes, there are some reasons, but no critical reason. This is mostly a cultural aspect of programming in Python. Frankly, it could be the other way, too - but it is not. Also, you could just as easily ask the other way around: why do some languages use private attributes by default? For the same main reason as for the Python practice: because it is the culture of these languages, and each choice has advantages and disadvantages.</p>\n\n<p>Since there already is this culture, you are well advised to follow it. Otherwise, you will get annoyed by Python programmers telling you to remove the <code>__</code> from your code when you ask a question in Stack Overflow :)</p>\n"
    },
    "704": {
        "question_id": "23667369",
        "answer_id": "34272155",
        "question": "<p>The <code>pandas</code> <code>drop_duplicates</code> function is great for \"uniquifying\" a dataframe. However, one of the keyword arguments to pass is <code>take_last=True</code> or <code>take_last=False</code>, while I would like to drop all rows which are duplicates across a subset of columns. Is this possible?</p>\n\n<pre><code>    A   B   C\n0   foo 0   A\n1   foo 1   A\n2   foo 1   B\n3   bar 1   A\n</code></pre>\n\n<p>As an example, I would like to drop rows which match on columns <code>A</code> and <code>C</code> so this should drop rows 0 and 1.</p>\n",
        "answer": "<p>This is much easier in pandas now with <a href=\"http://pandas.pydata.org/pandas-docs/version/0.17.1/generated/pandas.DataFrame.drop_duplicates.html\">drop_duplicates</a> and the keep parameter.</p>\n\n<pre><code>import pandas as pd\ndf = pd.DataFrame({\"A\":[\"foo\", \"foo\", \"foo\", \"bar\"], \"B\":[0,1,1,1], \"C\":[\"A\",\"A\",\"B\",\"A\"]})\ndf.drop_duplicates(subset=['A', 'C'], keep=False)\n</code></pre>\n"
    },
    "705": {
        "question_id": "5656798",
        "answer_id": "5669301",
        "question": "<p>I'm trying to create a plot using pyplot that has a discontinuous x-axis.  The usual way this is drawn is that the axis will have something like this:</p>\n\n<p>(values)----//----(later values)</p>\n\n<p>where the // indicates that you're skipping everything between (values) and (later values).</p>\n\n<p>I haven't been able to find any examples of this, so I'm wondering if it's even possible.  I know you can join data over a discontinuity for, eg, financial data, but I'd like to make the jump in the axis more explicit.  At the moment I'm just using subplots but I'd really like to have everything end up on the same graph in the end.</p>\n",
        "answer": "<p>Paul's answer is a perfectly fine method of doing this. </p>\n\n<p>However, if you don't want to make a custom transform, you can just use two subplots to create the same effect.</p>\n\n<p>Rather than put together an example from scratch, there's <a href=\"https://github.com/matplotlib/matplotlib/blob/master/examples/pylab_examples/broken_axis.py\" rel=\"noreferrer\">an excellent example of this written by Paul Ivanov</a> in the matplotlib examples (It's only in the current git tip, as it was only committed a few months ago. It's not on the webpage yet.).  </p>\n\n<p>This is just a simple modification of this example to have a discontinuous x-axis instead of the y-axis. (Which is why I'm making this post a CW)</p>\n\n<p>Basically, you just do something like this:</p>\n\n<pre><code>import matplotlib.pylab as plt\nimport numpy as np\n\n# If you're not familiar with np.r_, don't worry too much about this. It's just \n# a series with points from 0 to 1 spaced at 0.1, and 9 to 10 with the same spacing.\nx = np.r_[0:1:0.1, 9:10:0.1]\ny = np.sin(x)\n\nfig,(ax,ax2) = plt.subplots(1, 2, sharey=True)\n\n# plot the same data on both axes\nax.plot(x, y, 'bo')\nax2.plot(x, y, 'bo')\n\n# zoom-in / limit the view to different portions of the data\nax.set_xlim(0,1) # most of the data\nax2.set_xlim(9,10) # outliers only\n\n# hide the spines between ax and ax2\nax.spines['right'].set_visible(False)\nax2.spines['left'].set_visible(False)\nax.yaxis.tick_left()\nax.tick_params(labeltop='off') # don't put tick labels at the top\nax2.yaxis.tick_right()\n\n# Make the spacing between the two axes a bit smaller\nplt.subplots_adjust(wspace=0.15)\n\nplt.show()\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/usLNf.png\" alt=\"enter image description here\"></p>\n\n<p>To add the broken axis lines <code>//</code> effect, we can do this (again, modified from Paul Ivanov's example):</p>\n\n<pre><code>import matplotlib.pylab as plt\nimport numpy as np\n\n# If you're not familiar with np.r_, don't worry too much about this. It's just \n# a series with points from 0 to 1 spaced at 0.1, and 9 to 10 with the same spacing.\nx = np.r_[0:1:0.1, 9:10:0.1]\ny = np.sin(x)\n\nfig,(ax,ax2) = plt.subplots(1, 2, sharey=True)\n\n# plot the same data on both axes\nax.plot(x, y, 'bo')\nax2.plot(x, y, 'bo')\n\n# zoom-in / limit the view to different portions of the data\nax.set_xlim(0,1) # most of the data\nax2.set_xlim(9,10) # outliers only\n\n# hide the spines between ax and ax2\nax.spines['right'].set_visible(False)\nax2.spines['left'].set_visible(False)\nax.yaxis.tick_left()\nax.tick_params(labeltop='off') # don't put tick labels at the top\nax2.yaxis.tick_right()\n\n# Make the spacing between the two axes a bit smaller\nplt.subplots_adjust(wspace=0.15)\n\n# This looks pretty good, and was fairly painless, but you can get that\n# cut-out diagonal lines look with just a bit more work. The important\n# thing to know here is that in axes coordinates, which are always\n# between 0-1, spine endpoints are at these locations (0,0), (0,1),\n# (1,0), and (1,1). Thus, we just need to put the diagonals in the\n# appropriate corners of each of our axes, and so long as we use the\n# right transform and disable clipping.\n\nd = .015 # how big to make the diagonal lines in axes coordinates\n# arguments to pass plot, just so we don't keep repeating them\nkwargs = dict(transform=ax.transAxes, color='k', clip_on=False)\nax.plot((1-d,1+d),(-d,+d), **kwargs) # top-left diagonal\nax.plot((1-d,1+d),(1-d,1+d), **kwargs) # bottom-left diagonal\n\nkwargs.update(transform=ax2.transAxes) # switch to the bottom axes\nax2.plot((-d,d),(-d,+d), **kwargs) # top-right diagonal\nax2.plot((-d,d),(1-d,1+d), **kwargs) # bottom-right diagonal\n\n# What's cool about this is that now if we vary the distance between\n# ax and ax2 via f.subplots_adjust(hspace=...) or plt.subplot_tool(),\n# the diagonal lines will move accordingly, and stay right at the tips\n# of the spines they are 'breaking'\n\nplt.show()\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/kZ1T5.png\" alt=\"enter image description here\"></p>\n"
    },
    "706": {
        "question_id": "4703390",
        "answer_id": "4703409",
        "question": "<p>I have a number of strings similar to <code>Current Level: 13.4 db.</code> and I would like to extract just the floating point number. I say floating and not decimal as it's sometimes whole. Can RegEx do this or is there a better way?</p>\n",
        "answer": "<p>If your float is always expressed in decimal notation something like</p>\n\n<pre><code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; re.findall(\"\\d+\\.\\d+\", \"Current Level: 13.4 db.\")\n['13.4']\n</code></pre>\n\n<p>may suffice.</p>\n\n<p>A more robust version would be:</p>\n\n<pre><code>&gt;&gt;&gt; re.findall(r\"[-+]?\\d*\\.\\d+|\\d+\", \"Current Level: -13.2 db or 14.2 or 3\")\n['-13.2', '14.2', '3']\n</code></pre>\n\n<p>If you want to validate user input, you could alternatively also check for a float by stepping to it directly:</p>\n\n<pre><code>user_input = \"Current Level: 1e100 db\"\nfor token in user_input.split():\n    try:\n        # if this succeeds, you have your (first) float\n        print float(token), \"is a float\"\n    except ValueError:\n        print token, \"is something else\"\n\n# =&gt; Would print ...\n#\n# Current is something else\n# Level: is something else\n# 1e+100 is a float\n# db is something else\n</code></pre>\n"
    },
    "707": {
        "question_id": "3426108",
        "answer_id": "3426155",
        "question": "<p>I know that this sounds trivial but I did not realize that the <code>sort()</code> function of Python was weird. I have a list of \"numbers\" that are actually in string form, so I first convert them to ints, then attempt a sort.</p>\n\n<pre><code>list1=[\"1\",\"10\",\"3\",\"22\",\"23\",\"4\",\"2\",\"200\"]\nfor item in list1:\n    item=int(item)\n\nlist1.sort()\nprint list1\n</code></pre>\n\n<p>Gives me:</p>\n\n<pre><code>['1', '10', '2', '200', '22', '23', '3', '4']\n</code></pre>\n\n<p>What I want is </p>\n\n<pre><code>['1','2','3','4','10','22','23','200']\n</code></pre>\n\n<p>I've looked around for some of the algorithms associated with sorting numeric sets, but the ones I found all involve sorting alphanumeric sets. </p>\n\n<p>I know this is probably a no brainer problem but google and my textbook don't offer anything more or less useful than the <code>.sort()</code> function.</p>\n",
        "answer": "<p>You haven't actually converted your strings to ints.  Or rather, you did, but then you didn't do anything with the results.  What you want is:</p>\n\n<pre><code>list1 = [\"1\",\"10\",\"3\",\"22\",\"23\",\"4\",\"2\",\"200\"]\nlist1 = [int(x) for x in list1]\nlist1.sort()\n</code></pre>\n\n<p>If for some reason you need to keep strings instead of ints (usually a bad idea, but maybe you need to preserve leading zeros or something), you can use a <em>key</em> function. <code>sort</code> takes a named parameter, <code>key</code>, which is a function that is called on each element before it is compared. The key function's return values are compared instead of comparing the list elements directly:</p>\n\n<pre><code>list1 = [\"1\",\"10\",\"3\",\"22\",\"23\",\"4\",\"2\",\"200\"]\n# call int(x) on each element before comparing it\nlist1.sort(key=int)\n</code></pre>\n"
    },
    "708": {
        "question_id": "16745507",
        "answer_id": "16747734",
        "question": "<p>I have a small GUI test with a \"Start\" button and a Progress bar. The desired behavior is:</p>\n\n<ul>\n<li>Click Start</li>\n<li>Progressbar oscillates for 5 seconds</li>\n<li>Progressbar stops</li>\n</ul>\n\n<p>The observed behavior is the \"Start\" button freezes for 5 seconds, then a Progressbar is displayed (no oscillation).</p>\n\n<p>Here is my code so far:</p>\n\n<pre><code>class GUI:\n    def __init__(self, master):\n        self.master = master\n        self.test_button = Button(self.master, command=self.tb_click)\n        self.test_button.configure(\n            text=\"Start\", background=\"Grey\",\n            padx=50\n            )\n        self.test_button.pack(side=TOP)\n\n    def progress(self):\n        self.prog_bar = ttk.Progressbar(\n            self.master, orient=\"horizontal\",\n            length=200, mode=\"indeterminate\"\n            )\n        self.prog_bar.pack(side=TOP)\n\n    def tb_click(self):\n        self.progress()\n        self.prog_bar.start()\n        # Simulate long running process\n        t = threading.Thread(target=time.sleep, args=(5,))\n        t.start()\n        t.join()\n        self.prog_bar.stop()\n\nroot = Tk()\nroot.title(\"Test Button\")\nmain_ui = GUI(root)\nroot.mainloop()\n</code></pre>\n\n<p>Based on the information from Bryan Oakley <a href=\"https://stackoverflow.com/questions/10847626/tkinter-program-freezing-durint-the-execution-of-a-function\">here</a>, I understand that I need to use threads. I tried creating a thread, but I'm guessing that since the thread is started from within the main thread, it doesn't help.</p>\n\n<p>I had the idea to place the logic portion in a different class, and instantiate the GUI from within that class, similar to the example code by A. Rodas <a href=\"https://stackoverflow.com/questions/15323574/how-to-connect-a-progress-bar-to-a-function/15323917#15323917\">here</a>.</p>\n\n<p>My question:</p>\n\n<p>I can't figure out how to code it so that this command:</p>\n\n<pre><code>self.test_button = Button(self.master, command=self.tb_click)\n</code></pre>\n\n<p>calls a function that is located in the other class. Is this a Bad Thing to do or is it even possible? How would I create a 2nd class that can handle the self.tb_click? I tried following along to A. Rodas' example code which works beautifully. But I cannot figure out how to implement his solution in the case of a Button widget that triggers an action.</p>\n\n<p>If I should instead handle the thread from within the single GUI class, how would one create a thread that doesn't interfere with the main thread?</p>\n",
        "answer": "<p>When you join the new thread in the main thread, it will wait until the thread finishes, so the GUI will block even though you are using multithreading.</p>\n\n<p>If you want to place the logic portion in a different class, you can subclass Thread directly, and then start a new object of this class when you press the button. The constructor of this subclass of Thread can receive a Queue object and then you will be able to communicate it with the GUI part. So my suggestion is:</p>\n\n<ol>\n<li>Create a Queue object in the main thread</li>\n<li>Create a new thread with access to that queue</li>\n<li>Check periodically the queue in the main thread</li>\n</ol>\n\n<p>Then you have to solve the problem of what happens if the user clicks two times the same button (it will spawn a new thread with each click), but you can fix it by disabling the start button and enabling it again after you call <code>self.prog_bar.stop()</code>.</p>\n\n<pre><code>import Queue\n\nclass GUI:\n    # ...\n\n    def tb_click(self):\n        self.progress()\n        self.prog_bar.start()\n        self.queue = Queue.Queue()\n        ThreadedTask(self.queue).start()\n        self.master.after(100, self.process_queue)\n\n    def process_queue(self):\n        try:\n            msg = self.queue.get(0)\n            # Show result of the task if needed\n            self.prog_bar.stop()\n        except Queue.Empty:\n            self.master.after(100, self.process_queue)\n\nclass ThreadedTask(threading.Thread):\n    def __init__(self, queue):\n        threading.Thread.__init__(self)\n        self.queue = queue\n    def run(self):\n        time.sleep(5)  # Simulate long running process\n        self.queue.put(\"Task finished\")\n</code></pre>\n"
    },
    "709": {
        "question_id": "22187279",
        "answer_id": "22210807",
        "question": "<p>So i'm getting this error</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"/Users/alex/dev/runswift/utils/sim2014/simulator.py\", line 3, in &lt;module&gt;\n    from world import World\n  File \"/Users/alex/dev/runswift/utils/sim2014/world.py\", line 2, in &lt;module&gt;\n    from entities.field import Field\n  File \"/Users/alex/dev/runswift/utils/sim2014/entities/field.py\", line 2, in &lt;module&gt;\n    from entities.goal import Goal\n  File \"/Users/alex/dev/runswift/utils/sim2014/entities/goal.py\", line 2, in &lt;module&gt;\n    from entities.post import Post\n  File \"/Users/alex/dev/runswift/utils/sim2014/entities/post.py\", line 4, in &lt;module&gt;\n    from physics import PostBody\n  File \"/Users/alex/dev/runswift/utils/sim2014/physics.py\", line 21, in &lt;module&gt;\n    from entities.post import Post\nImportError: cannot import name Post\n</code></pre>\n\n<p>and you can see that i use the same import statement further up and it works? Is there some unwritten rule about circular importing? How do i use the same class further down the call stack? </p>\n",
        "answer": "<p>I think the answer by jpmc26, while by no means <em>wrong</em>, comes down too heavily on circular imports. They can work just fine, if you set them up correctly.</p>\n\n<p>The easiest way to do so is to use <code>import my_module</code> syntax, rather than <code>from my_module import some_object</code>. The former will almost always work, even if <code>my_module</code> included imports us back. The latter only works if <code>my_object</code> is already defined in <code>my_module</code>, which in a circular import may not be the case.</p>\n\n<p>To be specific to your case: Try changing <code>entities/post.py</code> to do <code>import physics</code> and then refer to <code>physics.PostBody</code> rather than just <code>PostBody</code> directly. Similarly, change <code>physics.py</code> to do <code>import entities.post</code> and then use <code>entities.post.Post</code> rather than just <code>Post</code>.</p>\n"
    },
    "710": {
        "question_id": "18967441",
        "answer_id": "18967744",
        "question": "<p>I have a prefix that I want to add to every route.  Right now I add a constant to the route at every definition.  Is there a way to do this automatically?</p>\n\n<pre><code>PREFIX = \"/abc/123\"\n\n@app.route(PREFIX + \"/\")\ndef index_page():\n  return \"This is a website about burritos\"\n\n@app.route(PREFIX + \"/about\")\ndef about_page():\n  return \"This is a website about burritos\"\n</code></pre>\n",
        "answer": "<p>The answer depends on how you are serving this application.</p>\n\n<h2>Sub-mounted inside of another WSGI container</h2>\n\n<p>Assuming that you are going to run this application inside of a WSGI container (mod_wsgi, uwsgi, gunicorn, etc); you need to actually <em>mount, at that prefix</em> the application as a sub-part of that WSGI container (anything that speaks WSGI will do) and to set your <a href=\"http://flask.pocoo.org/docs/config/#builtin-configuration-values\" rel=\"noreferrer\"><code>APPLICATION_ROOT</code></a> config value to your prefix:</p>\n\n<pre><code>app.config[\"APPLICATION_ROOT\"] = \"/abc/123\"\n\n@app.route(\"/\")\ndef index():\n    return \"The URL for this page is {}\".format(url_for(\"index\"))\n\n# Will return \"The URL for this page is /abc/123/\"\n</code></pre>\n\n<p>Setting the <a href=\"http://flask.pocoo.org/docs/config/#builtin-configuration-values\" rel=\"noreferrer\"><code>APPLICATION_ROOT</code></a> config value simply limit Flask's session cookie to that URL prefix.  Everything else will be automatically handled for you by Flask and Werkzeug's excellent WSGI handling capabilities.</p>\n\n<h3>An example of properly sub-mounting your app</h3>\n\n<p>If you are not sure what the first paragraph means, take a look at this example application with Flask mounted inside of it:</p>\n\n<pre><code>from flask import Flask, url_for\nfrom werkzeug.serving import run_simple\nfrom werkzeug.wsgi import DispatcherMiddleware\n\napp = Flask(__name__)\napp.config['APPLICATION_ROOT'] = '/abc/123'\n\n@app.route('/')\ndef index():\n    return 'The URL for this page is {}'.format(url_for('index'))\n\ndef simple(env, resp):\n    resp(b'200 OK', [(b'Content-Type', b'text/plain')])\n    return [b'Hello WSGI World']\n\napp.wsgi_app = DispatcherMiddleware(simple, {'/abc/123': app.wsgi_app})\n\nif __name__ == '__main__':\n    app.run('localhost', 5000)\n</code></pre>\n\n<h2>Proxying requests to the app</h2>\n\n<p>If, on the other hand, you will be running your Flask application at the root of its WSGI container and proxying requests to it (for example, if it's being FastCGI'd to, or if nginx is <code>proxy_pass</code>-ing requests for a sub-endpoint to your stand-alone <code>uwsgi</code> / <code>gevent</code> server then you can either:</p>\n\n<ul>\n<li>Use a Blueprint, as Miguel points out in <a href=\"https://stackoverflow.com/a/18969161/135978\">his answer</a>.</li>\n<li><em>or</em> use the <code>DispatcherMiddleware</code> from <code>werkzeug</code> (or the <code>PrefixMiddleware</code> from <a href=\"https://stackoverflow.com/a/36033627/135978\">su27's answer</a>) to sub-mount your application in the stand-alone WSGI server you're using.  (See <em>An example of properly sub-mounting your app</em> above for the code to use).</li>\n</ul>\n"
    },
    "711": {
        "question_id": "1101508",
        "answer_id": "1101597",
        "question": "<p>I have a date string of the form '2009/05/13 19:19:30 -0400'. It seems that previous versions of Python may have supported a %z format tag in strptime for the trailing timezone specification, but 2.6.x seems to have removed that.</p>\n\n<p>What's the right way to parse this string into a datetime object?</p>\n",
        "answer": "<p>You can use the parse function from dateutil:</p>\n\n<pre><code>&gt;&gt;&gt; from dateutil.parser import parse\n&gt;&gt;&gt; d = parse('2009/05/13 19:19:30 -0400')\n&gt;&gt;&gt; d\ndatetime.datetime(2009, 5, 13, 19, 19, 30, tzinfo=tzoffset(None, -14400))\n</code></pre>\n\n<p>This way you obtain a datetime object you can then use.</p>\n\n<p>As <a href=\"https://stackoverflow.com/questions/7804505/dateutil-parser-parse-gives-error-initial-value-must-be-unicode-or-none-not/7804999#7804999\">answered</a>, dateutil2.0 is written for Python 3.0 and does not work with Python 2.x. For Python 2.x dateutil1.5 needs to be used.</p>\n"
    },
    "712": {
        "question_id": "4984428",
        "answer_id": "4985080",
        "question": "<p>I'm running a script that executes a number of executables by using </p>\n\n<pre><code>subprocess.call(cmdArgs,stdout=outf, stderr=errf)\n</code></pre>\n\n<p>when <code>outf</code>/<code>errf</code> is either None or a file descriptor (different files for <code>stdout</code>/<code>stderr</code>).</p>\n\n<p>Is there any way I can execute each exe so that the stdout and stderr will be written to the files and terminal together?</p>\n",
        "answer": "<p>The <a href=\"http://docs.python.org/library/subprocess.html#subprocess.call\" rel=\"noreferrer\"><code>call()</code></a> function is just <a href=\"http://svn.python.org/view/python/trunk/Lib/subprocess.py?view=markup\" rel=\"noreferrer\"><code>Popen(*args, **kwargs).wait()</code></a>. You could call <code>Popen</code> directly and use <code>stdout=PIPE</code> argument to read from <code>p.stdout</code>:</p>\n\n<pre><code>import sys\nfrom subprocess import Popen, PIPE\nfrom threading  import Thread\n\ndef tee(infile, *files):\n    \"\"\"Print `infile` to `files` in a separate thread.\"\"\"\n    def fanout(infile, *files):\n        for line in iter(infile.readline, ''):\n            for f in files:\n                f.write(line)\n        infile.close()\n    t = Thread(target=fanout, args=(infile,)+files)\n    t.daemon = True\n    t.start()\n    return t\n\ndef teed_call(cmd_args, **kwargs):    \n    stdout, stderr = [kwargs.pop(s, None) for s in 'stdout', 'stderr']\n    p = Popen(cmd_args,\n              stdout=PIPE if stdout is not None else None,\n              stderr=PIPE if stderr is not None else None,\n              **kwargs)\n    threads = []\n    if stdout is not None: threads.append(tee(p.stdout, stdout, sys.stdout))\n    if stderr is not None: threads.append(tee(p.stderr, stderr, sys.stderr))\n    for t in threads: t.join() # wait for IO completion\n    return p.wait()\n\noutf, errf = open('out.txt', 'w'), open('err.txt', 'w')\nassert not teed_call([\"cat\", __file__], stdout=None, stderr=errf)\nassert not teed_call([\"echo\", \"abc\"], stdout=outf, stderr=errf, bufsize=0)\nassert teed_call([\"gcc\", \"a b\"], close_fds=True, stdout=outf, stderr=errf)\n</code></pre>\n"
    },
    "713": {
        "question_id": "11520492",
        "answer_id": "11520540",
        "question": "<pre><code>&gt;&gt;&gt; a=[1,2,3]\n&gt;&gt;&gt; a.remove(2)\n&gt;&gt;&gt; a\n[1, 3]\n&gt;&gt;&gt; a=[1,2,3]\n&gt;&gt;&gt; del a[1]\n&gt;&gt;&gt; a\n[1, 3]\n&gt;&gt;&gt; a= [1,2,3]\n&gt;&gt;&gt; a.pop(1)\n2\n&gt;&gt;&gt; a\n[1, 3]\n&gt;&gt;&gt; \n</code></pre>\n\n<p>Is there any difference between the above three methods to remove an element from a list?</p>\n",
        "answer": "<p>Yes, <code>remove</code> removes the <em>first</em> matching <em>value</em>, not a specific index:</p>\n\n<pre><code>&gt;&gt;&gt; a = [0, 2, 3, 2]\n&gt;&gt;&gt; a.remove(2)\n&gt;&gt;&gt; a\n[0, 3, 2]\n</code></pre>\n\n<p><code>del</code> removes the item at a specific index:</p>\n\n<pre><code>&gt;&gt;&gt; a = [3, 2, 2, 1]\n&gt;&gt;&gt; del a[1]\n&gt;&gt;&gt; a\n[3, 2, 1]\n</code></pre>\n\n<p>and <code>pop</code> removes the item at a specific index and returns it.</p>\n\n<pre><code>&gt;&gt;&gt; a = [4, 3, 5]\n&gt;&gt;&gt; a.pop(1)\n3\n&gt;&gt;&gt; a\n[4, 5]\n</code></pre>\n\n<p>Their error modes are different too:</p>\n\n<pre><code>&gt;&gt;&gt; a = [4, 5, 6]\n&gt;&gt;&gt; a.remove(7)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: list.remove(x): x not in list\n&gt;&gt;&gt; del a[7]\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: list assignment index out of range\n&gt;&gt;&gt; a.pop(7)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: pop index out of range\n</code></pre>\n"
    },
    "714": {
        "question_id": "247770",
        "answer_id": "248862",
        "question": "<p>I want to detect whether module has changed. Now, using inotify is simple, you just need to know the directory you want to get notifications from.</p>\n\n<p>How do I retrieve a module's path in python?</p>\n",
        "answer": "<pre><code>import a_module\nprint(a_module.__file__)\n</code></pre>\n\n<p>Will actually give you the path to the .pyc file that was loaded, at least on Mac OS X. So I guess you can do:</p>\n\n<pre><code>import os\npath = os.path.dirname(a_module.__file__)\n</code></pre>\n\n<p>You can also try:</p>\n\n<pre><code>path = os.path.abspath(a_module.__file__)\n</code></pre>\n\n<p>To get the module's directory.</p>\n"
    },
    "715": {
        "question_id": "4843158",
        "answer_id": "4843172",
        "question": "<p>I have a list:</p>\n\n<pre><code>my_list = ['abc-123', 'def-456', 'ghi-789', 'abc-456']\n</code></pre>\n\n<p>and want to search for items that contain the string <code>'abc'</code>. How can I do that?</p>\n\n<pre><code>if 'abc' in my_list:\n</code></pre>\n\n<p>would check if <code>'abc'</code> exists in the list but it is a part of <code>'abc-123'</code> and <code>'abc-456'</code>, <code>'abc'</code> does not exist on its own. So how can I get all items that contain <code>'abc'</code> ?</p>\n",
        "answer": "<p>If you only want to check for the presence of <code>abc</code> in any string in the list, you could try</p>\n\n<pre><code>some_list = ['abc-123', 'def-456', 'ghi-789', 'abc-456']\nif any(\"abc\" in s for s in some_list):\n    # whatever\n</code></pre>\n\n<p>If you really want to get all the items containing <code>abc</code>, use</p>\n\n<pre><code>matching = [s for s in some_list if \"abc\" in s]\n</code></pre>\n"
    },
    "716": {
        "question_id": "4020419",
        "answer_id": "4020443",
        "question": "<p>I have seen and used nested functions in Python, and they match the definition of a closure.  So why are they called <code>nested functions</code> instead of <code>closures</code>?</p>\n\n<p>Are nested functions not closures because they are not used by the external world?</p>\n\n<p><strong>UPDATE:</strong> I was reading about closures and it got me thinking about this concept with respect to Python. I searched and found the article mentioned by someone in a comment below, but I couldn't completely understand the explanation in that article, so that is why I am asking this question.</p>\n",
        "answer": "<p>A closure occurs when a function has access to a local variable from an enclosing scope that has finished its execution.</p>\n\n<pre><code>def make_printer(msg):\n    def printer():\n        print msg\n    return printer\n\nprinter = make_printer('Foo!')\nprinter()\n</code></pre>\n\n<p>When <code>make_printer</code> is called, a new frame is put on the stack with the compiled code for the <code>printer</code> function as a constant and the value of <code>msg</code> as a local. It then creates and returns the function. Because the function <code>printer</code> references the <code>msg</code> variable, it is kept alive after the <code>make_printer</code> function has returned. </p>\n\n<p>So, if your nested functions don't </p>\n\n<ol>\n<li>access variables that are local to enclosing scopes, </li>\n<li>do so when they are executed outside of that scope,</li>\n</ol>\n\n<p>then they are not closures.</p>\n\n<p>Here's an example of a nested function which is not a closure.</p>\n\n<pre><code>def make_printer(msg):\n    def printer(msg=msg):\n        print msg\n    return printer\n\nprinter = make_printer(\"Foo!\")\nprinter()  #Output: Foo!\n</code></pre>\n\n<p>Here, we are binding the value to the default value of a parameter. This occurs when the function <code>printer</code> is created and so no reference to the value of <code>msg</code> external to <code>printer</code>  needs to be maintained after <code>make_printer</code> returns. <code>msg</code> is just a normal local variable of the function <code>printer</code> in this context. </p>\n"
    },
    "717": {
        "question_id": "1485841",
        "answer_id": "1485854",
        "question": "<p>I notice that a pre-increment/decrement operator can be applied on a variable (like <code>++count</code>). It compiles, but it does not actually change the value of the variable!</p>\n\n<p>What is the behavior of the pre-increment/decrement operators (++/--) in Python? </p>\n\n<p>Why does Python deviate from the behavior of these operators seen in C/C++?</p>\n",
        "answer": "<p><code>++</code> is not an operator. It is two <code>+</code> operators. The <code>+</code> operator is the <strong>identity</strong> operator, which does nothing. (Clarification: the <code>+</code> and <code>-</code> unary operators only work on numbers, but I presume that you wouldn't expect a hypothetical <code>++</code> operator to work on strings.)</p>\n\n<pre><code>++count\n</code></pre>\n\n<p>Parses as</p>\n\n<pre><code>+(+count)\n</code></pre>\n\n<p>Which translates to</p>\n\n<pre><code>count\n</code></pre>\n\n<p>You have to use the slightly longer <code>+=</code> operator to do what you want to do:</p>\n\n<pre><code>count += 1\n</code></pre>\n\n<p>I suspect the <code>++</code> and <code>--</code> operators were left out for consistency and simplicity. I don't know the exact argument Guido van Rossum gave for the decision, but I can imagine a few arguments:</p>\n\n<ul>\n<li>Simpler parsing. Technically, parsing <code>++count</code> is ambiguous, as it could be <code>+</code>, <code>+</code>, <code>count</code> (two unary <code>+</code> operators) just as easily as it could be <code>++</code>, <code>count</code> (one unary <code>++</code> operator). It's not a significant syntactic ambiguity, but it does exist.</li>\n<li>Simpler language. <code>++</code> is nothing more than a synonym for <code>+= 1</code>. It was a shorthand invented because C compilers were stupid and didn't know how to optimize <code>a += 1</code> into the <code>inc</code> instruction most computers have. In this day of optimizing compilers and bytecode interpreted languages, adding operators to a language to allow programmers to optimize their code is usually frowned upon, especially in a language like Python that is designed to be consistent and readable.</li>\n<li>Confusing side-effects. One common newbie error in languages with <code>++</code> operators is mixing up the differences (both in precedence and in return value) between the pre- and post-increment/decrement operators, and Python likes to eliminate language \"gotcha\"-s. The <a href=\"http://www.difranco.net/compsci/C_Operator_Precedence_Table.htm\" rel=\"noreferrer\">precedence issues</a> of <a href=\"https://stackoverflow.com/a/17819123/1449799\">pre-/post-increment in C</a> are pretty hairy, and incredibly easy to mess up.</li>\n</ul>\n"
    },
    "718": {
        "question_id": "85451",
        "answer_id": "85533",
        "question": "<p>Which is better to use for timing in Python? time.clock() or time.time()? Which one provides more accuracy?</p>\n\n<p>for example:</p>\n\n<pre><code>start = time.clock()\n... do something\nelapsed = (time.clock() - start)\n</code></pre>\n\n<p>vs.</p>\n\n<pre><code>start = time.time()\n... do something\nelapsed = (time.time() - start)\n</code></pre>\n",
        "answer": "<p>As of 3.3, <a href=\"https://docs.python.org/3/library/time.html#time.clock\" rel=\"noreferrer\"><em>time.clock()</em> is deprecated</a>, and it's suggested to use <strong><a href=\"https://docs.python.org/3/library/time.html#time.process_time\" rel=\"noreferrer\">time.process_time()</a></strong> or <strong><a href=\"https://docs.python.org/3/library/time.html#time.perf_counter\" rel=\"noreferrer\">time.perf_counter()</a></strong> instead.</p>\n\n<p>Previously in 2.7, according to the <strong><a href=\"https://docs.python.org/2.7/library/time.html#time.clock\" rel=\"noreferrer\">time module docs</a></strong>:</p>\n\n<blockquote>\n  <p><strong>time.clock()</strong></p>\n  \n  <p>On Unix, return the current processor time as a floating point number\n  expressed in seconds. The precision, and in fact the very definition\n  of the meaning of \u201cprocessor time\u201d, depends on that of the C function\n  of the same name, but in any case, <strong>this is the function to use for\n  benchmarking Python or timing algorithms.</strong></p>\n  \n  <p>On Windows, this function returns wall-clock seconds elapsed since the\n  first call to this function, as a floating point number, based on the\n  Win32 function QueryPerformanceCounter(). The resolution is typically\n  better than one microsecond.</p>\n</blockquote>\n\n<p>Additionally, there is the <a href=\"https://docs.python.org/2/library/timeit.html\" rel=\"noreferrer\">timeit</a> module for benchmarking code snippets.</p>\n"
    },
    "719": {
        "question_id": "7446187",
        "answer_id": "10538412",
        "question": "<p>I'm deploying a Django app to a dev server and am hitting this error when I run <code>pip install -r requirements.txt</code>:</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"/var/www/mydir/virtualenvs/dev/bin/pip\", line 5, in &lt;module&gt;\n    from pkg_resources import load_entry_point\nImportError: No module named pkg_resources\n</code></pre>\n\n<p><code>pkg_resources</code> appears to be distributed with <code>setuptools</code>.  Initially I thought this might not be installed to the Python in the virtualenv, so I installed <code>setuptools 2.6</code> (same version as Python) to the Python site-packages in the virtualenv with the following command:</p>\n\n<pre><code>sh setuptools-0.6c11-py2.6.egg --install-dir /var/www/mydir/virtualenvs/dev/lib/python2.6/site-packages\n</code></pre>\n\n<p><strong>EDIT:</strong> This only happens inside the virtualenv.  If I open a console outside the virtualenv then <code>pkg_resources</code> is present, but I am still getting the same error.</p>\n\n<p>Any ideas as to why <code>pkg_resources</code> is not on the path?</p>\n",
        "answer": "<p><strong>July 2018 Update</strong> </p>\n\n<p>Most people should now use <code>pip install setuptools</code> (possibly with <code>sudo</code>).</p>\n\n<p>Some may need to (re)install the <code>python-setuptools</code> package via their package manager (<code>apt-get install</code>, <code>yum install</code>, etc.).</p>\n\n<p>This issue can be highly dependent on your OS and dev environment. See the legacy/other answers below if the above isn't working for you.</p>\n\n<p><strong>Explanation</strong></p>\n\n<p>This error message is caused by a missing/broken Python <code>setuptools</code> package. Per Matt M.'s comment and <a href=\"https://github.com/pypa/setuptools/issues/581\" rel=\"noreferrer\">setuptools issue #581</a>, the bootstrap script referred to below is no longer the recommended installation method.</p>\n\n<p>The bootstrap script instructions will remain below, in case it's still helpful to anyone.</p>\n\n<p><strong>Legacy Answer</strong></p>\n\n<p>I encountered the same <code>ImportError</code> today while trying to use pip. Somehow the <code>setuptools</code> package had been deleted in my Python environment.</p>\n\n<p>To fix the issue, run the setup script for <code>setuptools</code>:</p>\n\n<pre><code>wget https://bootstrap.pypa.io/ez_setup.py -O - | python\n</code></pre>\n\n<p>(or if you don't have <code>wget</code> installed (e.g. OS X), try</p>\n\n<pre><code>curl https://bootstrap.pypa.io/ez_setup.py | python\n</code></pre>\n\n<p>possibly with <code>sudo</code> prepended.)</p>\n\n<p>If you have any version of <a href=\"http://pythonhosted.org/setuptools/merge-faq.html\" rel=\"noreferrer\"><code>distribute</code></a>, or any <code>setuptools</code> below 0.6, you will have to uninstall it first.*</p>\n\n<p>See <a href=\"https://pypi.python.org/pypi/setuptools/0.9.8#installation-instructions\" rel=\"noreferrer\">Installation Instructions</a> for further details.</p>\n\n<hr>\n\n<p>* If you already have a working <code>distribute</code>, upgrading it to the \"compatibility wrapper\" that switches you over to <code>setuptools</code> is easier. But if things are already broken, don't try that.</p>\n"
    },
    "720": {
        "question_id": "2104080",
        "answer_id": "2104107",
        "question": "<p>I am writing a Python script in Windows. I want to do something based on the file size. For example, if the size is greater than 0, I will send an email to somebody, otherwise continue to other things. </p>\n\n<p>How do I check the file size?</p>\n",
        "answer": "<p>Use <a href=\"https://docs.python.org/2/library/os.html#os.stat\" rel=\"noreferrer\"><code>os.stat</code></a>, and use the <code>st_size</code> member of the resulting object:</p>\n\n<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; statinfo = os.stat('somefile.txt')\n&gt;&gt;&gt; statinfo\n(33188, 422511L, 769L, 1, 1032, 100, 926L, 1105022698,1105022732, 1105022732)\n&gt;&gt;&gt; statinfo.st_size\n926L\n</code></pre>\n\n<p>Output is in bytes.</p>\n"
    },
    "721": {
        "question_id": "4233476",
        "answer_id": "4233482",
        "question": "<p>I have a list of lists:</p>\n\n<pre><code>[[12, 'tall', 'blue', 1],\n[2, 'short', 'red', 9],\n[4, 'tall', 'blue', 13]]\n</code></pre>\n\n<p>If I wanted to sort by one element, say the tall/short element, I could do it via <code>s = sorted(s, key = itemgetter(1))</code>.</p>\n\n<p>If I wanted to sort by <em>both</em> tall/short and colour, I could do the sort twice, once for each element, but is there a quicker way?</p>\n",
        "answer": "<p>A key can be a function that returns a tuple:</p>\n\n<pre><code>s = sorted(s, key = lambda x: (x[1], x[2]))\n</code></pre>\n\n<p>Or you can achieve the same using <code>itemgetter</code> (which is faster and avoids a Python function call):</p>\n\n<pre><code>import operator\ns = sorted(s, key = operator.itemgetter(1, 2))\n</code></pre>\n\n<p>And notice that here you can use <code>sort</code> instead of using <code>sorted</code> and then reassigning:</p>\n\n<pre><code>s.sort(key = operator.itemgetter(1, 2))\n</code></pre>\n"
    },
    "722": {
        "question_id": "204017",
        "answer_id": "204049",
        "question": "<p>I have a Python script that needs to execute an external program, but for some reason fails.</p>\n\n<p>If I have the following script:</p>\n\n<pre><code>import os;\nos.system(\"C:\\\\Temp\\\\a b c\\\\Notepad.exe\");\nraw_input();\n</code></pre>\n\n<p>Then it fails with the following error:</p>\n\n<blockquote>\n  <p>'C:\\Temp\\a' is not recognized as an internal or external command, operable program or batch file.</p>\n</blockquote>\n\n<p>If I escape the program with quotes:</p>\n\n<pre><code>import os;\nos.system('\"C:\\\\Temp\\\\a b c\\\\Notepad.exe\"');\nraw_input();\n</code></pre>\n\n<p>Then it works. However, if I add a parameter, it stops working again:</p>\n\n<pre><code>import os;\nos.system('\"C:\\\\Temp\\\\a b c\\\\Notepad.exe\" \"C:\\\\test.txt\"');\nraw_input();\n</code></pre>\n\n<p>What is the right way to execute a program and wait for it to complete? I do not need to read output from it, as it is a visual program that does a job and then just exits, but I need to wait for it to complete.</p>\n\n<p>Also note, moving the program to a non-spaced path is not an option either.</p>\n\n<hr>\n\n<p>This does not work either:</p>\n\n<pre><code>import os;\nos.system(\"'C:\\\\Temp\\\\a b c\\\\Notepad.exe'\");\nraw_input();\n</code></pre>\n\n<p>Note the swapped single/double quotes.</p>\n\n<p>With or without a parameter to Notepad here, it fails with the error message</p>\n\n<blockquote>\n  <p>The filename, directory name, or volume label syntax is incorrect.</p>\n</blockquote>\n",
        "answer": "<p><a href=\"http://docs.python.org/2/library/subprocess.html#using-the-subprocess-module\" rel=\"noreferrer\"><code>subprocess.call</code></a> will avoid problems with having to deal with quoting conventions of various shells. It accepts a list, rather than a string, so arguments are more easily delimited. i.e.</p>\n\n<pre><code>import subprocess\nsubprocess.call(['C:\\\\Temp\\\\a b c\\\\Notepad.exe', 'C:\\\\test.txt'])\n</code></pre>\n"
    },
    "723": {
        "question_id": "616645",
        "answer_id": "651718",
        "question": "<p>Edit: Since it appears that there's either no solution, or I'm doing something so non-standard that nobody knows - I'll revise my question to also ask: What is the best way to accomplish logging when a python app is making a lot of system calls?</p>\n\n<p>My app has two modes.  In interactive mode, I want all output to go to the screen as well as to a log file, including output from any system calls.  In daemon mode, all output goes to the log.  Daemon mode works great using <code>os.dup2()</code>.  I can't find a way to \"tee\" all output to a log in interactive mode, without modifying each and every system call.</p>\n\n<hr>\n\n<p>In other words, I want the functionality of the command line 'tee' for any output generated by a python app, <strong>including system call output</strong>.</p>\n\n<p>To clarify: </p>\n\n<p>To redirect all output I do something like this, and it works great:</p>\n\n<pre><code># open our log file\nso = se = open(\"%s.log\" % self.name, 'w', 0)\n\n# re-open stdout without buffering\nsys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)\n\n# redirect stdout and stderr to the log file opened above\nos.dup2(so.fileno(), sys.stdout.fileno())\nos.dup2(se.fileno(), sys.stderr.fileno())\n</code></pre>\n\n<p>The nice thing about this is that it requires no special print calls from the rest of the code.  The code also runs some shell commands, so it's nice not having to deal with each of their output individually as well.</p>\n\n<p>Simply, I want to do the same, except <em>duplicating</em> instead of redirecting.</p>\n\n<p>At first thought, I thought that simply reversing the <code>dup2</code>'s should work.  Why doesn't it?  Here's my test: </p>\n\n<pre><code>import os, sys\n\n### my broken solution:\nso = se = open(\"a.log\", 'w', 0)\nsys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)\n\nos.dup2(sys.stdout.fileno(), so.fileno())\nos.dup2(sys.stderr.fileno(), se.fileno())\n###\n\nprint(\"foo bar\")\n\nos.spawnve(\"P_WAIT\", \"/bin/ls\", [\"/bin/ls\"], {})\nos.execve(\"/bin/ls\", [\"/bin/ls\"], os.environ)\n</code></pre>\n\n<p>The file \"a.log\" should be identical to what was displayed on the screen.</p>\n",
        "answer": "<p>Since you're comfortable spawning external processes from your code, you could use <code>tee</code> itself.  I don't know of any Unix system calls that do exactly what <code>tee</code> does.</p>\n\n<pre><code># Note this version was written circa Python 2.6, see below for\n# an updated 3.3+-compatible version.\nimport subprocess, os, sys\n\n# Unbuffer output (this ensures the output is in the correct order)\nsys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)\n\ntee = subprocess.Popen([\"tee\", \"log.txt\"], stdin=subprocess.PIPE)\nos.dup2(tee.stdin.fileno(), sys.stdout.fileno())\nos.dup2(tee.stdin.fileno(), sys.stderr.fileno())\n\nprint \"\\nstdout\"\nprint &gt;&gt;sys.stderr, \"stderr\"\nos.spawnve(\"P_WAIT\", \"/bin/ls\", [\"/bin/ls\"], {})\nos.execve(\"/bin/ls\", [\"/bin/ls\"], os.environ)\n</code></pre>\n\n<p>You could also emulate <code>tee</code> using the <a href=\"http://docs.python.org/dev/library/multiprocessing.html\" rel=\"nofollow noreferrer\">multiprocessing</a> package (or use <a href=\"http://pypi.python.org/pypi/processing\" rel=\"nofollow noreferrer\">processing</a> if you're using Python 2.5 or earlier).</p>\n\n<p><strong>Update</strong></p>\n\n<p>Here is a Python 3.3+-compatible version:</p>\n\n<pre><code>import subprocess, os, sys\n\ntee = subprocess.Popen([\"tee\", \"log.txt\"], stdin=subprocess.PIPE)\n# Cause tee's stdin to get a copy of our stdin/stdout (as well as that\n# of any child processes we spawn)\nos.dup2(tee.stdin.fileno(), sys.stdout.fileno())\nos.dup2(tee.stdin.fileno(), sys.stderr.fileno())\n\n# The flush flag is needed to guarantee these lines are written before\n# the two spawned /bin/ls processes emit any output\nprint(\"\\nstdout\", flush=True)\nprint(\"stderr\", file=sys.stderr, flush=True)\n\n# These child processes' stdin/stdout are \nos.spawnve(\"P_WAIT\", \"/bin/ls\", [\"/bin/ls\"], {})\nos.execve(\"/bin/ls\", [\"/bin/ls\"], os.environ)\n</code></pre>\n"
    },
    "724": {
        "question_id": "17975471",
        "answer_id": "17979285",
        "question": "<p>I'm trying to scrape product information from a webpage, using scrapy. My to-be-scraped webpage looks like this:</p>\n\n<ul>\n<li>starts with a product_list page with 10 products</li>\n<li>a click on \"next\"  button loads the next 10 products (url doesn't change between the two pages)</li>\n<li>i use LinkExtractor to follow each product link into the product page, and get all the information I need</li>\n</ul>\n\n<p>I tried to replicate the next-button-ajax-call but can't get working, so I'm giving selenium a try. I can run selenium's webdriver in a separate script, but I don't know how to integrate with scrapy. Where shall I put the selenium part in my scrapy spider? </p>\n\n<p>My spider is pretty standard, like the following:</p>\n\n<pre><code>class ProductSpider(CrawlSpider):\n    name = \"product_spider\"\n    allowed_domains = ['example.com']\n    start_urls = ['http://example.com/shanghai']\n    rules = [\n        Rule(SgmlLinkExtractor(restrict_xpaths='//div[@id=\"productList\"]//dl[@class=\"t2\"]//dt'), callback='parse_product'),\n        ]\n\n    def parse_product(self, response):\n        self.log(\"parsing product %s\" %response.url, level=INFO)\n        hxs = HtmlXPathSelector(response)\n        # actual data follows\n</code></pre>\n\n<p>Any idea is appreciated. Thank you!</p>\n",
        "answer": "<p>It really depends on how do you need to scrape the site and how and what data do you want to get. </p>\n\n<p>Here's an example how you can follow pagination on ebay using <code>Scrapy</code>+<code>Selenium</code>:</p>\n\n<pre><code>import scrapy\nfrom selenium import webdriver\n\nclass ProductSpider(scrapy.Spider):\n    name = \"product_spider\"\n    allowed_domains = ['ebay.com']\n    start_urls = ['http://www.ebay.com/sch/i.html?_odkw=books&amp;_osacat=0&amp;_trksid=p2045573.m570.l1313.TR0.TRC0.Xpython&amp;_nkw=python&amp;_sacat=0&amp;_from=R40']\n\n    def __init__(self):\n        self.driver = webdriver.Firefox()\n\n    def parse(self, response):\n        self.driver.get(response.url)\n\n        while True:\n            next = self.driver.find_element_by_xpath('//td[@class=\"pagn-next\"]/a')\n\n            try:\n                next.click()\n\n                # get the data and write it to scrapy items\n            except:\n                break\n\n        self.driver.close()\n</code></pre>\n\n<p>Here are some examples of \"selenium spiders\":</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/10648644/executing-javascript-submit-form-functions-using-scrapy-in-python\">Executing Javascript Submit form functions using scrapy in python</a></li>\n<li><a href=\"https://gist.github.com/cheekybastard/4944914\" rel=\"noreferrer\">https://gist.github.com/cheekybastard/4944914</a></li>\n<li><a href=\"https://gist.github.com/irfani/1045108\" rel=\"noreferrer\">https://gist.github.com/irfani/1045108</a></li>\n<li><a href=\"http://snipplr.com/view/66998/\" rel=\"noreferrer\">http://snipplr.com/view/66998/</a></li>\n</ul>\n\n<hr>\n\n<p>There is also an alternative to having to use <code>Selenium</code> with <code>Scrapy</code>. In some cases, using <a href=\"https://github.com/scrapinghub/scrapy-splash\" rel=\"noreferrer\"><code>ScrapyJS</code> middleware</a> is enough to handle the dynamic parts of a page. Sample real-world usage:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/30345623/scraping-dynamic-content-using-python-scrapy\">Scraping dynamic content using python-Scrapy</a></li>\n</ul>\n"
    },
    "725": {
        "question_id": "17116814",
        "answer_id": "17116976",
        "question": "<p>I'm working with a large csv file and the next to last column has a string of text that I want to split by a specific delimiter. I was wondering if there is a simple way to do this using pandas or python?</p>\n\n<pre><code>CustNum  CustomerName     ItemQty  Item   Seatblocks                 ItemExt\n32363    McCartney, Paul      3     F04    2:218:10:4,6                   60\n31316    Lennon, John        25     F01    1:13:36:1,12 1:13:37:1,13     300\n</code></pre>\n\n<p>I want to split by the space<code>(' ')</code> and then the colon<code>(':')</code> in the <code>Seatblocks</code> column, but each cell would result in a different number of columns. I have a function to rearrange the columns so the <code>Seatblocks</code> column is at the end of the sheet, but I'm not sure what to do from there. I can do it in excel with the built in <code>text-to-columns</code> function and a quick macro, but my dataset has too many records for excel to handle.</p>\n\n<p>Ultimately, I want to take records such John Lennon's and create multiple lines, with the info from each set of seats on a separate line.</p>\n",
        "answer": "<p>This splits the Seatblocks by space and gives each its own row.</p>\n\n<pre><code>In [43]: df\nOut[43]: \n   CustNum     CustomerName  ItemQty Item                 Seatblocks  ItemExt\n0    32363  McCartney, Paul        3  F04               2:218:10:4,6       60\n1    31316     Lennon, John       25  F01  1:13:36:1,12 1:13:37:1,13      300\n\nIn [44]: s = df['Seatblocks'].str.split(' ').apply(Series, 1).stack()\n\nIn [45]: s.index = s.index.droplevel(-1) # to line up with df's index\n\nIn [46]: s.name = 'Seatblocks' # needs a name to join\n\nIn [47]: s\nOut[47]: \n0    2:218:10:4,6\n1    1:13:36:1,12\n1    1:13:37:1,13\nName: Seatblocks, dtype: object\n\nIn [48]: del df['Seatblocks']\n\nIn [49]: df.join(s)\nOut[49]: \n   CustNum     CustomerName  ItemQty Item  ItemExt    Seatblocks\n0    32363  McCartney, Paul        3  F04       60  2:218:10:4,6\n1    31316     Lennon, John       25  F01      300  1:13:36:1,12\n1    31316     Lennon, John       25  F01      300  1:13:37:1,13\n</code></pre>\n\n<p>Or, to give each colon-separated string in its own column:</p>\n\n<pre><code>In [50]: df.join(s.apply(lambda x: Series(x.split(':'))))\nOut[50]: \n   CustNum     CustomerName  ItemQty Item  ItemExt  0    1   2     3\n0    32363  McCartney, Paul        3  F04       60  2  218  10   4,6\n1    31316     Lennon, John       25  F01      300  1   13  36  1,12\n1    31316     Lennon, John       25  F01      300  1   13  37  1,13\n</code></pre>\n\n<p>This is a little ugly, but maybe someone will chime in with a prettier solution.</p>\n"
    },
    "726": {
        "question_id": "2891790",
        "answer_id": "2891805",
        "question": "<p>I'm curious, whether there is any way to print formatted <code>numpy.arrays</code>, e.g., in a way similar to this:</p>\n\n<pre><code>x = 1.23456\nprint '%.3f' % x\n</code></pre>\n\n<p>If I want to print the <code>numpy.array</code> of floats, it prints several decimals, often in 'scientific' format, which is rather hard to read even for low-dimensional arrays. However, <code>numpy.array</code> apparently has to be printed as a string, i.e., with <code>%s</code>. Is there a solution for this? </p>\n",
        "answer": "<p>You can use <code>set_printoptions</code> to set the precision of the output:</p>\n\n<pre><code>import numpy as np\nx=np.random.random(10)\nprint(x)\n# [ 0.07837821  0.48002108  0.41274116  0.82993414  0.77610352  0.1023732\n#   0.51303098  0.4617183   0.33487207  0.71162095]\n\nnp.set_printoptions(precision=3)\nprint(x)\n# [ 0.078  0.48   0.413  0.83   0.776  0.102  0.513  0.462  0.335  0.712]\n</code></pre>\n\n<p>And <code>suppress</code> suppresses the use of scientific notation for small numbers:</p>\n\n<pre><code>y=np.array([1.5e-10,1.5,1500])\nprint(y)\n# [  1.500e-10   1.500e+00   1.500e+03]\nnp.set_printoptions(suppress=True)\nprint(y)\n# [    0.      1.5  1500. ]\n</code></pre>\n\n<p>See the <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.set_printoptions.html\" rel=\"noreferrer\">docs for set_printoptions</a> for other options.</p>\n\n<hr>\n\n<p><strong>To apply print options locally</strong>, using NumPy 1.15.0 or later, you could use the <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.printoptions.html\" rel=\"noreferrer\">numpy.printoptions</a> context manager. \nFor example, inside the <code>with-suite</code> <code>precision=3</code> and <code>suppress=True</code> are set:</p>\n\n<pre><code>x = np.random.random(10)\nwith np.printoptions(precision=3, suppress=True):\n    print(x)\n    # [ 0.073  0.461  0.689  0.754  0.624  0.901  0.049  0.582  0.557  0.348]\n</code></pre>\n\n<p>But outside the <code>with-suite</code> the print options are back to default settings:</p>\n\n<pre><code>print(x)    \n# [ 0.07334334  0.46132615  0.68935231  0.75379645  0.62424021  0.90115836\n#   0.04879837  0.58207504  0.55694118  0.34768638]\n</code></pre>\n\n<p>If you are using an earlier version of NumPy, you can create the context manager\nyourself. For example,</p>\n\n<pre><code>import numpy as np\nimport contextlib\n\n@contextlib.contextmanager\ndef printoptions(*args, **kwargs):\n    original = np.get_printoptions()\n    np.set_printoptions(*args, **kwargs)\n    try:\n        yield\n    finally: \n        np.set_printoptions(**original)\n\nx = np.random.random(10)\nwith printoptions(precision=3, suppress=True):\n    print(x)\n    # [ 0.073  0.461  0.689  0.754  0.624  0.901  0.049  0.582  0.557  0.348]\n</code></pre>\n\n<hr>\n\n<p><strong>To prevent zeros from being stripped from the end of floats:</strong></p>\n\n<p><code>np.set_printoptions</code> now has a <code>formatter</code> parameter which allows you to specify a format function for each type.</p>\n\n<pre><code>np.set_printoptions(formatter={'float': '{: 0.3f}'.format})\nprint(x)\n</code></pre>\n\n<p>which prints</p>\n\n<pre><code>[ 0.078  0.480  0.413  0.830  0.776  0.102  0.513  0.462  0.335  0.712]\n</code></pre>\n\n<p>instead of </p>\n\n<pre><code>[ 0.078  0.48   0.413  0.83   0.776  0.102  0.513  0.462  0.335  0.712]\n</code></pre>\n"
    },
    "727": {
        "question_id": "33054527",
        "answer_id": "33054552",
        "question": "<p>I've very recently migrated to Py 3.5.\nThis code was working properly in Python 2.7:</p>\n\n<pre><code>with open(fname, 'rb') as f:\n    lines = [x.strip() for x in f.readlines()]\n\nfor line in lines:\n    tmp = line.strip().lower()\n    if 'some-pattern' in tmp: continue\n    # ... code\n</code></pre>\n\n<p>After upgrading to 3.5, I'm getting the:</p>\n\n<pre><code>TypeError: a bytes-like object is required, not 'str'\n</code></pre>\n\n<p>error on the last line (the pattern search code).</p>\n\n<p>I've tried using the <code>.decode()</code> function on either side of the statement, also tried:</p>\n\n<pre><code>if tmp.find('some-pattern') != -1: continue\n</code></pre>\n\n<p>- to no avail.</p>\n\n<p>I was able to resolve almost all 2:3 issues quickly, but this little statement is bugging me.</p>\n",
        "answer": "<p>You opened the file in binary mode:</p>\n\n<pre><code>with open(fname, 'rb') as f:\n</code></pre>\n\n<p>This means that all data read from the file is returned as <code>bytes</code> objects, not <code>str</code>. You cannot then use a string in a containment test:</p>\n\n<pre><code>if 'some-pattern' in tmp: continue\n</code></pre>\n\n<p>You'd have to use a <code>bytes</code> object to test against <code>tmp</code> instead:</p>\n\n<pre><code>if b'some-pattern' in tmp: continue\n</code></pre>\n\n<p>or open the file as a textfile instead by replacing the <code>'rb'</code> mode with <code>'r'</code>.</p>\n"
    },
    "728": {
        "question_id": "19389490",
        "answer_id": "19389957",
        "question": "<p>I'm trying to understand how the <code>any()</code> and <code>all()</code> Python built-in functions work. </p>\n\n<p>I'm trying to compare the tuples so that if any value is different then it will return <code>True</code> and if they are all the same it will return <code>False</code>. How are they working in this case to return [False, False, False]?</p>\n\n<p><code>d</code> is a <code>defaultdict(list)</code>.</p>\n\n<pre><code>print d['Drd2']\n# [[1, 5, 0], [1, 6, 0]]\nprint list(zip(*d['Drd2']))\n# [(1, 1), (5, 6), (0, 0)]\nprint [any(x) and not all(x) for x in zip(*d['Drd2'])]\n# [False, False, False]\n</code></pre>\n\n<p>To my knowledge, this should output </p>\n\n<pre><code># [False, True, False]\n</code></pre>\n\n<p>since (1,1) are the same, (5,6) are different, and (0,0) are the same. </p>\n\n<p><strong>Why is it evaluating to False for all tuples?</strong> </p>\n",
        "answer": "<p>You can roughly think of <code>any</code> and <code>all</code> as series of logical <code>or</code> and <code>and</code> operators, respectively.</p>\n\n<p><strong>any</strong></p>\n\n<p><code>any</code> will return <code>True</code> when <strong>at least one of the elements</strong> is Truthy. Read about <a href=\"http://docs.python.org/2/library/stdtypes.html#truth-value-testing\" rel=\"noreferrer\">Truth Value Testing.</a></p>\n\n<p><strong>all</strong></p>\n\n<p><code>all</code> will return <code>True</code> only when <strong>all the elements</strong> are Truthy.</p>\n\n<p><strong>Truth table</strong> </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>+-----------------------------------------+---------+---------+\n|                                         |   any   |   all   |\n+-----------------------------------------+---------+---------+\n| All Truthy values                       |  True   |  True   |\n+-----------------------------------------+---------+---------+\n| All Falsy values                        |  False  |  False  |\n+-----------------------------------------+---------+---------+\n| One Truthy value (all others are Falsy) |  True   |  False  |\n+-----------------------------------------+---------+---------+\n| One Falsy value (all others are Truthy) |  True   |  False  |\n+-----------------------------------------+---------+---------+\n| Empty Iterable                          |  False  |  True   |\n+-----------------------------------------+---------+---------+\n</code></pre>\n\n<p><strong>Note 1:</strong> The empty iterable case is explained in the official documentation, like this</p>\n\n<p><a href=\"https://docs.python.org/2/library/functions.html#any\" rel=\"noreferrer\"><strong><code>any</code></strong></a></p>\n\n<blockquote>\n  <p>Return <code>True</code> if any element of the iterable is true. <strong>If the iterable is empty, return <code>False</code></strong></p>\n</blockquote>\n\n<p>Since none of the elements is true, it returns <code>False</code> in this case. </p>\n\n<p><a href=\"https://docs.python.org/2/library/functions.html#all\" rel=\"noreferrer\"><strong><code>all</code></strong></a></p>\n\n<blockquote>\n  <p>Return <code>True</code> if all elements of the iterable are true (<strong>or if the iterable is empty</strong>).</p>\n</blockquote>\n\n<p>Since none of the elements is false, it returns <code>True</code> in this case. </p>\n\n<hr>\n\n<p><strong>Note 2:</strong></p>\n\n<p>Another important thing to know about <code>any</code> and <code>all</code> is, it will short-circuit the execution, the moment they know the result. The advantage is, entire iterable need not be consumed. For example,</p>\n\n<pre><code>&gt;&gt;&gt; multiples_of_6 = (not (i % 6) for i in range(1, 10))\n&gt;&gt;&gt; any(multiples_of_6)\nTrue\n&gt;&gt;&gt; list(multiples_of_6)\n[False, False, False]\n</code></pre>\n\n<p>Here, <code>(not (i % 6) for i in range(1, 10))</code> is a generator expression which returns <code>True</code> if the current number within 1 and 9 is a multiple of 6. <code>any</code> iterates the <code>multiples_of_6</code> and when it meets <code>6</code>, it finds a Truthy value, so it immediately returns <code>True</code>, and rest of the <code>multiples_of_6</code> is not iterated. That is what we see when we print <code>list(multiples_of_6)</code>, the result of <code>7</code>, <code>8</code> and <code>9</code>.</p>\n\n<p>This excellent thing is used very cleverly in <a href=\"https://stackoverflow.com/a/16801605/1903116\">this answer</a>.</p>\n\n<hr>\n\n<p>With this basic understanding, if we look at your code, you do </p>\n\n<pre><code>any(x) and not all(x)\n</code></pre>\n\n<p>which makes sure that, atleast one of the values is Truthy but not all of them. That is why it is returning <code>[False, False, False]</code>. If you really wanted to check if both the numbers are not the same,</p>\n\n<pre><code>print [x[0] != x[1] for x in zip(*d['Drd2'])]\n</code></pre>\n"
    },
    "729": {
        "question_id": "567222",
        "answer_id": "568618",
        "question": "<p>Could someone please tell me what I'm doing wrong with this code? It is just printing 'count' anyway.  I just want a very simple prime generator (nothing fancy). </p>\n\n<pre><code>import math\n\ndef main():\n    count = 3\n    one = 1\n    while one == 1:\n        for x in range(2, int(math.sqrt(count) + 1)):\n            if count % x == 0: \n                continue\n            if count % x != 0:\n                print count\n\n        count += 1\n</code></pre>\n",
        "answer": "<p>There are some problems:</p>\n\n<ul>\n<li>Why do you print out count when it didn't divide by x? It doesn't mean it's prime, it means only that this particular x doesn't divide it</li>\n<li><code>continue</code> moves to the next loop iteration - but you really want to stop it using <code>break</code></li>\n</ul>\n\n<p>Here's your code with a few fixes, it prints out only primes:</p>\n\n<pre><code>import math\n\ndef main():\n    count = 3\n   \u00a0\n    while True:\n        isprime = True\n       \u00a0\n        for x in range(2, int(math.sqrt(count) + 1)):\n            if count % x == 0: \n                isprime = False\n                break\n       \u00a0\n        if isprime:\n            print count\n       \u00a0\n        count += 1\n</code></pre>\n\n<p>For much more efficient prime generation, see the Sieve of Erastothenes, as others have suggested. Here's a nice, optimized implementation with many comments:</p>\n\n<pre><code># Sieve of Eratosthenes\n# Code by David Eppstein, UC Irvine, 28 Feb 2002\n# http://code.activestate.com/recipes/117119/\n\ndef gen_primes():\n    \"\"\" Generate an infinite sequence of prime numbers.\n    \"\"\"\n    # Maps composites to primes witnessing their compositeness.\n    # This is memory efficient, as the sieve is not \"run forward\"\n    # indefinitely, but only as long as required by the current\n    # number being tested.\n    #\n    D = {}\n   \u00a0\n    # The running integer that's checked for primeness\n    q = 2\n   \u00a0\n    while True:\n        if q not in D:\n            # q is a new prime.\n            # Yield it and mark its first multiple that isn't\n            # already marked in previous iterations\n            # \n            yield q\n            D[q * q] = [q]\n        else:\n            # q is composite. D[q] is the list of primes that\n            # divide it. Since we've reached q, we no longer\n            # need it in the map, but we'll mark the next \n            # multiples of its witnesses to prepare for larger\n            # numbers\n            # \n            for p in D[q]:\n                D.setdefault(p + q, []).append(p)\n            del D[q]\n       \u00a0\n        q += 1\n</code></pre>\n\n<p>Note that it returns a generator.</p>\n"
    },
    "730": {
        "question_id": "1218933",
        "answer_id": "1218951",
        "question": "<p>I'm using python's <code>ftplib</code> to write a small FTP client, but some of the functions in the package don't return string output, but print to <code>stdout</code>. I want to redirect <code>stdout</code> to an object which I'll be able to read the output from.</p>\n\n<p>I know <code>stdout</code> can be redirected into any regular file with:</p>\n\n<pre><code>stdout = open(\"file\", \"a\")\n</code></pre>\n\n<p>But I prefer a method that doesn't uses the local drive.</p>\n\n<p>I'm looking for something like the <code>BufferedReader</code> in Java that can be used to wrap a buffer into a stream.</p>\n",
        "answer": "<pre><code>from cStringIO import StringIO # Python3 use: from io import StringIO\nimport sys\n\nold_stdout = sys.stdout\nsys.stdout = mystdout = StringIO()\n\n# blah blah lots of code ...\n\nsys.stdout = old_stdout\n\n# examine mystdout.getvalue()\n</code></pre>\n"
    },
    "731": {
        "question_id": "16856647",
        "answer_id": "16856730",
        "question": "<pre><code>def insert(array):\n    connection=sqlite3.connect('images.db')\n    cursor=connection.cursor()\n    cnt=0\n    while cnt != len(array):\n            img = array[cnt]\n            print(array[cnt])\n            cursor.execute('INSERT INTO images VALUES(?)', (img))\n            cnt+= 1\n    connection.commit()\n    connection.close()\n</code></pre>\n\n<p>I cannot figure out why this is giving me the error, The actual string I am trying to insert is 74 chars long, it's: \"/gifs/epic-fail-photos-there-i-fixed-it-aww-man-the-tire-pressures-low.gif\"</p>\n\n<p>I've tried to str(array[cnt]) before inserting it, but the same issue is happening, the database only has one column, which is a TEXT value.</p>\n\n<p>I've been at it for hours and I cannot figure out what is going on.</p>\n",
        "answer": "<p>You need to pass in a sequence, but you forgot the comma to make your parameters a tuple:</p>\n\n<pre><code>cursor.execute('INSERT INTO images VALUES(?)', (img,))\n</code></pre>\n\n<p>Without the comma, <code>(img)</code> is just a grouped expression, not a tuple, and thus the <code>img</code> string is treated as the input sequence. If that string is 74 characters long, then Python sees that as 74 separate bind values, each one character long.</p>\n\n<pre><code>&gt;&gt;&gt; len(img)\n74\n&gt;&gt;&gt; len((img,))\n1\n</code></pre>\n\n<p>If you find it easier to read, you can also use a list literal:</p>\n\n<pre><code>cursor.execute('INSERT INTO images VALUES(?)', [img])\n</code></pre>\n"
    },
    "732": {
        "question_id": "2136556",
        "answer_id": "2136580",
        "question": "<p>Here's the simplest way to explain this. Here's what I'm using:</p>\n\n<pre><code>re.split('\\W', 'foo/bar spam\\neggs')\n-&gt; ['foo', 'bar', 'spam', 'eggs']\n</code></pre>\n\n<p>Here's what I want:</p>\n\n<pre><code>someMethod('\\W', 'foo/bar spam\\neggs')\n-&gt; ['foo', '/', 'bar', ' ', 'spam', '\\n', 'eggs']\n</code></pre>\n\n<p>The reason is that I want to split a string into tokens, manipulate it, then put it back together again.</p>\n",
        "answer": "<pre><code>&gt;&gt;&gt; re.split('(\\W)', 'foo/bar spam\\neggs')\n['foo', '/', 'bar', ' ', 'spam', '\\n', 'eggs']\n</code></pre>\n"
    },
    "733": {
        "question_id": "7204805",
        "answer_id": "7205107",
        "question": "<p>I need to merge multiple dictionaries, here's what I have for instance:</p>\n\n<pre><code>dict1 = {1:{\"a\":{A}}, 2:{\"b\":{B}}}\n\ndict2 = {2:{\"c\":{C}}, 3:{\"d\":{D}}\n</code></pre>\n\n<p>With <code>A</code> <code>B</code> <code>C</code> and <code>D</code> being leaves of the tree, like <code>{\"info1\":\"value\", \"info2\":\"value2\"}</code></p>\n\n<p>There is an unknown level(depth) of dictionaries, it could be <code>{2:{\"c\":{\"z\":{\"y\":{C}}}}}</code></p>\n\n<p>In my case it represents a directory/files structure with nodes being docs and leaves being files.</p>\n\n<p>I want to merge them to obtain:</p>\n\n<pre><code> dict3 = {1:{\"a\":{A}}, 2:{\"b\":{B},\"c\":{C}}, 3:{\"d\":{D}}}\n</code></pre>\n\n<p>I'm not sure how I could do that easily with Python.</p>\n",
        "answer": "<p>this is actually quite tricky - particularly if you want a useful error message when things are inconsistent, while correctly accepting duplicate but consistent entries (something no other answer here does....)</p>\n\n<p>assuming you don't have huge numbers of entries a recursive function is easiest:</p>\n\n<pre><code>def merge(a, b, path=None):\n    \"merges b into a\"\n    if path is None: path = []\n    for key in b:\n        if key in a:\n            if isinstance(a[key], dict) and isinstance(b[key], dict):\n                merge(a[key], b[key], path + [str(key)])\n            elif a[key] == b[key]:\n                pass # same leaf value\n            else:\n                raise Exception('Conflict at %s' % '.'.join(path + [str(key)]))\n        else:\n            a[key] = b[key]\n    return a\n\n# works\nprint(merge({1:{\"a\":\"A\"},2:{\"b\":\"B\"}}, {2:{\"c\":\"C\"},3:{\"d\":\"D\"}}))\n# has conflict\nmerge({1:{\"a\":\"A\"},2:{\"b\":\"B\"}}, {1:{\"a\":\"A\"},2:{\"b\":\"C\"}})\n</code></pre>\n\n<p>note that this mutates <code>a</code> - the contents of <code>b</code> are added to <code>a</code> (which is also returned).  if you want to keep <code>a</code> you could call it like <code>merge(dict(a), b)</code>.</p>\n\n<p>agf pointed out (below) that you may have more than two dicts, in which case you can use:</p>\n\n<pre><code>reduce(merge, [dict1, dict2, dict3...])\n</code></pre>\n\n<p>where everything will be added to dict1.</p>\n\n<p>[note - i edited my initial answer to mutate the first argument; that makes the \"reduce\" easier to explain]</p>\n\n<p>ps in python 3, you will also need <code>from functools import reduce</code></p>\n"
    },
    "734": {
        "question_id": "3845018",
        "answer_id": "3845032",
        "question": "<p>I am confused as to when I should use a Boolean vs Bitwise operators</p>\n\n<pre><code>and vs &amp;, or vs |\n</code></pre>\n\n<p>Could someone enlighten me as to when do i use each and when will using one over the other affect my results? </p>\n",
        "answer": "<p>Here are a couple of guidelines:</p>\n\n<ul>\n<li>Boolean operators are usually used on <em>boolean</em> values but bitwise operators are usually used on <em>integer</em> values.</li>\n<li>Boolean operators are <em>short-circuiting</em> but bitwise operators are <em>not</em> short-circuiting.</li>\n</ul>\n\n<p>The short-circuiting behaviour is useful in expressions like this:</p>\n\n<pre><code>if x is not None and x.foo == 42:\n    # ...\n</code></pre>\n\n<p>This would not work correctly with the bitwise <code>&amp;</code> operator because both sides would always be evaluated, giving <code>AttributeError: 'NoneType' object has no attribute 'foo'</code>. When you use the boolean <code>and</code>operator the second expression is not evaluated when the first is False. Similarly <code>or</code> does not evaluate the second argument if the first is True.</p>\n"
    },
    "735": {
        "question_id": "1529002",
        "answer_id": "1529099",
        "question": "<p>So, I was playing around with Python while answering <a href=\"https://stackoverflow.com/questions/1528932/how-to-create-inline-objects-with-properties-in-python/\">this question</a>, and I discovered that this is not valid:</p>\n\n<pre><code>o = object()\no.attr = 'hello'\n</code></pre>\n\n<p>due to an <code>AttributeError: 'object' object has no attribute 'attr'</code>. However, with any class inherited from object, it is valid:</p>\n\n<pre><code>class Sub(object):\n    pass\n\ns = Sub()\ns.attr = 'hello'\n</code></pre>\n\n<p>Printing <code>s.attr</code> displays 'hello' as expected. Why is this the case? What in the Python language specification specifies that you can't assign attributes to vanilla objects?</p>\n",
        "answer": "<p>To support arbitrary attribute assignment, an object needs a <code>__dict__</code>: a dict associated with the object, where arbitrary attributes can be stored. Otherwise, there's nowhere to <em>put</em> new attributes.</p>\n\n<p>An instance of <code>object</code> does <strong>not</strong> carry around a <code>__dict__</code> -- if it did, before the horrible circular dependence problem (since <code>dict</code>, like most everything else, inherits from <code>object</code>;-), this would saddle <em>every</em> object in Python with a dict, which would mean an overhead of <em>many</em> bytes per object that currently doesn't have or need a dict (essentially, all objects that don't have arbitrarily assignable attributes don't have or need a dict).</p>\n\n<p>For example, using the excellent <code>pympler</code> project (you can get it via svn from <a href=\"http://code.google.com/p/pympler/source/checkout\" rel=\"noreferrer\">here</a>), we can do some measurements...:</p>\n\n<pre><code>&gt;&gt;&gt; from pympler import asizeof\n&gt;&gt;&gt; asizeof.asizeof({})\n144\n&gt;&gt;&gt; asizeof.asizeof(23)\n16\n</code></pre>\n\n<p>You wouldn't want every <code>int</code> to take up 144 bytes instead of just 16, right?-)</p>\n\n<p>Now, when you make a class (inheriting from whatever), things change...:</p>\n\n<pre><code>&gt;&gt;&gt; class dint(int): pass\n... \n&gt;&gt;&gt; asizeof.asizeof(dint(23))\n184\n</code></pre>\n\n<p>...the <code>__dict__</code> <em>is</em> now added (plus, a little more overhead) -- so a <code>dint</code> instance can have arbitrary attributes, but you pay quite a space cost for that flexibility.</p>\n\n<p>So what if you wanted <code>int</code>s with just <em>one</em> extra attribute <code>foobar</code>...? It's a rare need, but Python does offer a special mechanism for the purpose...</p>\n\n<pre><code>&gt;&gt;&gt; class fint(int):\n...   __slots__ = 'foobar',\n...   def __init__(self, x): self.foobar=x+100\n... \n&gt;&gt;&gt; asizeof.asizeof(fint(23))\n80\n</code></pre>\n\n<p>...not <em>quite</em> as tiny as an <code>int</code>, mind you! (or even the two <code>int</code>s, one the <code>self</code> and one the <code>self.foobar</code> -- the second one can be reassigned), but surely much better than a <code>dint</code>.</p>\n\n<p>When the class has the <code>__slots__</code> special attribute (a sequence of strings), then the <code>class</code> statement (more precisely, the default metaclass, <code>type</code>) does <strong>not</strong> equip every instance of that class with a <code>__dict__</code> (and therefore the ability to have arbitrary attributes), just a finite, rigid set of \"slots\" (basically places which can each hold one reference to some object) with the given names.</p>\n\n<p>In exchange for the lost flexibility, you gain a lot of bytes per instance (probably meaningful only if you have zillions of instances gallivanting around, but, there <em>are</em> use cases for that).</p>\n"
    },
    "736": {
        "question_id": "41369408",
        "answer_id": "41369646",
        "question": "<p>I'm trying to add or subtract from a defined variable, but I can't figure out how to overwrite the old value with the new one.</p>\n\n<pre><code>a = 15\n\ndef test():\n    a = a +10\n    print ( a )\n\ntest()\n</code></pre>\n\n<p>Error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Traceback (most recent call last):\n  File \"test.py\", line 7, in &lt;module&gt;\n    test()\n  File \"test.py\", line 4, in test\n    a = a +10\nUnboundLocalError: local variable 'a' referenced before assignment\n</code></pre>\n",
        "answer": "<p>The error that you get when you try to run your code is:</p>\n\n<pre><code>UnboundLocalError: local variable 'a' referenced before assignment\n</code></pre>\n\n<p>\u2026 which, on the face of it, seems strange: after all, the <em>first</em> statement in the code above (<code>a = 15</code>) is an assignment. So, what's going on?</p>\n\n<p>Actually, there are two distinct things happening, and neither of them are obvious unless you already know about them.</p>\n\n<p>First of all, you actually have two different variables:</p>\n\n<ul>\n<li><p>The <code>a</code> in your first line is a global variable (so called because it exists in the global scope, outside of any function definitions).</p></li>\n<li><p>The <code>a</code> in the other lines is a local variable, meaning that it only exists inside your <code>test()</code> function.</p></li>\n</ul>\n\n<p>These two variables are completely unrelated to each other, even though they have the same name.</p>\n\n<p>A variable is local to a function if there's a statement assigning to it inside that function - for instance, your <code>a = a +10</code> line.</p>\n\n<p>Even so, the error still looks strange - after all, the very first thing you do inside <code>test()</code> is assign to <code>a</code>, so how can it be referenced beforehand?</p>\n\n<p>The answer is that, in an assignment statement, Python evaluates everything on the right hand side of the <code>=</code> sign before assigning it to the name on the left hand side \u2013 so even though the assignment is <em>written</em> first in your code, <code>a</code> gets <em>referenced</em> first in that right hand side: <code>a +10</code>.</p>\n\n<p>There are two ways you can get around this. The first is to tell Python that you really want the <code>a</code> inside <code>test()</code> to be the same <code>a</code> in the global scope:</p>\n\n<pre><code>def test():\n    global a\n    a = a + 10\n    print(a)\n</code></pre>\n\n<p>This will work, but it's a pretty bad way to write programs. Altering global variables inside functions gets hard to manage really quickly, because you usually have lots of functions, and none of them can ever be sure that another one isn't messing with the global variable in some way they aren't expecting.</p>\n\n<p>A better way is to pass variables as arguments to functions, like this:</p>\n\n<pre><code>a = 15\n\ndef test(x):\n    x = x + 10\n    print(x)\n\ntest(a)\n</code></pre>\n\n<p>Notice that the name doesn't have to be the same - your new definition of <code>test()</code> just says that it accepts a value, and then does something with it. You can pass in anything you like \u2013 it could be <code>a</code>, or the number <code>7</code>, or something else. In fact, your code will always be easier to understand if you try to avoid having variables with the same name in different scopes.</p>\n\n<p>If you play with the code above, you'll notice something interesting:</p>\n\n<pre><code>&gt;&gt;&gt; a = 15\n&gt;&gt;&gt; test(a)\n25\n&gt;&gt;&gt; a\n15\n</code></pre>\n\n<p>\u2026 <code>a</code> didn't change! That's because although you passed it into <code>test()</code> and it got assigned to <code>x</code>, it was then <code>x</code> that got changed, leaving the original <code>a</code> alone.</p>\n\n<p>If you want to actually change <code>a</code>, you need to return your modified <code>x</code> from the function, and then reassign it back to <code>a</code> on the outside:</p>\n\n<pre><code>&gt;&gt;&gt; a = 15\n&gt;&gt;&gt; \n&gt;&gt;&gt; def test(x):\n...     x = x + 10\n...     print(x)\n...     return x\n... \n&gt;&gt;&gt; a = test(a)\n25\n&gt;&gt;&gt; a\n25\n</code></pre>\n"
    },
    "737": {
        "question_id": "1557571",
        "answer_id": "1557584",
        "question": "<p>I have a command line program in Python that takes a while to finish. I want to know the exact time it takes to finish running.</p>\n\n<p>I've looked at the <code>timeit</code> module, but it seems it's only for small snippets of code. I want to time the whole program.</p>\n",
        "answer": "<p>The simplest way in Python:</p>\n\n<pre><code>import time\nstart_time = time.time()\nmain()\nprint(\"--- %s seconds ---\" % (time.time() - start_time))\n</code></pre>\n\n<p>This assumes that your program takes at least a tenth of second to run.</p>\n\n<p>Prints:</p>\n\n<pre><code>--- 0.764891862869 seconds ---\n</code></pre>\n"
    },
    "738": {
        "question_id": "682504",
        "answer_id": "682513",
        "question": "<p>I can't find a definitive answer for this. AFAIK, you can't have multiple <code>__init__</code> functions in a Python class. So how do I solve this problem? </p>\n\n<p>Suppose I have an class called <code>Cheese</code> with the <code>number_of_holes</code> property. How can I have two ways of creating cheese-objects...</p>\n\n<ol>\n<li>one that takes a number of holes like this: <code>parmesan = Cheese(num_holes = 15)</code></li>\n<li>and one that takes no arguments and just randomizes the <code>number_of_holes</code> property: <code>gouda = Cheese()</code></li>\n</ol>\n\n<p>I can think of only one way to do this, but that seems kinda clunky:</p>\n\n<pre><code>class Cheese():\n    def __init__(self, num_holes = 0):\n        if (num_holes == 0):\n            # randomize number_of_holes\n        else:\n            number_of_holes = num_holes\n</code></pre>\n\n<p>What do you say? Is there another way?</p>\n",
        "answer": "<p>Actually <code>None</code> is much better for \"magic\" values:</p>\n\n<pre><code>class Cheese():\n    def __init__(self, num_holes = None):\n        if num_holes is None:\n            ...\n</code></pre>\n\n<p>Now if you want complete freedom of adding more parameters:</p>\n\n<pre><code>class Cheese():\n    def __init__(self, *args, **kwargs):\n        #args -- tuple of anonymous arguments\n        #kwargs -- dictionary of named arguments\n        self.num_holes = kwargs.get('num_holes',random_holes())\n</code></pre>\n\n<p>To better explain the concept of <code>*args</code> and <code>**kwargs</code> (you can actually change these names):</p>\n\n<pre><code>def f(*args, **kwargs):\n   print 'args: ', args, ' kwargs: ', kwargs\n\n&gt;&gt;&gt; f('a')\nargs:  ('a',)  kwargs:  {}\n&gt;&gt;&gt; f(ar='a')\nargs:  ()  kwargs:  {'ar': 'a'}\n&gt;&gt;&gt; f(1,2,param=3)\nargs:  (1, 2)  kwargs:  {'param': 3}\n</code></pre>\n\n<p><a href=\"http://docs.python.org/reference/expressions.html#calls\" rel=\"noreferrer\">http://docs.python.org/reference/expressions.html#calls</a></p>\n"
    },
    "739": {
        "question_id": "308999",
        "answer_id": "309000",
        "question": "<p>In a comment on this <a href=\"https://stackoverflow.com/questions/306130/python-decorator-makes-function-forget-that-it-belongs-to-a-class#306277\">answer to another question</a>, someone said that they weren't sure what <code>functools.wraps</code> was doing. So, I'm asking this question so that there will be a record of it on StackOverflow for future reference: what does <code>functools.wraps</code> do, exactly?</p>\n",
        "answer": "<p>When you use a decorator, you're replacing one function with another.  In other words, if you have a decorator</p>\n\n<pre><code>def logged(func):\n    def with_logging(*args, **kwargs):\n        print(func.__name__ + \" was called\")\n        return func(*args, **kwargs)\n    return with_logging\n</code></pre>\n\n<p>then when you say</p>\n\n<pre><code>@logged\ndef f(x):\n   \"\"\"does some math\"\"\"\n   return x + x * x\n</code></pre>\n\n<p>it's exactly the same as saying</p>\n\n<pre><code>def f(x):\n    \"\"\"does some math\"\"\"\n    return x + x * x\nf = logged(f)\n</code></pre>\n\n<p>and your function <code>f</code> is replaced with the function with_logging.  Unfortunately, this means that if you then say</p>\n\n<pre><code>print(f.__name__)\n</code></pre>\n\n<p>it will print <code>with_logging</code> because that's the name of your new function.  In fact, if you look at the docstring for <code>f</code>, it will be blank because <code>with_logging</code> has no docstring, and so the docstring you wrote won't be there anymore.  Also, if you look at the pydoc result for that function, it won't be listed as taking one argument <code>x</code>; instead it'll be listed as taking <code>*args</code> and <code>**kwargs</code> because that's what with_logging takes.</p>\n\n<p>If using a decorator always meant losing this information about a function, it would be a serious problem.  That's why we have <code>functools.wraps</code>.  This takes a function used in a decorator and adds the functionality of copying over the function name, docstring, arguments list, etc.  And since <code>wraps</code> is itself a decorator, the following code does the correct thing:</p>\n\n<pre><code>from functools import wraps\ndef logged(func):\n    @wraps(func)\n    def with_logging(*args, **kwargs):\n        print(func.__name__ + \" was called\")\n        return func(*args, **kwargs)\n    return with_logging\n\n@logged\ndef f(x):\n   \"\"\"does some math\"\"\"\n   return x + x * x\n\nprint(f.__name__)  # prints 'f'\nprint(f.__doc__)   # prints 'does some math'\n</code></pre>\n"
    },
    "740": {
        "question_id": "5844869",
        "answer_id": "5844931",
        "question": "<p>I've been hearing the buzz about virtualenv lately, and I'm interested. But all I've heard is a smattering of praise, and don't have a clear understanding of what it is or how to use it.</p>\n\n<p>I'm looking for (ideally) a follow-along tutorial that can take me from Windows or Linux with no Python on it, and explain every step of (in no particular order):</p>\n\n<ul>\n<li>what I should do to be able to start using <code>virtualenv</code></li>\n<li>specific reasons why using <code>virtualenv</code> is a good idea</li>\n<li>situations where I can/can't use <code>virtualenv</code></li>\n<li>situations where I should/shouldn't use <code>virtualenv</code></li>\n</ul>\n\n<p>And step through (comprehensively) a couple sample situations of the should+can variety.</p>\n\n<p>So what are some good tutorials to cover this stuff? Or if you have the time and interest, perhaps you can answer a few of those questions here. Either in your answer, or as a link to tutorials that answer it, these are the things I'd like to know.</p>\n",
        "answer": "<p>This is very good: <a href=\"http://simononsoftware.com/virtualenv-tutorial-part-2/\" rel=\"noreferrer\">http://simononsoftware.com/virtualenv-tutorial-part-2/</a></p>\n\n<p>And this is a slightly more practical one: <a href=\"https://web.archive.org/web/20160404222648/https://iamzed.com/2009/05/07/a-primer-on-virtualenv/\" rel=\"noreferrer\">https://web.archive.org/web/20160404222648/https://iamzed.com/2009/05/07/a-primer-on-virtualenv/</a></p>\n"
    },
    "741": {
        "question_id": "3798835",
        "answer_id": "3798882",
        "question": "<p>I am <em>trying</em> to understand what Python's descriptors are and what they can be useful for. However, I am failing at it. I understand how they work, but here are my doubts. Consider the following code:</p>\n\n<pre><code>class Celsius(object):\n    def __init__(self, value=0.0):\n        self.value = float(value)\n    def __get__(self, instance, owner):\n        return self.value\n    def __set__(self, instance, value):\n        self.value = float(value)\n\n\nclass Temperature(object):\n    celsius = Celsius()\n</code></pre>\n\n<ol>\n<li><p>Why do I need the descriptor class?</p></li>\n<li><p>What is <code>instance</code> and <code>owner</code> here? (in <code>__get__</code>). What is the purpose of these parameters?</p></li>\n<li><p>How would I call/use this example?</p></li>\n</ol>\n",
        "answer": "<p>The descriptor is how Python's <code>property</code> type is implemented. A descriptor simply implements <code>__get__</code>, <code>__set__</code>, etc. and is then added to another class in its definition (as you did above with the Temperature class). For example:</p>\n\n<pre><code>temp=Temperature()\ntemp.celsius #calls celsius.__get__\n</code></pre>\n\n<p>Accessing the property you assigned the descriptor to (<code>celsius</code> in the above example) calls the appropriate descriptor method.</p>\n\n<p><code>instance</code> in <code>__get__</code> is the instance of the class (so above, <code>__get__</code> would receive <code>temp</code>, while <code>owner</code> is the class with the descriptor (so it would be <code>Temperature</code>).</p>\n\n<p>You need to use a descriptor class to encapsulate the logic that powers it. That way, if the descriptor is used to cache some expensive operation (for example), it could store the value on itself and not its class.</p>\n\n<p>An article about descriptors can be found <a href=\"http://martyalchin.com/2007/nov/23/python-descriptors-part-1-of-2/\" rel=\"noreferrer\">here</a>.</p>\n\n<p>EDIT: As jchl pointed out in the comments, if you simply try <code>Temperature.celsius</code>, <code>instance</code> will be <code>None</code>.</p>\n"
    },
    "742": {
        "question_id": "12897374",
        "answer_id": "12897477",
        "question": "<p>I want to get the unique values from the following list:</p>\n\n<pre><code>[u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenandnow']\n</code></pre>\n\n<p>The output which I require is:</p>\n\n<pre><code>[u'nowplaying', u'PBS', u'job', u'debate', u'thenandnow']\n</code></pre>\n\n<p>This code works:</p>\n\n<pre><code>output = []\nfor x in trends:\n    if x not in output:\n        output.append(x)\nprint output\n</code></pre>\n\n<p>is there a better solution I should use?</p>\n",
        "answer": "<p>First declare your list properly, separated by commas. You can get the unique values by converting the list to a set.</p>\n\n<pre><code>mylist = [u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenandnow']\nmyset = set(mylist)\nprint(myset)\n</code></pre>\n\n<p>If you use it further as a list, you should convert it back to list by doing:</p>\n\n<pre><code>mynewlist = list(myset)\n</code></pre>\n\n<p>Another possibility, probably faster would be to use a set from the beginning, instead of a list. Then your code should be:</p>\n\n<pre><code>output = set()\nfor x in trends:\n    output.add(x)\nprint(output)\n</code></pre>\n\n<p>As it has been pointed out, the sets do not maintain the original order. If you need so, you should look up about the <a href=\"http://code.activestate.com/recipes/576694/\" rel=\"noreferrer\">ordered set</a>.</p>\n"
    },
    "743": {
        "question_id": "743164",
        "answer_id": "743186",
        "question": "<p>I need to emulate a do-while loop in a Python program. Unfortunately, the following straightforward code does not work:</p>\n\n<pre><code>list_of_ints = [ 1, 2, 3 ]\niterator = list_of_ints.__iter__()\nelement = None\n\nwhile True:\n  if element:\n    print element\n\n  try:\n    element = iterator.next()\n  except StopIteration:\n    break\n\nprint \"done\"\n</code></pre>\n\n<p>Instead of \"1,2,3,done\", it prints the following output:</p>\n\n<pre><code>[stdout:]1\n[stdout:]2\n[stdout:]3\nNone['Traceback (most recent call last):\n', '  File \"test_python.py\", line 8, in &lt;module&gt;\n    s = i.next()\n', 'StopIteration\n']\n</code></pre>\n\n<p>What can I do in order to catch the 'stop iteration' exception and break a while\nloop properly?</p>\n\n<p>An example of why such a thing may be needed is shown below as pseudocode.</p>\n\n<p>State machine:</p>\n\n<pre><code>s = \"\"\nwhile True :\n  if state is STATE_CODE :\n    if \"//\" in s :\n      tokens.add( TOKEN_COMMENT, s.split( \"//\" )[1] )\n      state = STATE_COMMENT\n    else :\n      tokens.add( TOKEN_CODE, s )\n  if state is STATE_COMMENT :\n    if \"//\" in s :\n      tokens.append( TOKEN_COMMENT, s.split( \"//\" )[1] )\n    else\n      state = STATE_CODE\n      # Re-evaluate same line\n      continue\n  try :\n    s = i.next()\n  except StopIteration :\n    break\n</code></pre>\n",
        "answer": "<p>I am not sure what you are trying to do. You can implement a do-while loop like this:</p>\n\n<pre><code>while True:\n  stuff()\n  if fail_condition:\n    break\n</code></pre>\n\n<p>Or:</p>\n\n<pre><code>stuff()\nwhile not fail_condition:\n  stuff()\n</code></pre>\n\n<p>What are you doing trying to use a do while loop to print the stuff in the list? Why not just use:</p>\n\n<pre><code>for i in l:\n  print i\nprint \"done\"\n</code></pre>\n\n<p>Update:</p>\n\n<p>So do you have a list of lines? And you want to keep iterating through it? How about: </p>\n\n<pre><code>for s in l: \n  while True: \n    stuff() \n    # use a \"break\" instead of s = i.next()\n</code></pre>\n\n<p>Does that seem like something close to what you would want? With your code example, it would be:</p>\n\n<pre><code>for s in some_list:\n  while True:\n    if state is STATE_CODE:\n      if \"//\" in s:\n        tokens.add( TOKEN_COMMENT, s.split( \"//\" )[1] )\n        state = STATE_COMMENT\n      else :\n        tokens.add( TOKEN_CODE, s )\n    if state is STATE_COMMENT:\n      if \"//\" in s:\n        tokens.append( TOKEN_COMMENT, s.split( \"//\" )[1] )\n        break # get next s\n      else:\n        state = STATE_CODE\n        # re-evaluate same line\n        # continues automatically\n</code></pre>\n"
    },
    "744": {
        "question_id": "1987694",
        "answer_id": "1988024",
        "question": "<p>When I print a numpy array, I get a truncated representation, but I want the full array. </p>\n\n<p>Is there any way to do this?</p>\n\n<p><strong>Examples:</strong></p>\n\n<pre><code>&gt;&gt;&gt; numpy.arange(10000)\narray([   0,    1,    2, ..., 9997, 9998, 9999])\n\n&gt;&gt;&gt; numpy.arange(10000).reshape(250,40)\narray([[   0,    1,    2, ...,   37,   38,   39],\n       [  40,   41,   42, ...,   77,   78,   79],\n       [  80,   81,   82, ...,  117,  118,  119],\n       ..., \n       [9880, 9881, 9882, ..., 9917, 9918, 9919],\n       [9920, 9921, 9922, ..., 9957, 9958, 9959],\n       [9960, 9961, 9962, ..., 9997, 9998, 9999]])\n</code></pre>\n",
        "answer": "<p>Use <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.set_printoptions.html\" rel=\"noreferrer\"><code>numpy.set_printoptions</code></a>:</p>\n\n<pre><code>import sys\nimport numpy\nnumpy.set_printoptions(threshold=sys.maxsize)\n</code></pre>\n"
    },
    "745": {
        "question_id": "3387691",
        "answer_id": "3387975",
        "question": "<p>How can I make as \"perfect\" a subclass of <em>dict</em> as possible? The end goal is to have a simple <em>dict</em> in which the keys are lowercase.</p>\n\n<p>It would seem that there should be some tiny set of primitives I can override to make this work, but according to all my research and attempts it seem like this isn't the case:</p>\n\n<ul>\n<li><p>If I <a href=\"https://stackoverflow.com/a/2390889\">override <code>__getitem__</code>/<code>__setitem__</code></a>, then <code>get</code>/<code>set</code> don't work.    How can I make them work?  Surely I don't need to implement them individually?</p></li>\n<li><p>Am I preventing pickling from working, and do I need to implement <code>__setstate__</code> etc?</p></li>\n<li><p>Do I <a href=\"https://stackoverflow.com/a/2390997\">need <code>repr</code>, <code>update</code> and <code>__init__</code></a>?</p></li>\n<li><p>Should I just <a href=\"https://stackoverflow.com/a/1622872\">use mutablemapping</a> (it seems one shouldn't use <code>UserDict</code>\nor <code>DictMixin</code>)?  If so, how? The docs aren't exactly enlightening.</p></li>\n</ul>\n\n<p>Here is my first go at it, <code>get()</code> doesn't work and no doubt there are many other minor problems:</p>\n\n<pre><code>class arbitrary_dict(dict):\n    \"\"\"A dictionary that applies an arbitrary key-altering function\n       before accessing the keys.\"\"\"\n\n    def __keytransform__(self, key):\n        return key\n\n    # Overridden methods. List from \n    # https://stackoverflow.com/questions/2390827/how-to-properly-subclass-dict\n\n    def __init__(self, *args, **kwargs):\n        self.update(*args, **kwargs)\n\n    # Note: I'm using dict directly, since super(dict, self) doesn't work.\n    # I'm not sure why, perhaps dict is not a new-style class.\n\n    def __getitem__(self, key):\n        return dict.__getitem__(self, self.__keytransform__(key))\n\n    def __setitem__(self, key, value):\n        return dict.__setitem__(self, self.__keytransform__(key), value)\n\n    def __delitem__(self, key):\n        return dict.__delitem__(self, self.__keytransform__(key))\n\n    def __contains__(self, key):\n        return dict.__contains__(self, self.__keytransform__(key))\n\n\nclass lcdict(arbitrary_dict):\n    def __keytransform__(self, key):\n        return str(key).lower()\n</code></pre>\n",
        "answer": "<p>You can write an object that behaves like a dict quite easily with <a href=\"http://docs.python.org/library/abc.html\" rel=\"noreferrer\">ABC</a>s\n(Abstract Base Classes) from the <a href=\"http://docs.python.org/2/library/collections.html\" rel=\"noreferrer\">collections</a> module.  It even tells you\nif you missed a method, so below is the minimal version that shuts the ABC up.</p>\n\n<pre><code>import collections\n\n\nclass TransformedDict(collections.MutableMapping):\n    \"\"\"A dictionary that applies an arbitrary key-altering\n       function before accessing the keys\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        self.store = dict()\n        self.update(dict(*args, **kwargs))  # use the free update to set keys\n\n    def __getitem__(self, key):\n        return self.store[self.__keytransform__(key)]\n\n    def __setitem__(self, key, value):\n        self.store[self.__keytransform__(key)] = value\n\n    def __delitem__(self, key):\n        del self.store[self.__keytransform__(key)]\n\n    def __iter__(self):\n        return iter(self.store)\n\n    def __len__(self):\n        return len(self.store)\n\n    def __keytransform__(self, key):\n        return key\n</code></pre>\n\n<p>You get a few free methods from the ABC:</p>\n\n<pre><code>class MyTransformedDict(TransformedDict):\n\n    def __keytransform__(self, key):\n        return key.lower()\n\n\ns = MyTransformedDict([('Test', 'test')])\n\nassert s.get('TEST') is s['test']   # free get\nassert 'TeSt' in s                  # free __contains__\n                                    # free setdefault, __eq__, and so on\n\nimport pickle\nassert pickle.loads(pickle.dumps(s)) == s\n                                    # works too since we just use a normal dict\n</code></pre>\n\n<p>I wouldn't subclass <code>dict</code> (or other builtins) directly. It often makes no sense, because what you actually want to do is <em>implement the interface of a dict</em>. And that is exactly what ABCs are for.</p>\n"
    },
    "746": {
        "question_id": "14149422",
        "answer_id": "14188155",
        "question": "<p>I am trying to use pip behind a proxy at work.</p>\n\n<p>One of the answers from <a href=\"https://stackoverflow.com/questions/9698557/how-to-use-pip-on-windows-behind-an-authenticating-proxy\">this post</a> suggested using <a href=\"http://cntlm.sourceforge.net/\" rel=\"noreferrer\">CNTLM</a>. I installed and configured it per <a href=\"https://stackoverflow.com/questions/9181637/how-to-fill-proxy-information-in-cntlm-config-file\">this other post</a>, but running <code>cntlm.exe -c cntlm.ini -I -M http://google.com</code> gave the error <code>Connection to proxy failed, bailing out</code>.</p>\n\n<p>I also tried <code>pip install -\u2013proxy=user:pass@localhost:3128</code> (the default CNTLM port) but that raised <code>Cannot fetch index base URL http://pypi.python.org/simple/</code>. Clearly something's up with the proxy.</p>\n\n<p>Does anyone know how to check more definitively whether CNTLM is set up right, or if there's another way around this altogether? I know you can also set the <code>http_proxy</code> environment variable as described <a href=\"https://stackoverflow.com/questions/11726881/how-to-set-an-http-proxy-in-python-2-7\">here</a> but I'm not sure what credentials to put in. The ones from <code>cntlm.ini</code>?</p>\n",
        "answer": "<p>To setup CNTLM for windows, follow this <a href=\"http://stormpoopersmith.com/2012/03/20/using-applications-behind-a-corporate-proxy/\" rel=\"noreferrer\">article</a>. For Ubuntu, read <a href=\"http://annelagang.blogspot.com/2012/11/installing-gems-in-ubuntu-1204-using.html\" rel=\"noreferrer\">my blog post</a>. </p>\n\n<p><strong>Edit:</strong></p>\n\n<p>Basically, to use CNTLM in any platform, you need to setup your username and <em>hashed</em> password, before using <code>http://127.0.0.1:3128</code> as a proxy to your parent proxy.</p>\n\n<ol>\n<li><p>Edit the config and add important information like domain, username, password and parent proxy. </p></li>\n<li><p>Generate hashed password.</p>\n\n<p><strong>Windows</strong> <code>cntlm \u2013c cntlm.ini \u2013H</code></p>\n\n<p><strong>Ubuntu/Linux</strong> <code>cntlm -v -H -c /etc/cntlm.conf</code></p></li>\n<li><p>Remove plain text password from the config and replace them with the generated passwords.</p></li>\n</ol>\n\n<p>To check if working:</p>\n\n<p><strong>Windows</strong> <code>cntlm \u2013M http://www.google.com</code></p>\n\n<p><strong>Ubuntu/Linux</strong> <code>sudo cntlm -M http://www.google.com/</code></p>\n\n<p>For more detailed instructions, see links above.</p>\n\n<p><strong>Update:</strong> </p>\n\n<p>Just for completeness sake, I was able to configure and use CNTLM in Windows recently. I encountered a problem during the syncing process of Kindle for PC because of our proxy and installing and configuring CNTLM for Windows fixed that issue for me. Refer to <a href=\"http://annelagang.blogspot.com/2014/01/register-and-download-books-using.html\" rel=\"noreferrer\">my article</a> for more details. </p>\n"
    },
    "747": {
        "question_id": "1405913",
        "answer_id": "1405971",
        "question": "<p>I need a way to tell what mode the shell is in from within the shell.  </p>\n\n<p>I've tried looking at the <a href=\"http://docs.python.org/library/platform.html\" rel=\"noreferrer\">platform</a> module but it seems only to tell you about \"about the bit architecture and the linkage format used for the executable\": the binary is compiled as 64bit though (I'm running on OS X 10.6) so it seems to always report 64bit even though I'm using the methods <a href=\"https://developer.apple.com/mac/library/documentation/Darwin/Reference/ManPages/man1/python.1.html\" rel=\"noreferrer\">described here</a> to force 32bit mode).</p>\n",
        "answer": "<p>UPDATED:\nOne way is to look at <code>sys.maxsize</code> as documented <a href=\"http://docs.python.org/library/platform.html#cross-platform\" rel=\"noreferrer\">here</a>:</p>\n\n<pre><code>$ python-32 -c 'import sys;print(\"%x\" % sys.maxsize, sys.maxsize &gt; 2**32)'\n('7fffffff', False)\n$ python-64 -c 'import sys;print(\"%x\" % sys.maxsize, sys.maxsize &gt; 2**32)'\n('7fffffffffffffff', True)\n</code></pre>\n\n<p><code>sys.maxsize</code> was introduced in Python 2.6.  If you need a test for older systems, this slightly more complicated test should work on all Python 2 and 3 releases:</p>\n\n<pre><code>$ python-32 -c 'import struct;print( 8 * struct.calcsize(\"P\"))'\n32\n$ python-64 -c 'import struct;print( 8 * struct.calcsize(\"P\"))'\n64\n</code></pre>\n\n<p>BTW, you might be tempted to use <code>platform.architecture()</code> for this.  Unfortunately, its results are not always reliable, <a href=\"http://docs.python.org/library/platform.html#platform.architecture\" rel=\"noreferrer\">particularly in the case of OS X universal binaries</a>.</p>\n\n<pre><code>$ arch -x86_64 /usr/bin/python2.6 -c 'import sys,platform; print platform.architecture()[0], sys.maxsize &gt; 2**32'\n64bit True\n$ arch -i386 /usr/bin/python2.6 -c 'import sys,platform; print platform.architecture()[0], sys.maxsize &gt; 2**32'\n64bit False\n</code></pre>\n"
    },
    "748": {
        "question_id": "276052",
        "answer_id": "2468983",
        "question": "<p>What's your preferred way of getting current system status (current CPU, RAM, free disk space, etc.) in Python? Bonus points for *nix and Windows platforms.</p>\n\n<p>There seems to be a few possible ways of extracting that from my search:</p>\n\n<ol>\n<li><p>Using a library such as <a href=\"http://www.psychofx.com/psi/trac/wiki/\">PSI</a> (that currently seems not actively developed and not supported on multiple platform) or something like <a href=\"http://www.i-scream.org/pystatgrab/\">pystatgrab</a> (again no activity since 2007 it seems and no support for Windows).</p></li>\n<li><p>Using platform specific code such as using a <code>os.popen(\"ps\")</code> or similar for the *nix systems and <code>MEMORYSTATUS</code> in <code>ctypes.windll.kernel32</code> (see <a href=\"http://code.activestate.com/recipes/511491/\">this recipe on ActiveState</a>) for the Windows platform. One could put a Python class together with all those code snippets.</p></li>\n</ol>\n\n<p>It's not that those methods are bad but is there already a well-supported, multi-platform way of doing the same thing?</p>\n",
        "answer": "<p><a href=\"https://pypi.python.org/pypi/psutil\" rel=\"noreferrer\">The psutil library</a> will give you some system information (CPU / Memory usage) on a variety of platforms:</p>\n\n<blockquote>\n  <p>psutil is a module providing an interface for retrieving information on running processes and system utilization (CPU, memory) in a portable way by using Python, implementing many functionalities offered by tools like ps, top  and Windows task manager.</p>\n  \n  <p>It currently supports Linux, Windows, OSX, Sun Solaris, FreeBSD, OpenBSD and NetBSD, both 32-bit and 64-bit architectures, with Python versions from 2.6 to 3.5 (users of Python 2.4 and 2.5 may use 2.1.3 version).</p>\n</blockquote>\n\n<hr>\n\n<p>UPDATE: Here is some example usages of <code>psutil</code>:</p>\n\n<pre><code>#!/usr/bin/env python\nimport psutil\n# gives a single float value\npsutil.cpu_percent()\n# gives an object with many fields\npsutil.virtual_memory()\n# you can convert that object to a dictionary \ndict(psutil.virtual_memory()._asdict())\n</code></pre>\n"
    },
    "749": {
        "question_id": "798854",
        "answer_id": "798893",
        "question": "<p>I'm basically looking for a python version of <a href=\"https://stackoverflow.com/questions/545703/combination-of-listlistint\">Combination of <code>List&lt;List&lt;int&gt;&gt;</code></a></p>\n\n<p>Given a list of lists, I need a new list that gives all the possible combinations of items between the lists.</p>\n\n<pre><code>[[1,2,3],[4,5,6],[7,8,9,10]] -&gt; [[1,4,7],[1,4,8],...,[3,6,10]]\n</code></pre>\n\n<p>The number of lists is unknown, so I need something that works for all cases. Bonus points for elegance!</p>\n",
        "answer": "<p>you need <a href=\"https://docs.python.org/2/library/itertools.html#itertools.product\" rel=\"noreferrer\"><code>itertools.product</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; a = [[1,2,3],[4,5,6],[7,8,9,10]]\n&gt;&gt;&gt; list(itertools.product(*a))\n[(1, 4, 7), (1, 4, 8), (1, 4, 9), (1, 4, 10), (1, 5, 7), (1, 5, 8), (1, 5, 9), (1, 5, 10), (1, 6, 7), (1, 6, 8), (1, 6, 9), (1, 6, 10), (2, 4, 7), (2, 4, 8), (2, 4, 9), (2, 4, 10), (2, 5, 7), (2, 5, 8), (2, 5, 9), (2, 5, 10), (2, 6, 7), (2, 6, 8), (2, 6, 9), (2, 6, 10), (3, 4, 7), (3, 4, 8), (3, 4, 9), (3, 4, 10), (3, 5, 7), (3, 5, 8), (3, 5, 9), (3, 5, 10), (3, 6, 7), (3, 6, 8), (3, 6, 9), (3, 6, 10)]\n</code></pre>\n"
    },
    "750": {
        "question_id": "6999726",
        "answer_id": "11111177",
        "question": "<p>I have a Python <code>datetime</code> object that I want to convert to unix time, or seconds/milliseconds since the 1970 epoch.</p>\n\n<p>How do I do this?</p>\n",
        "answer": "<p>It appears to me that the simplest way to do this is</p>\n\n<pre><code>import datetime\n\nepoch = datetime.datetime.utcfromtimestamp(0)\n\ndef unix_time_millis(dt):\n    return (dt - epoch).total_seconds() * 1000.0\n</code></pre>\n"
    },
    "751": {
        "question_id": "2233204",
        "answer_id": "2233247",
        "question": "<pre><code>s = [1,2,3,4,5,6,7,8,9]\nn = 3\n\nzip(*[iter(s)]*n) # returns [(1,2,3),(4,5,6),(7,8,9)]\n</code></pre>\n\n<p>How does <code>zip(*[iter(s)]*n)</code> work?  What would it look like if it was written with more verbose code?</p>\n",
        "answer": "<p><a href=\"https://docs.python.org/2/library/functions.html#iter\" rel=\"noreferrer\"><code>iter()</code></a> is an iterator over a sequence. <code>[x] * n</code> produces a list containing <code>n</code> quantity of <code>x</code>, i.e. a list of length <code>n</code>, where each element is <code>x</code>. <code>*arg</code> unpacks a sequence into arguments for a function call. Therefore you're passing the same iterator 3 times to <a href=\"https://docs.python.org/2/library/functions.html#zip\" rel=\"noreferrer\"><code>zip()</code></a>, and it pulls an item from the iterator each time.</p>\n\n<pre><code>x = iter([1,2,3,4,5,6,7,8,9])\nprint zip(x, x, x)\n</code></pre>\n"
    },
    "752": {
        "question_id": "5685406",
        "answer_id": "5685816",
        "question": "<p>I'm trying to create an application in Python 3.2 and I use tabs all the time for indentation, but even the editor changes some of them into spaces and then print out \"inconsistent use of tabs and spaces in indentation\" when I try to run the program.</p>\n\n<p>How can I change the spaces into tabs? It's driving me crazy. (I'm a beginner in programming). I would be glad if I could get some overall tips on my code, if I have done a lot of mistakes I would be happy to hear.</p>\n\n<pre><code>import random\n\nattraktioner = [\"frittfall\",\"bergodalbana\",\"sp\u00f6khuset\"]\n\n\nclass Nojesfalt:\n    def __init__(self, attraktion):\n        self.val = attraktion\n        self.langd = 0\n        self.alder = 0\n\n\n#l\u00e4ngdgr\u00e4ns f\u00f6r fritt fall\n    def langdgrans(self):\n        print(\"\")\n        self.langd = int(input(\"Hur l\u00e5ng \u00e4r du i cm? \"))\n        if self.langd &lt; 140:\n            print(\"tyv\u00e4rr, du \u00e4r f\u00f6r kort, prova n\u00e5got annat\")\n            return 0\n        elif self.langd &gt;= 140:\n            print(\"h\u00e5ll dig hatten, nu \u00e5ker vi!\")\n            print(\" \")\n            return 1\n\n#\u00e5ldersgr\u00e4ns f\u00f6r sp\u00f6khuset\n    def aldersgrans(self):\n        print(\"\")\n        self.alder = int(input(\"Hur gammal \u00e4r du? \"))\n        if self.alder &lt; 10:\n            print(\"tyv\u00e4rr, du \u00e4r f\u00f6r ung, prova n\u00e5got annat\")\n            return 0\n        elif self.alder &gt;= 10:\n            print(\"G\u00e5 in om du t\u00f6rs!\")\n            print(\" \")\n            return 1\n\n\n#\u00e5ker attraktion frittfall lr bergodalbana\n        def aka(self):\n                print(\"\")\n        print(self.val)\n        tal = random.randint(0,100)\n        if tal &lt; 20:\n            print(\"\u00e5kturen gick \u00e5t skogen, b\u00e4ttre lycka n\u00e4sta g\u00e5ng\")\n        elif tal &gt;= 20:\n            print(\"jabbadabbbadoooooooo\")\n            return 1\n\n#g\u00e5r i sp\u00f6khuset\n        def aka1(self):\n                print(\"\")\n        print(self.val)\n        tal = random.randint(0,100)\n        if tal &lt; 20:\n            print(\"du \u00e4r omringad av sp\u00f6ken och kan inte forts\u00e4tta\")            return 0\n        elif tal &gt;= 20:\n            print(\"Buhuuuuuu, buuuhuuuu\")\n            return 1\n\n#programkod\nprint(\"V\u00e4lkommen till n\u00f6jesf\u00e4ltet, vad vill du g\u00f6ra?\")\nprint(\" \")\n\nwhile 1:\n    vald_attr = input(\"Vad vill du g\u00f6ra?\\n1. frittfall\\n2. bergodalbana\\n3. sp\u00f6khuset\\n4. Avsluta\\n\")\n    if vald_attr == \"1\":\n        val = Nojesfalt(attraktioner[0])\n        if val.langdgrans() == 1:\n            val.aka()\n    elif vald_attr == \"2\":\n        val = Nojesfalt(attraktioner[1])\n        val.aka()\n    elif vald_attr == \"3\":\n        val = Nojesfalt(attraktioner[2])\n        if val.aldersgrans() == 1:\n            val.aka1()\n    elif vald_attr == \"4\":\n        break\n</code></pre>\n",
        "answer": "<p>Don't use tabs.</p>\n\n<ol>\n<li>Set your editor to use 4 <strong>spaces</strong> for indentation.</li>\n<li>Make a search and replace to replace all tabs with 4 spaces.</li>\n<li>Make sure your editor is set to <strong>display</strong> tabs as 8 spaces.</li>\n</ol>\n\n<p>Note: The reason for 8 spaces for tabs is so that you immediately notice when tabs have been inserted unintentionally - such as when copying and pasting from example code that uses tabs instead of spaces.</p>\n"
    },
    "753": {
        "question_id": "28901683",
        "answer_id": "28902170",
        "question": "<p>I've two pandas data frames which have some rows in common.</p>\n\n<p>Suppose dataframe2 is a subset of dataframe1.</p>\n\n<p><strong>How can I get the rows of dataframe1 which are not in dataframe2?</strong></p>\n\n<pre><code>df1 = pandas.DataFrame(data = {'col1' : [1, 2, 3, 4, 5], 'col2' : [10, 11, 12, 13, 14]}) \ndf2 = pandas.DataFrame(data = {'col1' : [1, 2, 3], 'col2' : [10, 11, 12]})\n</code></pre>\n",
        "answer": "<p>One method would be to store the result of an inner merge form both dfs, then we can simply select the rows when one column's values are not in this common:</p>\n\n<pre><code>In [119]:\n\ncommon = df1.merge(df2,on=['col1','col2'])\nprint(common)\ndf1[(~df1.col1.isin(common.col1))&amp;(~df1.col2.isin(common.col2))]\n   col1  col2\n0     1    10\n1     2    11\n2     3    12\nOut[119]:\n   col1  col2\n3     4    13\n4     5    14\n</code></pre>\n\n<p><strong>EDIT</strong></p>\n\n<p>Another method as you've found is to use <code>isin</code> which will produce <code>NaN</code> rows which you can drop:</p>\n\n<pre><code>In [138]:\n\ndf1[~df1.isin(df2)].dropna()\nOut[138]:\n   col1  col2\n3     4    13\n4     5    14\n</code></pre>\n\n<p>However if df2 does not start rows in the same manner then this won't work:</p>\n\n<pre><code>df2 = pd.DataFrame(data = {'col1' : [2, 3,4], 'col2' : [11, 12,13]})\n</code></pre>\n\n<p>will produce the entire df:</p>\n\n<pre><code>In [140]:\n\ndf1[~df1.isin(df2)].dropna()\nOut[140]:\n   col1  col2\n0     1    10\n1     2    11\n2     3    12\n3     4    13\n4     5    14\n</code></pre>\n"
    },
    "754": {
        "question_id": "10944621",
        "answer_id": "10944967",
        "question": "<p>I am making an application in Python which collects data from a serial port and plots a graph of the collected data against arrival time. The time of arrival for the data is uncertain. I want the plot to be updated when data is received. I searched on how to do this and found two methods:</p>\n\n<ol>\n<li>Clear the plot and re-draw the plot with all the points again.</li>\n<li>Animate the plot by changing it after a particular interval.</li>\n</ol>\n\n<p>I do not prefer the first one as the program runs and collects data for a long time (a day for example), and redrawing the plot will be pretty slow.\nThe second one is also not preferable as time of arrival of data is uncertain and I want the plot to update only when the data is received.</p>\n\n<p>Is there a way in which I can update the plot just by adding more points to it only when the data is received?</p>\n",
        "answer": "<blockquote>\n  <p><em>Is there a way in which I can update the plot just by adding more point[s] to it...</em></p>\n</blockquote>\n\n<p>There are a number of ways of animating data in matplotlib, depending on the version you have. Have you seen the <a href=\"http://www.scipy.org/Cookbook/Matplotlib/Animations\">matplotlib cookbook</a> examples? Also, check out the more modern <a href=\"http://matplotlib.sourceforge.net/examples/animation/index.html\">animation examples</a> in the matplotlib documentation. Finally, the <a href=\"http://matplotlib.sourceforge.net/api/animation_api.html\">animation API</a> defines a function <a href=\"http://matplotlib.sourceforge.net/api/animation_api.html#matplotlib.animation.FuncAnimation\">FuncAnimation</a> which animates a function in time. This function could just be the function you use to acquire your data.</p>\n\n<p>Each method basically sets the <code>data</code> property of the object being drawn, so doesn't require clearing the screen or figure. The <code>data</code> property can simply be extended, so you can keep the previous points and just keep adding to your line (or image or whatever you are drawing).</p>\n\n<p>Given that you say that your data arrival time is uncertain your best bet is probably just to do something like:</p>\n\n<pre><code>import matplotlib.pyplot as plt\nimport numpy\n\nhl, = plt.plot([], [])\n\ndef update_line(hl, new_data):\n    hl.set_xdata(numpy.append(hl.get_xdata(), new_data))\n    hl.set_ydata(numpy.append(hl.get_ydata(), new_data))\n    plt.draw()\n</code></pre>\n\n<p>Then when you receive data from the serial port just call <code>update_line</code>.</p>\n"
    },
    "755": {
        "question_id": "34562061",
        "answer_id": "34796379",
        "question": "<p><strong>The Story:</strong></p>\n\n<p>Here on StackOverflow, I've seen users reporting that they cannot click an element via selenium WebDriver \"click\" command and can work around it with a JavaScript click by executing a script. </p>\n\n<p>Example in Python:</p>\n\n<pre><code>element = driver.find_element_by_id(\"myid\")\ndriver.execute_script(\"arguments[0].click();\", element)\n</code></pre>\n\n<p>Example in WebDriverJS/Protractor:</p>\n\n<pre><code>var elm = $(\"#myid\");\nbrowser.executeScript(\"arguments[0].click();\", elm.getWebElement());\n</code></pre>\n\n<p><strong>The Question:</strong></p>\n\n<p>Why is clicking \"via JavaScript\" works when a regular WebDriver click does not? When exactly is this happening and what is the downside of this workaround (if any)?</p>\n\n<p><sup>I personally used this workaround without fully understanding why I have to do it and what problems it can lead to.</sup></p>\n",
        "answer": "<p>Contrarily to what the <a href=\"https://stackoverflow.com/a/34567956/1906307\">currently accepted answer</a> suggests, there's nothing specific to PhantomJS when it comes to the difference between having WebDriver do a click and doing it in JavaScript. </p>\n\n<h3>The Difference</h3>\n\n<p>The essential difference between the two methods is common to all browsers and can be explained pretty simply:</p>\n\n<ul>\n<li><p>WebDriver: <strong>When WebDriver does the click, it attempts as best as it can to simulate what happens when a real user uses the browser.</strong> Suppose you have an element A which is a button that says \"Click me\" and an element B which is a <code>div</code> element which is transparent but has its dimensions and <code>zIndex</code> set so that it completely covers A. Then you tell WebDriver to click A. WebDriver will simulate the click so that B receives the click <em>first</em>. Why? Because B covers A, and if a user were to try to click on A, then B would get the event first. Whether or not A would eventually get the click event depends on how B handles the event. At any rate, the behavior with WebDriver in this case is the same as when a real user tries to click on A.</p></li>\n<li><p>JavaScript: Now, suppose you use JavaScript to do <code>A.click()</code>. <strong>This method of clicking does not reproduce what really happens when the user tries to click A.</strong> JavaScript sends the <code>click</code> event directly to A, and B will not get any event.</p></li>\n</ul>\n\n<h3>Why a JavaScript Click Works When a WebDriver Click Does Not?</h3>\n\n<p>As I mentioned above WebDriver will try to simulate as best it can what happens when a real user is using a browser. The fact of the matter is that the DOM can contain elements that a user cannot interact with, and WebDriver won't allow you to click on these element. Besides the overlapping case I mentioned, this also entails that invisible elements cannot be clicked. A common case I see in Stack Overflow questions is someone who is trying to interact with a GUI element that already exists in the DOM but becomes visible only when some other element has been manipulated. This sometimes happens with dropdown menus: you have to first click on the button the brings up the dropdown before a menu item can be selected. If someone tries to click the menu item before the menu is visible, WebDriver will balk and say that the element cannot be manipulated. <strong>If the person then tries to do it with JavaScript, it will work because the event is delivered directly to the element, irrespective of visibility.</strong></p>\n\n<h3>When Should You Use JavaScript for Clicking?</h3>\n\n<p>If you are using Selenium for <em>testing an application</em>, my answer to this question is <strong>\"almost never\".</strong> By and large, your Selenium test should reproduce what a user would do with the browser. Taking the example of the drop down menu: a test should click on the button that brings up the drop down first, and then click on the menu item. If there is a problem with the GUI because the button is invisible, or the button fails to show the menu items, or something similar, then your test will fail and you'll have detected the bug. <strong>If you use JavaScript to click around, you won't be able to detect these bugs through automated testing.</strong> </p>\n\n<p>I say \"almost never\" because there may be exceptions where it makes sense to use JavaScript. They should be very rare, though.</p>\n\n<p>If you are using Selenium for <em>scraping sites</em>, then it is not as critical to attempt to reproduce user behavior. So using JavaScript to bypass the GUI is less of an issue.</p>\n"
    },
    "756": {
        "question_id": "11553721",
        "answer_id": "11553741",
        "question": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"https://stackoverflow.com/questions/1373164/how-do-i-do-variable-variables-in-python\">How do I do variable variables in Python?</a>  </p>\n</blockquote>\n\n\n\n<p>I have a variable with a string assigned to it and I want to define a new variable based on that string. </p>\n\n<pre><code>foo = \"bar\"\nfoo = \"something else\"   \n\n# What I actually want is:\n\nbar = \"something else\"\n</code></pre>\n",
        "answer": "<p>You can use <code>exec</code> for that:</p>\n\n<pre><code>&gt;&gt;&gt; foo = \"bar\"\n&gt;&gt;&gt; exec(foo + \" = 'something else'\")\n&gt;&gt;&gt; print bar\nsomething else\n&gt;&gt;&gt; \n</code></pre>\n"
    },
    "757": {
        "question_id": "53779986",
        "answer_id": "53779987",
        "question": "<p>Given two DataFrames </p>\n\n<pre><code>np.random.seed(0)\ndf1 = pd.DataFrame(np.random.choice(10, (5, 4)), columns=list('ABCD'))\ndf2 = pd.DataFrame(np.random.choice(10, (5, 4)), columns=list('ABCD'))\n\ndf1\n   A  B  C  D\n0  5  0  3  3\n1  7  9  3  5\n2  2  4  7  6\n3  8  8  1  6\n4  7  7  8  1\n\ndf2\n   A  B  C  D\n0  5  9  8  9\n1  4  3  0  3\n2  5  0  2  3\n3  8  1  3  3\n4  3  7  0  1\n</code></pre>\n\n<p>I would like to perform arithmetic on one or more columns using <code>pd.eval</code>. Specifically, I would like to port the following code:</p>\n\n<pre><code>x = 5\ndf2['D'] = df1['A'] + (df1['B'] * x) \n</code></pre>\n\n<p>...to code using <code>eval</code>. The reason for using <code>eval</code> is that I would like to automate many workflows, so creating them dynamically will be useful to me.</p>\n\n<p>I am trying to better understand the <code>engine</code> and <code>parser</code> arguments to determine how best to solve my problem. I have gone through the <a href=\"https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.eval.html\" rel=\"nofollow noreferrer\">documentation</a> but the difference was not made clear to me. </p>\n\n<ol>\n<li>What arguments should be used to ensure my code is working at max performance? </li>\n<li>Is there a way to assign the result of the expression back to <code>df2</code>?</li>\n<li>Also, to make things more complicated, how do I pass <code>x</code> as an argument inside the string expression? </li>\n</ol>\n",
        "answer": "<p>This answer dives into the various features and functionality offered by <a href=\"https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.eval.html\" rel=\"noreferrer\"><code>pd.eval</code></a>, <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.query.html\" rel=\"noreferrer\"><code>df.query</code></a>, and <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.eval.html\" rel=\"noreferrer\"><code>df.eval</code></a>.</p>\n\n<p><strong>Setup</strong><br>\nExamples will involve these DataFrames (unless otherwise specified).  </p>\n\n<pre><code>np.random.seed(0)\ndf1 = pd.DataFrame(np.random.choice(10, (5, 4)), columns=list('ABCD'))\ndf2 = pd.DataFrame(np.random.choice(10, (5, 4)), columns=list('ABCD'))\ndf3 = pd.DataFrame(np.random.choice(10, (5, 4)), columns=list('ABCD'))\ndf4 = pd.DataFrame(np.random.choice(10, (5, 4)), columns=list('ABCD'))\n</code></pre>\n\n<hr>\n\n<h1><a href=\"https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.eval.html\" rel=\"noreferrer\"><code>pandas.eval</code></a> - The \"Missing Manual\"</h1>\n\n<blockquote>\n  <p><strong>Note</strong><br>\n  Of the three functions being discussed, <code>pd.eval</code> is the most important. <code>df.eval</code> and <code>df.query</code> call\n  <code>pd.eval</code> under the hood. Behaviour  and usage is more or less\n  consistent across the three functions, with some minor semantic\n  variations which will be highlighted later. This section will\n  introduce functionality that is common across all the three functions - this includes, (but not limited to) <em>allowed syntax, precedence rules</em>, and <em>keyword arguments.</em></p>\n</blockquote>\n\n<p><code>pd.eval</code> can evaluate arithmetic expressions which can consist of variables and/or literals. These expressions must be passed as strings. So, <strong>to answer the question</strong> as stated, you can do</p>\n\n<pre><code>x = 5\npd.eval(\"df1.A + (df1.B * x)\")  \n</code></pre>\n\n<p>Some things to note here:</p>\n\n<ol>\n<li>The entire expression is a string</li>\n<li><code>df1</code>, <code>df2</code>, and <code>x</code> refer to variables in the global namespace, these are picked up by <code>eval</code> when parsing the expression</li>\n<li>Specific columns are accessed using the attribute accessor index. You can also use <code>\"df1['A'] + (df1['B'] * x)\"</code> to the same effect.</li>\n</ol>\n\n<p>I will be addressing the specific issue of reassignment in the section explaining the <code>target=...</code> attribute below. But for now, here are more simple examples of valid operations with <code>pd.eval</code>:</p>\n\n<pre><code>pd.eval(\"df1.A + df2.A\")   # Valid, returns a pd.Series object\npd.eval(\"abs(df1) ** .5\")  # Valid, returns a pd.DataFrame object\n</code></pre>\n\n<p>...and so on. Conditional expressions are also supported in the same way. The statements below are all valid expressions and will be evaluated by the engine.</p>\n\n<pre><code>pd.eval(\"df1 &gt; df2\")        \npd.eval(\"df1 &gt; 5\")    \npd.eval(\"df1 &lt; df2 and df3 &lt; df4\")      \npd.eval(\"df1 in [1, 2, 3]\")\npd.eval(\"1 &lt; 2 &lt; 3\")\n</code></pre>\n\n<p>A list detailing all the supported features and syntax can be found in the <a href=\"https://pandas.pydata.org/pandas-docs/stable/enhancingperf.html#supported-syntax\" rel=\"noreferrer\">documentation</a>. In summary,</p>\n\n<blockquote>\n  <ul>\n  <li>Arithmetic operations except for the left shift (<code>&lt;&lt;</code>) and right shift (<code>&gt;&gt;</code>) operators, e.g., <code>df + 2 * pi / s ** 4 % 42</code> - the_golden_ratio</li>\n  <li>Comparison operations, including chained comparisons, e.g., <code>2 &lt; df &lt; df2</code></li>\n  <li>Boolean operations, e.g., <code>df &lt; df2 and df3 &lt; df4</code> or <code>not df_bool</code> \n  <code>list</code> and <code>tuple</code> literals, e.g., <code>[1, 2]</code> or <code>(1, 2)</code></li>\n  <li>Attribute access, e.g., <code>df.a</code></li>\n  <li>Subscript expressions, e.g., <code>df[0]</code></li>\n  <li>Simple variable evaluation, e.g., <code>pd.eval('df')</code> (this is not very useful)</li>\n  <li>Math functions: sin, cos, exp, log, expm1, log1p, sqrt, sinh, cosh, tanh, arcsin, arccos, arctan, arccosh, arcsinh, arctanh, abs and\n  arctan2.</li>\n  </ul>\n</blockquote>\n\n<p>This section of the documentation also specifies syntax rules that are not supported, including <code>set</code>/<code>dict</code> literals, if-else statements, loops, and comprehensions, and generator expressions.</p>\n\n<p>From the list, it is obvious you can also pass expressions involving the index, such as</p>\n\n<pre><code>pd.eval('df1.A * (df1.index &gt; 1)')\n</code></pre>\n\n<h3>Parser Selection: The <code>parser=...</code> argument</h3>\n\n<p><code>pd.eval</code> supports two different parser options when parsing the expression string to generate the syntax tree: <code>pandas</code> and <code>python</code>. The main difference between the two is highlighted by slightly differing precedence rules.</p>\n\n<p>Using the default parser <code>pandas</code>, the overloaded bitwise operators <code>&amp;</code> and <code>|</code> which implement vectorized AND and OR operations with pandas objects will have the same operator precedence as <code>and</code> and `or. So, </p>\n\n<pre><code>pd.eval(\"(df1 &gt; df2) &amp; (df3 &lt; df4)\")\n</code></pre>\n\n<p>Will be the same as </p>\n\n<pre><code>pd.eval(\"df1 &gt; df2 &amp; df3 &lt; df4\")\n# pd.eval(\"df1 &gt; df2 &amp; df3 &lt; df4\", parser='pandas')\n</code></pre>\n\n<p>And also the same as</p>\n\n<pre><code>pd.eval(\"df1 &gt; df2 and df3 &lt; df4\")\n</code></pre>\n\n<p>Here, the parentheses are necessary. To do this conventionally, the parens would be required to override the higher precedence of bitwise operators:</p>\n\n<pre><code>(df1 &gt; df2) &amp; (df3 &lt; df4)\n</code></pre>\n\n<p>Without that, we end up with</p>\n\n<pre><code>df1 &gt; df2 &amp; df3 &lt; df4\n\nValueError: The truth value of a DataFrame is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n</code></pre>\n\n<p>Use <code>parser='python'</code> if you want to maintain consistency with python's actual operator precedence rules while evaluating the string.</p>\n\n<pre><code>pd.eval(\"(df1 &gt; df2) &amp; (df3 &lt; df4)\", parser='python')\n</code></pre>\n\n<p>The other difference between the two types of parsers are the semantics of the <code>==</code> and <code>!=</code> operators with list and tuple nodes, which have the similar semantics as <code>in</code> and <code>not in</code> respectively, when using the <code>'pandas'</code> parser. For example,</p>\n\n<pre><code>pd.eval(\"df1 == [1, 2, 3]\")\n</code></pre>\n\n<p>Is valid, and will run with the same semantics as </p>\n\n<pre><code>pd.eval(\"df1 in [1, 2, 3]\")\n</code></pre>\n\n<p>OTOH, <code>pd.eval(\"df1 == [1, 2, 3]\", parser='python')</code> will throw a <code>NotImplementedError</code> error.</p>\n\n<h3>Backend Selection: The <code>engine=...</code> argument</h3>\n\n<p>There are two options - <code>numexpr</code> (the default) and <code>python</code>. The <code>numexpr</code> option uses the <a href=\"https://github.com/pydata/numexpr\" rel=\"noreferrer\">numexpr</a> backend which is optimized for performance. </p>\n\n<p>With <code>'python'</code> backend, your expression is evaluated similar to just passing the expression to python's <code>eval</code> function. You have the flexibility of doing more inside expressions, such as string operations, for instance.</p>\n\n<pre><code>df = pd.DataFrame({'A': ['abc', 'def', 'abacus']})\npd.eval('df.A.str.contains(\"ab\")', engine='python')\n\n0     True\n1    False\n2     True\nName: A, dtype: bool\n</code></pre>\n\n<p>Unfortunately, this method offers <em>no</em> performance benefits over the <code>numexpr</code> engine, and there are very few security measures to ensure that dangerous expressions are not evaluated, so <strong>USE AT YOUR OWN RISK</strong>! It is generally not recommended to change this option to <code>'python'</code> unless you know what you're doing. </p>\n\n<h3><code>local_dict</code> and <code>global_dict</code> arguments</h3>\n\n<p>Sometimes, it is useful to supply values for variables used inside expressions, but not currently defined in your namespace. You can pass a dictionary to <code>local_dict</code></p>\n\n<p>For example,</p>\n\n<pre><code>pd.eval(\"df1 &gt; thresh\")\n\nUndefinedVariableError: name 'thresh' is not defined\n</code></pre>\n\n<p>This fails because <code>thresh</code> is not defined. However, this works:</p>\n\n<pre><code>pd.eval(\"df1 &gt; x\", local_dict={'thresh': 10})\n</code></pre>\n\n<p>This is useful when you have variables to supply from a dictionary. Alternatively, with the <code>'python'</code> engine, you could simply do this:</p>\n\n<pre><code>mydict = {'thresh': 5}\n# Dictionary values with *string* keys cannot be accessed without \n# using the 'python' engine.\npd.eval('df1 &gt; mydict[\"thresh\"]', engine='python')\n</code></pre>\n\n<p>But this is going to possibly be <em>much</em> slower than using the <code>'numexpr'</code> engine and passing a dictionary to <code>local_dict</code> or <code>global_dict</code>. Hopefully, this should make a convincing argument for the use of these parameters.</p>\n\n<h3>The <code>target</code> (+ <code>inplace</code>) argument, and Assignment Expressions</h3>\n\n<p>This is not often a requirement because there are usually simpler ways of doing this, but you can assign the result of <code>pd.eval</code> to an object that implements <code>__getitem__</code> such as <code>dict</code>s, and (you guessed it) DataFrames. </p>\n\n<p>Consider the example in the question </p>\n\n<blockquote>\n<pre><code>x = 5\ndf2['D'] = df1['A'] + (df1['B'] * x)\n</code></pre>\n</blockquote>\n\n<p>To assign a column \"D\" to <code>df2</code>, we do </p>\n\n<pre><code>pd.eval('D = df1.A + (df1.B * x)', target=df2)\n\n   A  B  C   D\n0  5  9  8   5\n1  4  3  0  52\n2  5  0  2  22\n3  8  1  3  48\n4  3  7  0  42\n</code></pre>\n\n<p>This is not an in-place modification of <code>df2</code> (but it can be... read on). Consider another example:</p>\n\n<pre><code>pd.eval('df1.A + df2.A')\n\n0    10\n1    11\n2     7\n3    16\n4    10\ndtype: int32\n</code></pre>\n\n<p>If you wanted to (for example) assign this back to a DataFrame, you could use the <code>target</code> argument as follows:</p>\n\n<pre><code>df = pd.DataFrame(columns=list('FBGH'), index=df1.index)\ndf\n     F    B    G    H\n0  NaN  NaN  NaN  NaN\n1  NaN  NaN  NaN  NaN\n2  NaN  NaN  NaN  NaN\n3  NaN  NaN  NaN  NaN\n4  NaN  NaN  NaN  NaN\n\ndf = pd.eval('B = df1.A + df2.A', target=df)\n# Similar to \n# df = df.assign(B=pd.eval('df1.A + df2.A'))\n\ndf\n     F   B    G    H\n0  NaN  10  NaN  NaN\n1  NaN  11  NaN  NaN\n2  NaN   7  NaN  NaN\n3  NaN  16  NaN  NaN\n4  NaN  10  NaN  NaN\n</code></pre>\n\n<p>If you wanted to perform an in-place mutation on <code>df</code>, set <code>inplace=True</code>.</p>\n\n<pre><code>pd.eval('B = df1.A + df2.A', target=df, inplace=True)\n# Similar to \n# df['B'] = pd.eval('df1.A + df2.A')\n\ndf\n     F   B    G    H\n0  NaN  10  NaN  NaN\n1  NaN  11  NaN  NaN\n2  NaN   7  NaN  NaN\n3  NaN  16  NaN  NaN\n4  NaN  10  NaN  NaN\n</code></pre>\n\n<p>If <code>inplace</code> is set without a target, a <code>ValueError</code> is raised.</p>\n\n<p>While the <code>target</code> argument is fun to play around with, you will seldom need to use it.</p>\n\n<p>If you wanted to do this with <code>df.eval</code>, you would use an expression involving an assignment:</p>\n\n<pre><code>df = df.eval(\"B = @df1.A + @df2.A\")\n# df.eval(\"B = @df1.A + @df2.A\", inplace=True)\ndf\n\n     F   B    G    H\n0  NaN  10  NaN  NaN\n1  NaN  11  NaN  NaN\n2  NaN   7  NaN  NaN\n3  NaN  16  NaN  NaN\n4  NaN  10  NaN  NaN\n</code></pre>\n\n<p><strong>Note</strong><br>\nOne of <code>pd.eval</code>'s unintended uses is parsing literal strings in a manner very similar to <code>ast.literal_eval</code>:</p>\n\n<pre><code>pd.eval(\"[1, 2, 3]\")\narray([1, 2, 3], dtype=object)\n</code></pre>\n\n<p>It can also parse nested lists with the <code>'python'</code> engine:</p>\n\n<pre><code>pd.eval(\"[[1, 2, 3], [4, 5], [10]]\", engine='python')\n[[1, 2, 3], [4, 5], [10]]\n</code></pre>\n\n<p>And lists of strings:</p>\n\n<pre><code>pd.eval([\"[1, 2, 3]\", \"[4, 5]\", \"[10]\"], engine='python')\n[[1, 2, 3], [4, 5], [10]]\n</code></pre>\n\n<p>The problem, however, is for lists with length larger than 10:</p>\n\n<pre><code>pd.eval([\"[1]\"] * 100, engine='python') # Works\npd.eval([\"[1]\"] * 101, engine='python') \n\nAttributeError: 'PandasExprVisitor' object has no attribute 'visit_Ellipsis'\n</code></pre>\n\n<p>More information can this error, causes, fixes, and workarounds can be found <a href=\"https://stackoverflow.com/questions/48008191/attributeerror-pandasexprvisitor-object-has-no-attribute-visit-ellipsis-us\">here</a>.</p>\n\n<hr>\n\n<h1><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.eval.htm\" rel=\"noreferrer\"><code>DataFrame.eval</code></a> - A Juxtaposition with <code>pandas.eval</code></h1>\n\n<p>As mentioned above, <code>df.eval</code> calls <code>pd.eval</code> under the hood. The <a href=\"https://github.com/pandas-dev/pandas/blob/0.23.x/pandas/core/frame.py#L2861-L2962\" rel=\"noreferrer\">v0.23 source code</a> shows this:</p>\n\n<pre><code>def eval(self, expr, inplace=False, **kwargs):\n\n    from pandas.core.computation.eval import eval as _eval\n\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    resolvers = kwargs.pop('resolvers', None)\n    kwargs['level'] = kwargs.pop('level', 0) + 1\n    if resolvers is None:\n        index_resolvers = self._get_index_resolvers()\n        resolvers = dict(self.iteritems()), index_resolvers\n    if 'target' not in kwargs:\n        kwargs['target'] = self\n    kwargs['resolvers'] = kwargs.get('resolvers', ()) + tuple(resolvers)\n    return <b>_eval(expr, inplace=inplace, **kwargs)</b></code></pre>\n\n<p><code>eval</code> creates arguments, does a little validation, and passes the arguments on to <code>pd.eval</code>.</p>\n\n<p>For more, you can read on: <a href=\"https://stackoverflow.com/questions/38725355/when-to-use-dataframe-eval-versus-pandas-eval-or-python-eval\">when to use DataFrame.eval() versus pandas.eval() or python eval()</a></p>\n\n<h2><strong>Usage Differences</strong></h2>\n\n<h3><strong>Expressions with DataFrames v/s Series Expressions</strong></h3>\n\n<p>For dynamic queries associated with entire DataFrames, you should prefer <code>pd.eval</code>. For example, there is no simple way to specify the equivalent of <code>pd.eval(\"df1 + df2\")</code> when you call <code>df1.eval</code> or <code>df2.eval</code>.</p>\n\n<h3><strong>Specifying Column Names</strong></h3>\n\n<p>Another other major difference is how columns are accessed. For example, to add two columns \"A\" and \"B\" in <code>df1</code>, you would call <code>pd.eval</code> with the following expression:</p>\n\n<pre><code>pd.eval(\"df1.A + df1.B\")\n</code></pre>\n\n<p>With df.eval, you need only supply the column names:</p>\n\n<pre><code>df1.eval(\"A + B\")\n</code></pre>\n\n<p>Since, within the context of <code>df1</code>, it is clear that \"A\" and \"B\" refer to column names. </p>\n\n<p>You can also refer to the index and columns using <code>index</code> (unless the index is named, in which case you would use the name). </p>\n\n<pre><code>df1.eval(\"A + index\")\n</code></pre>\n\n<p>Or, more generally, for any DataFrame with an index having 1 or more levels, you can refer to the k<sup>th</sup> level of the index in an expression using the variable <strong>\"ilevel_k\"</strong> which stands for \"<b>i</b>ndex at <strong>level k</strong>\". IOW, the expression above can be written as <code>df1.eval(\"A + ilevel_0\")</code>.</p>\n\n<p>These rules also apply to <code>query</code>.</p>\n\n<h3><strong>Accessing Variables in Local/Global Namespace</strong></h3>\n\n<p>Variables supplied inside expressions must be preceeded by the \"@\" symbol, to avoid confusion with column names.</p>\n\n<pre><code>A = 5\ndf1.eval(\"A &gt; @A\") \n</code></pre>\n\n<p>The same goes for <code>query</code>/</p>\n\n<p>It goes without saying that your column names must follow the rules for valid identifier naming in python to be accessible inside <code>eval</code>. See <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#identifiers\" rel=\"noreferrer\">here</a> for a list of rules on naming identifiers.</p>\n\n<h3><strong>Multiline Queries and Assignment</strong></h3>\n\n<p>A little known fact is that <code>eval</code> support multiline expressions that deal with assignment. For example, to create two new columns \"E\" and \"F\" in df1 based on some arithmetic operations on some columns, and a third column \"G\" based on the previously created \"E\" and \"F\", we can do</p>\n\n<pre><code>df1.eval(\"\"\"\nE = A + B\nF = @df2.A + @df2.B\nG = E &gt;= F\n\"\"\")\n\n   A  B  C  D   E   F      G\n0  5  0  3  3   5  14  False\n1  7  9  3  5  16   7   True\n2  2  4  7  6   6   5   True\n3  8  8  1  6  16   9   True\n4  7  7  8  1  14  10   True\n</code></pre>\n\n<p>...Nifty! However, note that this is not supported by <code>query</code>.</p>\n\n<hr>\n\n<h1><code>eval</code> v/s <code>query</code> - Final Word</h1>\n\n<p>It helps to think of <code>df.query</code> as a function that uses <code>pd.eval</code> as a subroutine. </p>\n\n<p>Typically, <code>query</code> (as the name suggests) is used to evaluate conditional expressions (i.e., expressions that result in True/False values) and return the rows corresponding to the <code>True</code> result. The result of the expression is then passed to <code>loc</code> (in most cases) to return the rows that satisfy the expression. According to the documentation,</p>\n\n<blockquote>\n  <p>The result of the evaluation of this expression is first passed to\n  <code>DataFrame.loc</code> and if that fails because of a multidimensional key\n  (e.g., a DataFrame) then the result will be passed to\n  <code>DataFrame.__getitem__()</code>.</p>\n  \n  <p>This method uses the top-level <code>pandas.eval()</code> function to evaluate the\n  passed query.</p>\n</blockquote>\n\n<p>In terms of similarity, <code>query</code> and <code>df.eval</code> are both alike in how they access column names and variables.</p>\n\n<p>This key difference between the two, as mentioned above is how they handle the expression result. This becomes obvious when you actually run an expression through these two functions. For example, consider</p>\n\n<pre><code>df1.A\n\n0    5\n1    7\n2    2\n3    8\n4    7\nName: A, dtype: int32\n\ndf2.B\n\n0    9\n1    3\n2    0\n3    1\n4    7\nName: B, dtype: int32\n</code></pre>\n\n<p>To get all rows where \"A\" >= \"B\" in <code>df1</code>, we would use <code>eval</code> like this:</p>\n\n<pre><code>m = df1.eval(\"A &gt;= B\")\nm\n0     True\n1    False\n2    False\n3     True\n4     True\ndtype: bool\n</code></pre>\n\n<p><code>m</code> represents the intermediate result generated by evaluating the expression \"A >= B\". We then use the mask to filter <code>df1</code>:</p>\n\n<pre><code>df1[m]\n# df1.loc[m]\n\n   A  B  C  D\n0  5  0  3  3\n3  8  8  1  6\n4  7  7  8  1\n</code></pre>\n\n<p>However, with <code>query</code>, the intermediate result \"m\" is directly passed to <code>loc</code>, so with <code>query</code>, you would simply need to do </p>\n\n<pre><code>df1.query(\"A &gt;= B\")\n\n   A  B  C  D\n0  5  0  3  3\n3  8  8  1  6\n4  7  7  8  1\n</code></pre>\n\n<p>Performance wise, it is <em>exactly</em> the same. </p>\n\n<pre><code>df1_big = pd.concat([df1] * 100000, ignore_index=True)\n\n%timeit df1_big[df1_big.eval(\"A &gt;= B\")]\n%timeit df1_big.query(\"A &gt;= B\")\n\n14.7 ms \u00b1 33.9 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n14.7 ms \u00b1 24.3 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n</code></pre>\n\n<p>But the latter is more concise, and expresses the same operation in a single step. </p>\n\n<p>Note that you can also do weird stuff with <code>query</code> like this (to, say, return all rows indexed by df1.index) </p>\n\n<pre><code>df1.query(\"index\")\n# Same as df1.loc[df1.index] # Pointless,... I know\n\n   A  B  C  D\n0  5  0  3  3\n1  7  9  3  5\n2  2  4  7  6\n3  8  8  1  6\n4  7  7  8  1\n</code></pre>\n\n<p>But don't. </p>\n\n<p>Bottom line: Please use <code>query</code> when querying or filtering rows based on a conditional expression.</p>\n"
    },
    "758": {
        "question_id": "4674473",
        "answer_id": "4675383",
        "question": "<p><strong>This Python code:</strong></p>\n\n<pre><code>import numpy as p\n\ndef firstfunction():\n    UnFilteredDuringExSummaryOfMeansArray = []\n    MeanOutputHeader=['TestID','ConditionName','FilterType','RRMean','HRMean','dZdtMaxVoltageMean','BZMean','ZXMean'\n                      ,'LVETMean','Z0Mean','StrokeVolumeMean','CardiacOutputMean','VelocityIndexMean']\n    dataMatrix = BeatByBeatMatrixOfMatrices[column]\n    roughTrimmedMatrix = p.array(dataMatrix[1:,1:17])\n\n\n    trimmedMatrix = p.array(roughTrimmedMatrix,dtype=p.float64)  #ERROR THROWN HERE\n\n\n    myMeans = p.mean(trimmedMatrix,axis=0,dtype=p.float64)\n    conditionMeansArray = [TestID,testCondition,'UnfilteredBefore',myMeans[3], myMeans[4], myMeans[6], myMeans[9]\n                      , myMeans[10], myMeans[11], myMeans[12], myMeans[13], myMeans[14], myMeans[15]]\n    UnFilteredDuringExSummaryOfMeansArray.append(conditionMeansArray)\n    secondfunction(UnFilteredDuringExSummaryOfMeansArray)\n    return\n\ndef secondfunction(UnFilteredDuringExSummaryOfMeansArray):\n    RRDuringArray = p.array(UnFilteredDuringExSummaryOfMeansArray,dtype=p.float64)[1:,3]\n    return\n\nfirstfunction()\n</code></pre>\n\n<p><strong>Throws this error message:</strong></p>\n\n<pre><code>File \"mypath\\mypythonscript.py\", line 3484, in secondfunction\nRRDuringArray = p.array(UnFilteredDuringExSummaryOfMeansArray,dtype=p.float64)[1:,3]\nValueError: setting an array element with a sequence.\n</code></pre>\n\n<p>Can anyone show me what to do to fix the problem in the broken code above so that it stops throwing an error message?</p>\n\n<hr>\n\n<p><strong>EDIT:</strong>\nI did a print command to get the contents of the matrix, and this is what it printed out:</p>\n\n<p>UnFilteredDuringExSummaryOfMeansArray is:  </p>\n\n<pre><code>[['TestID', 'ConditionName', 'FilterType', 'RRMean', 'HRMean', 'dZdtMaxVoltageMean', 'BZMean', 'ZXMean', 'LVETMean', 'Z0Mean', 'StrokeVolumeMean', 'CardiacOutputMean', 'VelocityIndexMean'],\n[u'HF101710', 'PreEx10SecondsBEFORE', 'UnfilteredBefore', 0.90670000000000006, 66.257731979420001, 1.8305673000000002, 0.11750000000000001, 0.15120546389880002, 0.26870546389879996, 27.628261216480002, 86.944190346160013, 5.767261352345999, 0.066259118585869997],\n[u'HF101710', '25W10SecondsBEFORE', 'UnfilteredBefore', 0.68478571428571422, 87.727887206978565, 2.2965444125714285, 0.099642857142857144, 0.14952476549885715, 0.24916762264164286, 27.010483303721429, 103.5237336525, 9.0682762747642869, 0.085022572648242867],\n[u'HF101710', '50W10SecondsBEFORE', 'UnfilteredBefore', 0.54188235294117659, 110.74841107829413, 2.6719262705882354, 0.077705882352917643, 0.15051306356552943, 0.2282189459185294, 26.768787504858825, 111.22827075238826, 12.329456404418824, 0.099814258468417641],\n[u'HF101710', '75W10SecondsBEFORE', 'UnfilteredBefore', 0.4561904761904762, 131.52996981880955, 3.1818159523809522, 0.074714285714290493, 0.13459344175047619, 0.20930772746485715, 26.391156337028569, 123.27387909873812, 16.214243779323812, 0.1205685359981619]]\n</code></pre>\n\n<p>Looks like a 5 row by 13 column matrix to me, though the number of rows is variable when different data are run through the script.  With this same data that I am adding in this.</p>\n\n<p><strong><em>EDIT 2</em></strong>: However, the script is throwing an error.  So I do not think that your idea explains the problem that is happening here.  Thank you, though.  Any other ideas?</p>\n\n<hr>\n\n<p><strong>EDIT 3:</strong></p>\n\n<p>FYI, if I replace this problem line of code:</p>\n\n<pre><code>    RRDuringArray = p.array(UnFilteredDuringExSummaryOfMeansArray,dtype=p.float64)[1:,3]\n</code></pre>\n\n<p>with this instead:</p>\n\n<pre><code>    RRDuringArray = p.array(UnFilteredDuringExSummaryOfMeansArray)[1:,3]\n</code></pre>\n\n<p>Then that section of the script works fine without throwing an error, but then this line of code further down the line:</p>\n\n<pre><code>p.ylim(.5*RRDuringArray.min(),1.5*RRDuringArray.max())\n</code></pre>\n\n<p>Throws this error:</p>\n\n<pre><code>File \"mypath\\mypythonscript.py\", line 3631, in CreateSummaryGraphics\n  p.ylim(.5*RRDuringArray.min(),1.5*RRDuringArray.max())\nTypeError: cannot perform reduce with flexible type\n</code></pre>\n\n<p>So you can see that I need to specify the data type in order to be able to use ylim in matplotlib, but yet specifying the data type is throwing the error message that initiated this post.</p>\n",
        "answer": "<p>From the code you showed us, the only thing we can tell is that you are trying to create an array from a list that isn't shaped like a multi-dimensional array.  For example</p>\n\n<pre><code>numpy.array([[1,2], [2, 3, 4]])\n</code></pre>\n\n<p>or</p>\n\n<pre><code>numpy.array([[1,2], [2, [3, 4]]])\n</code></pre>\n\n<p>will yield this error message, because the shape of the input list isn't a (generalised) \"box\" that can be turned into a multidimensional array.  So probably <code>UnFilteredDuringExSummaryOfMeansArray</code> contains sequences of different lengths.</p>\n\n<p><strong>Edit</strong>: Another possible cause for this error message is trying to use a string as an element in an array of type <code>float</code>:</p>\n\n<pre><code>numpy.array([1.2, \"abc\"], dtype=float)\n</code></pre>\n\n<p>That is what you are trying according to your edit.  If you really want to have a NumPy array containing both strings and floats, you could use the dtype <code>object</code>, which enables the array to hold arbitrary Python objects:</p>\n\n<pre><code>numpy.array([1.2, \"abc\"], dtype=object)\n</code></pre>\n\n<p>Without knowing what your code shall accomplish, I can't judge if this is what you want.</p>\n"
    },
    "759": {
        "question_id": "3247183",
        "answer_id": "3247553",
        "question": "<p>Question: Is it possible to use a variable as your table name without having to use string constructors to do so?</p>\n\n<hr>\n\n<p>Info: </p>\n\n<p>I'm working on a project right now that catalogs data from a star simulation of mine. To do so I'm loading all the data into a sqlite database. It's working pretty well, but I've decided to add a lot more flexibility, efficiency, and usability to my db. I plan on later adding planetoids to the simulation, and wanted to have a table for each star. This way I wouldn't have to query a table of 20m some planetoids for the 1-4k in each solar system. </p>\n\n<p>I've been told using string constructors is bad because it leaves me vulnerable to a SQL injection attack. While that isn't a big deal here as I'm the only person with access to these dbs, I would like to follow best practices. And also this way if I do a project with a similar situation where it is open to the public, I know what to do.</p>\n\n<p>Currently I'm doing this:</p>\n\n<pre><code>cursor.execute(\"CREATE TABLE StarFrame\"+self.name+\" (etc etc)\")\n</code></pre>\n\n<p>This works, but I would like to do something more like:</p>\n\n<pre><code>cursor.execute(\"CREATE TABLE StarFrame(?) (etc etc)\",self.name)\n</code></pre>\n\n<p>though I understand that this would probably be impossible. though I would settle for something like</p>\n\n<pre><code>cursor.execute(\"CREATE TABLE (?) (etc etc)\",self.name)\n</code></pre>\n\n<p>If this is not at all possible, I'll accept that answer, but if anyone knows a way to do this, do tell. :)</p>\n\n<p>I'm coding in python.</p>\n",
        "answer": "<p>Unfortunately, tables can't be the target of parameter substitution (I didn't find any definitive source, but I have seen it on a few web forums).</p>\n\n<p>If you are worried about injection (you probably should be), you can write a function that cleans the string before passing it. Since you are looking for just a table name, you should be safe just accepting alphanumerics, stripping out all punctuation, such as <code>)(][;,</code> and whitespace. Basically, just keep <code>A-Z a-z 0-9</code>.</p>\n\n<pre><code>def scrub(table_name):\n    return ''.join( chr for chr in table_name if chr.isalnum() )\n\nscrub('); drop tables --')  # returns 'droptables'\n</code></pre>\n"
    },
    "760": {
        "question_id": "21316968",
        "answer_id": "21317109",
        "question": "<p>How can I divide two numbers in Python 2.7 and get the result with decimals?</p>\n\n<p>I don't get it why there is difference:</p>\n\n<p>in Python 3: </p>\n\n<pre><code>&gt;&gt;&gt; 20/15\n1.3333333333333333\n</code></pre>\n\n<p>in Python 2:</p>\n\n<pre><code>&gt;&gt;&gt; 20/15\n1\n</code></pre>\n\n<p>Isn't this a modulo actually?</p>\n",
        "answer": "<p>In python 2.7, the <code>/</code> operator is integer division if inputs are integers.</p>\n\n<p>If you want float division (which is something I always prefer), just use this special import:</p>\n\n<pre><code>from __future__ import division\n</code></pre>\n\n<p>See it here:</p>\n\n<pre><code>&gt;&gt;&gt; 7 / 2\n3\n&gt;&gt;&gt; from __future__ import division\n&gt;&gt;&gt; 7 / 2\n3.5\n&gt;&gt;&gt;\n</code></pre>\n\n<p>Integer division is achieved by using <code>//</code>, and modulo by using <code>%</code></p>\n\n<pre><code>&gt;&gt;&gt; 7 % 2\n1\n&gt;&gt;&gt; 7 // 2\n3\n&gt;&gt;&gt;\n</code></pre>\n\n<p><strong>EDIT</strong></p>\n\n<p>As commented by <code>user2357112</code>, this import has to be done before any other normal import.</p>\n"
    },
    "761": {
        "question_id": "15086040",
        "answer_id": "15087355",
        "question": "<p>Following code gives different output in <code>Python2</code> and in <code>Python3</code>:</p>\n\n<pre><code>from sys import version\n\nprint(version)\n\ndef execute(a, st):\n    b = 42\n    exec(\"b = {}\\nprint('b:', b)\".format(st))\n    print(b)\na = 1.\nexecute(a, \"1.E6*a\")\n</code></pre>\n\n<p><code>Python2</code> prints:</p>\n\n<pre><code>2.7.2 (default, Jun 12 2011, 15:08:59) [MSC v.1500 32 bit (Intel)]\n('b:', 1000000.0)\n1000000.0\n</code></pre>\n\n<p><code>Python3</code> prints:</p>\n\n<pre><code>3.2.3 (default, Apr 11 2012, 07:15:24) [MSC v.1500 32 bit (Intel)]\nb: 1000000.0\n42\n</code></pre>\n\n<p>Why does <code>Python2</code> bind the variable <code>b</code> inside the <code>execute</code> function to the values in the string of the <code>exec</code> function, while <code>Python3</code> doesn't do this? How can I achieve the behavior of <code>Python2</code> in <code>Python3</code>? I already tried to pass dictionaries for globals and locals to <code>exec</code> function in <code>Python3</code>, but nothing worked so far.</p>\n\n<p><strong>--- EDIT ---</strong></p>\n\n<p>After reading Martijns answer I further analyzed this with <code>Python3</code>. In following example I give the <code>locals()</code> dictionay as <code>d</code> to <code>exec</code>, but <code>d['b']</code> prints something else than just printing <code>b</code>.</p>\n\n<pre><code>from sys import version\n\nprint(version)\n\ndef execute(a, st):\n    b = 42\n    d = locals()\n    exec(\"b = {}\\nprint('b:', b)\".format(st), globals(), d)\n    print(b)                     # This prints 42\n    print(d['b'])                # This prints 1000000.0\n    print(id(d) == id(locals())) # This prints True\na = 1.\nexecute(a, \"1.E6*a\")\n\n3.2.3 (default, Apr 11 2012, 07:15:24) [MSC v.1500 32 bit (Intel)]\nb: 1000000.0\n42\n1000000.0\nTrue\n</code></pre>\n\n<p>The comparison of the ids of <code>d</code> and <code>locals()</code> shows that they are the same object. But under these conditions <code>b</code> should be the same as <code>d['b']</code>. What is wrong in my example?</p>\n",
        "answer": "<p>There is a big difference between <code>exec</code> in Python 2 and <code>exec()</code> in Python 3. You are treating <code>exec</code> as a function, but it really is a <em>statement</em> in Python 2.</p>\n\n<p>Because of this difference, you cannot change local variables in function scope in Python 3 using <code>exec</code>, even though it was possible in Python 2. Not even previously declared variables. </p>\n\n<p><code>locals()</code> only reflects local variables in one direction. The following never worked in either 2 or 3:</p>\n\n<pre><code>def foo():\n    a = 'spam'\n    locals()['a'] = 'ham'\n    print(a)              # prints 'spam'\n</code></pre>\n\n<p>In Python 2, using the <code>exec</code> statement meant the compiler knew to switch off the local scope optimizations (switching from <code>LOAD_FAST</code> to <code>LOAD_NAME</code> for example, to look up variables in both the local and global scopes). With <code>exec()</code> being a function, that option is no longer available and function scopes are now <em>always</em> optimized.</p>\n\n<p>Moreover, in Python 2, the <code>exec</code> statement explicitly copies all variables found in <code>locals()</code> back to the function locals using <code>PyFrame_LocalsToFast</code>, but only if no <em>globals</em> and <em>locals</em> parameters were supplied.</p>\n\n<p>The proper work-around is to use a new namespace (a dictionary) for your <code>exec()</code> call:</p>\n\n<pre><code>def execute(a, st):\n    namespace = {}\n    exec(\"b = {}\\nprint('b:', b)\".format(st), namespace)\n    print(namespace['b'])\n</code></pre>\n\n<p>The <a href=\"https://docs.python.org/3/library/functions.html#exec\" rel=\"noreferrer\"><code>exec()</code> documentation</a> is very explicit about this limitation:</p>\n\n<blockquote>\n  <p><strong>Note:</strong> The default <em>locals</em> act as described for function <code>locals()</code> below: modifications to the default <em>locals</em> dictionary should not be attempted. Pass an explicit <em>locals</em> dictionary if you need to see effects of the code on locals after function <code>exec()</code> returns. </p>\n</blockquote>\n"
    },
    "762": {
        "question_id": "44558215",
        "answer_id": "44559180",
        "question": "<p>Please I am a bit new to <code>Python</code> and it has been nice, I could comment that python is very sexy till I needed to shift content of a 4x4 matrix  which I want to use in building a 2048 game demo of the game is <a href=\"http://gabrielecirulli.github.io/2048\" rel=\"noreferrer\" title=\"2048 by Gabriele Cirulli \">here</a> I have this function </p>\n\n<pre><code>def cover_left(matrix):\n        new=[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]\n        for i in range(4):\n             count=0\n             for j in range(4):\n                if mat[i][j]!=0:\n                    new[i][count]=mat[i][j]\n                    count+=1\n        return new\n</code></pre>\n\n<p>This is what this function does if you call it like this</p>\n\n<pre><code>cover_left([\n              [1,0,2,0], \n              [3,0,4,0], \n              [5,0,6,0], \n              [0,7,0,8]\n          ])\n</code></pre>\n\n<p>It will cover the zeros to the left and produce</p>\n\n<pre><code>[  [1, 2, 0, 0],\n   [3, 4, 0, 0],\n   [5, 6, 0, 0],\n   [7, 8, 0, 0]]\n</code></pre>\n\n<p>Please I need someone to help me with a <code>numpy</code> way of doing this which I believe will be faster and require less code (I am using in a depth-first search algo) and more importantly the implementation of <code>cover_up</code>, <code>cover_down</code> and </p>\n\n<pre><code>`cover_left`.\n`cover_up`\n    [  [1, 7, 2, 8],\n       [3, 0, 4, 0],\n       [5, 0, 6, 0],\n       [0, 0, 0, 0]]\n`cover_down`\n    [  [0, 0, 0, 0],\n       [1, 0, 2, 0],\n       [3, 0, 4, 0],\n       [5, 7, 6, 8]]\n`cover_right`\n    [  [0, 0, 1, 2],\n       [0, 0, 3, 4],\n       [0, 0, 5, 6],\n       [0, 0, 7, 8]]\n</code></pre>\n\n<p>Thanks in advance.</p>\n",
        "answer": "<p>Here's a vectorized approach inspired by <a href=\"https://stackoverflow.com/a/44210588/3293881\"><code>this other post</code></a> and generalized to cover <code>non-zeros</code> for all four directions -</p>\n\n<pre><code>def justify(a, invalid_val=0, axis=1, side='left'):    \n    \"\"\"\n    Justifies a 2D array\n\n    Parameters\n    ----------\n    A : ndarray\n        Input array to be justified\n    axis : int\n        Axis along which justification is to be made\n    side : str\n        Direction of justification. It could be 'left', 'right', 'up', 'down'\n        It should be 'left' or 'right' for axis=1 and 'up' or 'down' for axis=0.\n\n    \"\"\"\n\n    if invalid_val is np.nan:\n        mask = ~np.isnan(a)\n    else:\n        mask = a!=invalid_val\n    justified_mask = np.sort(mask,axis=axis)\n    if (side=='up') | (side=='left'):\n        justified_mask = np.flip(justified_mask,axis=axis)\n    out = np.full(a.shape, invalid_val) \n    if axis==1:\n        out[justified_mask] = a[mask]\n    else:\n        out.T[justified_mask.T] = a.T[mask.T]\n    return out\n</code></pre>\n\n<p>Sample runs -</p>\n\n<pre><code>In [473]: a # input array\nOut[473]: \narray([[1, 0, 2, 0],\n       [3, 0, 4, 0],\n       [5, 0, 6, 0],\n       [6, 7, 0, 8]])\n\nIn [474]: justify(a, axis=0, side='up')\nOut[474]: \narray([[1, 7, 2, 8],\n       [3, 0, 4, 0],\n       [5, 0, 6, 0],\n       [6, 0, 0, 0]])\n\nIn [475]: justify(a, axis=0, side='down')\nOut[475]: \narray([[1, 0, 0, 0],\n       [3, 0, 2, 0],\n       [5, 0, 4, 0],\n       [6, 7, 6, 8]])\n\nIn [476]: justify(a, axis=1, side='left')\nOut[476]: \narray([[1, 2, 0, 0],\n       [3, 4, 0, 0],\n       [5, 6, 0, 0],\n       [6, 7, 8, 0]])\n\nIn [477]: justify(a, axis=1, side='right')\nOut[477]: \narray([[0, 0, 1, 2],\n       [0, 0, 3, 4],\n       [0, 0, 5, 6],\n       [0, 6, 7, 8]])\n</code></pre>\n"
    },
    "763": {
        "question_id": "4477850",
        "answer_id": "4477856",
        "question": "<p>I was watching a <a href=\"http://video.google.com/videoplay?docid=7760178035196894549#\">2007 video on Advanced Python or Understanding Python</a>, and at 18'27\" the speaker claims \"As some may know in Python <code>and</code> and <code>or</code> return one of the two values, whereas <code>not</code> returns always a boolean.\" When has this been the case?</p>\n\n<p>As far as I can tell, <code>and</code> and <code>or</code> return booleans, too.</p>\n",
        "answer": "<p>The <code>and</code> and <code>or</code> operators do return one of their operands, not a pure boolean value like <code>True</code> or <code>False</code>:</p>\n\n<pre><code>&gt;&gt;&gt; 0 or 42\n42\n&gt;&gt;&gt; 0 and 42\n0\n</code></pre>\n\n<p>Whereas <code>not</code> always returns a pure boolean value:</p>\n\n<pre><code>&gt;&gt;&gt; not 0\nTrue\n&gt;&gt;&gt; not 42\nFalse\n</code></pre>\n"
    },
    "764": {
        "question_id": "2545532",
        "answer_id": "3033342",
        "question": "<p>I would like to know if there is something similar to <a href=\"http://www.php.net/manual/en/function.natsort.php\" rel=\"noreferrer\">PHP natsort</a> function in Python?</p>\n\n<pre><code>l = ['image1.jpg', 'image15.jpg', 'image12.jpg', 'image3.jpg']\nl.sort()\n</code></pre>\n\n<p>gives:</p>\n\n<pre><code>['image1.jpg', 'image12.jpg', 'image15.jpg', 'image3.jpg']\n</code></pre>\n\n<p>but I would like to get:</p>\n\n<pre><code>['image1.jpg', 'image3.jpg', 'image12.jpg', 'image15.jpg']\n</code></pre>\n\n<p><strong>UPDATE</strong></p>\n\n<p>Solution base on <a href=\"http://code.activestate.com/recipes/285264-natural-string-sorting/\" rel=\"noreferrer\">this link</a></p>\n\n<pre><code>def try_int(s):\n    \"Convert to integer if possible.\"\n    try: return int(s)\n    except: return s\n\ndef natsort_key(s):\n    \"Used internally to get a tuple by which s is sorted.\"\n    import re\n    return map(try_int, re.findall(r'(\\d+|\\D+)', s))\n\ndef natcmp(a, b):\n    \"Natural string comparison, case sensitive.\"\n    return cmp(natsort_key(a), natsort_key(b))\n\ndef natcasecmp(a, b):\n    \"Natural string comparison, ignores case.\"\n    return natcmp(a.lower(), b.lower())\n\nl.sort(natcasecmp);\n</code></pre>\n",
        "answer": "<p>From <a href=\"https://stackoverflow.com/questions/34518/natural-sorting-algorithm/341745#341745\">my answer</a> to <a href=\"https://stackoverflow.com/questions/34518/natural-sorting-algorithm\">Natural Sorting algorithm</a>:</p>\n\n<pre><code>import re\ndef natural_key(string_):\n    \"\"\"See http://www.codinghorror.com/blog/archives/001018.html\"\"\"\n    return [int(s) if s.isdigit() else s for s in re.split(r'(\\d+)', string_)]\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>&gt;&gt;&gt; L = ['image1.jpg', 'image15.jpg', 'image12.jpg', 'image3.jpg']\n&gt;&gt;&gt; sorted(L)\n['image1.jpg', 'image12.jpg', 'image15.jpg', 'image3.jpg']\n&gt;&gt;&gt; sorted(L, key=natural_key)\n['image1.jpg', 'image3.jpg', 'image12.jpg', 'image15.jpg']\n</code></pre>\n\n<p>To support Unicode strings, <code>.isdecimal()</code> should be used instead of <code>.isdigit()</code>. See example in <a href=\"https://stackoverflow.com/questions/2545532/python-analog-of-natsort-function-sort-a-list-using-a-natural-order-algorithm/3033342#comment13873677_3033342\">@phihag's comment</a>. Related: <a href=\"https://stackoverflow.com/a/22793379/4279\">How to reveal Unicodes numeric value property</a>.</p>\n\n<p><code>.isdigit()</code> may also fail (return value that is not accepted by <code>int()</code>) for a bytestring on Python 2 in some locales e.g., <a href=\"https://stackoverflow.com/a/19440958/4279\">'\\xb2' ('\u00b2') in cp1252 locale on Windows</a>.</p>\n"
    },
    "765": {
        "question_id": "2052390",
        "answer_id": "24065533",
        "question": "<p>How can I raise an exception in Python so that it can later be caught via an <code>except</code> block?</p>\n",
        "answer": "<blockquote>\n  <h2>How do I manually throw/raise an exception in Python?</h2>\n</blockquote>\n\n<p><a href=\"https://docs.python.org/3/library/exceptions.html#exception-hierarchy\" rel=\"noreferrer\">Use the most specific Exception constructor that semantically fits your issue</a>.  </p>\n\n<p>Be specific in your message, e.g.:</p>\n\n<pre><code>raise ValueError('A very specific bad thing happened.')\n</code></pre>\n\n<h2>Don't raise generic exceptions</h2>\n\n<p>Avoid raising a generic Exception. To catch it, you'll have to catch all other more specific exceptions that subclass it.</p>\n\n<h3>Problem 1: Hiding bugs</h3>\n\n<pre><code>raise Exception('I know Python!') # Don't! If you catch, likely to hide bugs.\n</code></pre>\n\n<p>For example:</p>\n\n<pre><code>def demo_bad_catch():\n    try:\n        raise ValueError('Represents a hidden bug, do not catch this')\n        raise Exception('This is the exception you expect to handle')\n    except Exception as error:\n        print('Caught this error: ' + repr(error))\n\n&gt;&gt;&gt; demo_bad_catch()\nCaught this error: ValueError('Represents a hidden bug, do not catch this',)\n</code></pre>\n\n<h3>Problem 2: Won't catch</h3>\n\n<p>and more specific catches won't catch the general exception:</p>\n\n<pre><code>def demo_no_catch():\n    try:\n        raise Exception('general exceptions not caught by specific handling')\n    except ValueError as e:\n        print('we will not catch exception: Exception')\n\n\n&gt;&gt;&gt; demo_no_catch()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 3, in demo_no_catch\nException: general exceptions not caught by specific handling\n</code></pre>\n\n<h2>Best Practices: <code>raise</code> statement</h2>\n\n<p><a href=\"https://docs.python.org/3/library/exceptions.html#exception-hierarchy\" rel=\"noreferrer\">Instead, use the most specific Exception constructor that semantically fits your issue</a>.</p>\n\n<pre><code>raise ValueError('A very specific bad thing happened')\n</code></pre>\n\n<p>which also handily allows an arbitrary number of arguments to be passed to the constructor:</p>\n\n<pre><code>raise ValueError('A very specific bad thing happened', 'foo', 'bar', 'baz') \n</code></pre>\n\n<p>These arguments are accessed by the <code>args</code> attribute on the Exception object. For example:</p>\n\n<pre><code>try:\n    some_code_that_may_raise_our_value_error()\nexcept ValueError as err:\n    print(err.args)\n</code></pre>\n\n<p>prints </p>\n\n<pre><code>('message', 'foo', 'bar', 'baz')    \n</code></pre>\n\n<p>In Python 2.5, an actual <code>message</code> attribute was added to BaseException in favor of encouraging users to subclass Exceptions and stop using <code>args</code>, but <a href=\"http://www.python.org/dev/peps/pep-0352/#retracted-ideas\" rel=\"noreferrer\">the introduction of <code>message</code> and the original deprecation of args has been retracted</a>.</p>\n\n<h2>Best Practices: <code>except</code> clause</h2>\n\n<p>When inside an except clause, you might want to, for example, log that a specific type of error happened, and then re-raise. The best way to do this while preserving the stack trace is to use a bare raise statement. For example:</p>\n\n<pre><code>logger = logging.getLogger(__name__)\n\ntry:\n    do_something_in_app_that_breaks_easily()\nexcept AppError as error:\n    logger.error(error)\n    raise                 # just this!\n    # raise AppError      # Don't do this, you'll lose the stack trace!\n</code></pre>\n\n<h3>Don't modify your errors... but if you insist.</h3>\n\n<p>You can preserve the stacktrace (and error value) with <code>sys.exc_info()</code>, but <strong>this is way more error prone</strong> and <strong>has compatibility problems between Python 2 and 3</strong>, prefer to use a bare <code>raise</code> to re-raise. </p>\n\n<p>To explain - the <code>sys.exc_info()</code> returns the type, value, and traceback. </p>\n\n<pre><code>type, value, traceback = sys.exc_info()\n</code></pre>\n\n<p>This is the syntax in Python 2 - note this is not compatible with Python 3:</p>\n\n<pre><code>    raise AppError, error, sys.exc_info()[2] # avoid this.\n    # Equivalently, as error *is* the second object:\n    raise sys.exc_info()[0], sys.exc_info()[1], sys.exc_info()[2]\n</code></pre>\n\n<p>If you want to, you can modify what happens with your new raise - e.g. setting new args for the instance:</p>\n\n<pre><code>def error():\n    raise ValueError('oops!')\n\ndef catch_error_modify_message():\n    try:\n        error()\n    except ValueError:\n        error_type, error_instance, traceback = sys.exc_info()\n        error_instance.args = (error_instance.args[0] + ' &lt;modification&gt;',)\n        raise error_type, error_instance, traceback\n</code></pre>\n\n<p>And we have preserved the whole traceback while modifying the args. Note that this is <strong>not a best practice</strong> and it is <strong>invalid syntax</strong> in Python 3 (making keeping compatibility much harder to work around).</p>\n\n<pre><code>&gt;&gt;&gt; catch_error_modify_message()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 3, in catch_error_modify_message\n  File \"&lt;stdin&gt;\", line 2, in error\nValueError: oops! &lt;modification&gt;\n</code></pre>\n\n<p>In <a href=\"https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement\" rel=\"noreferrer\">Python 3</a>:</p>\n\n<pre><code>    raise error.with_traceback(sys.exc_info()[2])\n</code></pre>\n\n<p>Again: avoid manually manipulating tracebacks. It's <a href=\"https://docs.python.org/2/reference/simple_stmts.html#the-raise-statement\" rel=\"noreferrer\">less efficient</a> and more error prone. And if you're using threading and <code>sys.exc_info</code> you may even get the wrong traceback (especially if you're using exception handling for control flow - which I'd personally tend to avoid.)</p>\n\n<h3>Python 3, Exception chaining</h3>\n\n<p>In Python 3, you can chain Exceptions, which preserve tracebacks:</p>\n\n<pre><code>    raise RuntimeError('specific message') from error\n</code></pre>\n\n<p>Be aware:</p>\n\n<ul>\n<li>this <em>does</em> allow changing the error type raised, and</li>\n<li>this is <em>not</em> compatible with Python 2.</li>\n</ul>\n\n<h3>Deprecated Methods:</h3>\n\n<p>These can easily hide and even get into production code. You want to raise an exception, and doing them will raise an exception, <strong>but not the one intended!</strong></p>\n\n<p><a href=\"http://www.python.org/dev/peps/pep-3109/\" rel=\"noreferrer\">Valid in Python 2, but not in Python 3</a> is the following:</p>\n\n<pre><code>raise ValueError, 'message' # Don't do this, it's deprecated!\n</code></pre>\n\n<p>Only <a href=\"https://docs.python.org/2/whatsnew/2.5.html#pep-352-exceptions-as-new-style-classes\" rel=\"noreferrer\">valid in much older versions of Python</a> (2.4 and lower), you may still see people raising strings:</p>\n\n<pre><code>raise 'message' # really really wrong. don't do this.\n</code></pre>\n\n<p>In all modern versions, this will actually raise a TypeError, because you're not raising a BaseException type. If you're not checking for the right exception and don't have a reviewer that's aware of the issue, it could get into production.</p>\n\n<h2>Example Usage</h2>\n\n<p>I raise Exceptions to warn consumers of my API if they're using it incorrectly:</p>\n\n<pre><code>def api_func(foo):\n    '''foo should be either 'baz' or 'bar'. returns something very useful.'''\n    if foo not in _ALLOWED_ARGS:\n        raise ValueError('{foo} wrong, use \"baz\" or \"bar\"'.format(foo=repr(foo)))\n</code></pre>\n\n<h2>Create your own error types when apropos</h2>\n\n<blockquote>\n  <p><strong>\"I want to make an error on purpose, so that it would go into the except\"</strong></p>\n</blockquote>\n\n<p>You can create your own error types, if you want to indicate something specific is wrong with your application, just subclass the appropriate point in the exception hierarchy:</p>\n\n<pre><code>class MyAppLookupError(LookupError):\n    '''raise this when there's a lookup error for my app'''\n</code></pre>\n\n<p>and usage:</p>\n\n<pre><code>if important_key not in resource_dict and not ok_to_be_missing:\n    raise MyAppLookupError('resource is missing, and that is not ok.')\n</code></pre>\n"
    },
    "766": {
        "question_id": "1623039",
        "answer_id": "1623085",
        "question": "<p>What are your best tips for debugging Python?</p>\n\n<p>Please don't just list a particular debugger without saying what it can actually do.</p>\n\n<h3>Related</h3>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/299704\">What are good ways to make my Python code run first time?</a> - This discusses minimizing errors</li>\n</ul>\n",
        "answer": "<p><strong><a href=\"http://docs.python.org/library/pdb.html\" rel=\"noreferrer\">PDB</a></strong></p>\n\n<p>You can use the pdb module, insert <code>pdb.set_trace()</code> anywhere and it will function as a breakpoint.</p>\n\n<pre><code>&gt;&gt;&gt; import pdb\n&gt;&gt;&gt; a=\"a string\"\n&gt;&gt;&gt; pdb.set_trace()\n--Return--\n&gt; &lt;stdin&gt;(1)&lt;module&gt;()-&gt;None\n(Pdb) p a\n'a string'\n(Pdb)\n</code></pre>\n\n<p>To continue execution use <code>c</code> (or <code>cont</code> or <code>continue</code>).</p>\n\n<p>It is possible to execute arbitrary Python expressions using pdb. For example, if you find a mistake, you can correct the code, then type a type expression to have the same effect in the running code</p>\n\n<p>ipdb is a version of pdb for <a href=\"http://en.wikipedia.org/wiki/IPython\" rel=\"noreferrer\">IPython</a>. It allows the use of pdb with all the IPython features including tab completion.</p>\n\n<p>It is also possible to <a href=\"http://code.activestate.com/recipes/65287/\" rel=\"noreferrer\">set pdb to automatically run</a> on an uncaught exception.</p>\n\n<p><a href=\"http://bashdb.sourceforge.net/pydb/\" rel=\"noreferrer\">Pydb</a> was written to be an enhanced version of Pdb. Benefits?</p>\n"
    },
    "767": {
        "question_id": "2998215",
        "answer_id": "2998228",
        "question": "<p>I've been given to understand that Python is an interpreted language... However, when I look at my Python source code I see <code>.pyc</code> files, which Windows identifies as \"Compiled Python Files\". Where do these come in?</p>\n",
        "answer": "<p>They contain <a href=\"http://en.wikipedia.org/wiki/Bytecode\" rel=\"noreferrer\">byte code</a>, which is what the Python interpreter compiles the source to. This code is then executed by Python's virtual machine. </p>\n\n<p>Python's documentation explains the definition like this:</p>\n\n<blockquote>\n  <p>Python is an interpreted language, as\n  opposed to a compiled one, though the\n  distinction can be blurry because of\n  the presence of the bytecode compiler.\n  This means that source files can be\n  run directly without explicitly\n  creating an executable which is then\n  run.</p>\n</blockquote>\n"
    },
    "768": {
        "question_id": "1319615",
        "answer_id": "1319675",
        "question": "<p>What's the proper way to declare custom exception classes in modern Python? My primary goal is to follow whatever standard other exception classes have, so that (for instance) any extra string I include in the exception is printed out by whatever tool caught the exception.</p>\n\n<p>By \"modern Python\" I mean something that will run in Python 2.5 but be 'correct' for the Python 2.6 and Python 3.* way of doing things. And by \"custom\" I mean an Exception object that can include extra data about the cause of the error: a string, maybe also some other arbitrary object relevant to the exception.</p>\n\n<p>I was tripped up by the following deprecation warning in Python 2.6.2:</p>\n\n<pre><code>&gt;&gt;&gt; class MyError(Exception):\n...     def __init__(self, message):\n...         self.message = message\n... \n&gt;&gt;&gt; MyError(\"foo\")\n_sandbox.py:3: DeprecationWarning: BaseException.message has been deprecated as of Python 2.6\n</code></pre>\n\n<p>It seems crazy that <code>BaseException</code> has a special meaning for attributes named <code>message</code>. I gather from <A href=\"http://www.python.org/dev/peps/pep-0352/\" rel=\"noreferrer\">PEP-352</a> that attribute did have a special meaning in 2.5 they're trying to deprecate away, so I guess that name (and that one alone) is now forbidden? Ugh.</p>\n\n<p>I'm also fuzzily aware that <code>Exception</code> has some magic parameter <code>args</code>, but I've never known how to use it. Nor am I sure it's the right way to do things going forward; a lot of the discussion I found online suggested they were trying to do away with args in Python 3.</p>\n\n<p>Update: two answers have suggested overriding <code>__init__</code>, and <code>__str__</code>/<code>__unicode__</code>/<code>__repr__</code>. That seems like a lot of typing, is it necessary?</p>\n",
        "answer": "<p>Maybe I missed the question, but why not:</p>\n\n<pre><code>class MyException(Exception):\n    pass\n</code></pre>\n\n<p><strong>Edit:</strong> to override something (or pass extra args), do this:</p>\n\n<pre><code>class ValidationError(Exception):\n    def __init__(self, message, errors):\n\n        # Call the base class constructor with the parameters it needs\n        super(ValidationError, self).__init__(message)\n\n        # Now for your custom code...\n        self.errors = errors\n</code></pre>\n\n<p>That way you could pass dict of error messages to the second param, and get to it later with <code>e.errors</code></p>\n\n<hr>\n\n<p><strong>Python 3 Update:</strong> In Python 3+, you can use this slightly more compact use of <code>super()</code>:</p>\n\n<pre><code>class ValidationError(Exception):\n    def __init__(self, message, errors):\n\n        # Call the base class constructor with the parameters it needs\n        super().__init__(message)\n\n        # Now for your custom code...\n        self.errors = errors\n</code></pre>\n"
    },
    "769": {
        "question_id": "19798153",
        "answer_id": "19798528",
        "question": "<p>Can you tell me when to use these vectorization methods with basic examples? </p>\n\n<p>I see that <code>map</code> is a <code>Series</code> method whereas the rest are <code>DataFrame</code> methods. I got confused about <code>apply</code> and <code>applymap</code> methods though. Why do we have two methods for applying a function to a DataFrame? Again, simple examples which illustrate the usage would be great!</p>\n",
        "answer": "<p>Straight from Wes McKinney's <a href=\"http://shop.oreilly.com/product/0636920023784.do\" rel=\"noreferrer\">Python for Data Analysis</a> book, pg. 132 (I highly recommended this book):</p>\n\n<blockquote>\n  <p>Another frequent operation is applying a function on 1D arrays to each column or row. DataFrame\u2019s apply method does exactly this:</p>\n</blockquote>\n\n<pre><code>In [116]: frame = DataFrame(np.random.randn(4, 3), columns=list('bde'), index=['Utah', 'Ohio', 'Texas', 'Oregon'])\n\nIn [117]: frame\nOut[117]: \n               b         d         e\nUtah   -0.029638  1.081563  1.280300\nOhio    0.647747  0.831136 -1.549481\nTexas   0.513416 -0.884417  0.195343\nOregon -0.485454 -0.477388 -0.309548\n\nIn [118]: f = lambda x: x.max() - x.min()\n\nIn [119]: frame.apply(f)\nOut[119]: \nb    1.133201\nd    1.965980\ne    2.829781\ndtype: float64\n</code></pre>\n\n<blockquote>\n  <p>Many of the most common array statistics (like sum and mean) are DataFrame methods,\n      so using apply is not necessary.</p>\n  \n  <p>Element-wise Python functions can be used, too. Suppose you wanted to compute a formatted string from each floating point value in frame. You can do this with applymap:</p>\n</blockquote>\n\n<pre><code>In [120]: format = lambda x: '%.2f' % x\n\nIn [121]: frame.applymap(format)\nOut[121]: \n            b      d      e\nUtah    -0.03   1.08   1.28\nOhio     0.65   0.83  -1.55\nTexas    0.51  -0.88   0.20\nOregon  -0.49  -0.48  -0.31\n</code></pre>\n\n<blockquote>\n  <p>The reason for the name applymap is that Series has a map method for applying an element-wise function:</p>\n</blockquote>\n\n<pre><code>In [122]: frame['e'].map(format)\nOut[122]: \nUtah       1.28\nOhio      -1.55\nTexas      0.20\nOregon    -0.31\nName: e, dtype: object\n</code></pre>\n\n<p>Summing up, <code>apply</code> works on a row / column basis of a DataFrame, <code>applymap</code> works element-wise on a DataFrame, and <code>map</code> works element-wise on a Series.</p>\n"
    },
    "770": {
        "question_id": "2776829",
        "answer_id": "2776865",
        "question": "<p>What is the difference between iterators and generators? Some examples for when you would use each case would be helpful.</p>\n",
        "answer": "<p><code>iterator</code> is a more general concept: any object whose class has a <code>next</code> method (<code>__next__</code> in Python 3) and an <code>__iter__</code> method that does <code>return self</code>.</p>\n\n<p>Every generator is an iterator, but not vice versa.  A generator is built by calling a function that has one or more <code>yield</code> expressions (<code>yield</code> statements, in Python 2.5 and earlier), and is an object that meets the previous paragraph's definition of an <code>iterator</code>.</p>\n\n<p>You may want to use a custom iterator, rather than a generator, when you need a class with somewhat complex state-maintaining behavior, or want to expose other methods besides <code>next</code> (and <code>__iter__</code> and <code>__init__</code>).  Most often, a generator (sometimes, for sufficiently simple needs, a generator <em>expression</em>) is sufficient, and it's simpler to code because state maintenance (within reasonable limits) is basically \"done for you\" by the frame getting suspended and resumed.</p>\n\n<p>For example, a generator such as:</p>\n\n<pre><code>def squares(start, stop):\n    for i in range(start, stop):\n        yield i * i\n\ngenerator = squares(a, b)\n</code></pre>\n\n<p>or the equivalent generator expression (genexp)</p>\n\n<pre><code>generator = (i*i for i in range(a, b))\n</code></pre>\n\n<p>would take more code to build as a custom iterator:</p>\n\n<pre><code>class Squares(object):\n    def __init__(self, start, stop):\n       self.start = start\n       self.stop = stop\n    def __iter__(self): return self\n    def next(self): # __next__ in Python 3\n       if self.start &gt;= self.stop:\n           raise StopIteration\n       current = self.start * self.start\n       self.start += 1\n       return current\n\niterator = Squares(a, b)\n</code></pre>\n\n<p>But, of course, with class <code>Squares</code> you could easily offer extra methods, i.e.</p>\n\n<pre><code>    def current(self):\n       return self.start\n</code></pre>\n\n<p>if you have any actual need for such extra functionality in your application.</p>\n"
    },
    "771": {
        "question_id": "38714959",
        "answer_id": "38737941",
        "question": "<p>I am trying to reconcile my understand of LSTMs and pointed out here in <a href=\"http://colah.github.io/posts/2015-08-Understanding-LSTMs/\" rel=\"noreferrer\">this post by Christopher Olah</a> implemented in Keras. I am following the <a href=\"http://machinelearningmastery.com/time-series-prediction-lstm-recurrent-neural-networks-python-keras/\" rel=\"noreferrer\">blog written by Jason Brownlee</a> for the Keras tutorial. What I am mainly confused about is, </p>\n\n<ol>\n<li>The reshaping of the data series into <code>[samples, time steps, features]</code> and,</li>\n<li>The stateful LSTMs </li>\n</ol>\n\n<p>Lets concentrate on the above two questions with reference to the code pasted below:</p>\n\n<pre><code># reshape into X=t and Y=t+1\nlook_back = 3\ntrainX, trainY = create_dataset(train, look_back)\ntestX, testY = create_dataset(test, look_back)\n\n# reshape input to be [samples, time steps, features]\ntrainX = numpy.reshape(trainX, (trainX.shape[0], look_back, 1))\ntestX = numpy.reshape(testX, (testX.shape[0], look_back, 1))\n########################\n# The IMPORTANT BIT\n##########################\n# create and fit the LSTM network\nbatch_size = 1\nmodel = Sequential()\nmodel.add(LSTM(4, batch_input_shape=(batch_size, look_back, 1), stateful=True))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error', optimizer='adam')\nfor i in range(100):\n    model.fit(trainX, trainY, nb_epoch=1, batch_size=batch_size, verbose=2, shuffle=False)\n    model.reset_states()\n</code></pre>\n\n<p>Note: create_dataset takes a sequence of length N and returns a <code>N-look_back</code> array of which each element is a <code>look_back</code> length sequence.    </p>\n\n<h1>What is Time Steps and Features?</h1>\n\n<p>As can be seen TrainX is a 3-D array with Time_steps and Feature being the last two dimensions respectively (3 and 1 in this particular code). With respect to the image below, does this mean that we are considering the <code>many to one</code> case, where the number of pink boxes are 3? Or does it literally mean the chain length is 3 (i.e. only 3 green boxes considered). <a href=\"https://i.stack.imgur.com/kwhAP.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/kwhAP.jpg\" alt=\"enter image description here\"></a></p>\n\n<p>Does the features argument become relevant when we consider multivariate series? e.g. modelling two financial stocks simultaneously? </p>\n\n<h1>Stateful LSTMs</h1>\n\n<p>Does stateful LSTMs mean that we save the cell memory values between runs of batches? If this is the case, <code>batch_size</code> is one, and the memory is reset between the training runs so what was the point of saying that it was stateful. I'm guessing this is related to the fact that training data is not shuffled, but I'm not sure how.</p>\n\n<p>Any thoughts?\nImage reference: <a href=\"http://karpathy.github.io/2015/05/21/rnn-effectiveness/\" rel=\"noreferrer\">http://karpathy.github.io/2015/05/21/rnn-effectiveness/</a></p>\n\n<h2>Edit 1:</h2>\n\n<p>A bit confused about @van's comment about the red and green boxes being equal. So just to confirm, does the following API calls correspond to the unrolled diagrams? Especially noting the second diagram (<code>batch_size</code> was arbitrarily chosen.):\n<a href=\"https://i.stack.imgur.com/sW207.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/sW207.jpg\" alt=\"enter image description here\"></a>\n<a href=\"https://i.stack.imgur.com/15V2C.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/15V2C.jpg\" alt=\"enter image description here\"></a></p>\n\n<h2>Edit 2:</h2>\n\n<p>For people who have done Udacity's deep learning course and still confused about the time_step argument, look at the following discussion: <a href=\"https://discussions.udacity.com/t/rnn-lstm-use-implementation/163169\" rel=\"noreferrer\">https://discussions.udacity.com/t/rnn-lstm-use-implementation/163169</a></p>\n\n<h2>Update:</h2>\n\n<p>It turns out <code>model.add(TimeDistributed(Dense(vocab_len)))</code> was what I was looking for. Here is an example: <a href=\"https://github.com/sachinruk/ShakespeareBot\" rel=\"noreferrer\">https://github.com/sachinruk/ShakespeareBot</a></p>\n\n<h2>Update2:</h2>\n\n<p>I have summarised most of my understanding of LSTMs here: <a href=\"https://www.youtube.com/watch?v=ywinX5wgdEU\" rel=\"noreferrer\">https://www.youtube.com/watch?v=ywinX5wgdEU</a></p>\n",
        "answer": "<p>First of all, you choose great tutorials(<a href=\"http://colah.github.io/posts/2015-08-Understanding-LSTMs/\">1</a>,<a href=\"http://karpathy.github.io/2015/05/21/rnn-effectiveness/\">2</a>) to start.</p>\n\n<p><strong>What Time-step means</strong>: <code>Time-steps==3</code> in X.shape (Describing data shape) means there are three pink boxes. Since in Keras each step requires an input, therefore the number of the green boxes should usually equal to the number of red boxes. Unless you hack the structure.</p>\n\n<p><strong>many to many vs. many to one</strong>: In keras, there is a <code>return_sequences</code> parameter when your initializing <code>LSTM</code> or <code>GRU</code> or <code>SimpleRNN</code>. When <code>return_sequences</code> is <code>False</code> (by default), then it is <strong>many to one</strong> as shown in the picture. Its return shape is <code>(batch_size, hidden_unit_length)</code>, which represent the last state. When <code>return_sequences</code> is <code>True</code>, then it is <strong>many to many</strong>. Its return shape is <code>(batch_size, time_step, hidden_unit_length)</code></p>\n\n<p><strong>Does the features argument become relevant</strong>: Feature argument means <strong>\"How big is your red box\"</strong> or what is the input dimension each step. If you want to predict from, say, 8 kinds of market information, then you can generate your data with <code>feature==8</code>.</p>\n\n<p><strong>Stateful</strong>: You can look up <a href=\"https://github.com/fchollet/keras/blob/master/keras/layers/recurrent.py#L223\">the source code</a>. When initializing the state, if <code>stateful==True</code>, then the state from last training will be used as the initial state, otherwise it will generate a new state. I haven't turn on <code>stateful</code> yet. However, I disagree with that the <code>batch_size</code> can only be 1 when <code>stateful==True</code>. </p>\n\n<p>Currently, you generate your data with collected data. Image your stock information is coming as stream, rather than waiting for a day to collect all sequential, you would like to generate input data <strong>online</strong> while training/predicting with network. If you have 400 stocks sharing a same network, then you can set <code>batch_size==400</code>. </p>\n"
    },
    "772": {
        "question_id": "25665",
        "answer_id": "25689",
        "question": "<p>Which are the best Python modules to convert PDF files into text? </p>\n",
        "answer": "<p>Try <a href=\"http://www.unixuser.org/~euske/python/pdfminer/index.html\" rel=\"nofollow noreferrer\">PDFMiner</a>. It can extract text from PDF files as HTML, SGML or \"Tagged PDF\" format.</p>\n\n<p>The Tagged PDF format seems to be the cleanest, and stripping out the XML tags leaves just the bare text.</p>\n\n<p>A Python 3 version is available under:</p>\n\n<ul>\n<li><a href=\"https://github.com/pdfminer/pdfminer.six\" rel=\"nofollow noreferrer\">https://github.com/pdfminer/pdfminer.six</a></li>\n</ul>\n"
    },
    "773": {
        "question_id": "2632520",
        "answer_id": "2635066",
        "question": "<p>I am opening a file which has 100,000 URL's.  I need to send an HTTP request to each URL and print the status code. I am using Python 2.6, and so far looked at the many confusing ways Python implements threading/concurrency.  I have even looked at the python <a href=\"http://opensource.hyves.org/concurrence\" rel=\"noreferrer\">concurrence</a> library, but cannot figure out how to write this program correctly.  Has anyone come across a similar problem?  I guess generally I need to know how to perform thousands of tasks in Python as fast as possible - I suppose that means 'concurrently'.</p>\n",
        "answer": "<p>Twistedless solution:</p>\n\n<pre><code>from urlparse import urlparse\nfrom threading import Thread\nimport httplib, sys\nfrom Queue import Queue\n\nconcurrent = 200\n\ndef doWork():\n    while True:\n        url = q.get()\n        status, url = getStatus(url)\n        doSomethingWithResult(status, url)\n        q.task_done()\n\ndef getStatus(ourl):\n    try:\n        url = urlparse(ourl)\n        conn = httplib.HTTPConnection(url.netloc)   \n        conn.request(\"HEAD\", url.path)\n        res = conn.getresponse()\n        return res.status, ourl\n    except:\n        return \"error\", ourl\n\ndef doSomethingWithResult(status, url):\n    print status, url\n\nq = Queue(concurrent * 2)\nfor i in range(concurrent):\n    t = Thread(target=doWork)\n    t.daemon = True\n    t.start()\ntry:\n    for url in open('urllist.txt'):\n        q.put(url.strip())\n    q.join()\nexcept KeyboardInterrupt:\n    sys.exit(1)\n</code></pre>\n\n<p>This one is slighty faster than the twisted solution and uses less CPU.</p>\n"
    },
    "774": {
        "question_id": "73663",
        "answer_id": "73673",
        "question": "<p>I am aware of the <code>die()</code> command in PHP which stops a script early.</p>\n\n<p>How can I do this in Python?</p>\n",
        "answer": "<pre><code>import sys\nsys.exit()\n</code></pre>\n\n<p>details from the <a href=\"https://docs.python.org/2/library/constants.html#exit\" rel=\"noreferrer\" title=\"exit\"><code>sys</code> module documentation</a>:</p>\n\n<blockquote>\n  <p><code>sys.<strong>exit</strong>([<em>arg</em>])</code></p>\n  \n  <blockquote>\n    <p>Exit from Python. This is implemented by raising the\n    <a href=\"https://docs.python.org/2/library/exceptions.html#SystemExit\" rel=\"noreferrer\" title=\"SystemExit\"><code>SystemExit</code></a> exception, so cleanup actions specified by finally clauses\n    of <a href=\"https://docs.python.org/2/reference/compound_stmts.html#try\" rel=\"noreferrer\" title=\"try\"><code>try</code></a> statements are honored, and it is possible to intercept the\n    exit attempt at an outer level.</p>\n    \n    <p>The optional argument <em>arg</em> can be an integer giving the exit status\n    (defaulting to zero), or another type of object. If it is an integer,\n    zero is considered \u201csuccessful termination\u201d and any nonzero value is\n    considered \u201cabnormal termination\u201d by shells and the like. Most systems\n    require it to be in the range 0-127, and produce undefined results\n    otherwise. Some systems have a convention for assigning specific\n    meanings to specific exit codes, but these are generally\n    underdeveloped; Unix programs generally use 2 for command line syntax\n    errors and 1 for all other kind of errors. If another type of object\n    is passed, None is equivalent to passing zero, and any other object is\n    printed to <a href=\"https://docs.python.org/2/library/sys.html#sys.stderr\" rel=\"noreferrer\" title=\"sys.stderr\"><code>stderr</code></a> and results in an exit code of 1. In particular,\n    <code>sys.exit(\"some error message\")</code> is a quick way to exit a program when\n    an error occurs.</p>\n    \n    <p>Since <a href=\"https://docs.python.org/2/library/constants.html#exit\" rel=\"noreferrer\" title=\"exit\"><code>exit()</code></a> ultimately \u201conly\u201d raises an exception, it will only exit\n    the process when called from the main thread, and the exception is not\n    intercepted.</p>\n  </blockquote>\n</blockquote>\n\n<p>Note that this is the 'nice' way to exit.  @<a href=\"https://stackoverflow.com/questions/73663/terminating-a-python-script#76374\">glyphtwistedmatrix</a> below points out that if you want a 'hard exit', you can use os._exit(<em>errorcode</em>), though it's likely os-specific to some extent (it might not take an errorcode under windows, for example), and it definitely is less friendly since it doesn't let the interpreter do any cleanup before the process dies.</p>\n"
    },
    "775": {
        "question_id": "2915471",
        "answer_id": "2916320",
        "question": "<p>I know the obvious answer is to use virtualenv and virtualenvwrapper, but for various reasons I can't/don't want to do that.</p>\n\n<p>So how do I modify the command</p>\n\n<pre><code>pip install package_name\n</code></pre>\n\n<p>to make <code>pip</code> install the package somewhere other than the default <code>site-packages</code>?</p>\n",
        "answer": "<p>Use:</p>\n\n<pre><code>pip install --install-option=\"--prefix=$PREFIX_PATH\" package_name\n</code></pre>\n\n<p>You might also want to use <code>--ignore-installed</code> to force all dependencies to be reinstalled using this new prefix.  You can use <code>--install-option</code> to multiple times to add any of the options you can use with <code>python setup.py install</code> (<code>--prefix</code> is probably what you want, but there are a bunch more options you could use).</p>\n"
    },
    "776": {
        "question_id": "7933596",
        "answer_id": "7934577",
        "question": "<p>I'm working on a <strong>multi-tenanted</strong> application in which some users can define their own data fields (via the admin) to collect additional data in forms and report on the data.  The latter bit makes JSONField not a great option, so instead I have the following solution:</p>\n\n<pre><code>class CustomDataField(models.Model):\n    \"\"\"\n    Abstract specification for arbitrary data fields.\n    Not used for holding data itself, but metadata about the fields.\n    \"\"\"\n    site = models.ForeignKey(Site, default=settings.SITE_ID)\n    name = models.CharField(max_length=64)\n\n    class Meta:\n        abstract = True\n\nclass CustomDataValue(models.Model):\n    \"\"\"\n    Abstract specification for arbitrary data.\n    \"\"\"\n    value = models.CharField(max_length=1024)\n\n    class Meta:\n        abstract = True\n</code></pre>\n\n<p>Note how CustomDataField has a ForeignKey to Site - each Site will have a different set of custom data fields, but use the same database.\nThen the various concrete data fields can be defined as:</p>\n\n<pre><code>class UserCustomDataField(CustomDataField):\n    pass\n\nclass UserCustomDataValue(CustomDataValue):\n    custom_field = models.ForeignKey(UserCustomDataField)\n    user = models.ForeignKey(User, related_name='custom_data')\n\n    class Meta:\n        unique_together=(('user','custom_field'),)\n</code></pre>\n\n<p>This leads to the following use:</p>\n\n<pre><code>custom_field = UserCustomDataField.objects.create(name='zodiac', site=my_site) #probably created in the admin\nuser = User.objects.create(username='foo')\nuser_sign = UserCustomDataValue(custom_field=custom_field, user=user, data='Libra')\nuser.custom_data.add(user_sign) #actually, what does this even do?\n</code></pre>\n\n<p>But this feels very clunky, particularly with the need to manually create the related data and associate it with the concrete model.  Is there a better approach?  </p>\n\n<p>Options that have been pre-emptively discarded:</p>\n\n<ul>\n<li>Custom SQL to modify tables on-the-fly.  Partly because this won't scale and partly because it's too much of a hack.</li>\n<li>Schema-less solutions like NoSQL.  I have nothing against them, but they're still not a good fit.  Ultimately this data <strong>is</strong> typed, and the possibility exists of using a third-party reporting application.</li>\n<li>JSONField, as listed above, as it's not going to work well with queries.</li>\n</ul>\n",
        "answer": "<p><strong><em>As of today, there are four available approaches, two of them requiring a certain storage backend:</em></strong></p>\n\n<ol>\n<li><p><strong><a href=\"https://github.com/mvpdev/django-eav\" rel=\"noreferrer\">Django-eav</a></strong> (the original package is no longer mantained but has some <strong><a href=\"https://github.com/mvpdev/django-eav/network\" rel=\"noreferrer\">thriving forks</a></strong>) </p>\n\n<p>This solution is based on <a href=\"https://en.wikipedia.org/wiki/Entity-attribute-value_model\" rel=\"noreferrer\">Entity Attribute Value</a> data model, essentially, it uses several tables to store dynamic attributes of objects. Great parts about this solution is that it:</p>\n\n<ul>\n<li>uses several pure and simple Django models to represent dynamic fields, which makes it simple to understand and database-agnostic; </li>\n<li><p>allows you to effectively attach/detach dynamic attribute storage to Django model with simple commands like:</p>\n\n<pre><code>eav.unregister(Encounter)\neav.register(Patient)\n</code></pre></li>\n<li><p><strong><a href=\"https://github.com/mvpdev/django-eav/blob/master/eav/admin.py\" rel=\"noreferrer\">Nicely integrates with Django admin</a></strong>;</p></li>\n<li><p>At the same time being really powerful.</p></li>\n</ul>\n\n<p>Downsides:</p>\n\n<ul>\n<li>Not very efficient.  This is more of a criticism of the EAV pattern itself, which requires manually merging the data from a column format to a set of key-value pairs in the model.</li>\n<li>Harder to maintain.  Maintaining data integrity requires a multi-column unique key constraint, which may be inefficient on some databases.</li>\n<li>You will need to select <a href=\"https://github.com/mvpdev/django-eav/network\" rel=\"noreferrer\">one of the forks</a>, since the official package is no longer maintained and there is no clear leader.</li>\n</ul>\n\n<p>The usage is pretty straightforward:</p>\n\n<pre><code>import eav\nfrom app.models import Patient, Encounter\n\neav.register(Encounter)\neav.register(Patient)\nAttribute.objects.create(name='age', datatype=Attribute.TYPE_INT)\nAttribute.objects.create(name='height', datatype=Attribute.TYPE_FLOAT)\nAttribute.objects.create(name='weight', datatype=Attribute.TYPE_FLOAT)\nAttribute.objects.create(name='city', datatype=Attribute.TYPE_TEXT)\nAttribute.objects.create(name='country', datatype=Attribute.TYPE_TEXT)\n\nself.yes = EnumValue.objects.create(value='yes')\nself.no = EnumValue.objects.create(value='no')\nself.unkown = EnumValue.objects.create(value='unkown')\nynu = EnumGroup.objects.create(name='Yes / No / Unknown')\nynu.enums.add(self.yes)\nynu.enums.add(self.no)\nynu.enums.add(self.unkown)\n\nAttribute.objects.create(name='fever', datatype=Attribute.TYPE_ENUM,\\\n                                       enum_group=ynu)\n\n# When you register a model within EAV,\n# you can access all of EAV attributes:\n\nPatient.objects.create(name='Bob', eav__age=12,\n                           eav__fever=no, eav__city='New York',\n                           eav__country='USA')\n# You can filter queries based on their EAV fields:\n\nquery1 = Patient.objects.filter(Q(eav__city__contains='Y'))\nquery2 = Q(eav__city__contains='Y') |  Q(eav__fever=no)\n</code></pre></li>\n<li><p><strong>Hstore, JSON or JSONB fields in PostgreSQL</strong></p>\n\n<p>PostgreSQL supports several more complex data types.  Most are supported via third-party packages, but in recent years Django has adopted them into django.contrib.postgres.fields.</p>\n\n<p><strong>HStoreField</strong>:</p>\n\n<p><a href=\"https://github.com/jordanm/django-hstore\" rel=\"noreferrer\">Django-hstore</a> was originally a third-party package, but Django 1.8 added <strong><a href=\"https://docs.djangoproject.com/en/1.8/ref/contrib/postgres/fields/#hstorefield\" rel=\"noreferrer\">HStoreField</a></strong> as a built-in, along with several other PostgreSQL-supported field types.</p>\n\n<p>This approach is good in a sense that it lets you have the best of both worlds: dynamic fields and relational database. However, hstore is <a href=\"http://archives.postgresql.org/pgsql-performance/2011-05/msg00263.php\" rel=\"noreferrer\">not ideal performance-wise</a>, especially if you are going to end up storing thousands of items in one field.  It also only supports strings for values.</p>\n\n<pre><code>#app/models.py\nfrom django.contrib.postgres.fields import HStoreField\nclass Something(models.Model):\n    name = models.CharField(max_length=32)\n    data = models.HStoreField(db_index=True)\n</code></pre>\n\n<p>In Django's shell you can use it like this:       </p>\n\n<pre><code>&gt;&gt;&gt; instance = Something.objects.create(\n                 name='something',\n                 data={'a': '1', 'b': '2'}\n           )\n&gt;&gt;&gt; instance.data['a']\n'1'        \n&gt;&gt;&gt; empty = Something.objects.create(name='empty')\n&gt;&gt;&gt; empty.data\n{}\n&gt;&gt;&gt; empty.data['a'] = '1'\n&gt;&gt;&gt; empty.save()\n&gt;&gt;&gt; Something.objects.get(name='something').data['a']\n'1'\n</code></pre>\n\n<p>You can issue indexed queries against hstore fields:</p>\n\n<pre><code># equivalence\nSomething.objects.filter(data={'a': '1', 'b': '2'})\n\n# subset by key/value mapping\nSomething.objects.filter(data__a='1')\n\n# subset by list of keys\nSomething.objects.filter(data__has_keys=['a', 'b'])\n\n# subset by single key\nSomething.objects.filter(data__has_key='a')    \n</code></pre>\n\n<p><strong>JSONField</strong>:</p>\n\n<p>JSON/JSONB fields support any JSON-encodable data type, not just key/value pairs, but also tend to be faster and (for JSONB) more compact than Hstore.\nSeveral packages implement JSON/JSONB fields including <strong><a href=\"https://django-pgfields.readthedocs.org/en/latest/fields.html\" rel=\"noreferrer\">django-pgfields</a></strong>, but as of Django 1.9, <strong><a href=\"https://docs.djangoproject.com/en/1.9/ref/contrib/postgres/fields/#jsonfield\" rel=\"noreferrer\">JSONField</a></strong> is a built-in using JSONB for storage.\n<strong>JSONField</strong> is similar to HStoreField, and may perform better with large dictionaries.  It also supports types other than strings, such as integers, booleans and nested dictionaries.</p>\n\n<pre><code>#app/models.py\nfrom django.contrib.postgres.fields import JSONField\nclass Something(models.Model):\n    name = models.CharField(max_length=32)\n    data = JSONField(db_index=True)\n</code></pre>\n\n<p>Creating in the shell:</p>\n\n<pre><code>&gt;&gt;&gt; instance = Something.objects.create(\n                 name='something',\n                 data={'a': 1, 'b': 2, 'nested': {'c':3}}\n           )\n</code></pre>\n\n<p>Indexed queries are nearly identical to HStoreField, except nesting is possible.  Complex indexes may require manually creation (or a scripted migration).</p>\n\n<pre><code>&gt;&gt;&gt; Something.objects.filter(data__a=1)\n&gt;&gt;&gt; Something.objects.filter(data__nested__c=3)\n&gt;&gt;&gt; Something.objects.filter(data__has_key='a')\n</code></pre></li>\n<li><p><strong><a href=\"http://django-mongodb-engine.readthedocs.org/en/latest/\" rel=\"noreferrer\">Django MongoDB</a></strong></p>\n\n<p>Or other NoSQL Django adaptations -- with them you can have fully dynamic models.</p>\n\n<p>NoSQL Django libraries are great, but keep in mind that they are not 100% the Django-compatible, for example, to migrate to <a href=\"http://www.allbuttonspressed.com/projects/django-nonrel\" rel=\"noreferrer\">Django-nonrel</a> from standard Django you will need to replace ManyToMany with <a href=\"https://stackoverflow.com/questions/3877246/django-nonrel-on-google-app-engine-implications-of-using-listfield-for-manytom\">ListField</a> among other things.     </p>\n\n<p>Checkout this Django MongoDB example:</p>\n\n<pre><code>from djangotoolbox.fields import DictField\n\nclass Image(models.Model):\n    exif = DictField()\n...\n\n&gt;&gt;&gt; image = Image.objects.create(exif=get_exif_data(...))\n&gt;&gt;&gt; image.exif\n{u'camera_model' : 'Spamcams 4242', 'exposure_time' : 0.3, ...}\n</code></pre>\n\n<p>You can even create <a href=\"http://django-mongodb.org/topics/embedded-models.html\" rel=\"noreferrer\">embedded lists</a> of any Django models:</p>\n\n<pre><code>class Container(models.Model):\n    stuff = ListField(EmbeddedModelField())\n\nclass FooModel(models.Model):\n    foo = models.IntegerField()\n\nclass BarModel(models.Model):\n    bar = models.CharField()\n...\n\n&gt;&gt;&gt; Container.objects.create(\n    stuff=[FooModel(foo=42), BarModel(bar='spam')]\n)\n</code></pre></li>\n<li><p><strong><a href=\"https://github.com/charettes/django-mutant\" rel=\"noreferrer\">Django-mutant: Dynamic models based on syncdb and South-hooks</a></strong></p>\n\n<p><a href=\"https://github.com/charettes/django-mutant\" rel=\"noreferrer\">Django-mutant</a> implements fully dynamic Foreign Key and m2m fields. And is inspired by incredible but somewhat hackish solutions by <a href=\"http://dynamic-models.readthedocs.org/en/latest/index.html\" rel=\"noreferrer\">Will Hardy</a> and Michael Hall.</p>\n\n<p>All of these are based on Django South hooks, which, according to <a href=\"http://blip.tv/djangocon-europe-2011/wednesday-1415-will-hardy-5311186\" rel=\"noreferrer\">Will Hardy's talk at DjangoCon 2011</a> <strong>(watch it!)</strong> are nevertheless robust and tested in production (<a href=\"http://dynamic-models.readthedocs.org/en/latest/\" rel=\"noreferrer\">relevant source code</a>).</p>\n\n<p>First to <a href=\"https://bitbucket.org/mhall119/dynamo/overview\" rel=\"noreferrer\">implement this</a> was <a href=\"http://mhall119.com/2011/02/fun-with-django-meta-classes-and-dynamic-models/\" rel=\"noreferrer\">Michael Hall</a>.</p>\n\n<p>Yes, this is magic, with these approaches you can achieve <strong>fully dynamic Django apps, models and fields</strong> with any relational database backend. But at what cost? Will stability of application suffer upon heavy use? These are the questions to be considered. You need to be sure to maintain a proper <a href=\"https://stackoverflow.com/questions/1123200/how-to-lock-a-critical-section-in-django\">lock</a> in order to allow simultaneous database altering requests.</p>\n\n<p>If you are using Michael Halls lib, your code will look like this:</p>\n\n<pre><code>from dynamo import models\n\ntest_app, created = models.DynamicApp.objects.get_or_create(\n                      name='dynamo'\n                    )\ntest, created = models.DynamicModel.objects.get_or_create(\n                  name='Test',\n                  verbose_name='Test Model',\n                  app=test_app\n               )\nfoo, created = models.DynamicModelField.objects.get_or_create(\n                  name = 'foo',\n                  verbose_name = 'Foo Field',\n                  model = test,\n                  field_type = 'dynamiccharfield',\n                  null = True,\n                  blank = True,\n                  unique = False,\n                  help_text = 'Test field for Foo',\n               )\nbar, created = models.DynamicModelField.objects.get_or_create(\n                  name = 'bar',\n                  verbose_name = 'Bar Field',\n                  model = test,\n                  field_type = 'dynamicintegerfield',\n                  null = True,\n                  blank = True,\n                  unique = False,\n                  help_text = 'Test field for Bar',\n               )\n</code></pre></li>\n</ol>\n"
    },
    "777": {
        "question_id": "4151128",
        "answer_id": "4151251",
        "question": "<p>What are the advantages and disadvantages of each?</p>\n\n<p>From what I've seen, either one can work as a replacement for the other if need be, so should I bother using both or should I stick to just one of them?</p>\n\n<p>Will the style of the program influence my choice? I am doing some machine learning using numpy, so there are indeed lots of matrices, but also lots of vectors (arrays).</p>\n",
        "answer": "<p>Numpy matrices are strictly 2-dimensional, while numpy arrays (ndarrays) are\nN-dimensional.  Matrix objects are a subclass of ndarray, so they inherit all\nthe attributes and methods of ndarrays.</p>\n\n<p>The main advantage of numpy matrices is that they provide a convenient notation\nfor matrix multiplication: if a and b are matrices, then a*b is their matrix\nproduct.</p>\n\n<pre><code>import numpy as np\n\na=np.mat('4 3; 2 1')\nb=np.mat('1 2; 3 4')\nprint(a)\n# [[4 3]\n#  [2 1]]\nprint(b)\n# [[1 2]\n#  [3 4]]\nprint(a*b)\n# [[13 20]\n#  [ 5  8]]\n</code></pre>\n\n<p>On the other hand, as of Python 3.5, NumPy supports infix matrix multiplication using the <code>@</code> operator, so you can achieve the same convenience of matrix multiplication with ndarrays in Python >= 3.5.</p>\n\n<pre><code>import numpy as np\n\na=np.array([[4, 3], [2, 1]])\nb=np.array([[1, 2], [3, 4]])\nprint(a@b)\n# [[13 20]\n#  [ 5  8]]\n</code></pre>\n\n<p>Both matrix objects and ndarrays have <code>.T</code> to return the transpose, but matrix\nobjects also have <code>.H</code> for the conjugate transpose, and <code>.I</code> for the inverse.</p>\n\n<p>In contrast, numpy arrays consistently abide by the rule that operations are\napplied element-wise (except for the new <code>@</code> operator). Thus, if <code>a</code> and <code>b</code> are numpy arrays, then <code>a*b</code> is the array\nformed by multiplying the components element-wise:</p>\n\n<pre><code>c=np.array([[4, 3], [2, 1]])\nd=np.array([[1, 2], [3, 4]])\nprint(c*d)\n# [[4 6]\n#  [6 4]]\n</code></pre>\n\n<p>To obtain the result of matrix multiplication, you use <code>np.dot</code> (or <code>@</code> in Python >= 3.5, as shown above):</p>\n\n<pre><code>print(np.dot(c,d))\n# [[13 20]\n#  [ 5  8]]\n</code></pre>\n\n<p>The <code>**</code> operator also behaves differently:</p>\n\n<pre><code>print(a**2)\n# [[22 15]\n#  [10  7]]\nprint(c**2)\n# [[16  9]\n#  [ 4  1]]\n</code></pre>\n\n<p>Since <code>a</code> is a matrix, <code>a**2</code> returns the matrix product <code>a*a</code>.\nSince <code>c</code> is an ndarray, <code>c**2</code> returns an ndarray with each component squared\nelement-wise.</p>\n\n<p>There are other technical differences between matrix objects and ndarrays\n(having to do with np.ravel, item selection and sequence behavior).</p>\n\n<p>The main advantage of numpy arrays is that they are more general than\n2-dimensional matrices. What happens when you want a 3-dimensional array? Then\nyou have to use an ndarray, not a matrix object. Thus, learning to use matrix\nobjects is more work -- you have to learn matrix object operations, and\nndarray operations.</p>\n\n<p>Writing a program that uses both matrices and arrays makes your life difficult\nbecause you have to keep track of what type of object your variables are, lest\nmultiplication return something you don't expect.</p>\n\n<p>In contrast, if you stick solely with ndarrays, then you can do everything\nmatrix objects can do, and more, except with slightly different\nfunctions/notation.</p>\n\n<p>If you are willing to give up the visual appeal of NumPy matrix product\nnotation (which can be achieved almost as elegantly with ndarrays in Python >= 3.5), then I think NumPy arrays are definitely the way to go.</p>\n\n<p>PS. Of course, you really don't have to choose one at the expense of the other,\nsince <code>np.asmatrix</code> and <code>np.asarray</code> allow you to convert one to the other (as\nlong as the array is 2-dimensional).</p>\n\n<hr>\n\n<p>There is a synopsis of the differences between NumPy <code>arrays</code> vs NumPy <code>matrix</code>es <a href=\"https://www.numpy.org/devdocs/user/numpy-for-matlab-users.html#array-or-matrix-which-should-i-use\" rel=\"noreferrer\">here</a>.</p>\n"
    },
    "778": {
        "question_id": "805066",
        "answer_id": "805081",
        "question": "<p>When creating a simple object hierarchy in Python, I'd like to be able to invoke methods of the parent class from a derived class.  In Perl and Java, there is a keyword for this (<a href=\"https://docs.oracle.com/javase/tutorial/java/IandI/super.html\" rel=\"noreferrer\"><code>super</code></a>).  In Perl, I might do this:</p>\n\n<pre><code>package Foo;\n\nsub frotz {\n    return \"Bamf\";\n}\n\npackage Bar;\n@ISA = qw(Foo);\n\nsub frotz {\n   my $str = SUPER::frotz();\n   return uc($str);\n}\n</code></pre>\n\n<p>In python, it appears that I have to name the parent class explicitly from the child.\nIn the example above, I'd have to do something like <code>Foo::frotz()</code>.  </p>\n\n<p>This doesn't seem right, since this behavior makes it hard to make deep hierarchies.  If children need to know what class defined an inherited method, then all sorts of information pain is created.  </p>\n\n<p>Is this an actual limitation in python, a gap in my understanding or both?</p>\n",
        "answer": "<p>Yes, but only with <a href=\"http://docs.python.org/glossary.html#term-new-style-class\" rel=\"noreferrer\">new-style classes</a>.  Use the <a href=\"http://docs.python.org/library/functions.html#super\" rel=\"noreferrer\"><code>super()</code></a> function:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>class Foo(Bar):\n    def baz(self, arg):\n        return super(Foo, self).baz(arg)\n</code></pre>\n\n<p>For Python 3.x, you can use:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>class Foo(Bar):\n    def baz(self, arg):\n        return super().baz(arg)\n</code></pre>\n"
    },
    "779": {
        "question_id": "513882",
        "answer_id": "513906",
        "question": "<p>I have about 10million values that I need to put in some type of look up table, so I was wondering which would be more efficient a <i>list</i> or <i>dict</i>?</p>\n\n<p>I know you can do something like this for both:</p>\n\n<pre><code>if something in dict_of_stuff:\n    pass\n</code></pre>\n\n<p>and</p>\n\n<pre><code>if something in list_of_stuff:\n    pass\n</code></pre>\n\n<p>My thought is the dict will be faster and more efficient.</p>\n\n<p>Thanks for your help.</p>\n\n<p><b>EDIT 1</b> <br>\nLittle more info on what I'm trying to do.  <a href=\"http://projecteuler.net/index.php?section=problems&amp;id=92\" rel=\"noreferrer\">Euler Problem 92</a>.  I'm making a look up table to see if a value calculated has all ready been calculated. </p>\n\n<p><b>EDIT 2</b> <br>\nEfficiency for look up.</p>\n\n<p><b>EDIT 3</b> <br>\nThere are no values assosiated with the value...so would a <i>set</i> be better?</p>\n",
        "answer": "<h1>Speed</h1>\n\n<p>Lookups in lists are O(n), lookups in dictionaries are amortized O(1), with regard to the number of items in the data structure. If you don't need to associate values, use sets.</p>\n\n<h1>Memory</h1>\n\n<p>Both dictionaries and sets use hashing and they use much more memory than only for object storage. According to A.M. Kuchling in <em>Beautiful Code</em>, the implementation tries to keep the hash 2/3 full, so you might waste quite some memory. </p>\n\n<p>If you do not add new entries on the fly (which you do, based on your updated question), it might be worthwhile to sort the list and use binary search. This is O(log n), and is likely to be slower for strings, impossible for objects which do not have a natural ordering.</p>\n"
    },
    "780": {
        "question_id": "4117530",
        "answer_id": "4118133",
        "question": "<p>I'm currently teaching myself Python and was just wondering (In reference to my example below) in simplified terms what the <code>sys.argv[1]</code> represents. Is it simply asking for an input?</p>\n\n<pre><code>#!/usr/bin/python3.1\n\n# import modules used here -- sys is a very standard one\nimport sys\n\n# Gather our code in a main() function\ndef main():\n  print ('Hello there', sys.argv[1])\n  # Command line args are in sys.argv[1], sys.argv[2] ..\n  # sys.argv[0] is the script name itself and can be ignored\n\n# Standard boilerplate to call the main() function to begin\n# the program.\nif __name__ == '__main__':\n  main()\n</code></pre>\n",
        "answer": "<p><em>I would like to note that previous answers made many assumptions about the user's knowledge. This answer attempts to answer the question at a more tutorial level.</em></p>\n\n<p>For every invocation of Python, <code>sys.argv</code> is automatically a list of strings representing the arguments (as separated by spaces) on the command-line. The name comes from the <a href=\"http://www.crasseux.com/books/ctutorial/argc-and-argv.html\" rel=\"noreferrer\">C programming convention</a> in which argv and argc represent the command line arguments.</p>\n\n<p>You'll want to learn more about lists and strings as you're familiarizing yourself with Python, but in the meantime, here are a few things to know.</p>\n\n<p>You can simply create a script that prints the arguments as they're represented. It also prints the number of arguments, using the <code>len</code> function on the list.</p>\n\n<pre><code>from __future__ import print_function\nimport sys\nprint(sys.argv, len(sys.argv))\n</code></pre>\n\n<p>The script requires Python 2.6 or later. If you call this script <code>print_args.py</code>, you can invoke it with different arguments to see what happens.</p>\n\n<pre><code>&gt; python print_args.py\n['print_args.py'] 1\n\n&gt; python print_args.py foo and bar\n['print_args.py', 'foo', 'and', 'bar'] 4\n\n&gt; python print_args.py \"foo and bar\"\n['print_args.py', 'foo and bar'] 2\n\n&gt; python print_args.py \"foo and bar\" and baz\n['print_args.py', 'foo and bar', 'and', 'baz'] 4\n</code></pre>\n\n<p>As you can see, the command-line arguments include the script name but not the interpreter name. In this sense, Python treats the script <em>as</em> the executable. If you need to know the name of the executable (python in this case), you can use <code>sys.executable</code>.</p>\n\n<p>You can see from the examples that it is possible to receive arguments that do contain spaces if the user invoked the script with arguments encapsulated in quotes, so what you get is the list of arguments as supplied by the user.</p>\n\n<p>Now in your Python code, you can use this list of strings as input to your program. Since lists are indexed by zero-based integers, you can get the individual items using the list[0] syntax. For example, to get the script name:</p>\n\n<pre><code>script_name = sys.argv[0] # this will always work.\n</code></pre>\n\n<p>Although interesting, you rarely need to know your script name. To get the first argument after the script for a filename, you could do the following:</p>\n\n<pre><code>filename = sys.argv[1]\n</code></pre>\n\n<p>This is a very common usage, but note that it will fail with an IndexError if no argument was supplied.</p>\n\n<p>Also, Python lets you reference a slice of a list, so to get <em>another list</em> of just the user-supplied arguments (but without the script name), you can do</p>\n\n<pre><code>user_args = sys.argv[1:] # get everything after the script name\n</code></pre>\n\n<p>Additionally, Python allows you to assign a sequence of items (including lists) to variable names. So if you expect the user to always supply two arguments, you can assign those arguments (as strings) to two variables:</p>\n\n<pre><code>user_args = sys.argv[1:]\nfun, games = user_args # len(user_args) had better be 2\n</code></pre>\n\n<p>So, to answer your specific question, <code>sys.argv[1]</code> represents the first command-line argument (as a <code>string</code>) supplied to the script in question. It will not prompt for input, but it will fail with an IndexError if no arguments are supplied on the command-line following the script name.</p>\n"
    },
    "781": {
        "question_id": "16503560",
        "answer_id": "16503807",
        "question": "<p>I'm trying to parse through a csv file and extract the data from only specific columns.</p>\n\n<p>Example csv:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>ID | Name | Address | City | State | Zip | Phone | OPEID | IPEDS |\n10 | C... | 130 W.. | Mo.. | AL... | 3.. | 334.. | 01023 | 10063 |\n</code></pre>\n\n<p>I'm trying to capture only specific columns, say <code>ID</code>, <code>Name</code>, <code>Zip</code> and <code>Phone</code>.</p>\n\n<p>Code I've looked at has led me to believe I can call the specific column by its corresponding number, so ie: <code>Name</code> would correspond to <code>2</code> and iterating through each row using <code>row[2]</code> would produce all the items in column 2. Only it doesn't.</p>\n\n<p>Here's what I've done so far:</p>\n\n<pre><code>import sys, argparse, csv\nfrom settings import *\n\n# command arguments\nparser = argparse.ArgumentParser(description='csv to postgres',\\\n fromfile_prefix_chars=\"@\" )\nparser.add_argument('file', help='csv file to import', action='store')\nargs = parser.parse_args()\ncsv_file = args.file\n\n# open csv file\nwith open(csv_file, 'rb') as csvfile:\n\n    # get number of columns\n    for line in csvfile.readlines():\n        array = line.split(',')\n        first_item = array[0]\n\n    num_columns = len(array)\n    csvfile.seek(0)\n\n    reader = csv.reader(csvfile, delimiter=' ')\n        included_cols = [1, 2, 6, 7]\n\n    for row in reader:\n            content = list(row[i] for i in included_cols)\n            print content\n</code></pre>\n\n<p>and I'm expecting that this will print out only the specific columns I want for each row except it doesn't, I get the last column only.</p>\n",
        "answer": "<p>The only way you would be getting the last column from this code is if you don't include your print statement <strong>in</strong> your <code>for</code> loop. </p>\n\n<p>This is most likely the end of your code:</p>\n\n<pre><code>for row in reader:\n    content = list(row[i] for i in included_cols)\nprint content\n</code></pre>\n\n<p>You want it to be this:</p>\n\n<pre><code>for row in reader:\n        content = list(row[i] for i in included_cols)\n        print content\n</code></pre>\n\n<p>Now that we have covered your mistake, I would like to take this time to introduce you to the <a href=\"http://pandas.pydata.org/\" rel=\"noreferrer\">pandas</a> module.</p>\n\n<p>Pandas is spectacular for dealing with csv files, and the following code would be all you need to read a csv and save an entire column into a variable:</p>\n\n<pre><code>import pandas as pd\ndf = pd.read_csv(csv_file)\nsaved_column = df.column_name #you can also use df['column_name']\n</code></pre>\n\n<p>so if you wanted to save all of the info in your column <code>Names</code> into a variable, this is all you need to do:</p>\n\n<pre><code>names = df.Names\n</code></pre>\n\n<p>It's a great module and I suggest you look into it. If for some reason your print statement was in <code>for</code> loop and it was still only printing out the last column, which shouldn't happen, but let me know if my assumption was wrong. Your posted code has a lot of indentation errors so it was hard to know what was supposed to be where. Hope this was helpful!</p>\n"
    },
    "782": {
        "question_id": "464040",
        "answer_id": "464977",
        "question": "<p>In PHP you can just use <code>$_POST</code> for POST and <code>$_GET</code> for GET (Query string) variables. What's the equivalent in Python?</p>\n",
        "answer": "<p>suppose you're posting a html form with this:</p>\n\n<pre><code>&lt;input type=\"text\" name=\"username\"&gt;\n</code></pre>\n\n<p>If using <a href=\"http://docs.python.org/library/cgi.html\" rel=\"noreferrer\">raw cgi</a>:</p>\n\n<pre><code>import cgi\nform = cgi.FieldStorage()\nprint form[\"username\"]\n</code></pre>\n\n<p>If using <a href=\"http://docs.djangoproject.com/\" rel=\"noreferrer\">Django</a>, <a href=\"http://pylonshq.com/\" rel=\"noreferrer\">Pylons</a>, <a href=\"http://flask.pocoo.org/\" rel=\"noreferrer\">Flask</a> or <a href=\"http://www.pylonsproject.org/projects/pyramid/about\" rel=\"noreferrer\">Pyramid</a>: </p>\n\n<pre><code>print request.GET['username'] # for GET form method\nprint request.POST['username'] # for POST form method\n</code></pre>\n\n<p>Using <a href=\"http://turbogears.org/\" rel=\"noreferrer\">Turbogears</a>, <a href=\"http://www.cherrypy.org/\" rel=\"noreferrer\">Cherrypy</a>:</p>\n\n<pre><code>from cherrypy import request\nprint request.params['username']\n</code></pre>\n\n<p><a href=\"http://webpy.org\" rel=\"noreferrer\">Web.py</a>:</p>\n\n<pre><code>form = web.input()\nprint form.username\n</code></pre>\n\n<p><a href=\"http://werkzeug.pocoo.org/\" rel=\"noreferrer\">Werkzeug</a>:</p>\n\n<pre><code>print request.form['username']\n</code></pre>\n\n<p>If using Cherrypy or Turbogears, you can also define your handler function taking a parameter directly:</p>\n\n<pre><code>def index(self, username):\n    print username\n</code></pre>\n\n<p><a href=\"https://developers.google.com/appengine/docs/python/gettingstartedpython27/introduction\" rel=\"noreferrer\">Google App Engine</a>:</p>\n\n<pre><code>class SomeHandler(webapp2.RequestHandler):\n    def post(self):\n        name = self.request.get('username') # this will get the value from the field named username\n        self.response.write(name) # this will write on the document\n</code></pre>\n\n<p>So you really will have to choose one of those frameworks.</p>\n"
    },
    "783": {
        "question_id": "4978787",
        "answer_id": "4978792",
        "question": "<p>I've tried to look around the web for answers to splitting a string into an array of characters but I can't seem to find a simple method</p>\n\n<p><code>str.split(//)</code> does not seem to work like Ruby does. Is there a simple way of doing this without looping?</p>\n",
        "answer": "<pre><code>&gt;&gt;&gt; s = \"foobar\"\n&gt;&gt;&gt; list(s)\n['f', 'o', 'o', 'b', 'a', 'r']\n</code></pre>\n\n<p>You need <a href=\"http://docs.python.org/library/functions.html#list\" rel=\"noreferrer\">list</a></p>\n"
    },
    "784": {
        "question_id": "1546226",
        "answer_id": "1546244",
        "question": "<p>Suppose this is the string:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>The   fox jumped   over    the log.\n</code></pre>\n\n<p>It would result in:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>The fox jumped over the log.\n</code></pre>\n\n<p>What is the simplest, 1-2 liner that can do this? Without splitting and going into lists...</p>\n",
        "answer": "<pre><code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; re.sub(' +', ' ', 'The     quick brown    fox')\n'The quick brown fox'\n</code></pre>\n"
    },
    "785": {
        "question_id": "15455048",
        "answer_id": "15457947",
        "question": "<p>I have a few related questions regarding memory usage in the following example.</p>\n\n<ol>\n<li><p>If I run in the interpreter,</p>\n\n<pre><code>foo = ['bar' for _ in xrange(10000000)]\n</code></pre>\n\n<p>the real memory used on my machine goes up to <code>80.9mb</code>. I then,</p>\n\n<pre><code>del foo\n</code></pre>\n\n<p>real memory goes down, but only to <code>30.4mb</code>. The interpreter uses <code>4.4mb</code> baseline so what is the advantage in not releasing <code>26mb</code> of memory to the OS? Is it because Python is \"planning ahead\", thinking that you may use that much memory again?</p></li>\n<li><p>Why does it release <code>50.5mb</code> in particular - what is the amount that is released based on?</p></li>\n<li><p>Is there a way to force Python to release all the memory that was used (if you know you won't be using that much memory again)?</p></li>\n</ol>\n\n<p><strong>NOTE</strong>\nThis question is different from <a href=\"https://stackoverflow.com/questions/1316767/how-can-i-explicitly-free-memory-in-python\">How can I explicitly free memory in Python?</a>\nbecause this question primarily deals with the increase of memory usage from baseline even after the interpreter has freed objects via garbage collection (with use of <code>gc.collect</code> or not).</p>\n",
        "answer": "<p>Memory allocated on the heap can be subject to high-water marks. This is complicated by Python's internal optimizations for allocating small objects (<code>PyObject_Malloc</code>) in 4 KiB pools, classed for allocation sizes at multiples of 8 bytes -- up to 256 bytes (512 bytes in 3.3). The pools themselves are in 256 KiB arenas, so if just one block in one pool is used, the entire 256 KiB arena will not be released. In Python 3.3 the small object allocator was switched to using anonymous memory maps instead of the heap, so it should perform better at releasing memory.</p>\n\n<p>Additionally, the built-in types maintain freelists of previously allocated objects that may or may not use the small object allocator. The <code>int</code> type maintains a freelist with its own allocated memory, and clearing it requires calling <code>PyInt_ClearFreeList()</code>. This can be called indirectly by doing a full <code>gc.collect</code>. </p>\n\n<p>Try it like this, and tell me what you get. Here's the link for <a href=\"https://psutil.readthedocs.io/en/latest/index.html#psutil.Process.memory_info\" rel=\"nofollow noreferrer\">psutil.Process.memory_info</a>.</p>\n\n<pre><code>import os\nimport gc\nimport psutil\n\nproc = psutil.Process(os.getpid())\ngc.collect()\nmem0 = proc.get_memory_info().rss\n\n# create approx. 10**7 int objects and pointers\nfoo = ['abc' for x in range(10**7)]\nmem1 = proc.get_memory_info().rss\n\n# unreference, including x == 9999999\ndel foo, x\nmem2 = proc.get_memory_info().rss\n\n# collect() calls PyInt_ClearFreeList()\n# or use ctypes: pythonapi.PyInt_ClearFreeList()\ngc.collect()\nmem3 = proc.get_memory_info().rss\n\npd = lambda x2, x1: 100.0 * (x2 - x1) / mem0\nprint \"Allocation: %0.2f%%\" % pd(mem1, mem0)\nprint \"Unreference: %0.2f%%\" % pd(mem2, mem1)\nprint \"Collect: %0.2f%%\" % pd(mem3, mem2)\nprint \"Overall: %0.2f%%\" % pd(mem3, mem0)\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>Allocation: 3034.36%\nUnreference: -752.39%\nCollect: -2279.74%\nOverall: 2.23%\n</code></pre>\n\n<p>Edit:</p>\n\n<p>I switched to measuring relative to the process VM size to eliminate the effects of other processes in the system.</p>\n\n<p>The C runtime (e.g. glibc, msvcrt) shrinks the heap when contiguous free space at the top reaches a constant, dynamic, or configurable threshold. With glibc you can tune this with <a href=\"http://man7.org/linux/man-pages/man3/mallopt.3.html\" rel=\"nofollow noreferrer\"><code>mallopt</code></a> (M_TRIM_THRESHOLD). Given this, it isn't surprising if the heap shrinks by more -- even a lot more -- than the block that you <code>free</code>. </p>\n\n<p>In 3.x <code>range</code> doesn't create a list, so the test above won't create 10 million <code>int</code> objects. Even if it did, the <code>int</code> type in 3.x is basically a 2.x <code>long</code>, which doesn't implement a freelist.</p>\n"
    },
    "786": {
        "question_id": "107405",
        "answer_id": "107427",
        "question": "<p>What I'm trying to do here is get the headers of a given URL so I can determine the MIME type. I want to be able to see if <code>http://somedomain/foo/</code> will return an HTML document or a JPEG image for example. Thus, I need to figure out how to send a HEAD request so that I can read the MIME type without having to download the content. Does anyone know of an easy way of doing this?</p>\n",
        "answer": "<p><strong>edit</strong>: This answer works, but nowadays you should just use the <a href=\"http://docs.python-requests.org/en/latest/index.html\" rel=\"noreferrer\">requests</a> library as mentioned by other answers below.</p>\n\n<hr>\n\n<p>Use <a href=\"https://docs.python.org/2/library/httplib.html\" rel=\"noreferrer\">httplib</a>.</p>\n\n<pre><code>&gt;&gt;&gt; import httplib\n&gt;&gt;&gt; conn = httplib.HTTPConnection(\"www.google.com\")\n&gt;&gt;&gt; conn.request(\"HEAD\", \"/index.html\")\n&gt;&gt;&gt; res = conn.getresponse()\n&gt;&gt;&gt; print res.status, res.reason\n200 OK\n&gt;&gt;&gt; print res.getheaders()\n[('content-length', '0'), ('expires', '-1'), ('server', 'gws'), ('cache-control', 'private, max-age=0'), ('date', 'Sat, 20 Sep 2008 06:43:36 GMT'), ('content-type', 'text/html; charset=ISO-8859-1')]\n</code></pre>\n\n<p>There's also a <code>getheader(name)</code> to get a specific header.</p>\n"
    },
    "787": {
        "question_id": "1960516",
        "answer_id": "1960649",
        "question": "<p>I have a <code>Decimal('3.9')</code> as part of an object, and wish to encode this to a JSON string which should look like <code>{'x': 3.9}</code>. I don't care about precision on the client side, so a float is fine.</p>\n\n<p>Is there a good way to serialize this? JSONDecoder doesn't accept Decimal objects, and converting to a float beforehand yields <code>{'x': 3.8999999999999999}</code> which is wrong, and will be a big waste of bandwidth.</p>\n",
        "answer": "<p>How about subclassing <code>json.JSONEncoder</code>?</p>\n\n<pre><code>class DecimalEncoder(json.JSONEncoder):\n    def _iterencode(self, o, markers=None):\n        if isinstance(o, decimal.Decimal):\n            # wanted a simple yield str(o) in the next line,\n            # but that would mean a yield on the line with super(...),\n            # which wouldn't work (see my comment below), so...\n            return (str(o) for o in [o])\n        return super(DecimalEncoder, self)._iterencode(o, markers)\n</code></pre>\n\n<p>Then use it like so:</p>\n\n<pre><code>json.dumps({'x': decimal.Decimal('5.5')}, cls=DecimalEncoder)\n</code></pre>\n"
    },
    "788": {
        "question_id": "19672352",
        "answer_id": "19719292",
        "question": "<p>I am writing a pyqt application which require to execute admin task. I would prefer to start my script with elevate privilege. I am aware that this question is asked many times in SO or in other forum. But the solution people are suggesting is to have a look at this SO question\n<a href=\"https://stackoverflow.com/questions/130763/request-uac-elevation-from-within-a-python-script\">Request UAC elevation from within a Python script?</a></p>\n\n<p>However, I am unable to execute the sample code given in the link. I have put this code on top of the main file and tried to execute it. </p>\n\n<pre><code>import os\nimport sys\nimport win32com.shell.shell as shell\nASADMIN = 'asadmin'\n\nif sys.argv[-1] != ASADMIN:\n    script = os.path.abspath(sys.argv[0])\n    params = ' '.join([script] + sys.argv[1:] + [ASADMIN])\n    shell.ShellExecuteEx(lpVerb='runas', lpFile=sys.executable, lpParameters=params)\n    sys.exit(0)\nprint \"I am root now.\"\n</code></pre>\n\n<p>It actually ask permission to elevate but print line never get executed. Somebody can help me to run the above code successfully. Thanks in advance.</p>\n",
        "answer": "<p>Thank you all for your reply. I have got my script working with the module/ script written by Preston Landers way back in 2010. After two days of browsing the internet I could find the script as it was was deeply hidden in pywin32 mailing list. With this script it is easier to check if the user is admin and if not then ask for UAC/ admin right. It does provide output in separate windows to find out what the code is doing. Example on how to use the code also included in the script. For the benefit of all who all are looking for UAC on windows have a look at this code. I hope it helps someone looking for same solution. It can be used something like this from your main script:-</p>\n\n<pre><code>import admin\nif not admin.isUserAdmin():\n        admin.runAsAdmin()\n</code></pre>\n\n<p>The actual code is:-</p>\n\n<pre><code>#!/usr/bin/env python\n# -*- coding: utf-8; mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-\n# vim: fileencoding=utf-8 tabstop=4 expandtab shiftwidth=4\n\n# (C) COPYRIGHT \u00a9 Preston Landers 2010\n# Released under the same license as Python 2.6.5\n\n\nimport sys, os, traceback, types\n\ndef isUserAdmin():\n\n    if os.name == 'nt':\n        import ctypes\n        # WARNING: requires Windows XP SP2 or higher!\n        try:\n            return ctypes.windll.shell32.IsUserAnAdmin()\n        except:\n            traceback.print_exc()\n            print \"Admin check failed, assuming not an admin.\"\n            return False\n    elif os.name == 'posix':\n        # Check for root on Posix\n        return os.getuid() == 0\n    else:\n        raise RuntimeError, \"Unsupported operating system for this module: %s\" % (os.name,)\n\ndef runAsAdmin(cmdLine=None, wait=True):\n\n    if os.name != 'nt':\n        raise RuntimeError, \"This function is only implemented on Windows.\"\n\n    import win32api, win32con, win32event, win32process\n    from win32com.shell.shell import ShellExecuteEx\n    from win32com.shell import shellcon\n\n    python_exe = sys.executable\n\n    if cmdLine is None:\n        cmdLine = [python_exe] + sys.argv\n    elif type(cmdLine) not in (types.TupleType,types.ListType):\n        raise ValueError, \"cmdLine is not a sequence.\"\n    cmd = '\"%s\"' % (cmdLine[0],)\n    # XXX TODO: isn't there a function or something we can call to massage command line params?\n    params = \" \".join(['\"%s\"' % (x,) for x in cmdLine[1:]])\n    cmdDir = ''\n    showCmd = win32con.SW_SHOWNORMAL\n    #showCmd = win32con.SW_HIDE\n    lpVerb = 'runas'  # causes UAC elevation prompt.\n\n    # print \"Running\", cmd, params\n\n    # ShellExecute() doesn't seem to allow us to fetch the PID or handle\n    # of the process, so we can't get anything useful from it. Therefore\n    # the more complex ShellExecuteEx() must be used.\n\n    # procHandle = win32api.ShellExecute(0, lpVerb, cmd, params, cmdDir, showCmd)\n\n    procInfo = ShellExecuteEx(nShow=showCmd,\n                              fMask=shellcon.SEE_MASK_NOCLOSEPROCESS,\n                              lpVerb=lpVerb,\n                              lpFile=cmd,\n                              lpParameters=params)\n\n    if wait:\n        procHandle = procInfo['hProcess']    \n        obj = win32event.WaitForSingleObject(procHandle, win32event.INFINITE)\n        rc = win32process.GetExitCodeProcess(procHandle)\n        #print \"Process handle %s returned code %s\" % (procHandle, rc)\n    else:\n        rc = None\n\n    return rc\n\ndef test():\n    rc = 0\n    if not isUserAdmin():\n        print \"You're not an admin.\", os.getpid(), \"params: \", sys.argv\n        #rc = runAsAdmin([\"c:\\\\Windows\\\\notepad.exe\"])\n        rc = runAsAdmin()\n    else:\n        print \"You are an admin!\", os.getpid(), \"params: \", sys.argv\n        rc = 0\n    x = raw_input('Press Enter to exit.')\n    return rc\n\n\nif __name__ == \"__main__\":\n    sys.exit(test())\n</code></pre>\n"
    },
    "789": {
        "question_id": "13704860",
        "answer_id": "13704903",
        "question": "<p>I am trying to learn how to \"zip\" lists. To this end, I have a program, where at a particular point, I do the following:</p>\n\n<pre><code>x1, x2, x3 = stuff.calculations(withdataa)\n</code></pre>\n\n<p>This gives me three lists, <code>x1</code>, <code>x2</code>, and <code>x3</code>, each of, say, size 20.</p>\n\n<p>Now, I do:</p>\n\n<pre><code>zipall = zip(x1, x2, x3)\n</code></pre>\n\n<p>However, when I do:</p>\n\n<pre><code>print \"len of zipall %s\" % len(zipall)\n</code></pre>\n\n<p>I get 20, which is not what I expected. I expected three. I think I am doing something fundamentally wrong.</p>\n",
        "answer": "<p>When you <code>zip()</code> together three lists containing 20 elements each, the result has twenty elements. Each element is a three-tuple.</p>\n\n<p>See for yourself:</p>\n\n<pre><code>In [1]: a = b = c = range(20)\n\nIn [2]: zip(a, b, c)\nOut[2]: \n[(0, 0, 0),\n (1, 1, 1),\n ...\n (17, 17, 17),\n (18, 18, 18),\n (19, 19, 19)]\n</code></pre>\n\n<p>To find out how many elements each tuple contains, you could examine the length of the first element:</p>\n\n<pre><code>In [3]: result = zip(a, b, c)\n\nIn [4]: len(result[0])\nOut[4]: 3\n</code></pre>\n\n<p>Of course, this won't work if the lists were empty to start with.</p>\n"
    },
    "790": {
        "question_id": "17873384",
        "answer_id": "17873397",
        "question": "<p>I have some problem with a List copy:  </p>\n\n<p>So After I got <code>E0</code> from <code>'get_edge'</code>, I make a copy of <code>E0</code> by calling <code>'E0_copy = list(E0)'</code>. Here I guess <code>E0_copy</code> is a deep copy of <code>E0</code>, and I pass <code>E0_copy</code> into <code>'karger(E)'</code>. But in the main function.<br>\nWhy does the result of <code>'print E0[1:10]'</code> before the for loop is not the same with that after the for loop? </p>\n\n<p>Below is my code:</p>\n\n<pre><code>def get_graph():\n    f=open('kargerMinCut.txt')\n    G={}\n    for line in f:\n        ints = [int(x) for x in line.split()]\n        G[ints[0]]=ints[1:len(ints)]\n    return G\n\ndef get_edge(G):\n    E=[]\n    for i in range(1,201):\n        for v in G[i]:\n            if v&gt;i:\n                E.append([i,v])\n    print id(E)\n    return E\n\ndef karger(E):\n    import random\n    count=200 \n    while 1:\n        if count == 2:\n            break\n        edge = random.randint(0,len(E)-1)\n        v0=E[edge][0]\n        v1=E[edge][1]                   \n        E.pop(edge)\n        if v0 != v1:\n            count -= 1\n            i=0\n            while 1:\n                if i == len(E):\n                    break\n                if E[i][0] == v1:\n                    E[i][0] = v0\n                if E[i][1] == v1:\n                    E[i][1] = v0\n                if E[i][0] == E[i][1]:\n                    E.pop(i)\n                    i-=1\n                i+=1\n\n    mincut=len(E)\n    return mincut\n\n\nif __name__==\"__main__\":\n    import copy\n    G = get_graph()\n    results=[]\n    E0 = get_edge(G)\n    print E0[1:10]               ## this result is not equal to print2\n    for k in range(1,5):\n        E0_copy=list(E0)         ## I guess here E0_coypy is a deep copy of E0\n        results.append(karger(E0_copy))\n       #print \"the result is %d\" %min(results)\n    print E0[1:10]               ## this is print2\n</code></pre>\n",
        "answer": "<p><code>E0_copy</code> is not a deep copy. You don't make a deep copy using <code>list()</code> (Both <code>list(...)</code> and <code>testList[:]</code> are shallow copies).</p>\n\n<p>You use <a href=\"http://docs.python.org/2/library/copy.html#copy.deepcopy\" rel=\"noreferrer\"><code>copy.deepcopy(...)</code></a> for deep copying a list.</p>\n\n<pre><code>deepcopy(x, memo=None, _nil=[])\n    Deep copy operation on arbitrary Python objects.\n</code></pre>\n\n<p>See the following snippet - </p>\n\n<pre><code>&gt;&gt;&gt; a = [[1, 2, 3], [4, 5, 6]]\n&gt;&gt;&gt; b = list(a)\n&gt;&gt;&gt; a\n[[1, 2, 3], [4, 5, 6]]\n&gt;&gt;&gt; b\n[[1, 2, 3], [4, 5, 6]]\n&gt;&gt;&gt; a[0][1] = 10\n&gt;&gt;&gt; a\n[[1, 10, 3], [4, 5, 6]]\n&gt;&gt;&gt; b   # b changes too -&gt; Not a deepcopy.\n[[1, 10, 3], [4, 5, 6]]\n</code></pre>\n\n<p>Now see the <code>deepcopy</code> operation</p>\n\n<pre><code>&gt;&gt;&gt; import copy\n&gt;&gt;&gt; b = copy.deepcopy(a)\n&gt;&gt;&gt; a\n[[1, 10, 3], [4, 5, 6]]\n&gt;&gt;&gt; b\n[[1, 10, 3], [4, 5, 6]]\n&gt;&gt;&gt; a[0][1] = 9\n&gt;&gt;&gt; a\n[[1, 9, 3], [4, 5, 6]]\n&gt;&gt;&gt; b    # b doesn't change -&gt; Deep Copy\n[[1, 10, 3], [4, 5, 6]]\n</code></pre>\n"
    },
    "791": {
        "question_id": "2322355",
        "answer_id": "2322384",
        "question": "<p>What is the correct name for operator <code>*</code>, as in <code>function(*args)</code>?  unpack, unzip, something else?</p>\n",
        "answer": "<p>In Ruby and Perl 6 this has been called \"splat\", and I think most people from those communities will figure out what you mean if you call it that.</p>\n\n<p>The <a href=\"http://docs.python.org/tutorial/controlflow.html#unpacking-argument-lists\" rel=\"noreferrer\">Python tutorial</a> uses the phrase \"unpacking argument lists\", which is long and descriptive.  I haven't heard any other particular name for it in Python.</p>\n"
    },
    "792": {
        "question_id": "434597",
        "answer_id": "434612",
        "question": "<p>I need to be able to open a document using its default application in Windows and Mac OS. Basically, I want to do the same thing that happens when you double-click on the document icon in Explorer or Finder. What is the best way to do this in Python?</p>\n",
        "answer": "<p><code>open</code> and <code>start</code> are command-interpreter things for Mac OS/X and Windows respectively, to do this.</p>\n\n<p>To call them from Python, you can either use <code>subprocess</code> module or <code>os.system()</code>. </p>\n\n<p>Here are considerations on which package to use:</p>\n\n<ol>\n<li><p>You can call them via <code>os.system</code>, which works, but...</p>\n\n<p><strong>Escaping:</strong> <code>os.system</code> only works with filenames that don't have any spaces or other shell metacharacters in the pathname (e.g. <code>A:\\abc\\def\\a.txt</code>), or else these need to be escaped. There is <code>shlex.quote</code> for Unix-like systems, but nothing really standard for Windows. Maybe see also <a href=\"https://stackoverflow.com/questions/33560364/python-windows-parsing-command-lines-with-shlex\">python, windows : parsing command lines with shlex</a></p>\n\n<ul>\n<li>MacOS/X: <code>os.system(\"open \" + shlex.quote(filename))</code></li>\n<li>Windows: <code>os.system(\"start \" + filename)</code> where properly speaking <code>filename</code> should be escaped, too.</li>\n</ul></li>\n<li><p>You can also call them via <code>subprocess</code> module, but...</p>\n\n<p>For Python 2.7 and newer, simply use</p>\n\n<pre><code>subprocess.check_call(['open', filename])\n</code></pre>\n\n<p>In Python 3.5+ you can equivalently use the slightly more complex but also somewhat more versatile</p>\n\n<pre><code>subprocess.run(['open', filename], check=True)\n</code></pre>\n\n<p>If you need to be compatible all the way back to Python 2.4, you can use <code>subprocess.call()</code> and implement your own error checking:</p>\n\n<pre><code>try:\n    retcode = subprocess.call(\"open \" + filename, shell=True)\n    if retcode &lt; 0:\n        print &gt;&gt;sys.stderr, \"Child was terminated by signal\", -retcode\n    else:\n        print &gt;&gt;sys.stderr, \"Child returned\", retcode\nexcept OSError, e:\n    print &gt;&gt;sys.stderr, \"Execution failed:\", e\n</code></pre>\n\n<p>Now, what are the advantages of using <code>subprocess</code>?</p>\n\n<ul>\n<li><strong>Security:</strong> In theory, this is more secure, but in fact we're needing to execute a command line one way or the other; in either environment, we need the environment and services to interpret, get paths, and so forth.  In neither case are we executing arbitrary text, so it doesn't have an inherent \"but you can type <code>'filename ; rm -rf /'</code>\" problem, and <strong>if</strong> the file name can be corrupted, using <code>subprocess.call</code> gives us little additional protection.</li>\n<li><strong>Error handling:</strong> It doesn't actually give us any more error detection, we're still depending on the <code>retcode</code> in either case; but the behavior to explicitly raise an exception in the case of an error will certainly help you notice if there is a failure (though in some scenarios, a traceback might not at all be more helpful than simply ignoring the error).</li>\n<li><strong>Spawns a (non-blocking) subprocess</strong>: We don't need to wait for the child process, since we're by problem statement starting a separate process.</li>\n</ul>\n\n<p>To the objection \"But <code>subprocess</code> is preferred.\"  However, <code>os.system()</code> is not deprecated, and it's in some sense the simplest tool for this particular job. Conclusion: using <code>os.system()</code> is therefore also a correct answer.</p>\n\n<p>A marked <strong>disadvantage</strong> is that the Windows <code>start</code> command <em>requires</em> you to pass in <code>shell=True</code> which negates most of the benefits of using <code>subprocess</code>.</p></li>\n</ol>\n"
    },
    "793": {
        "question_id": "54432583",
        "answer_id": "54432584",
        "question": "<p>This is a self-answered QnA meant to instruct users about the pitfalls and benefits of apply. </p>\n\n<p>I have seen many answers posted to questions on Stack Overflow involving the use of apply. I have also seen users commenting under them saying that \"<code>apply</code> is slow\", and should be avoided\". </p>\n\n<p>I have read many articles on the topic of performance that explain <code>apply</code> is slow. I have also seen a disclaimer in the docs about how <code>apply</code> is simply a convenience function for passing UDFs (can't seem to find that now). So, the general consensus is that <code>apply</code> should be avoided if possible. However, this raises the following questions: </p>\n\n<ol>\n<li>If <code>apply</code> is so bad, then why is it in the API?</li>\n<li>How and when should I make my code <code>apply</code>-free?</li>\n<li>Are there ever any situations where <code>apply</code> is <em>good</em> (better than other possible solutions)? </li>\n</ol>\n",
        "answer": "<h1><code>apply</code>, the Convenience Function you Never Needed</h1>\n\n<p>We start by addressing the questions in the OP, one by one.</p>\n\n<blockquote>\n  <h2>\"<em>If</em> apply <em>is so bad, then why is it in the API?</em>\"</h2>\n</blockquote>\n\n<p><a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply\" rel=\"nofollow noreferrer\"><code>DataFrame.apply</code></a> and <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.apply.html\" rel=\"nofollow noreferrer\"><code>Series.apply</code></a> are <em>convenience functions</em> defined on DataFrame and Series object respectively. <code>apply</code> accepts any user defined function that applies a transformation/aggregation on a DataFrame. <code>apply</code> is effectively a silver bullet that does whatever any existing pandas function cannot do. </p>\n\n<p>Some of the things <code>apply</code> can do:</p>\n\n<ul>\n<li>Run any user-defined function on a DataFrame or Series</li>\n<li>Apply a function either row-wise (<code>axis=1</code>) or column-wise (<code>axis=0</code>) on a DataFrame</li>\n<li>Perform index alignment while applying the function</li>\n<li>Perform aggregation with user-defined functions (however, we usually prefer <code>agg</code> or <code>transform</code> in these cases)</li>\n<li>Perform element-wise transformations </li>\n<li>Broadcast aggregated results to original rows (see the <code>result_type</code> argument).</li>\n<li>Accept positional/keyword arguments to pass to the user-defined functions.</li>\n</ul>\n\n<p>...Among others. For more information, see <a href=\"https://pandas.pydata.org/pandas-docs/stable/getting_started/basics.html#row-or-column-wise-function-application\" rel=\"nofollow noreferrer\">Row or Column-wise Function Application</a> in the documentation.</p>\n\n<p>So, with all these features, why is <code>apply</code> bad? It is <strong>because <code>apply</code> is</strong> <strong>slow</strong>. Pandas makes no assumptions about the nature of your function, and so <strong>iteratively applies your function</strong> to each row/column as necessary. Additionally, handling <em>all</em> of the situations above means <code>apply</code> incurs some major overhead at each iteration. Further, <code>apply</code> consumes a lot more memory, which is a challenge for memory bounded applications.</p>\n\n<p>There are very few situations where <code>apply</code> is appropriate to use (more on that below). <strong>If you're not sure whether you should be using <code>apply</code>, you probably shouldn't.</strong></p>\n\n<hr>\n\n<p>Let's address the next question.</p>\n\n<blockquote>\n  <h2>\"<em>How and when should I make my code</em> apply <em>-free?</em>\"</h2>\n</blockquote>\n\n<p>To rephrase, here are some common situations where you will want to <em>get rid</em> of any calls to <code>apply</code>.</p>\n\n<h3><strong>Numeric Data</strong></h3>\n\n<p>If you're working with numeric data, there is likely already a vectorized cython function that does exactly what you're trying to do (if not, please either ask a question on Stack Overflow or open a feature request on GitHub).</p>\n\n<p>Contrast the performance of <code>apply</code> for a simple addition operation.</p>\n\n<pre><code>df = pd.DataFrame({\"A\": [9, 4, 2, 1], \"B\": [12, 7, 5, 4]})\ndf\n\n   A   B\n0  9  12\n1  4   7\n2  2   5\n3  1   4\n</code></pre>\n\n<p></p>\n\n<pre><code>df.apply(np.sum)\n\nA    16\nB    28\ndtype: int64\n\ndf.sum()\n\nA    16\nB    28\ndtype: int64\n</code></pre>\n\n<p>Performance wise, there's no comparison, the cythonized equivalent is much faster. There's no need for a graph, because the difference is obvious even for toy data.</p>\n\n<pre><code>%timeit df.apply(np.sum)\n%timeit df.sum()\n2.22 ms \u00b1 41.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n471 \u00b5s \u00b1 8.16 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</code></pre>\n\n<p>Even if you enable passing raw arrays with the <code>raw</code> argument, it's still twice as slow.</p>\n\n<pre><code>%timeit df.apply(np.sum, raw=True)\n840 \u00b5s \u00b1 691 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n</code></pre>\n\n<p>Another example:</p>\n\n<pre><code>df.apply(lambda x: x.max() - x.min())\n\nA    8\nB    8\ndtype: int64\n\ndf.max() - df.min()\n\nA    8\nB    8\ndtype: int64\n\n%timeit df.apply(lambda x: x.max() - x.min())\n%timeit df.max() - df.min()\n\n2.43 ms \u00b1 450 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n1.23 ms \u00b1 14.7 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</code></pre>\n\n<p>In general, <strong>seek out vectorized alternatives if possible.</strong></p>\n\n<h3><strong>String/Regex</strong></h3>\n\n<p>Pandas provides \"vectorized\" string functions in most situations, but there are rare cases where those functions do not... \"apply\", so to speak.</p>\n\n<p>A common problem is to check whether a value in a column is present in another column of the same row. </p>\n\n<pre><code>df = pd.DataFrame({\n    'Name': ['mickey', 'donald', 'minnie'],\n    'Title': ['wonderland', \"welcome to donald's castle\", 'Minnie mouse clubhouse'],\n    'Value': [20, 10, 86]})\ndf\n\n     Name  Value                       Title\n0  mickey     20                  wonderland\n1  donald     10  welcome to donald's castle\n2  minnie     86      Minnie mouse clubhouse\n</code></pre>\n\n<p>This should return the row second and third row, since \"donald\" and \"minnie\" are present in their respective \"Title\" columns.</p>\n\n<p>Using apply, this would be done using </p>\n\n<pre><code>df.apply(lambda x: x['Name'].lower() in x['Title'].lower(), axis=1)\n\n0    False\n1     True\n2     True\ndtype: bool\n\ndf[df.apply(lambda x: x['Name'].lower() in x['Title'].lower(), axis=1)]\n\n     Name                       Title  Value\n1  donald  welcome to donald's castle     10\n2  minnie      Minnie mouse clubhouse     86\n</code></pre>\n\n<p>However, a better solution exists using list comprehensions. </p>\n\n<pre><code>df[[y.lower() in x.lower() for x, y in zip(df['Title'], df['Name'])]]\n\n     Name                       Title  Value\n1  donald  welcome to donald's castle     10\n2  minnie      Minnie mouse clubhouse     86\n</code></pre>\n\n<p></p>\n\n<pre><code>%timeit df[df.apply(lambda x: x['Name'].lower() in x['Title'].lower(), axis=1)]\n%timeit df[[y.lower() in x.lower() for x, y in zip(df['Title'], df['Name'])]]\n\n2.85 ms \u00b1 38.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n788 \u00b5s \u00b1 16.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</code></pre>\n\n<p>The thing to note here is that iterative routines happen to be faster than <code>apply</code>, because of the lower overhead. If you need to handle NaNs and invalid dtypes, you can build on this using a custom function you can then call with arguments inside the list comprehension.</p>\n\n<p>For more information on when list comprehensions should be considered a good option, see my writeup: <a href=\"https://stackoverflow.com/questions/54028199/for-loops-with-pandas-when-should-i-care\">For loops with pandas - When should I care?</a>.</p>\n\n<blockquote>\n  <p><strong>Note</strong><br>\n  Date and datetime operations also have vectorized versions. So, for example, you should prefer <code>pd.to_datetime(df['date'])</code>, over,\n  say, <code>df['date'].apply(pd.to_datetime)</code>.</p>\n  \n  <p>Read more at the\n  <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html\" rel=\"nofollow noreferrer\">docs</a>.</p>\n</blockquote>\n\n<h3><strong>A Common Pitfall: Exploding Columns of Lists</strong></h3>\n\n<pre><code>s = pd.Series([[1, 2]] * 3)\ns\n\n0    [1, 2]\n1    [1, 2]\n2    [1, 2]\ndtype: object\n</code></pre>\n\n<p>People are tempted to use <code>apply(pd.Series)</code>. This is <em>horrible</em> in terms of performance.</p>\n\n<pre><code>s.apply(pd.Series)\n\n   0  1\n0  1  2\n1  1  2\n2  1  2\n</code></pre>\n\n<p>A better option is to listify the column and pass it to pd.DataFrame.</p>\n\n<pre><code>pd.DataFrame(s.tolist())\n\n   0  1\n0  1  2\n1  1  2\n2  1  2\n</code></pre>\n\n<p></p>\n\n<pre><code>%timeit s.apply(pd.Series)\n%timeit pd.DataFrame(s.tolist())\n\n2.65 ms \u00b1 294 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n816 \u00b5s \u00b1 40.5 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</code></pre>\n\n<hr>\n\n<p>Lastly,</p>\n\n<blockquote>\n  <h2>\"<em>Are there any situations where</em> <code>apply</code> <em>is good?</em>\"</h2>\n</blockquote>\n\n<p>Apply is a convenience function, so there <em>are</em> situations where the overhead is negligible enough to forgive. It really depends on how many times the function is called.</p>\n\n<p><strong>Functions that are Vectorized for Series, but not DataFrames</strong><br>\nWhat if you want to apply a string operation on multiple columns? What if you want to convert multiple columns to datetime? These functions are vectorized for Series only, so they must be <em>applied</em> over each column that you want to convert/operate on.</p>\n\n<pre><code>df = pd.DataFrame(\n         pd.date_range('2018-12-31','2019-01-31', freq='2D').date.astype(str).reshape(-1, 2), \n         columns=['date1', 'date2'])\ndf\n\n       date1      date2\n0 2018-12-31 2019-01-02\n1 2019-01-04 2019-01-06\n2 2019-01-08 2019-01-10\n3 2019-01-12 2019-01-14\n4 2019-01-16 2019-01-18\n5 2019-01-20 2019-01-22\n6 2019-01-24 2019-01-26\n7 2019-01-28 2019-01-30\n\ndf.dtypes\n\ndate1    object\ndate2    object\ndtype: object\n</code></pre>\n\n<p>This is an admissible case for <code>apply</code>:</p>\n\n<pre><code>df.apply(pd.to_datetime, errors='coerce').dtypes\n\ndate1    datetime64[ns]\ndate2    datetime64[ns]\ndtype: object\n</code></pre>\n\n<p>Note that it would also make sense to <code>stack</code>, or just use an explicit loop. All these options are slightly faster than using <code>apply</code>, but the difference is small enough to forgive.</p>\n\n<pre><code>%timeit df.apply(pd.to_datetime, errors='coerce')\n%timeit pd.to_datetime(df.stack(), errors='coerce').unstack()\n%timeit pd.concat([pd.to_datetime(df[c], errors='coerce') for c in df], axis=1)\n%timeit for c in df.columns: df[c] = pd.to_datetime(df[c], errors='coerce')\n\n5.49 ms \u00b1 247 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n3.94 ms \u00b1 48.1 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n3.16 ms \u00b1 216 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n2.41 ms \u00b1 1.71 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n</code></pre>\n\n<p>You can make a similar case for other operations such as string operations, or conversion to category. </p>\n\n<pre><code>u = df.apply(lambda x: x.str.contains(...))\nv = df.apply(lambda x: x.astype(category))\n</code></pre>\n\n<p>v/s</p>\n\n<pre><code>u = pd.concat([df[c].str.contains(...) for c in df], axis=1)\nv = df.copy()\nfor c in df:\n    v[c] = df[c].astype(category)\n</code></pre>\n\n<p>And so on...</p>\n\n<h3><strong>Converting Series to <code>str</code>: <code>astype</code> versus <code>apply</code></strong></h3>\n\n<p>This seems like an idiosyncrasy of the API. Using <code>apply</code> to convert integers in a Series to string is comparable (and sometimes faster) than using <code>astype</code>.</p>\n\n<p><a href=\"https://i.stack.imgur.com/eSs2r.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/eSs2r.png\" alt=\"enter image description here\"></a>\nThe graph was plotted using the <a href=\"https://github.com/nschloe/perfplot\" rel=\"nofollow noreferrer\"><code>perfplot</code></a> library.</p>\n\n<pre><code>import perfplot\n\nperfplot.show(\n    setup=lambda n: pd.Series(np.random.randint(0, n, n)),\n    kernels=[\n        lambda s: s.astype(str),\n        lambda s: s.apply(str)\n    ],\n    labels=['astype', 'apply'],\n    n_range=[2**k for k in range(1, 20)],\n    xlabel='N',\n    logx=True,\n    logy=True,\n    equality_check=lambda x, y: (x == y).all())\n</code></pre>\n\n<p>With floats, I see the <code>astype</code> is consistently as fast as, or slightly faster than <code>apply</code>. So this has to do with the fact that the data in the test is integer type.</p>\n\n<h3><strong><code>GroupBy</code> operations with chained transformations</strong></h3>\n\n<p><code>GroupBy.apply</code> has not been discussed until now, but <code>GroupBy.apply</code> is also an iterative convenience function to handle anything that the existing <code>GroupBy</code> functions do not. </p>\n\n<p>One common requirement is to perform a GroupBy and then two prime operations such as a \"lagged cumsum\":</p>\n\n<pre><code>df = pd.DataFrame({\"A\": list('aabcccddee'), \"B\": [12, 7, 5, 4, 5, 4, 3, 2, 1, 10]})\ndf\n\n   A   B\n0  a  12\n1  a   7\n2  b   5\n3  c   4\n4  c   5\n5  c   4\n6  d   3\n7  d   2\n8  e   1\n9  e  10\n</code></pre>\n\n<p></p>\n\n<p>You'd need two successive groupby calls here:</p>\n\n<pre><code>df.groupby('A').B.cumsum().groupby(df.A).shift()\n\n0     NaN\n1    12.0\n2     NaN\n3     NaN\n4     4.0\n5     9.0\n6     NaN\n7     3.0\n8     NaN\n9     1.0\nName: B, dtype: float64\n</code></pre>\n\n<p>Using <code>apply</code>, you can shorten this to a a single call.</p>\n\n<pre><code>df.groupby('A').B.apply(lambda x: x.cumsum().shift())\n\n0     NaN\n1    12.0\n2     NaN\n3     NaN\n4     4.0\n5     9.0\n6     NaN\n7     3.0\n8     NaN\n9     1.0\nName: B, dtype: float64\n</code></pre>\n\n<p>It is very hard to quantify the performance because it depends on the data. But in general, <code>apply</code> is an acceptable solution if the goal is to reduce a <code>groupby</code> call (because <code>groupby</code> is also quite expensive).</p>\n\n<hr>\n\n<h2>Other Caveats</h2>\n\n<p>Aside from the caveats mentioned above, it is also worth mentioning that <code>apply</code> operates on the first row (or column) twice. This is done to determine whether the function has any side effects. If not, <code>apply</code> may be able to use a fast-path for evaluating the result, else it falls back to a slow implementation.</p>\n\n<pre><code>df = pd.DataFrame({\n    'A': [1, 2],\n    'B': ['x', 'y']\n})\n\ndef func(x):\n    print(x['A'])\n    return x\n\ndf.apply(func, axis=1)\n\n# 1\n# 1\n# 2\n   A  B\n0  1  x\n1  2  y\n</code></pre>\n\n<p>This behaviour is also seen in <code>GroupBy.apply</code> on pandas versions &lt;0.25 (it was fixed for 0.25, <a href=\"https://stackoverflow.com/a/56215416/4909087\">see here for more information</a>.)</p>\n"
    },
    "794": {
        "question_id": "1481488",
        "answer_id": "1481512",
        "question": "<p>I am reading a code. There is a class in which <code>__del__</code> method is defined. I figured out that this method is used to destroy an instance of the class. However, I cannot find a place where this method is used. The main reason for that is that I do not know how this method is used, probably not like that: <code>obj1.del()</code>. So, my questions is how to call the <code>__del__</code> method? Thank you for any help.</p>\n",
        "answer": "<p><code>__del__</code> is a <strong>finalizer</strong>. It is called when an object is <strong>garbage collected</strong> which happens at some point after all references to the object have been deleted. </p>\n\n<p>In a <strong>simple case</strong> this could be right after you say <code>del x</code> or, if <code>x</code> is a local variable, after the function ends. In particular, unless there are circular references, CPython (the standard Python implementation) will garbage collect immediately. </p>\n\n<p>However, this is an <strong>implementation detail</strong> of CPython. The only <strong>required</strong> property of Python garbage collection is that it happens <em>after</em> all references have been deleted, so this might not necessary happen <em>right after</em> and <strong>might not happen at all</strong>. </p>\n\n<p>Even more, variables can live for a long time for <strong>many reasons</strong>, e.g. a propagating exception or module introspection can keep variable reference count greater than 0. Also, variable can be a part of <strong>cycle of references</strong> \u2014 CPython with garbage collection turned on breaks most, but not all, such cycles, and even then only periodically.</p>\n\n<p>Since you have no guarantee it's executed, one should <strong>never</strong> put the code that you need to be run into <code>__del__()</code> \u2014 instead, this code belongs to <code>finally</code> clause of the <code>try</code> block or to a context manager in a <code>with</code> statement. However, there are <strong>valid use cases</strong> for <code>__del__</code>: e.g. if an object <code>X</code> references <code>Y</code> and also keeps a copy of <code>Y</code> reference in a global <code>cache</code> (<code>cache['X -&gt; Y'] = Y</code>) then it would be polite for <code>X.__del__</code> to also delete the cache entry.</p>\n\n<p><strong>If you know</strong> that the destructor provides (in violation of the above guideline) a required cleanup, you might want to <strong>call it directly</strong>, since there is nothing special about it as a method: <code>x.__del__()</code>. Obviously, you should you do so only if you know that it doesn't mind to be called twice. Or, as a last resort, you can redefine this method using</p>\n\n<pre><code>type(x).__del__ = my_safe_cleanup_method  \n</code></pre>\n"
    },
    "795": {
        "question_id": "17534345",
        "answer_id": "17534363",
        "question": "<p>I am new to python and have hit a wall. I followed several tutorials but cant get past the error:</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"C:\\Users\\Dom\\Desktop\\test\\test.py\", line 7, in &lt;module&gt;\n    p = Pump.getPumps()\nTypeError: getPumps() missing 1 required positional argument: 'self'\n</code></pre>\n\n<p>I examined several tutorials but there doesn't seem to be anything different from my code. The only thing I can think of is that python 3.3 requires different syntax.</p>\n\n<p>main scipt:</p>\n\n<pre><code># test script\n\nfrom lib.pump import Pump\n\nprint (\"THIS IS A TEST OF PYTHON\") # this prints\n\np = Pump.getPumps()\n\nprint (p)\n</code></pre>\n\n<p>Pump class:</p>\n\n<pre><code>import pymysql\n\nclass Pump:\n\n    def __init__(self):\n        print (\"init\") # never prints\n\n\n    def getPumps(self):\n                # Open database connection\n                # some stuff here that never gets executed because of error\n</code></pre>\n\n<p>If I understand correctly \"self\" is passed to the constructor and methods automatically. What am I doing wrong here?</p>\n\n<p>I am using windows 8 with python 3.3.2</p>\n",
        "answer": "<p>You need to instantiate a class instance here.</p>\n\n<p>Use</p>\n\n<pre><code>p = Pump()\np.getPumps()\n</code></pre>\n\n<p>Small example - </p>\n\n<pre><code>&gt;&gt;&gt; class TestClass:\n        def __init__(self):\n            print(\"in init\")\n        def testFunc(self):\n            print(\"in Test Func\")\n\n\n&gt;&gt;&gt; testInstance = TestClass()\nin init\n&gt;&gt;&gt; testInstance.testFunc()\nin Test Func\n</code></pre>\n"
    },
    "796": {
        "question_id": "7006238",
        "answer_id": "7006424",
        "question": "<p>I wrote some statements like below:</p>\n\n<pre><code>os.system(cmd) #do something\nsubprocess.call('taskkill /F /IM exename.exe')\n</code></pre>\n\n<p>both will pop up a console.</p>\n\n<p>How can I stop it from popping up the console?</p>\n",
        "answer": "<p>The process <code>STARTUPINFO</code> can hide the console window:</p>\n\n  <pre class=\"lang-python prettyprint-override\"><code>si = subprocess.STARTUPINFO()\nsi.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n#si.wShowWindow = subprocess.SW_HIDE # default\nsubprocess.call('taskkill /F /IM exename.exe', startupinfo=si)\n</code></pre>\n\n<p>Or set the creation flags to disable creating the window:</p>\n\n<pre><code>CREATE_NO_WINDOW = 0x08000000\nsubprocess.call('taskkill /F /IM exename.exe', creationflags=CREATE_NO_WINDOW)\n</code></pre>\n\n<p>The above is still a console process with valid handles for console I/O (verified by calling <code>GetFileType</code> on the handles returned by <code>GetStdHandle</code>). It just has no window and doesn't inherit the parent's console, if any. </p>\n\n<p>You can go a step farther by forcing the child to have no console at all:</p>\n\n<pre><code>DETACHED_PROCESS = 0x00000008\nsubprocess.call('taskkill /F /IM exename.exe', creationflags=DETACHED_PROCESS)\n</code></pre>\n\n<p>In this case the child's standard handles (i.e. <code>GetStdHandle</code>) are 0, but you can set them to an open disk file or pipe such as <code>subprocess.DEVNULL</code> (3.3) or <code>subprocess.PIPE</code>. </p>\n"
    },
    "797": {
        "question_id": "6475314",
        "answer_id": "37869704",
        "question": "<pre><code>foo = [x for x in bar if x.occupants &gt; 1]\n</code></pre>\n\n<p>After googling and searching on here, couldn't figure out what this does.  Maybe I wasn't searching the right stuff but here it is.  Any input in debunking this shorthand is greatly appreciated.</p>\n",
        "answer": "<p>The current answers are good, but do not talk about how they are just <a href=\"https://en.wikipedia.org/wiki/Syntactic_sugar\" rel=\"noreferrer\">syntactic sugar</a> to some pattern that we are so used to.</p>\n\n<p>Let's start with an example, say we have 10 numbers, and we want a subset of those that are greater than, say, 5.</p>\n\n<pre><code>&gt;&gt;&gt; numbers = [12, 34, 1, 4, 4, 67, 37, 9, 0, 81]\n</code></pre>\n\n<p>For the above task, the below approaches below are totally identical to one another, and go from most verbose to concise, readable and <strong><em>pythonic</em></strong>:</p>\n\n<h3>Approach 1</h3>\n\n<pre><code>result = []\nfor index in range(len(numbers)):\n    if numbers[index] &gt; 5:\n        result.append(numbers[index])\nprint result  #Prints [12, 34, 67, 37, 9, 81]\n</code></pre>\n\n<h3>Approach 2 (Slightly cleaner, for-in loops)</h3>\n\n<pre><code>result = []\nfor number in numbers:\n    if number &gt; 5:\n        result.append(number)\nprint result  #Prints [12, 34, 67, 37, 9, 81]\n</code></pre>\n\n<h3>Approach 3 (Enter List Comprehension)</h3>\n\n<pre><code>result = [number for number in numbers if number &gt; 5]\n</code></pre>\n\n<h3>or more generally:</h3>\n\n<pre><code>[function(number) for number in numbers if condition(number)]\n</code></pre>\n\n<p>where:</p>\n\n<ul>\n<li><code>function(x)</code> takes an <code>x</code> and transforms it into something useful (like for instance: <code>x*x</code>)</li>\n<li>if <code>condition(x)</code> returns any False-y value (False, None, empty string, empty list, etc ..) then the current iteration will be skipped (think <code>continue</code>). If the function return a non-False-y value then the current value makes it to the final resultant array (and goes through the transformation step above).</li>\n</ul>\n\n<p>To understand the syntax in a slightly different manner, look at the Bonus section below.</p>\n\n<p>For further information, follow the tutorial all other answers have linked: <a href=\"http://docs.python.org/tutorial/datastructures.html#list-comprehensions\" rel=\"noreferrer\">List Comprehension</a></p>\n\n<hr>\n\n<h3>Bonus</h3>\n\n<p>(Slightly un-pythonic, but putting it here for sake of completeness)</p>\n\n<p>The example above can be written as:</p>\n\n<pre><code>result = filter(lambda x: x &gt; 5, numbers)\n</code></pre>\n\n<p>The general expression above can be written as:</p>\n\n<pre><code>result = map(function, filter(condition, numbers)) #result is a list in Py2\n</code></pre>\n"
    },
    "798": {
        "question_id": "50444346",
        "answer_id": "50444347",
        "question": "<p>This is a self-answered post. Below I outline a common problem in the NLP domain and propose a few performant methods to solve it.</p>\n\n<p>Oftentimes the need arises to remove <strong>punctuation</strong> during text cleaning and pre-processing. Punctuation is defined as any character in <code>string.punctuation</code>:</p>\n\n<pre><code>&gt;&gt;&gt; import string\nstring.punctuation\n'!\"#$%&amp;\\'()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~'\n</code></pre>\n\n<p>This is a common enough problem and has been asked before ad nauseam. The most idiomatic solution uses pandas <code>str.replace</code>. However, for situations which involve a <em>lot</em> of text, a more performant solution may need to be considered. </p>\n\n<p>What are some good, performant alternatives to <code>str.replace</code> when dealing with hundreds of thousands of records?</p>\n",
        "answer": "<h3>Setup</h3>\n\n<p>For the purpose of demonstration, let's consider this DataFrame.</p>\n\n<pre><code>df = pd.DataFrame({'text':['a..b?!??', '%hgh&amp;12','abc123!!!', '$$$1234']})\ndf\n        text\n0   a..b?!??\n1    %hgh&amp;12\n2  abc123!!!\n3    $$$1234\n</code></pre>\n\n<p>Below, I list the alternatives, one by one, in increasing order of performance </p>\n\n<h3><code>str.replace</code></h3>\n\n<p>This option is included to establish the default method as a benchmark for comparing other, more performant solutions.</p>\n\n<p>This uses pandas in-built <code>str.replace</code> function which performs regex-based replacement.</p>\n\n<pre><code>df['text'] = df['text'].str.replace(r'[^\\w\\s]+', '')\n</code></pre>\n\n<p></p>\n\n<pre><code>df\n     text\n0      ab\n1   hgh12\n2  abc123\n3    1234\n</code></pre>\n\n<p>This is very easy to code, and is quite readable, but slow.</p>\n\n<hr>\n\n<h3><code>regex.sub</code></h3>\n\n<p>This involves using the <code>sub</code> function from the <code>re</code> library. Pre-compile a regex pattern for performance, and call <code>regex.sub</code> inside a list comprehension. Convert <code>df['text']</code> to a list beforehand if you can spare some memory, you'll get a nice little performance boost out of this.</p>\n\n<pre><code>import re\np = re.compile(r'[^\\w\\s]+')\ndf['text'] = [p.sub('', x) for x in df['text'].tolist()]\n</code></pre>\n\n<p></p>\n\n<pre><code>df\n     text\n0      ab\n1   hgh12\n2  abc123\n3    1234\n</code></pre>\n\n<p><strong>Note:</strong> If your data has NaN values, this (as well as the next method below) will not work as is. See the section on \"<strong>Other Considerations</strong>\". </p>\n\n<hr>\n\n<h3><code>str.translate</code></h3>\n\n<p>python's <code>str.translate</code> function is implemented in C, and is therefore <em>very fast</em>. </p>\n\n<p>How this works is:</p>\n\n<ol>\n<li>First, join all your strings together to form one <em>huge</em> string using a single (or more) character <strong>separator</strong> that <em>you</em> choose. You <em>must</em> use a character/substring that you can guarantee will not belong inside your data.</li>\n<li>Perform <code>str.translate</code> on the large string, removing punctuation (the separator from step 1 excluded).</li>\n<li>Split the string on the separator that was used to join in step 1. The resultant list <em>must</em> have the same length as your initial column.</li>\n</ol>\n\n<p>Here, in this example, we consider the pipe separator <code>|</code>. If your data contains the pipe, then you must choose another separator.  </p>\n\n<pre><code>import string\n\npunct = '!\"#$%&amp;\\'()*+,-./:;&lt;=&gt;?@[\\\\]^_`{}~'   # `|` is not present here\ntranstab = str.maketrans(dict.fromkeys(punct, ''))\n\ndf['text'] = '|'.join(df['text'].tolist()).translate(transtab).split('|')\n</code></pre>\n\n<p></p>\n\n<pre><code>df\n     text\n0      ab\n1   hgh12\n2  abc123\n3    1234\n</code></pre>\n\n<hr>\n\n<h3>Performance</h3>\n\n<p><code>str.translate</code> performs the best, by far. Note that the graph below includes another variant <code>Series.str.translate</code> from <a href=\"https://stackoverflow.com/a/50444659/4909087\">MaxU's answer</a>.</p>\n\n<p>(Interestingly, I reran this a second time, and the results are slightly different from before. During the second run, it seems <code>re.sub</code> was winning out over <code>str.translate</code> for really small amounts of data.) \n<a href=\"https://i.stack.imgur.com/Eb0XZ.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/Eb0XZ.png\" alt=\"enter image description here\"></a></p>\n\n<p>There is an inherent risk involved with using <code>translate</code> (particularly, the problem of <em>automating</em> the process of deciding which separator to use is non-trivial), but the trade-offs are worth the risk.</p>\n\n<hr>\n\n<h3>Other Considerations</h3>\n\n<p><strong>Handling NaNs with list comprehension methods;</strong> Note that this method (and the next) will only work as long as your data does not have NaNs. When handling NaNs, you will have to determine the indices of non-null values and replace those only. Try something like this:</p>\n\n<pre><code>df = pd.DataFrame({'text': [\n    'a..b?!??', np.nan, '%hgh&amp;12','abc123!!!', '$$$1234', np.nan]})\n\nidx = np.flatnonzero(df['text'].notna())\ncol_idx = df.columns.get_loc('text')\ndf.iloc[idx,col_idx] = [\n    p.sub('', x) for x in df.iloc[idx,col_idx].tolist()]\n\ndf\n     text\n0      ab\n1     NaN\n2   hgh12\n3  abc123\n4    1234\n5     NaN\n</code></pre>\n\n<p><strong>Dealing with DataFrames;</strong> If you are dealing with DataFrames, where <em>every</em> column requires replacement, the procedure is simple:</p>\n\n<pre><code>v = pd.Series(df.values.ravel())\ndf[:] = translate(v).values.reshape(df.shape)\n</code></pre>\n\n<p>Or,</p>\n\n<pre><code>v = df.stack()\nv[:] = translate(v)\ndf = v.unstack()\n</code></pre>\n\n<p>Note that the <code>translate</code> function is defined below in with the benchmarking code.</p>\n\n<p>Every solution has tradeoffs, so deciding what solution best fits your needs will depend on what you're willing to sacrifice. Two very common considerations are performance (which we've already seen), and memory usage. <code>str.translate</code> is a memory-hungry solution, so use with caution.</p>\n\n<p>Another consideration is the complexity of your regex. Sometimes, you may want to remove anything that is not alphanumeric or whitespace. Othertimes, you will need to retain certain characters, such as hyphens, colons, and sentence terminators <code>[.!?]</code>. Specifying these explicitly add complexity to your regex, which may in turn impact the performance of these solutions. Make sure you test these solutions \non your data before deciding what to use.</p>\n\n<p>Lastly, unicode characters will be removed with this solution. You may want to tweak your regex (if using a regex-based solution), or just go with <code>str.translate</code> otherwise. </p>\n\n<p>For even <em>more</em> performance (for larger N), take a look at this answer by <a href=\"https://stackoverflow.com/a/50518852/4909087\">Paul Panzer</a>. </p>\n\n<hr>\n\n<h3>Appendix</h3>\n\n<p><strong>Functions</strong></p>\n\n<pre><code>def pd_replace(df):\n    return df.assign(text=df['text'].str.replace(r'[^\\w\\s]+', ''))\n\n\ndef re_sub(df):\n    p = re.compile(r'[^\\w\\s]+')\n    return df.assign(text=[p.sub('', x) for x in df['text'].tolist()])\n\ndef translate(df):\n    punct = string.punctuation.replace('|', '')\n    transtab = str.maketrans(dict.fromkeys(punct, ''))\n\n    return df.assign(\n        text='|'.join(df['text'].tolist()).translate(transtab).split('|')\n    )\n\n# MaxU's version (https://stackoverflow.com/a/50444659/4909087)\ndef pd_translate(df):\n    punct = string.punctuation.replace('|', '')\n    transtab = str.maketrans(dict.fromkeys(punct, ''))\n\n    return df.assign(text=df['text'].str.translate(transtab))\n</code></pre>\n\n<p></p>\n\n<p><strong>Performance Benchmarking Code</strong></p>\n\n<pre><code>from timeit import timeit\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nres = pd.DataFrame(\n       index=['pd_replace', 're_sub', 'translate', 'pd_translate'],\n       columns=[10, 50, 100, 500, 1000, 5000, 10000, 50000],\n       dtype=float\n)\n\nfor f in res.index: \n    for c in res.columns:\n        l = ['a..b?!??', '%hgh&amp;12','abc123!!!', '$$$1234'] * c\n        df = pd.DataFrame({'text' : l})\n        stmt = '{}(df)'.format(f)\n        setp = 'from __main__ import df, {}'.format(f)\n        res.at[f, c] = timeit(stmt, setp, number=30)\n\nax = res.div(res.min()).T.plot(loglog=True) \nax.set_xlabel(\"N\"); \nax.set_ylabel(\"time (relative)\");\n\nplt.show()\n</code></pre>\n"
    },
    "799": {
        "question_id": "24735311",
        "answer_id": "24735582",
        "question": "<p>What does the <code>/</code> mean in Python 3.4's <code>help</code> output for <code>range</code> before the closing parenthesis?</p>\n\n<pre><code>&gt;&gt;&gt; help(range)\nHelp on class range in module builtins:\n\nclass range(object)\n |  range(stop) -&gt; range object\n |  range(start, stop[, step]) -&gt; range object\n |  \n |  Return a virtual sequence of numbers from start to stop by step.\n |  \n |  Methods defined here:\n |  \n |  __contains__(self, key, /)\n |      Return key in self.\n |  \n |  __eq__(self, value, /)\n |      Return self==value.\n\n                                        ...\n</code></pre>\n",
        "answer": "<p>It signifies the end of the <a href=\"http://www.python.org/dev/peps/pep-0436/#functions-with-positional-only-parameters\" rel=\"noreferrer\"><em>positional only</em> parameters</a>, parameters you <em>cannot</em> use as keyword parameters. Such parameters can only be specified in the C API.</p>\n\n<p>It means the <code>key</code> argument to <code>__contains__</code> can only be passed in by position (<code>range(5).__contains__(3)</code>), not as a keyword argument (<code>range(5).__contains__(key=3)</code>), something you <em>can</em> do with positional arguments in pure-python functions.</p>\n\n<p>Also see the <a href=\"https://docs.python.org/3/howto/clinic.html\" rel=\"noreferrer\">Argument Clinic</a> documentation:</p>\n\n<blockquote>\n  <p>To mark all parameters as positional-only in Argument Clinic, add a <code>/</code> on a line by itself after the last parameter, indented the same as the parameter lines.</p>\n</blockquote>\n\n<p>and the (very recent addition to) the <a href=\"https://docs.python.org/3/faq/programming.html#what-does-the-slash-in-the-parameter-list-of-a-function-mean\" rel=\"noreferrer\">Python FAQ</a>:</p>\n\n<blockquote>\n  <p>A slash in the argument list of a function denotes that the parameters prior to it are positional-only. Positional-only parameters are the ones without an externally-usable name. Upon calling a function that accepts positional-only parameters, arguments are mapped to parameters based solely on their position.</p>\n</blockquote>\n\n<p>The syntax has also been defined for possible future inclusion in Python, see <a href=\"https://www.python.org/dev/peps/pep-0457/\" rel=\"noreferrer\">PEP 457 - <em>Syntax For Positional-Only Parameters</em></a>. </p>\n\n<p>This PEP has recently been revived and has been <a href=\"https://discuss.python.org/t/pep-570-python-positional-only-parameters/1078/148\" rel=\"noreferrer\">accepted for inclusion in Python</a>. With Python 3.8 still in the alpha phase, it may become a reality in that version, or in 3.9, depending on how quickly <a href=\"https://github.com/pablogsal/cpython_positional_only\" rel=\"noreferrer\">the reference implementation</a> can be finalised.</p>\n\n<p>Positional-only parameters can lead to cleaner and clearer APIs, make pure-Python implementations of otherwise C-only modules more consistent and easier to maintain, and because positional-only parameters require very little processing, they lead to faster Python code.</p>\n"
    },
    "800": {
        "question_id": "1779288",
        "answer_id": "1779324",
        "question": "<p>I have a string that represents a number which uses commas to separate thousands.  How can I convert this to a number in python?</p>\n\n<pre><code>&gt;&gt;&gt; int(\"1,000,000\")\n</code></pre>\n\n<p>Generates a <code>ValueError</code>.</p>\n\n<p>I could replace the commas with empty strings before I try to convert it, but that feels wrong somehow.  Is there a better way?</p>\n",
        "answer": "<pre><code>import locale\nlocale.setlocale( locale.LC_ALL, 'en_US.UTF-8' ) \nlocale.atoi('1,000,000')\n# 1000000\nlocale.atof('1,000,000.53')\n# 1000000.53\n</code></pre>\n"
    },
    "801": {
        "question_id": "4965159",
        "answer_id": "4965176",
        "question": "<p>What I do in the command line:</p>\n\n<pre><code>cat file1 file2 file3 &gt; myfile\n</code></pre>\n\n<p>What I want to do with python:</p>\n\n<pre><code>import subprocess, shlex\nmy_cmd = 'cat file1 file2 file3 &gt; myfile'\nargs = shlex.split(my_cmd)\nsubprocess.call(args) # spits the output in the window i call my python program\n</code></pre>\n",
        "answer": "<p>UPDATE: os.system is discouraged, albeit still available in Python 3.</p>\n\n<hr>\n\n<p>Use <code>os.system</code>:</p>\n\n<pre><code>os.system(my_cmd)\n</code></pre>\n\n<p>If you really want to use subprocess, here's the solution (mostly lifted from the documentation for subprocess):</p>\n\n<pre><code>p = subprocess.Popen(my_cmd, shell=True)\nos.waitpid(p.pid, 0)\n</code></pre>\n\n<p>OTOH, you can avoid system calls entirely:</p>\n\n<pre><code>import shutil\n\nwith open('myfile', 'w') as outfile:\n    for infile in ('file1', 'file2', 'file3'):\n        shutil.copyfileobj(open(infile), outfile)\n</code></pre>\n"
    },
    "802": {
        "question_id": "13654168",
        "answer_id": "13654181",
        "question": "<p>I am trying to write a text game and I have run into an error in the function I am defining that lets you basically spend your skill points after you make your character. At first, the error stated that I was attempting to subtract a string from an integer in this part of the code:<code>balance - strength</code>. Obviously that was wrong so I fixed it with <code>strength = int(strength)</code>... but now I am getting this error which I have never seen before(new programmer) and I am stumped on what exactly it is trying to tell me and how I fix it.</p>\n\n<p>Here is my code for the part of the function that isn't working:</p>\n\n<pre><code>def attributeSelection():\n    balance = 25\n    print(\"Your SP balance is currently 25.\")\n    strength = input(\"How much SP do you want to put into strength?\")\n    strength = int(strength)\n    balanceAfterStrength = balance - strength\n    if balanceAfterStrength == 0:\n        print(\"Your SP balance is now 0.\")\n        attributeConfirmation()\n    elif strength &lt; 0:\n        print(\"That is an invalid input. Restarting attribute selection. Keep an eye on your balance this time!\")\n        attributeSelection()\n    elif strength &gt; balance:\n        print(\"That is an invalid input. Restarting attribute selection. Keep an eye on your balance this time!\")\n        attributeSelection()\n    elif balanceAfterStrength &gt; 0 and balanceAfterStrength &lt; 26:\n        print(\"Ok. You're balance is now at \" + balanceAfterStrength + \" skill points.\")\n    else:\n        print(\"That is an invalid input. Restarting attribute selection.\")\n        attributeSelection()\n</code></pre>\n\n<p>And here is the error I get when I get to this part of the code in the shell:</p>\n\n<pre><code>    Your SP balance is currently 25.\nHow much SP do you want to put into strength?5\nTraceback (most recent call last):\n  File \"C:\\Python32\\APOCALYPSE GAME LIBRARY\\apocalypseGame.py\", line 205, in &lt;module&gt;\n    gender()\n  File \"C:\\Python32\\APOCALYPSE GAME LIBRARY\\apocalypseGame.py\", line 22, in gender\n    customizationMan()\n  File \"C:\\Python32\\APOCALYPSE GAME LIBRARY\\apocalypseGame.py\", line 54, in customizationMan\n    characterConfirmation()\n  File \"C:\\Python32\\APOCALYPSE GAME LIBRARY\\apocalypseGame.py\", line 93, in characterConfirmation\n    characterConfirmation()\n  File \"C:\\Python32\\APOCALYPSE GAME LIBRARY\\apocalypseGame.py\", line 85, in characterConfirmation\n    attributeSelection()\n  File \"C:\\Python32\\APOCALYPSE GAME LIBRARY\\apocalypseGame.py\", line 143, in attributeSelection\n    print(\"Ok. You're balance is now at \" + balanceAfterStrength + \" skill points.\")\nTypeError: Can't convert 'int' object to str implicitly\n</code></pre>\n\n<p>Does anyone know how to solve this? Thanks ahead.</p>\n",
        "answer": "<p>You cannot concatenate a <code>string</code> with an <code>int</code>. You would need to convert your <code>int</code> to a <code>string</code> using the <code>str</code> function, or use <code>formatting</code> to format your output.</p>\n\n<p>Change: -</p>\n\n<pre><code>print(\"Ok. Your balance is now at \" + balanceAfterStrength + \" skill points.\")\n</code></pre>\n\n<p>to: -</p>\n\n<pre><code>print(\"Ok. Your balance is now at {} skill points.\".format(balanceAfterStrength))\n</code></pre>\n\n<p>or: -</p>\n\n<pre><code>print(\"Ok. Your balance is now at \" + str(balanceAfterStrength) + \" skill points.\")\n</code></pre>\n\n<p>or as per the comment, use <code>,</code> to pass different strings to your <code>print</code> function, rather than concatenating using <code>+</code>: -</p>\n\n<pre><code>print(\"Ok. Your balance is now at \", balanceAfterStrength, \" skill points.\")\n</code></pre>\n"
    },
    "803": {
        "question_id": "46085270",
        "answer_id": "46089751",
        "question": "<p>when i run my script , i got this error </p>\n\n<pre><code>Traceback (most recent call last):\n  File \"C:\\Users\\ishaq\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\selenium\\webdriver\\common\\service.py\", line 74, in start\n    stdout=self.log_file, stderr=self.log_file)\n  File \"C:\\Users\\ishaq\\AppData\\Local\\Programs\\Python\\Python36\\lib\\subprocess.py\", line 707, in __init__\n    restore_signals, start_new_session)\n  File \"C:\\Users\\ishaq\\AppData\\Local\\Programs\\Python\\Python36\\lib\\subprocess.py\", line 992, in _execute_child\n    startupinfo)\nFileNotFoundError: [WinError 2] The system cannot find the file specified\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:/Users/ishaq/AppData/Local/Programs/Python/Python36/headless.py\", line 9, in &lt;module&gt;\n    driver = webdriver.Chrome(executable_path=os.path.abspath(\"chromedriver\"),   chrome_options=chrome_options)\n  File \"C:\\Users\\ishaq\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py\", line 62, in __init__\n    self.service.start()\n  File \"C:\\Users\\ishaq\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\selenium\\webdriver\\common\\service.py\", line 81, in start\n    os.path.basename(self.path), self.start_error_message)\nselenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH. Please see https://sites.google.com/a/chromium.org/chromedriver/home\n</code></pre>\n\n<p>here is my script </p>\n\n<pre><code>import os  \nfrom selenium import webdriver  \nfrom selenium.webdriver.common.keys import Keys  \nfrom selenium.webdriver.chrome.options import Options \n\nchrome_options = Options()  \nchrome_options.add_argument(\"--headless\")  \nchrome_options.binary_location = \nr'C:\\Users\\ishaq\\Desktop\\chrome\\chromedriver.exe'    \ndriver = webdriver.Chrome(executable_path=os.path.abspath(\"chromedriver\"),   \nchrome_options=chrome_options)  \ndriver.get(\"http://www.duo.com\") \n\nmagnifying_glass = driver.find_element_by_id(\"js-open-icon\")  \nif magnifying_glass.is_displayed():  \n  magnifying_glass.click()  \nelse:  \n  menu_button = driver.find_element_by_css_selector(\".menu-trigger.local\")  \n  menu_button.click() \n\nsearch_field = driver.find_element_by_id(\"site-search\")  \nsearch_field.clear()  \nsearch_field.send_keys(\"Olabode\")  \nsearch_field.send_keys(Keys.RETURN)  \nassert \"Looking Back at Android Security in 2016\" in driver.page_source\ndriver.close()\n</code></pre>\n",
        "answer": "<p>If we analyze the logs it seems the main issue is with in <strong><code>start os.path.basename(self.path)</code></strong> and subsequent error message <strong><code>selenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH</code></strong>.</p>\n\n<p>So it's clear from the error that the Python client was unable to locate the <strong><code>chromedriver</code></strong> binary.</p>\n\n<p>You have to take care of a couple of points here:</p>\n\n<ol>\n<li><strong><code>chrome_options.binary_location</code></strong> : The parameter configures the <strong><code>chrome.exe</code></strong> not the <strong><code>chromedriver.exe</code></strong></li>\n<li><code>os.path.abspath(\"chromedriver\")</code> will pick up the file path of <strong><code>chromedriver</code></strong> but won't append <strong><code>chromedriver.exe</code></strong> at the end.</li>\n<li><p>Here is the sample code on my <code>Windows 8</code> system to start <strong><code>Chrome</code></strong> in <strong><code>Headless Mode</code></strong>:</p>\n\n<pre><code>from selenium import webdriver  \nfrom selenium.webdriver.chrome.options import Options \n\nchrome_options = Options()  \nchrome_options.add_argument(\"--headless\")  \ndriver = webdriver.Chrome(chrome_options=chrome_options, executable_path=r'C:\\Utility\\BrowserDrivers\\chromedriver.exe')  \ndriver.get(\"http://www.duo.com\") \nprint(\"Chrome Browser Initialized in Headless Mode\")\ndriver.quit()\nprint(\"Driver Exited\")\n</code></pre></li>\n</ol>\n"
    },
    "804": {
        "question_id": "159720",
        "answer_id": "159745",
        "question": "<p>Coming from a C# background the naming convention for variables and method names are usually either CamelCase or Pascal Case:</p>\n\n<pre><code>// C# example\nstring thisIsMyVariable = \"a\"\npublic void ThisIsMyMethod()\n</code></pre>\n\n<p>In Python, I have seen the above but I have also seen underscores being used:</p>\n\n<pre><code># python example\nthis_is_my_variable = 'a'\ndef this_is_my_function():\n</code></pre>\n\n<p>Is there a more preferable, definitive coding style for Python?</p>\n",
        "answer": "<p>See Python <a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\">PEP 8</a>.</p>\n\n<blockquote>\n  <p>Function names should be lowercase,\n  with words separated by underscores as\n  necessary to improve readability.</p>\n  \n  <p>mixedCase is allowed only in contexts\n  where that's already the prevailing\n  style</p>\n</blockquote>\n\n<p>Variables...</p>\n\n<blockquote>\n  <p>Use the function naming rules:\n  lowercase with words separated by\n  underscores as necessary to improve\n  readability.</p>\n</blockquote>\n\n<p>Personally, I deviate from this because I also prefer <code>mixedCase</code> over <code>lower_case</code> for my own projects.</p>\n"
    },
    "805": {
        "question_id": "8270092",
        "answer_id": "8270146",
        "question": "<p>I want to eliminate all the whitespace from a string, on both ends, and in between words.</p>\n\n<p>I have this Python code:</p>\n\n<pre><code>def my_handle(self):\n    sentence = ' hello  apple  '\n    sentence.strip()\n</code></pre>\n\n<p>But that only eliminates the whitespace on both sides of the string. How do I remove all whitespace?</p>\n",
        "answer": "<p>If you want to remove leading and ending spaces, use <a href=\"http://docs.python.org/2/library/stdtypes.html#str.strip\" rel=\"noreferrer\"><code>str.strip()</code></a>: </p>\n\n<pre><code>sentence = ' hello  apple'\nsentence.strip()\n&gt;&gt;&gt; 'hello  apple'\n</code></pre>\n\n<p>If you want to remove all spaces, use <a href=\"http://docs.python.org/2/library/stdtypes.html#str.replace\" rel=\"noreferrer\"><code>str.replace()</code></a>:</p>\n\n<pre><code>sentence = ' hello  apple'\nsentence.replace(\" \", \"\")\n&gt;&gt;&gt; 'helloapple'\n</code></pre>\n\n<p>If you want to remove duplicated spaces, use <a href=\"http://docs.python.org/2/library/stdtypes.html#str.split\" rel=\"noreferrer\"><code>str.split()</code></a>:</p>\n\n<pre><code>sentence = ' hello  apple'\n\" \".join(sentence.split())\n&gt;&gt;&gt; 'hello apple'\n</code></pre>\n"
    },
    "806": {
        "question_id": "2933",
        "answer_id": "2937",
        "question": "<p>Python works on multiple platforms and can be used for desktop and web applications, thus I conclude that there is some way to compile it into an executable for Mac, Windows and Linux.</p>\n\n<p>The problem being I have no idea where to start or how to write a GUI with it, can anybody shed some light on this and point me in the right direction please?</p>\n",
        "answer": "<p>First you will need some GUI library with Python bindings and then (if you want) some program that will convert your python scripts into standalone executables.</p>\n\n<p><strong>Cross-platform GUI libraries with Python bindings (Windows, Linux, Mac)</strong></p>\n\n<p>Of course, there are many, but the most popular that I've seen in wild are:</p>\n\n<ul>\n<li><a href=\"http://wiki.python.org/moin/TkInter\" rel=\"noreferrer\">Tkinter</a>  - based on <a href=\"http://www.tcl.tk/\" rel=\"noreferrer\">Tk GUI toolkit</a> (de-facto standard GUI library for python, free for commercial projects)</li>\n<li><a href=\"http://www.wxpython.org/\" rel=\"noreferrer\">WxPython</a> - based on <a href=\"http://www.wxwidgets.org/\" rel=\"noreferrer\">WxWidgets</a> (popular, free for commercial projects)</li>\n<li><a href=\"https://www.qt.io\" rel=\"noreferrer\">Qt</a> using the <a href=\"https://riverbankcomputing.com/software/pyqt/intro\" rel=\"noreferrer\">PyQt bindings</a> or <a href=\"https://www.qt.io/qt-for-python\" rel=\"noreferrer\">Qt for Python</a>. The former is not free for commercial projects. The latter is less mature, but can be used for free.</li>\n</ul>\n\n<p>Complete list is at <a href=\"http://wiki.python.org/moin/GuiProgramming\" rel=\"noreferrer\">http://wiki.python.org/moin/GuiProgramming</a></p>\n\n<p><strong>Single executable (all platforms)</strong></p>\n\n<ul>\n<li><a href=\"https://www.pyinstaller.org/\" rel=\"noreferrer\">PyInstaller</a> - the most active</li>\n<li><a href=\"https://build-system.fman.io\" rel=\"noreferrer\">fbs</a> - if you chose Qt above</li>\n</ul>\n\n<p><strong>Single executable (Windows)</strong></p>\n\n<ul>\n<li><a href=\"http://www.py2exe.org/\" rel=\"noreferrer\">py2exe</a> - used to be the most popular</li>\n</ul>\n\n<p><strong>Single executable (Linux)</strong></p>\n\n<ul>\n<li><a href=\"http://wiki.python.org/moin/Freeze\" rel=\"noreferrer\">Freeze</a> - works the same way like py2exe but targets Linux platform</li>\n</ul>\n\n<p><strong>Single executable (Mac)</strong></p>\n\n<ul>\n<li><a href=\"https://pythonhosted.org/py2app/\" rel=\"noreferrer\">py2app</a> - again, works like py2exe but targets Mac OS</li>\n</ul>\n"
    },
    "807": {
        "question_id": "10763440",
        "answer_id": "10763461",
        "question": "<p>I have both <code>python2.7</code> and <code>python3.2</code> installed in <code>Ubuntu 12.04</code>.<br>\nThe symbolic link <code>python</code> links to <code>python2.7</code>.</p>\n\n<p>When I type:</p>\n\n<pre><code>sudo pip install package-name\n</code></pre>\n\n<p>It will default install <code>python2</code> version of <code>package-name</code>.</p>\n\n<p>Some package supports both <code>python2</code> and <code>python3</code>.<br>\nHow to install <code>python3</code> version of <code>package-name</code> via <code>pip</code>?</p>\n",
        "answer": "<p>You may want to build a <code>virtualenv</code> of python3, then install packages of python3 after activating the virtualenv. So your system won't be messed up :)</p>\n\n<p>This could be something like:</p>\n\n<pre><code>virtualenv -p /usr/bin/python3 py3env\nsource py3env/bin/activate\npip install package-name\n</code></pre>\n"
    },
    "808": {
        "question_id": "10196198",
        "answer_id": "10226971",
        "question": "<p>I was doing a fun project: Solving a Sudoku from an input image using OpenCV (as in Google goggles etc). And I have completed the task, but at the end I found a little problem for which I came here.</p>\n\n<p>I did the programming using Python API of OpenCV 2.3.1.</p>\n\n<p>Below is what I did :</p>\n\n<ol>\n<li>Read the image</li>\n<li>Find the contours </li>\n<li>Select the one with maximum area, ( and also somewhat equivalent to square).</li>\n<li><p>Find the corner points.</p>\n\n<p>e.g. given below:</p>\n\n<p><img src=\"https://i.stack.imgur.com/h1yKg.png\" alt=\"enter image description here\"></p>\n\n<p>(<strong>Notice here that the green line correctly coincides with the true boundary of the Sudoku, so the Sudoku can be correctly warped</strong>. Check next image)</p></li>\n<li><p>warp the image to a perfect square</p>\n\n<p>eg image:</p>\n\n<p><img src=\"https://i.stack.imgur.com/i4D9o.png\" alt=\"enter image description here\"></p></li>\n<li><p>Perform OCR ( for which I used the method I have given in <a href=\"https://stackoverflow.com/questions/9413216/simple-digit-recognition-ocr-in-opencv-python\">Simple Digit Recognition OCR in OpenCV-Python</a> )</p></li>\n</ol>\n\n<p>And the method worked well.</p>\n\n<p><strong>Problem:</strong></p>\n\n<p>Check out <a href=\"http://web.archive.org/web/20140601100441/http://davemark.com/images/sudoku.jpg\" rel=\"noreferrer\">this image.</a></p>\n\n<p>Performing the step 4 on this image gives the result below:</p>\n\n<p><img src=\"https://i.stack.imgur.com/YTiOC.jpg\" alt=\"enter image description here\"></p>\n\n<p>The red line drawn is the original contour which is the true outline of sudoku boundary.</p>\n\n<p>The green line drawn is approximated contour which will be the outline of warped image.</p>\n\n<p>Which of course, there is difference between green line and red line at the top edge of sudoku. So while warping, I am not getting the original boundary of the Sudoku.</p>\n\n<p><strong>My Question :</strong> </p>\n\n<p>How can I warp the image on the correct boundary of the Sudoku, i.e. the red line OR how can I remove the difference between red line and green line? Is there any method for this in OpenCV?</p>\n",
        "answer": "<p>I have a solution that works, but you'll have to translate it to OpenCV yourself. It's written in Mathematica.</p>\n\n<p>The first step is to adjust the brightness in the image, by dividing each pixel with the result of a closing operation:</p>\n\n<pre><code>src = ColorConvert[Import[\"http://davemark.com/images/sudoku.jpg\"], \"Grayscale\"];\nwhite = Closing[src, DiskMatrix[5]];\nsrcAdjusted = Image[ImageData[src]/ImageData[white]]\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/DLMIA.png\" alt=\"enter image description here\"></p>\n\n<p>The next step is to find the sudoku area, so I can ignore (mask out) the background. For that, I use connected component analysis, and select the component that's got the largest convex area:</p>\n\n<pre><code>components = \n  ComponentMeasurements[\n    ColorNegate@Binarize[srcAdjusted], {\"ConvexArea\", \"Mask\"}][[All, \n    2]];\nlargestComponent = Image[SortBy[components, First][[-1, 2]]]\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/lGUIe.png\" alt=\"enter image description here\"></p>\n\n<p>By filling this image, I get a mask for the sudoku grid:</p>\n\n<pre><code>mask = FillingTransform[largestComponent]\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/jXwoT.png\" alt=\"enter image description here\"></p>\n\n<p>Now, I can use a 2nd order derivative filter to find the vertical and horizontal lines in two separate images:</p>\n\n<pre><code>lY = ImageMultiply[MorphologicalBinarize[GaussianFilter[srcAdjusted, 3, {2, 0}], {0.02, 0.05}], mask];\nlX = ImageMultiply[MorphologicalBinarize[GaussianFilter[srcAdjusted, 3, {0, 2}], {0.02, 0.05}], mask];\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/ptwTi.png\" alt=\"enter image description here\"></p>\n\n<p>I use connected component analysis again to extract the grid lines from these images. The grid lines are much longer than the digits, so I can use caliper length to select only the grid lines-connected components. Sorting them by position, I get 2x10 mask images for each of the vertical/horizontal grid lines in the image:</p>\n\n<pre><code>verticalGridLineMasks = \n  SortBy[ComponentMeasurements[\n      lX, {\"CaliperLength\", \"Centroid\", \"Mask\"}, # &gt; 100 &amp;][[All, \n      2]], #[[2, 1]] &amp;][[All, 3]];\nhorizontalGridLineMasks = \n  SortBy[ComponentMeasurements[\n      lY, {\"CaliperLength\", \"Centroid\", \"Mask\"}, # &gt; 100 &amp;][[All, \n      2]], #[[2, 2]] &amp;][[All, 3]];\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/WKhhF.png\" alt=\"enter image description here\"></p>\n\n<p>Next I take each pair of vertical/horizontal grid lines, dilate them, calculate the pixel-by-pixel intersection, and calculate the center of the result. These points are the grid line intersections:</p>\n\n<pre><code>centerOfGravity[l_] := \n ComponentMeasurements[Image[l], \"Centroid\"][[1, 2]]\ngridCenters = \n  Table[centerOfGravity[\n    ImageData[Dilation[Image[h], DiskMatrix[2]]]*\n     ImageData[Dilation[Image[v], DiskMatrix[2]]]], {h, \n    horizontalGridLineMasks}, {v, verticalGridLineMasks}];\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/26GOU.png\" alt=\"enter image description here\"></p>\n\n<p>The last step is to define two interpolation functions for X/Y mapping through these points, and transform the image using these functions:</p>\n\n<pre><code>fnX = ListInterpolation[gridCenters[[All, All, 1]]];\nfnY = ListInterpolation[gridCenters[[All, All, 2]]];\ntransformed = \n ImageTransformation[\n  srcAdjusted, {fnX @@ Reverse[#], fnY @@ Reverse[#]} &amp;, {9*50, 9*50},\n   PlotRange -&gt; {{1, 10}, {1, 10}}, DataRange -&gt; Full]\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/cLncR.png\" alt=\"enter image description here\"></p>\n\n<p>All of the operations are basic image processing function, so this should be possible in OpenCV, too. The spline-based image transformation might be harder, but I don't think you really need it. Probably using the perspective transformation you use now on each individual cell will give good enough results.</p>\n"
    },
    "809": {
        "question_id": "3845423",
        "answer_id": "3845453",
        "question": "<p>I want to remove all empty strings from a list of strings in python.</p>\n\n<p>My idea looks like this:</p>\n\n<pre><code>while '' in str_list:\n    str_list.remove('')\n</code></pre>\n\n<p>Is there any more pythonic way to do this?</p>\n",
        "answer": "<p>I would use <a href=\"http://docs.python.org/library/functions.html#filter\" rel=\"noreferrer\"><code>filter</code></a>:</p>\n\n<pre><code>str_list = filter(None, str_list) # fastest\nstr_list = filter(bool, str_list) # fastest\nstr_list = filter(len, str_list)  # a bit slower\nstr_list = filter(lambda item: item, str_list) # slower than list comprehension\n</code></pre>\n\n<p>Python 3 returns an iterator from <code>filter</code>, so should be wrapped in a call to <code>list()</code></p>\n\n<pre><code>str_list = list(filter(None, str_list)) # fastest\n</code></pre>\n\n<p>(<em>etc.</em>)</p>\n\n<p>Tests:</p>\n\n<pre><code>&gt;&gt;&gt; timeit('filter(None, str_list)', 'str_list=[\"a\"]*1000', number=100000)\n2.4797441959381104\n&gt;&gt;&gt; timeit('filter(bool, str_list)', 'str_list=[\"a\"]*1000', number=100000)\n2.4788150787353516\n&gt;&gt;&gt; timeit('filter(len, str_list)', 'str_list=[\"a\"]*1000', number=100000)\n5.2126238346099854\n&gt;&gt;&gt; timeit('[x for x in str_list if x]', 'str_list=[\"a\"]*1000', number=100000)\n13.354584932327271\n&gt;&gt;&gt; timeit('filter(lambda item: item, str_list)', 'str_list=[\"a\"]*1000', number=100000)\n17.427681922912598\n</code></pre>\n"
    },
    "810": {
        "question_id": "19377969",
        "answer_id": "19378497",
        "question": "<p>I have a 20 x 4000 dataframe in python using pandas. Two of these columns are named Year and quarter. I'd like to create a variable called period that makes Year = 2000 and quarter= q2 into 2000q2</p>\n\n<p>Can anyone help with that?</p>\n",
        "answer": "<pre><code>dataframe[\"period\"] = dataframe[\"Year\"].map(str) + dataframe[\"quarter\"]\n</code></pre>\n"
    },
    "811": {
        "question_id": "50499",
        "answer_id": "50905",
        "question": "<p>I have scripts calling other script files but I need to get the filepath of the file that is currently running within the process. </p>\n\n<p>For example, let's say I have three files. Using <a href=\"http://docs.python.org/library/functions.html#execfile\" rel=\"noreferrer\">execfile</a>:</p>\n\n<ul>\n<li><code>script_1.py</code> calls <code>script_2.py</code>. </li>\n<li>In turn, <code>script_2.py</code> calls <code>script_3.py</code>. </li>\n</ul>\n\n<p>How can I get the file name and path of <strong><code>script_3.py</code></strong>, <em>from code within <code>script_3.py</code></em>, without having to pass that information as arguments from <code>script_2.py</code>?</p>\n\n<p>(Executing <code>os.getcwd()</code> returns the original starting script's filepath not the current file's.)</p>\n",
        "answer": "<p>p1.py:</p>\n\n<pre><code>execfile(\"p2.py\")\n</code></pre>\n\n<p>p2.py:</p>\n\n<pre><code>import inspect, os\nprint inspect.getfile(inspect.currentframe()) # script filename (usually with path)\nprint os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) # script directory\n</code></pre>\n"
    },
    "812": {
        "question_id": "14529838",
        "answer_id": "47103408",
        "question": "<p>The <a href=\"http://pandas.pydata.org/pandas-docs/dev/groupby.html#applying-multiple-functions-at-once\">docs</a> show how to apply multiple functions on a groupby object at a time using a dict with the output column names as the keys:</p>\n\n<pre><code>In [563]: grouped['D'].agg({'result1' : np.sum,\n   .....:                   'result2' : np.mean})\n   .....:\nOut[563]: \n      result2   result1\nA                      \nbar -0.579846 -1.739537\nfoo -0.280588 -1.402938\n</code></pre>\n\n<p>However, this only works on a Series groupby object. And when a dict is similarly passed to a groupby DataFrame, it expects the keys to be the column names that the function will be applied to.</p>\n\n<p>What I want to do is apply multiple functions to several columns (but certain columns will be operated on multiple times). Also, <em>some functions will depend on other columns in the groupby object</em> (like sumif functions). My current solution is to go column by column, and doing something like the code above, using lambdas for functions that depend on other rows. But this is taking a long time, (I think it takes a long time to iterate through a groupby object). I'll have to change it so that I iterate through the whole groupby object in a single run, but I'm wondering if there's a built in way in pandas to do this somewhat cleanly.</p>\n\n<p>For example, I've tried something like </p>\n\n<pre><code>grouped.agg({'C_sum' : lambda x: x['C'].sum(),\n             'C_std': lambda x: x['C'].std(),\n             'D_sum' : lambda x: x['D'].sum()},\n             'D_sumifC3': lambda x: x['D'][x['C'] == 3].sum(), ...)\n</code></pre>\n\n<p>but as expected I get a KeyError (since the keys have to be a column if <code>agg</code> is called from a DataFrame).</p>\n\n<p>Is there any built in way to do what I'd like to do, or a possibility that this functionality may be added, or will I just need to iterate through the groupby manually?</p>\n\n<p>Thanks</p>\n",
        "answer": "<p>The second half of the currently accepted answer is outdated and has two deprecations. First and most important, you can no longer pass a dictionary of dictionaries to the <code>agg</code> groupby method. Second, never use <code>.ix</code>.</p>\n\n<p>If you desire to work with two separate columns at the same time I would suggest using the <code>apply</code> method which implicitly passes a DataFrame to the applied function. Let's use a similar dataframe as the one from above</p>\n\n<pre><code>df = pd.DataFrame(np.random.rand(4,4), columns=list('abcd'))\ndf['group'] = [0, 0, 1, 1]\ndf\n\n          a         b         c         d  group\n0  0.418500  0.030955  0.874869  0.145641      0\n1  0.446069  0.901153  0.095052  0.487040      0\n2  0.843026  0.936169  0.926090  0.041722      1\n3  0.635846  0.439175  0.828787  0.714123      1\n</code></pre>\n\n<p>A dictionary mapped from column names to aggregation functions is still a perfectly good way to perform an aggregation.</p>\n\n<pre><code>df.groupby('group').agg({'a':['sum', 'max'], \n                         'b':'mean', \n                         'c':'sum', \n                         'd': lambda x: x.max() - x.min()})\n\n              a                   b         c         d\n            sum       max      mean       sum  &lt;lambda&gt;\ngroup                                                  \n0      0.864569  0.446069  0.466054  0.969921  0.341399\n1      1.478872  0.843026  0.687672  1.754877  0.672401\n</code></pre>\n\n<p>If you don't like that ugly lambda column name, you can use a normal function and supply a custom name to the special <code>__name__</code> attribute like this:</p>\n\n<pre><code>def max_min(x):\n    return x.max() - x.min()\n\nmax_min.__name__ = 'Max minus Min'\n\ndf.groupby('group').agg({'a':['sum', 'max'], \n                         'b':'mean', \n                         'c':'sum', \n                         'd': max_min})\n\n              a                   b         c             d\n            sum       max      mean       sum Max minus Min\ngroup                                                      \n0      0.864569  0.446069  0.466054  0.969921      0.341399\n1      1.478872  0.843026  0.687672  1.754877      0.672401\n</code></pre>\n\n<hr>\n\n<h2>Using <code>apply</code> and returning a Series</h2>\n\n<p>Now, if you had multiple columns that needed to interact together then you cannot use <code>agg</code>, which implicitly passes a Series to the aggregating function. When using <code>apply</code> the entire group as a DataFrame gets passed into the function.</p>\n\n<p>I recommend making a single custom function that returns a Series of all the aggregations. Use the Series index as labels for the new columns:</p>\n\n<pre><code>def f(x):\n    d = {}\n    d['a_sum'] = x['a'].sum()\n    d['a_max'] = x['a'].max()\n    d['b_mean'] = x['b'].mean()\n    d['c_d_prodsum'] = (x['c'] * x['d']).sum()\n    return pd.Series(d, index=['a_sum', 'a_max', 'b_mean', 'c_d_prodsum'])\n\ndf.groupby('group').apply(f)\n\n         a_sum     a_max    b_mean  c_d_prodsum\ngroup                                           \n0      0.864569  0.446069  0.466054     0.173711\n1      1.478872  0.843026  0.687672     0.630494\n</code></pre>\n\n<p>If you are in love with MultiIndexes, you can still return a Series with one like this:</p>\n\n<pre><code>    def f_mi(x):\n        d = []\n        d.append(x['a'].sum())\n        d.append(x['a'].max())\n        d.append(x['b'].mean())\n        d.append((x['c'] * x['d']).sum())\n        return pd.Series(d, index=[['a', 'a', 'b', 'c_d'], \n                                   ['sum', 'max', 'mean', 'prodsum']])\n\ndf.groupby('group').apply(f_mi)\n\n              a                   b       c_d\n            sum       max      mean   prodsum\ngroup                                        \n0      0.864569  0.446069  0.466054  0.173711\n1      1.478872  0.843026  0.687672  0.630494\n</code></pre>\n"
    },
    "813": {
        "question_id": "1057431",
        "answer_id": "1057534",
        "question": "<p>Could someone provide me with a good way of importing a whole directory of modules?<br>\nI have a structure like this:</p>\n\n<pre><code>/Foo\n    bar.py\n    spam.py\n    eggs.py\n</code></pre>\n\n<p>I tried just converting it to a package by adding <code>__init__.py</code> and doing <code>from Foo import *</code> but it didn't work the way I had hoped.</p>\n",
        "answer": "<p>List all python (<code>.py</code>) files in the current folder and put them as <code>__all__</code> variable in <code>__init__.py</code></p>\n\n<pre><code>from os.path import dirname, basename, isfile, join\nimport glob\nmodules = glob.glob(join(dirname(__file__), \"*.py\"))\n__all__ = [ basename(f)[:-3] for f in modules if isfile(f) and not f.endswith('__init__.py')]\n</code></pre>\n"
    },
    "814": {
        "question_id": "775049",
        "answer_id": "775095",
        "question": "<p>I have a function that returns information in seconds, but I need to store that information in hours:minutes:seconds.</p>\n\n<p>Is there an easy way to convert the seconds to this format in Python?</p>\n",
        "answer": "<p>You can use <a href=\"https://docs.python.org/library/datetime.html#datetime.timedelta\" rel=\"noreferrer\"><code>datetime.timedelta</code></a> function:</p>\n\n<pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; str(datetime.timedelta(seconds=666))\n'0:11:06'\n</code></pre>\n"
    },
    "815": {
        "question_id": "1854",
        "answer_id": "1857",
        "question": "<p>What do I need to look at to see whether I'm on Windows or Unix, etc?</p>\n",
        "answer": "<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; print os.name\nposix\n&gt;&gt;&gt; import platform\n&gt;&gt;&gt; platform.system()\n'Linux'\n&gt;&gt;&gt; platform.release()\n'2.6.22-15-generic'\n</code></pre>\n\n<p>The output of <code>platform.system()</code> is as follows:</p>\n\n<ul>\n<li>Linux: <code>Linux</code></li>\n<li>Mac: <code>Darwin</code></li>\n<li>Windows: <code>Windows</code></li>\n</ul>\n\n<p>See: <a href=\"https://docs.python.org/2/library/platform.html\" rel=\"noreferrer\">platform \u2014 Access to underlying platform\u2019s identifying data</a></p>\n"
    },
    "816": {
        "question_id": "6289474",
        "answer_id": "6289494",
        "question": "<pre><code>$ cat bla.py \nu = unicode('d\u2026')\ns = u.encode('utf-8')\nprint s\n$ python bla.py \n  File \"bla.py\", line 1\nSyntaxError: Non-ASCII character '\\xe2' in file bla.py on line 1, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details\n</code></pre>\n\n<p>How can I declare utf-8 strings in source code?</p>\n",
        "answer": "<p>In source header you can declare:</p>\n\n<pre><code>#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n....\n</code></pre>\n\n<p>It is described in the <a href=\"http://www.python.org/dev/peps/pep-0263/\" rel=\"noreferrer\">PEP 0263</a>: </p>\n\n<p>Then you can use UTF-8 in strings:</p>\n\n<pre><code>#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nu = 'idzie w\u0105\u017c w\u0105sk\u0105 dr\u00f3\u017ck\u0105'\nuu = u.decode('utf8')\ns = uu.encode('cp1250')\nprint(s)\n</code></pre>\n\n<p>This declaration is not needed in Python 3 as <code>UTF-8</code> is the default source encoding (see <a href=\"https://www.python.org/dev/peps/pep-3120/\" rel=\"noreferrer\">PEP 3120</a>).</p>\n\n<p>In addition, it may be worth verifying that your text editor properly encodes your code in utf-8. Otherwise, you may have invisible characters that are not interpreted as utf-8.</p>\n"
    },
    "817": {
        "question_id": "3459098",
        "answer_id": "3459131",
        "question": "<p>I know a list comprehension will do this, but I was wondering if there is an even shorter (and more Pythonic?) approach.</p>\n\n<p>I want to create a series of lists, all of varying length. Each list will contain the same element e, repeated n times (where n = length of the list). How do I create the lists, without doing</p>\n\n<pre><code>[e for number in xrange(n)]\n</code></pre>\n\n<p>for each list?</p>\n",
        "answer": "<p>You can also write:</p>\n\n<pre><code>[e] * n\n</code></pre>\n\n<p>You should note that if e is for example an empty list you get a list with n references to the same list, not n independent empty lists. </p>\n\n<p><strong>Performance testing</strong></p>\n\n<p>At first glance it <em>seems</em> that repeat is the fastest way to create a list with n identical elements:</p>\n\n<pre><code>&gt;&gt;&gt; timeit.timeit('itertools.repeat(0, 10)', 'import itertools', number = 1000000)\n0.37095273281943264\n&gt;&gt;&gt; timeit.timeit('[0] * 10', 'import itertools', number = 1000000)\n0.5577236771712819\n</code></pre>\n\n<p>But wait - it's not a fair test...</p>\n\n<pre><code>&gt;&gt;&gt; itertools.repeat(0, 10)\nrepeat(0, 10)  # Not a list!!!\n</code></pre>\n\n<p>The function <code>itertools.repeat</code> doesn't actually create the list, it just creates an object that can be used to create a list if you wish! Let's try that again, but converting to a list:</p>\n\n<pre><code>&gt;&gt;&gt; timeit.timeit('list(itertools.repeat(0, 10))', 'import itertools', number = 1000000)\n1.7508119747063233\n</code></pre>\n\n<p>So if you want a list, use <code>[e] * n</code>. If you want to generate the elements lazily, use <code>repeat</code>.</p>\n"
    },
    "818": {
        "question_id": "33633370",
        "answer_id": "33633839",
        "question": "<p>I have been using the introductory example of matrix multiplication in TensorFlow.</p>\n\n<pre><code>matrix1 = tf.constant([[3., 3.]])\nmatrix2 = tf.constant([[2.],[2.]])\nproduct = tf.matmul(matrix1, matrix2)\n</code></pre>\n\n<p>When I print the product, it is displaying it as a <code>Tensor</code> object:</p>\n\n<pre><code>&lt;tensorflow.python.framework.ops.Tensor object at 0x10470fcd0&gt;\n</code></pre>\n\n<p>But how do I know the value of <code>product</code>?</p>\n\n<p>The following doesn't help:</p>\n\n<pre><code>print product\nTensor(\"MatMul:0\", shape=TensorShape([Dimension(1), Dimension(1)]), dtype=float32)\n</code></pre>\n\n<p>I know that graphs run on <code>Sessions</code>, but isn't there any way I can check the output of a <code>Tensor</code> object without running the graph in a <code>session</code>?</p>\n",
        "answer": "<p>The easiest<sup>[A]</sup> way to evaluate the actual value of a <code>Tensor</code> object is to pass it to the <code>Session.run()</code> method, or call <code>Tensor.eval()</code> when you have a default session (i.e. in a <code>with tf.Session():</code> block, or see below). In general<sup>[B]</sup>, you cannot print the value of a tensor without running some code in a session.</p>\n\n<p>If you are experimenting with the programming model, and want an easy way to evaluate tensors, the <a href=\"https://www.tensorflow.org/api_docs/python/tf/InteractiveSession\" rel=\"noreferrer\"><code>tf.InteractiveSession</code></a> lets you open a session at the start of your program, and then use that session for all <code>Tensor.eval()</code> (and <code>Operation.run()</code>) calls. This can be easier in an interactive setting, such as the shell or an IPython notebook, when it's tedious to pass around a <code>Session</code> object everywhere.</p>\n\n<p>This might seem silly for such a small expression, but one of the key ideas in Tensorflow is <em>deferred execution</em>: it's very cheap to build a large and complex expression, and when you want to evaluate it, the back-end (to which you connect with a <code>Session</code>) is able to schedule its execution more efficiently (e.g. executing independent parts in parallel and using GPUs).</p>\n\n<hr>\n\n<p>[A]: To print the value of a tensor without returning it to your Python program, you can use the <a href=\"https://www.tensorflow.org/api_docs/python/tf/Print\" rel=\"noreferrer\"><code>tf.Print()</code></a> operator, as <a href=\"https://stackoverflow.com/a/36296783/3574081\">Andrzej suggests in another answer</a>. Note that you still need to run part of the graph to see the output of this op, which is printed to standard output. If you're running distributed TensorFlow, <code>tf.Print()</code> will print its output to the standard output of the task where that op runs. This means that if you use <a href=\"https://colab.research.google.com\" rel=\"noreferrer\">https://colab.research.google.com</a> for example, or any other Jupyter Notebook, then you will <em>not see</em> the output of <a href=\"https://www.tensorflow.org/api_docs/python/tf/Print\" rel=\"noreferrer\"><code>tf.Print()</code></a> in the notebook; in that case refer to <a href=\"https://stackoverflow.com/questions/49969193/no-result-of-tf-print-in-kerass-model-fit/49969365#49969365\">this answer</a> on how to get it to print still.</p>\n\n<p>[B]: You <em>might</em> be able to use the experimental <a href=\"https://www.tensorflow.org/api_docs/python/tf/contrib/util/constant_value\" rel=\"noreferrer\"><code>tf.contrib.util.constant_value()</code></a> function to get the value of a constant tensor, but it isn't intended for general use, and it isn't defined for many operators.</p>\n"
    },
    "819": {
        "question_id": "20199126",
        "answer_id": "20199213",
        "question": "<p>I am getting a bit of headache just because a simple looking, easy statement is throwing some errors in my face.</p>\n\n<p>I have a json file called strings.json like this:</p>\n\n<pre><code>\"strings\": [{\"-name\": \"city\", \"#text\": \"City\"}, {\"-name\": \"phone\", \"#text\": \"Phone\"}, ...,\n            {\"-name\": \"address\", \"#text\": \"Address\"}]\n</code></pre>\n\n<p>I want to read the json file, just that for now. I have these statements which I found out, but it's not working:</p>\n\n<pre><code>import json\nfrom pprint import pprint\n\nwith open('strings.json') as json_data:\n    d = json.load(json_data)\n    json_data.close()\n    pprint(d)\n</code></pre>\n\n<p>The error displayed on the console was this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Traceback (most recent call last):\nFile \"/home/.../android/values/manipulate_json.py\", line 5, in &lt;module&gt;\nd = json.loads(json_data)\nFile \"/usr/lib/python2.7/json/__init__.py\", line 326, in loads\nreturn _default_decoder.decode(s)\nFile \"/usr/lib/python2.7/json/decoder.py\", line 366, in decode\nobj, end = self.raw_decode(s, idx=_w(s, 0).end())\nTypeError: expected string or buffer\n[Finished in 0.1s with exit code 1]\n</code></pre>\n\n<p><strong>Edited</strong></p>\n\n<p>Changed from <code>json.loads</code> to <code>json.load</code></p>\n\n<p>and got this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Traceback (most recent call last):\nFile \"/home/.../android/values/manipulate_json.py\", line 5, in &lt;module&gt;\nd = json.load(json_data)\nFile \"/usr/lib/python2.7/json/__init__.py\", line 278, in load\n**kw)\nFile \"/usr/lib/python2.7/json/__init__.py\", line 326, in loads\nreturn _default_decoder.decode(s)\nFile \"/usr/lib/python2.7/json/decoder.py\", line 369, in decode\nraise ValueError(errmsg(\"Extra data\", s, end, len(s)))\nValueError: Extra data: line 829 column 1 - line 829 column 2 (char 18476 - 18477)\n[Finished in 0.1s with exit code 1]\n</code></pre>\n",
        "answer": "<p>The <a href=\"http://docs.python.org/3/library/json.html#json.load\" rel=\"noreferrer\"><code>json.load()</code> method</a> (without \"s\" in \"load\") can read a file directly:</p>\n\n<pre><code>import json\n\nwith open('strings.json') as f:\n    d = json.load(f)\n    print(d)\n</code></pre>\n\n<p>You were using the <a href=\"http://docs.python.org/3/library/json.html#json.loads\" rel=\"noreferrer\"><code>json.loads()</code> method</a>, which is used for <em>string</em> arguments only. </p>\n\n<p>Edit:\nThe new message is a totally different problem. In that case, there is some invalid json in that file. For that, I would recommend running the file through a <a href=\"http://jsonlint.com/\" rel=\"noreferrer\">json validator</a>.</p>\n\n<p>There are also solutions for fixing json like for example <a href=\"https://stackoverflow.com/questions/18514910/how-do-i-automatically-fix-an-invalid-json-string\">How do I automatically fix an invalid JSON string?</a>.</p>\n"
    },
    "820": {
        "question_id": "69645",
        "answer_id": "782768",
        "question": "<p>I want to take a screenshot via a python script and unobtrusively save it.</p>\n\n<p>I'm only interested in the Linux solution, and should support any X based environment.</p>\n",
        "answer": "<p>This works without having to use scrot or ImageMagick.</p>\n\n<pre><code>import gtk.gdk\n\nw = gtk.gdk.get_default_root_window()\nsz = w.get_size()\nprint \"The size of the window is %d x %d\" % sz\npb = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB,False,8,sz[0],sz[1])\npb = pb.get_from_drawable(w,w.get_colormap(),0,0,0,0,sz[0],sz[1])\nif (pb != None):\n    pb.save(\"screenshot.png\",\"png\")\n    print \"Screenshot saved to screenshot.png.\"\nelse:\n    print \"Unable to get the screenshot.\"\n</code></pre>\n\n<p>Borrowed from <a href=\"http://ubuntuforums.org/showpost.php?p=2681009&amp;postcount=5\" rel=\"noreferrer\">http://ubuntuforums.org/showpost.php?p=2681009&amp;postcount=5</a></p>\n"
    },
    "821": {
        "question_id": "12201577",
        "answer_id": "12201744",
        "question": "<p>I'm trying to use <code>matplotlib</code> to read in an RGB image and convert it to grayscale.</p>\n\n<p>In matlab I use this:</p>\n\n<pre><code>img = rgb2gray(imread('image.png'));\n</code></pre>\n\n<p>In the <a href=\"http://matplotlib.sourceforge.net/users/image_tutorial.html\" rel=\"noreferrer\">matplotlib tutorial</a> they don't cover it. They just read in the image</p>\n\n<pre><code>import matplotlib.image as mpimg\nimg = mpimg.imread('image.png')\n</code></pre>\n\n<p>and then they slice the array, but that's not the same thing as converting RGB to grayscale from what I understand.</p>\n\n<pre><code>lum_img = img[:,:,0]\n</code></pre>\n\n<p>I find it hard to believe that numpy or matplotlib doesn't have a built-in function to convert from rgb to gray. Isn't this a common operation in image processing?</p>\n\n<p>I wrote a very simple function that works with the image imported using <code>imread</code> in 5 minutes. It's horribly inefficient, but that's why I was hoping for a professional implementation built-in. </p>\n\n<p>Sebastian has improved my function, but I'm still hoping to find the built-in one.</p>\n\n<p>matlab's (NTSC/PAL) implementation:</p>\n\n<pre><code>import numpy as np\n\ndef rgb2gray(rgb):\n\n    r, g, b = rgb[:,:,0], rgb[:,:,1], rgb[:,:,2]\n    gray = 0.2989 * r + 0.5870 * g + 0.1140 * b\n\n    return gray\n</code></pre>\n",
        "answer": "<p>How about doing it with <a href=\"https://pillow.readthedocs.io/en/latest/\" rel=\"noreferrer\">Pillow</a>:</p>\n\n<pre><code>from PIL import Image\nimg = Image.open('image.png').convert('LA')\nimg.save('greyscale.png')\n</code></pre>\n\n<hr>\n\n<p>Using matplotlib and <a href=\"https://pillow.readthedocs.io/en/3.2.x/reference/Image.html#PIL.Image.Image.convert\" rel=\"noreferrer\">the formula</a></p>\n\n<pre><code>Y' = 0.2989 R + 0.5870 G + 0.1140 B \n</code></pre>\n\n<p>you could do:</p>\n\n<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\ndef rgb2gray(rgb):\n    return np.dot(rgb[...,:3], [0.2989, 0.5870, 0.1140])\n\nimg = mpimg.imread('image.png')     \ngray = rgb2gray(img)    \nplt.imshow(gray, cmap=plt.get_cmap('gray'), vmin=0, vmax=1)\nplt.show()\n</code></pre>\n"
    },
    "822": {
        "question_id": "22391433",
        "answer_id": "22391554",
        "question": "<p>I have a dataset</p>\n\n<pre><code>|category|\ncat a\ncat b\ncat a\n</code></pre>\n\n<p>I'd like to be able to return something like (showing unique values and frequency)</p>\n\n<pre><code>category | freq |\ncat a       2\ncat b       1\n</code></pre>\n",
        "answer": "<p>Use <code>groupby</code> and <code>count</code>:</p>\n\n<pre><code>In [37]:\ndf = pd.DataFrame({'a':list('abssbab')})\ndf.groupby('a').count()\n\nOut[37]:\n\n   a\na   \na  2\nb  3\ns  2\n\n[3 rows x 1 columns]\n</code></pre>\n\n<p>See the online docs: <a href=\"http://pandas.pydata.org/pandas-docs/stable/groupby.html\" rel=\"noreferrer\">http://pandas.pydata.org/pandas-docs/stable/groupby.html</a></p>\n\n<p>Also <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.value_counts.html\" rel=\"noreferrer\"><code>value_counts()</code></a> as @DSM has commented, many ways to skin a cat here</p>\n\n<pre><code>In [38]:\ndf['a'].value_counts()\n\nOut[38]:\n\nb    3\na    2\ns    2\ndtype: int64\n</code></pre>\n\n<p>If you wanted to add frequency back to the original dataframe use <code>transform</code> to return an aligned index:</p>\n\n<pre><code>In [41]:\ndf['freq'] = df.groupby('a')['a'].transform('count')\ndf\n\nOut[41]:\n\n   a freq\n0  a    2\n1  b    3\n2  s    2\n3  s    2\n4  b    3\n5  a    2\n6  b    3\n\n[7 rows x 2 columns]\n</code></pre>\n"
    },
    "823": {
        "question_id": "3917574",
        "answer_id": "3917632",
        "question": "<p>Is it a linked list, an array?  I searched around and only found people guessing.  My C knowledge isn't good enough to look at the source code.</p>\n",
        "answer": "<p>It's a <a href=\"https://en.wikipedia.org/wiki/Dynamic_array\" rel=\"noreferrer\">dynamic array</a>. Practical proof: Indexing takes (of course with extremely small differences (0.0013 \u00b5secs!)) the same time regardless of index:</p>\n\n<pre><code>...&gt;python -m timeit --setup=\"x = [None]*1000\" \"x[500]\"\n10000000 loops, best of 3: 0.0579 usec per loop\n\n...&gt;python -m timeit --setup=\"x = [None]*1000\" \"x[0]\"\n10000000 loops, best of 3: 0.0566 usec per loop\n</code></pre>\n\n<p>I would be astounded if IronPython or Jython used linked lists - they would ruin the performance of many many widely-used libraries built on the assumption that lists are dynamic arrays.</p>\n"
    },
    "824": {
        "question_id": "3611760",
        "answer_id": "3611987",
        "question": "<p>I'm not asking about Python's scoping rules; I understand generally <em>how</em> scoping works in Python for loops. My question is <em>why</em> the design decisions were made in this way. For example (no pun intended):</p>\n\n<pre><code>for foo in xrange(10):\n    bar = 2\nprint(foo, bar)\n</code></pre>\n\n<p>The above will print (9,2). </p>\n\n<p>This strikes me as weird: 'foo' is really just controlling the loop, and 'bar' was defined inside the loop. I can understand why it might be necessary for 'bar' to be accessible outside the loop (otherwise, for loops would have very limited functionality). What I don't understand is why it is necessary for the control variable to remain in scope after the loop exits. In my experience, it simply clutters the global namespace and makes it harder to track down errors that would be caught by interpreters in other languages.</p>\n",
        "answer": "<p>The likeliest answer is that it just keeps the grammar simple, hasn't been a stumbling block for adoption, and many have been happy with not having to disambiguate the scope to which a name belongs when assigning to it within a loop construct.  Variables are not declared within a scope, it is implied by the location of assignment statements.  The <code>global</code> keyword exists just for this reason (to signify that assignment is done at a global scope).</p>\n\n<p><strong>Update</strong></p>\n\n<p>Here's a good discussion on the topic:  <a href=\"http://mail.python.org/pipermail/python-ideas/2008-October/002109.html\" rel=\"noreferrer\">http://mail.python.org/pipermail/python-ideas/2008-October/002109.html</a></p>\n\n<blockquote>\n  <p>Previous proposals to make for-loop\n  variables local to the loop have\n  stumbled on the problem of existing\n  code that relies on the loop variable\n  keeping its value after exiting the\n  loop, and it seems that this is\n  regarded as a desirable feature.</p>\n</blockquote>\n\n<p>In short, you can probably blame it on the Python community :P</p>\n"
    },
    "825": {
        "question_id": "803265",
        "answer_id": "803421",
        "question": "<p>I am trying to write a wrapper script for a command line program (svnadmin verify) that will display a nice progress indicator for the operation.  This requires me to be able to see each line of output from the wrapped program as soon as it is output.</p>\n\n<p>I figured that I'd just execute the program using <code>subprocess.Popen</code>, use <code>stdout=PIPE</code>, then read each line as it came in and act on it accordingly.  However, when I ran the following code, the output appeared to be buffered somewhere, causing it to appear in two chunks, lines 1 through 332, then 333 through 439 (the last line of output)</p>\n\n<pre><code>from subprocess import Popen, PIPE, STDOUT\n\np = Popen('svnadmin verify /var/svn/repos/config', stdout = PIPE, \n        stderr = STDOUT, shell = True)\nfor line in p.stdout:\n    print line.replace('\\n', '')\n</code></pre>\n\n<p>After looking at the documentation on subprocess a little, I discovered the <code>bufsize</code> parameter to <code>Popen</code>, so I tried setting bufsize to 1 (buffer each line) and 0 (no buffer), but neither value seemed to change the way the lines were being delivered.</p>\n\n<p>At this point I was starting to grasp for straws, so I wrote the following output loop:</p>\n\n<pre><code>while True:\n    try:\n        print p.stdout.next().replace('\\n', '')\n    except StopIteration:\n        break\n</code></pre>\n\n<p>but got the same result.</p>\n\n<p>Is it possible to get 'realtime' program output of a program executed using subprocess?  Is there some other option in Python that is forward-compatible (not <code>exec*</code>)?</p>\n",
        "answer": "<p>I tried this, and for some reason while the code</p>\n\n<pre><code>for line in p.stdout:\n  ...\n</code></pre>\n\n<p>buffers aggressively, the variant</p>\n\n<pre><code>while True:\n  line = p.stdout.readline()\n  if not line: break\n  ...\n</code></pre>\n\n<p>does not. Apparently this is a known bug: <a href=\"http://bugs.python.org/issue3907\" rel=\"noreferrer\">http://bugs.python.org/issue3907</a> (The issue is now \"Closed\" as of Aug 29, 2018)</p>\n"
    },
    "826": {
        "question_id": "5404665",
        "answer_id": "5404716",
        "question": "<p>Consider a dict like</p>\n\n<pre><code>mydict = {\n  'Apple': {'American':'16', 'Mexican':10, 'Chinese':5},\n  'Grapes':{'Arabian':'25','Indian':'20'} }\n</code></pre>\n\n<p>How do I access for instance a particular element of this dictionary?\nfor instance, I would like to print the first element after some formatting the first element of Apple which in our case is 'American' only?</p>\n\n<p>Additional information\nThe above data structure was created by parsing an input file in a python function. Once created however it remains the same for that run.</p>\n\n<p>I am using this data structure in my function.</p>\n\n<p>So if the file changes, the next time this application is run the contents of the file are different and hence the contents of this data structure will be different but the format would be the same.\nSo you see I in my function I don't know that the first element in Apple is 'American' or anything else so I can't directly use 'American' as a key.</p>\n",
        "answer": "<p>Given that it is a dictionary you access it by using the keys. Getting the dictionary stored under \"Apple\", do the following:</p>\n\n<pre><code>&gt;&gt;&gt; mydict[\"Apple\"]\n{'American': '16', 'Mexican': 10, 'Chinese': 5}\n</code></pre>\n\n<p>And getting how many of them are American (16), do like this:</p>\n\n<pre><code>&gt;&gt;&gt; mydict[\"Apple\"][\"American\"]\n'16'\n</code></pre>\n"
    },
    "827": {
        "question_id": "11279331",
        "answer_id": "11279428",
        "question": "<p>Yes in short i would like to know why am I seeing a u in front of my keys and values.</p>\n\n<p>I am rendering a form. The form has  check-box for the particular label and one text field for the ip address. I am creating a dictionary with keys being the label which are hardcoded in the list_key and values for the dictionary are taken from the form input (list_value). The dictionary is created but it is preceded by u for some values. here is the sample output for the dictionary:</p>\n\n<pre><code>{u'1': {'broadcast': u'on', 'arp': '', 'webserver': '', 'ipaddr': u'', 'dns': ''}}\n</code></pre>\n\n<p>can someone please explain what I am doing wrong. I am not getting the error when i simulate similar method in pyscripter. Any suggestions to improve the code are welcome. Thank you</p>\n\n<pre><code>#!/usr/bin/env python\n\nimport webapp2\nimport itertools\nimport cgi\n\nform =\"\"\"\n    &lt;form method=\"post\"&gt;\n    FIREWALL \n    &lt;br&gt;&lt;br&gt;\n    &lt;select name=\"profiles\"&gt;\n        &lt;option value=\"1\"&gt;profile 1&lt;/option&gt;\n        &lt;option value=\"2\"&gt;profile 2&lt;/option&gt;\n        &lt;option value=\"3\"&gt;profile 3&lt;/option&gt;\n    &lt;/select&gt;\n    &lt;br&gt;&lt;br&gt;\n    Check the box to implement the particular policy\n    &lt;br&gt;&lt;br&gt;\n\n    &lt;label&gt; Allow Broadcast\n        &lt;input type=\"checkbox\" name=\"broadcast\"&gt;\n    &lt;/label&gt;\n    &lt;br&gt;&lt;br&gt;\n\n    &lt;label&gt; Allow ARP\n        &lt;input type=\"checkbox\" name=\"arp\"&gt;\n    &lt;/label&gt;&lt;br&gt;&lt;br&gt;\n\n    &lt;label&gt; Allow Web traffic from external address to internal webserver\n        &lt;input type=\"checkbox\" name=\"webserver\"&gt;\n    &lt;/label&gt;&lt;br&gt;&lt;br&gt;\n\n    &lt;label&gt; Allow DNS\n        &lt;input type=\"checkbox\" name=\"dns\"&gt;\n    &lt;/label&gt;&lt;br&gt;&lt;br&gt;\n\n    &lt;label&gt; Block particular Internet Protocol  address\n        &lt;input type=\"text\" name=\"ipaddr\"&gt;\n    &lt;/label&gt;&lt;br&gt;&lt;br&gt;\n\n    &lt;input type=\"submit\"&gt;   \n    &lt;/form&gt;\n\"\"\"\ndictionarymain={}\n\nclass MainHandler(webapp2.RequestHandler):  \n    def get(self):\n        self.response.out.write(form)\n\n    def post(self):\n        # get the parameters from the form \n        profile = self.request.get('profiles')\n\n        broadcast = self.request.get('broadcast')\n        arp = self.request.get('arp')\n        webserver = self.request.get('webserver')\n        dns =self.request.get('dns')\n        ipaddr = self.request.get('ipaddr')\n\n\n        # Create a dictionary for the above parameters\n        list_value =[ broadcast , arp , webserver , dns, ipaddr ]\n        list_key =['broadcast' , 'arp' , 'webserver' , 'dns' , 'ipaddr' ]\n\n        #self.response.headers['Content-Type'] ='text/plain'\n        #self.response.out.write(profile)\n\n        # map two list to a dictionary using itertools\n        adict = dict(zip(list_key,list_value))\n        self.response.headers['Content-Type'] ='text/plain'\n        self.response.out.write(adict)\n\n        if profile not in dictionarymain:\n            dictionarymain[profile]= {}\n        dictionarymain[profile]= adict\n\n        #self.response.headers['Content-Type'] ='text/plain'\n        #self.response.out.write(dictionarymain)\n\n        def escape_html(s):\n            return cgi.escape(s, quote =True)\n\n\n\napp = webapp2.WSGIApplication([('/', MainHandler)],\n                              debug=True)\n</code></pre>\n",
        "answer": "<p>The 'u' in front of the string values means the string has been represented as unicode.  Letters before strings here are called \"String Encoding declarations\".  Unicode is a way to represent more characters than normal ascii can manage.</p>\n\n<p>You can convert a string to unicode multiple ways:</p>\n\n<pre><code>&gt;&gt;&gt; u'foo'\nu'foo'\n&gt;&gt;&gt; unicode('foo')\nu'foo'\n</code></pre>\n\n<p>But the real reason is to represent something like this (<a href=\"http://translate.google.com/#ru%7Cen%7C%D0%9E%D0%B7%D0%BD%D0%B0%D0%BA%D0%BE%D0%BC%D1%8C%D1%82%D0%B5%D1%81%D1%8C%20%D1%81%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D0%B5%D0%B9\" rel=\"noreferrer\">translation here</a>):</p>\n\n<pre><code>&gt;&gt;&gt; val = u'\u041e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439'\n&gt;&gt;&gt; val\nu'\\u041e\\u0437\\u043d\\u0430\\u043a\\u043e\\u043c\\u044c\\u0442\\u0435\\u0441\\u044c \\u0441 \\u0434\\u043e\\u043a\\u0443\\u043c\\u0435\\u043d\\u0442\\u0430\\u0446\\u0438\\u0435\\u0439'\n&gt;&gt;&gt; print val\n\u041e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439\n</code></pre>\n\n<p>For the most part, you shouldn't have any errors in treating them different than ascii strings in this code.</p>\n\n<p>There are other symbols you will see, such as the \"raw\" symbol for telling a string not to interpret any special characters. This is extremely useful when doing regular expression in python.</p>\n\n<pre><code>&gt;&gt;&gt; 'foo\\\"'\n'foo\"'\n&gt;&gt;&gt; r'foo\\\"'\n'foo\\\\\"'\n</code></pre>\n\n<p>ASCII and Unicode strings can be logically equivalent:</p>\n\n<pre><code>&gt;&gt;&gt; bird1 = unicode('unladen swallow')\n&gt;&gt;&gt; bird2 = 'unladen swallow'\n&gt;&gt;&gt; bird1 == bird2\nTrue\n</code></pre>\n"
    },
    "828": {
        "question_id": "1482308",
        "answer_id": "1482316",
        "question": "<p>Given a set </p>\n\n<pre><code>{0, 1, 2, 3}\n</code></pre>\n\n<p>What's a good way to produce the subsets:</p>\n\n<pre><code>[set(),\n {0},\n {1},\n {2},\n {3},\n {0, 1},\n {0, 2},\n {0, 3},\n {1, 2},\n {1, 3},\n {2, 3},\n {0, 1, 2},\n {0, 1, 3},\n {0, 2, 3},\n {1, 2, 3},\n {0, 1, 2, 3}]\n</code></pre>\n",
        "answer": "<p>The Python <a href=\"https://docs.python.org/3/library/itertools.html#itertools-recipes\" rel=\"nofollow noreferrer\"><code>itertools</code> page</a> has exactly a <code>powerset</code> recipe for this:</p>\n\n<pre><code>from itertools import chain, combinations\n\ndef powerset(iterable):\n    \"powerset([1,2,3]) --&gt; () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)\"\n    s = list(iterable)\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&gt;&gt;&gt; list(powerset(\"abcd\"))\n[(), ('a',), ('b',), ('c',), ('d',), ('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd'), ('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'c', 'd'), ('b', 'c', 'd'), ('a', 'b', 'c', 'd')]\n</code></pre>\n\n<p>If you don't like that empty tuple at the beginning, you can just change the <code>range</code> statement to <code>range(1, len(s)+1)</code> to avoid a 0-length combination.</p>\n"
    },
    "829": {
        "question_id": "37878946",
        "answer_id": "37879017",
        "question": "<p>Suppose I have a matrix <strong>A</strong> with some arbitrary values:</p>\n\n<pre><code>array([[ 2, 4, 5, 3],\n       [ 1, 6, 8, 9],\n       [ 8, 7, 0, 2]])\n</code></pre>\n\n<p>And a matrix <strong>B</strong> which contains indices of elements in A:</p>\n\n<pre><code>array([[0, 0, 1, 2],\n       [0, 3, 2, 1],\n       [3, 2, 1, 0]])\n</code></pre>\n\n<p>How do I select values from <strong>A</strong> pointed by <strong>B</strong>, i.e.:</p>\n\n<pre><code>A[B] = [[2, 2, 4, 5],\n        [1, 9, 8, 6],\n        [2, 0, 7, 8]]\n</code></pre>\n",
        "answer": "<p>You can use <a href=\"http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#advanced-indexing\" rel=\"noreferrer\"><code>NumPy's advanced indexing</code></a> -</p>\n\n<pre><code>A[np.arange(A.shape[0])[:,None],B]\n</code></pre>\n\n<p>One can also use <code>linear indexing</code> -</p>\n\n<pre><code>m,n = A.shape\nout = np.take(A,B + n*np.arange(m)[:,None])\n</code></pre>\n\n<p>Sample run -</p>\n\n<pre><code>In [40]: A\nOut[40]: \narray([[2, 4, 5, 3],\n       [1, 6, 8, 9],\n       [8, 7, 0, 2]])\n\nIn [41]: B\nOut[41]: \narray([[0, 0, 1, 2],\n       [0, 3, 2, 1],\n       [3, 2, 1, 0]])\n\nIn [42]: A[np.arange(A.shape[0])[:,None],B]\nOut[42]: \narray([[2, 2, 4, 5],\n       [1, 9, 8, 6],\n       [2, 0, 7, 8]])\n\nIn [43]: m,n = A.shape\n\nIn [44]: np.take(A,B + n*np.arange(m)[:,None])\nOut[44]: \narray([[2, 2, 4, 5],\n       [1, 9, 8, 6],\n       [2, 0, 7, 8]])\n</code></pre>\n"
    },
    "830": {
        "question_id": "41386443",
        "answer_id": "41386927",
        "question": "<p>I need to create a Pandas DataFrame based on a text file based on the following structure:                                        </p>\n\n<pre><code>Alabama[edit]\nAuburn (Auburn University)[1]\nFlorence (University of North Alabama)\nJacksonville (Jacksonville State University)[2]\nLivingston (University of West Alabama)[2]\nMontevallo (University of Montevallo)[2]\nTroy (Troy University)[2]\nTuscaloosa (University of Alabama, Stillman College, Shelton State)[3][4]\nTuskegee (Tuskegee University)[5]\nAlaska[edit]\nFairbanks (University of Alaska Fairbanks)[2]\nArizona[edit]\nFlagstaff (Northern Arizona University)[6]\nTempe (Arizona State University)\nTucson (University of Arizona)\nArkansas[edit]\n</code></pre>\n\n<p>The rows with \"[edit]\" are States and the rows [number] are Regions. I need to split the following and repeat the State name for each Region Name thereafter.</p>\n\n<pre><code>Index          State          Region Name\n0              Alabama        Aurburn...\n1              Alabama        Florence...\n2              Alabama        Jacksonville...\n...\n9              Alaska         Fairbanks...\n10             Alaska         Arizona...\n11             Alaska         Flagstaff...\n</code></pre>\n\n<p>Pandas DataFrame</p>\n\n<p>I not sure how to split the text file based on \"[edit]\" and \"[number]\" or \"(characters)\" into the respective columns and repeat the State Name for each Region Name. Please can anyone give me a starting point to begin with to accomplish the following.</p>\n",
        "answer": "<p>You can first <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html\" rel=\"noreferrer\"><code>read_csv</code></a> with parameter <code>name</code> for create <code>DataFrame</code> with column <code>Region Name</code>, separator is value which is NOT in values (like <code>;</code>):</p>\n\n<pre><code>df = pd.read_csv('filename.txt', sep=\";\", names=['Region Name'])\n</code></pre>\n\n<p>Then  <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.insert.html\" rel=\"noreferrer\"><code>insert</code></a> new column <code>State</code> with <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.extract.html\" rel=\"noreferrer\"><code>extract</code></a> rows where text <code>[edit]</code> and <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.replace.html\" rel=\"noreferrer\"><code>replace</code></a> all values from <code>(</code> to the end to column <code>Region Name</code>.</p>\n\n<pre><code>df.insert(0, 'State', df['Region Name'].str.extract('(.*)\\[edit\\]', expand=False).ffill())\ndf['Region Name'] = df['Region Name'].str.replace(r' \\(.+$', '')\n</code></pre>\n\n<p>Last remove rows where text <code>[edit]</code> by <a href=\"http://pandas.pydata.org/pandas-docs/stable/indexing.html#boolean-indexing\" rel=\"noreferrer\"><code>boolean indexing</code></a>, mask is created by <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.contains.html\" rel=\"noreferrer\"><code>str.contains</code></a>:  </p>\n\n<pre><code>df = df[~df['Region Name'].str.contains('\\[edit\\]')].reset_index(drop=True)\nprint (df)\n      State   Region Name\n0   Alabama        Auburn\n1   Alabama      Florence\n2   Alabama  Jacksonville\n3   Alabama    Livingston\n4   Alabama    Montevallo\n5   Alabama          Troy\n6   Alabama    Tuscaloosa\n7   Alabama      Tuskegee\n8    Alaska     Fairbanks\n9   Arizona     Flagstaff\n10  Arizona         Tempe\n11  Arizona        Tucson\n</code></pre>\n\n<p>If need all values solution is easier:</p>\n\n<pre><code>df = pd.read_csv('filename.txt', sep=\";\", names=['Region Name'])\ndf.insert(0, 'State', df['Region Name'].str.extract('(.*)\\[edit\\]', expand=False).ffill())\ndf = df[~df['Region Name'].str.contains('\\[edit\\]')].reset_index(drop=True)\nprint (df)\n      State                                        Region Name\n0   Alabama                      Auburn (Auburn University)[1]\n1   Alabama             Florence (University of North Alabama)\n2   Alabama    Jacksonville (Jacksonville State University)[2]\n3   Alabama         Livingston (University of West Alabama)[2]\n4   Alabama           Montevallo (University of Montevallo)[2]\n5   Alabama                          Troy (Troy University)[2]\n6   Alabama  Tuscaloosa (University of Alabama, Stillman Co...\n7   Alabama                  Tuskegee (Tuskegee University)[5]\n8    Alaska      Fairbanks (University of Alaska Fairbanks)[2]\n9   Arizona         Flagstaff (Northern Arizona University)[6]\n10  Arizona                   Tempe (Arizona State University)\n11  Arizona                     Tucson (University of Arizona)\n</code></pre>\n"
    },
    "831": {
        "question_id": "10607293",
        "answer_id": "10607353",
        "question": "<p>I'm trying to compile my code into a Python 3 module. It runs fine when I choose \"Run module\" in IDLE, but receive the following syntax error when I try to create a distribution:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>File \"/usr/local/lib/python3.2/dist-packages/simpletriple.py\", line 9\n    def add(self, (sub, pred, obj)):\n                  ^\nSyntaxError: invalid syntax\n</code></pre>\n\n<p>Can anyone help point out what is wrong with the syntax? Here is the complete code:</p>\n\n<pre><code>import csv\n\nclass SimpleGraph:\n    def __init__(self):\n        self._spo = {}\n        self._pos = {}\n        self._osp = {}\n\n    def add(self, (sub, pred, obj)):\n        \"\"\"\n        Adds a triple to the graph.\n        \"\"\"\n        self._addToIndex(self._spo, sub, pred, obj)\n        self._addToIndex(self._pos, pred, obj, sub)\n        self._addToIndex(self._osp, obj, sub, pred)\n\n    def _addToIndex(self, index, a, b, c):\n        \"\"\"\n        Adds a triple to a specified index.\n        \"\"\"\n        if a not in index: index[a] = {b:set([c])}\n        else:\n            if b not in index[a]: index[a][b] = set([c])\n            else: index[a][b].add(c)\n\n    def remove(self, (sub, pred, obj)):\n        \"\"\"\n        Remove a triple pattern from the graph.\n        \"\"\"\n        triples = list(self.triples((sub, pred, obj)))\n        for (delSub, delPred, delObj) in triples:\n            self._removeFromIndex(self._spo, delSub, delPred, delObj)\n            self._removeFromIndex(self._pos, delPred, delObj, delSub)\n            self._removeFromIndex(self._osp, delObj, delSub, delPred)\n\n    def _removeFromIndex(self, index, a, b, c):\n        \"\"\"\n        Removes a triple from an index and clears up empty indermediate structures.\n        \"\"\"\n        try:\n            bs = index[a]\n            cset = bs[b]\n            cset.remove(c)\n            if len(cset) == 0: del bs[b]\n            if len(bs) == 0: del index[a]\n        # KeyErrors occur if a term was missing, which means that it wasn't a valid delete:\n        except KeyError:\n            pass\n\n    def triples(self, (sub, pred, obj)):\n        \"\"\"\n        Generator over the triple store.\n        Returns triples that match the given triple pattern. \n        \"\"\"\n        # check which terms are present in order to use the correct index:\n        try:\n            if sub != None: \n                if pred != None:\n                    # sub pred obj\n                    if obj != None:\n                        if obj in self._spo[sub][pred]: yield (sub, pred, obj)\n                    # sub pred None\n                    else:\n                        for retObj in self._spo[sub][pred]: yield (sub, pred, retObj)\n                else:\n                    # sub None obj\n                    if obj != None:\n                        for retPred in self._osp[obj][sub]: yield (sub, retPred, obj)\n                    # sub None None\n                    else:\n                        for retPred, objSet in self._spo[sub].items():\n                            for retObj in objSet:\n                                yield (sub, retPred, retObj)\n            else:\n                if pred != None:\n                    # None pred obj\n                    if obj != None:\n                        for retSub in self._pos[pred][obj]:\n                            yield (retSub, pred, obj)\n                    # None pred None\n                    else:\n                        for retObj, subSet in self._pos[pred].items():\n                            for retSub in subSet:\n                                yield (retSub, pred, retObj)\n                else:\n                    # None None obj\n                    if obj != None:\n                        for retSub, predSet in self._osp[obj].items():\n                            for retPred in predSet:\n                                yield (retSub, retPred, obj)\n                    # None None None\n                    else:\n                        for retSub, predSet in self._spo.items():\n                            for retPred, objSet in predSet.items():\n                                for retObj in objSet:\n                                    yield (retSub, retPred, retObj)\n        # KeyErrors occur if a query term wasn't in the index, so we yield nothing:\n        except KeyError:\n            pass\n\n    def value(self, sub=None, pred=None, obj=None):\n        for retSub, retPred, retObj in self.triples((sub, pred, obj)):\n            if sub is None: return retSub\n            if pred is None: return retPred\n            if obj is None: return retObj\n            break\n        return None\n\n    def load(self, filename):\n        f = open(filename, \"rb\")\n        reader = csv.reader(f)\n        for sub, pred, obj in reader:\n            sub = unicode(sub, \"UTF-8\")\n            pred = unicode(pred, \"UTF-8\")\n            obj = unicode(obj, \"UTF-8\")\n            self.add((sub, pred, obj))\n        f.close()\n\n    def save(self, filename):\n        f = open(filename, \"wb\")\n        writer = csv.writer(f)\n        for sub, pred, obj in self.triples((None, None, None)):\n            writer.writerow([sub.encode(\"UTF-8\"), pred.encode(\"UTF-8\"), obj.encode(\"UTF-8\")])\n        f.close()\n\nif __name__ == \"__main__\":\n    g = SimpleGraph()\n    g.add((\"blade_runner\", \"name\", \"Blade Runner\"))\n    g.add((\"blade_runner\", \"name\", \"Blade Runner\"))\n    g.add((\"blade_runner\", \"release_date\", \"June 25, 1982\"))\n    g.add((\"blade_runner\", \"directed_by\", \"Ridley Scott\"))\n\n    print list(g.triples((None, None, None)))\n    print list(g.triples((\"blade_runner\", None, None)))\n    print list(g.triples((\"blade_runner\", \"name\", None)))\n    print list(g.triples((\"blade_runner\", \"name\", \"Blade Runner\")))\n    print list(g.triples((\"blade_runner\", None, \"Blade Runner\")))\n    print list(g.triples((None, \"name\", \"Blade Runner\")))\n    print list(g.triples((None, None, \"Blade Runner\")))\n\n    print list(g.triples((\"foo\", \"name\", \"Blade Runner\")))\n    print list(g.triples((\"blade_runner\", \"foo\", \"Blade Runner\")))\n    print list(g.triples((\"blade_runner\", \"name\", \"foo\")))\n</code></pre>\n",
        "answer": "<p><a href=\"http://www.python.org/dev/peps/pep-3113/\" rel=\"noreferrer\">PEP 3113</a> explains why this feature, \"tuple parameter unpacking\", was removed in Python 3. It also explains how to port code that uses them. In this case you'd need to change a function like:</p>\n\n<pre><code>def add(self, (sub, pred, obj)):\n    self._addToIndex(self._spo, sub, pred, obj)\n    self._addToIndex(self._pos, pred, obj, sub)\n    self._addToIndex(self._osp, obj, sub, pred)\n</code></pre>\n\n<p>to a version which passes the tuple as a single parameter and unpacks it manually:</p>\n\n<pre><code>def add(self, sub_pred_obj):\n    sub, pred, obj = sub_pred_obj\n    self._addToIndex(self._spo, sub, pred, obj)\n    self._addToIndex(self._pos, pred, obj, sub)\n    self._addToIndex(self._osp, obj, sub, pred)\n</code></pre>\n\n<hr>\n\n<p>For a <code>lambda</code> function, you can't use assignment to unpack. The best solution there is usually to not unpack. For example, change this:</p>\n\n<pre><code>lambda (x, y): (y, x)\n</code></pre>\n\n<p>\u2026 to this:</p>\n\n<pre><code>lambda xy: (xy[1], xy[0])\n</code></pre>\n\n<p>For complicated functions, this can get ugly\u2014but then for complicated functions, you probably want to <code>def</code> them anyway.</p>\n\n<hr>\n\n<p>It's worth noting that running your code through <a href=\"https://docs.python.org/3/library/2to3.html\" rel=\"noreferrer\"><code>2to3</code></a>, <a href=\"https://pypi.org/project/modernize/\" rel=\"noreferrer\"><code>modernize</code></a>, or <a href=\"https://pypi.org/project/future/\" rel=\"noreferrer\"><code>futurize</code></a> will find this problem in both <code>def</code> and <code>lambda</code>, and suggest exactly these solutions:</p>\n\n<pre><code>$ echo 'lambda (x,y): (y,x)' | 2to3 -\n--- &lt;stdin&gt; (original)\n+++ &lt;stdin&gt; (refactored)\n@@ -1 +1 @@\n-lambda (x,y): (y,x)\n+lambda x_y: (x_y[1],x_y[0])\n\n$ echo -e 'def foo((x,y)):\\n    return (y,x)\\n' | 2to3 -\n--- &lt;stdin&gt; (original)\n+++ &lt;stdin&gt; (refactored)\n@@ -1 +1 @@\n-def foo((x,y)):\n+def foo(xxx_todo_changeme):\n+    (x,y) = xxx_todo_changeme\n</code></pre>\n\n<p>If you're trying to port Python 2.x code to 3.x (or to dual-version code) and don't know both languages, you almost certainly want to use one of these tools\u2014or an IDE plugin that wraps them\u2014to help. (Although you may not want to use its output as-is.)</p>\n"
    },
    "832": {
        "question_id": "11241523",
        "answer_id": "11242447",
        "question": "<pre><code>def main():\n    for i in xrange(10**8):\n        pass\nmain()\n</code></pre>\n\n<p>This piece of code in Python runs in  (Note: The timing is done with the time function in BASH in Linux.)</p>\n\n<pre><code>real    0m1.841s\nuser    0m1.828s\nsys     0m0.012s\n</code></pre>\n\n<p>However, if the for loop isn't placed within a function, </p>\n\n<pre><code>for i in xrange(10**8):\n    pass\n</code></pre>\n\n<p>then it runs for a much longer time:</p>\n\n<pre><code>real    0m4.543s\nuser    0m4.524s\nsys     0m0.012s\n</code></pre>\n\n<p>Why is this?</p>\n",
        "answer": "<p>You might ask <em>why</em> it is faster to store local variables than globals. This is a CPython implementation detail.</p>\n\n<p>Remember that CPython is compiled to bytecode, which the interpreter runs. When a function is compiled, the local variables are stored in a fixed-size array (<em>not</em> a <code>dict</code>) and variable names are assigned to indexes. This is possible because you can't dynamically add local variables to a function. Then retrieving a local variable is literally a pointer lookup into the list and a refcount increase on the <code>PyObject</code> which is trivial.</p>\n\n<p>Contrast this to a global lookup (<code>LOAD_GLOBAL</code>), which is a true <code>dict</code> search involving a hash and so on. Incidentally, this is why you need to specify <code>global i</code> if you want it to be global: if you ever assign to a variable inside a scope, the compiler will issue <code>STORE_FAST</code>s for its access unless you tell it not to.</p>\n\n<p>By the way, global lookups are still pretty optimised. Attribute lookups <code>foo.bar</code> are the <em>really</em> slow ones!</p>\n\n<p>Here is small <a href=\"https://wiki.python.org/moin/PythonSpeed/PerformanceTips#Local_Variables\" rel=\"noreferrer\">illustration</a> on local variable efficiency.</p>\n"
    },
    "833": {
        "question_id": "227459",
        "answer_id": "227472",
        "question": "<p>How do I get the <a href=\"http://en.wikipedia.org/wiki/ASCII\" rel=\"noreferrer\">ASCII</a> value of a character as an <code>int</code> in <a href=\"http://en.wikipedia.org/wiki/Python_%28programming_language%29\" rel=\"noreferrer\">Python</a>?</p>\n",
        "answer": "<p>From <a href=\"http://mail.python.org/pipermail/python-win32/2005-April/003100.html\" rel=\"noreferrer\">here</a>:</p>\n\n<blockquote>\n  <p>function ord() would get the int value\n  of the char. And in case you want to\n  convert back after playing with the\n  number, function chr() does the trick.</p>\n</blockquote>\n\n<pre><code>&gt;&gt;&gt; ord('a')\n97\n&gt;&gt;&gt; chr(97)\n'a'\n&gt;&gt;&gt; chr(ord('a') + 3)\n'd'\n&gt;&gt;&gt;\n</code></pre>\n\n<p>In Python 2, there is also the <code>unichr</code> function, returning the <a href=\"http://en.wikipedia.org/wiki/Unicode\" rel=\"noreferrer\">Unicode</a> character whose ordinal is the <code>unichr</code> argument:</p>\n\n<pre><code>&gt;&gt;&gt; unichr(97)\nu'a'\n&gt;&gt;&gt; unichr(1234)\nu'\\u04d2'\n</code></pre>\n\n<p>In Python 3 you can use <code>chr</code> instead of <code>unichr</code>.</p>\n\n<hr>\n\n<p><a href=\"https://docs.python.org/3/library/functions.html#ord\" rel=\"noreferrer\">ord() - Python 3.6.5rc1 documentation</a></p>\n\n<p><a href=\"https://docs.python.org/2/library/functions.html#ord\" rel=\"noreferrer\">ord() - Python 2.7.14 documentation</a></p>\n"
    },
    "834": {
        "question_id": "114214",
        "answer_id": "114267",
        "question": "<p>What is the difference between the following class methods?</p>\n\n<p>Is it that one is static and the other is not?</p>\n\n<pre><code>class Test(object):\n  def method_one(self):\n    print \"Called method_one\"\n\n  def method_two():\n    print \"Called method_two\"\n\na_test = Test()\na_test.method_one()\na_test.method_two()\n</code></pre>\n",
        "answer": "<p>In Python, there is a distinction between <em>bound</em> and <em>unbound</em> methods. </p>\n\n<p>Basically, a call to a member function (like <code>method_one</code>), a bound function</p>\n\n<pre><code>a_test.method_one()\n</code></pre>\n\n<p>is translated to</p>\n\n<pre><code>Test.method_one(a_test)\n</code></pre>\n\n<p>i.e. a call to an unbound method. Because of that, a call to your version of <code>method_two</code> will fail with a <code>TypeError</code></p>\n\n<pre><code>&gt;&gt;&gt; a_test = Test() \n&gt;&gt;&gt; a_test.method_two()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: method_two() takes no arguments (1 given) \n</code></pre>\n\n<p>You can change the behavior of a method using a decorator</p>\n\n<pre><code>class Test(object):\n    def method_one(self):\n        print \"Called method_one\"\n\n    @staticmethod\n    def method_two():\n        print \"Called method two\"\n</code></pre>\n\n<p>The decorator tells the built-in default metaclass <code>type</code> (the class of a class, cf. <a href=\"https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python\">this question</a>) to not create bound methods for <code>method_two</code>.</p>\n\n<p>Now, you can invoke static method both on an instance or on the class directly:</p>\n\n<pre><code>&gt;&gt;&gt; a_test = Test()\n&gt;&gt;&gt; a_test.method_one()\nCalled method_one\n&gt;&gt;&gt; a_test.method_two()\nCalled method_two\n&gt;&gt;&gt; Test.method_two()\nCalled method_two\n</code></pre>\n"
    },
    "835": {
        "question_id": "10973766",
        "answer_id": "10973817",
        "question": "<pre><code>map(function, iterable, ...)\n</code></pre>\n\n<p>Apply function to every item of iterable and return a list of the results. If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel. </p>\n\n<p>If one iterable is shorter than another it is assumed to be extended with None items. </p>\n\n<p>If function is <code>None</code>, the identity function is assumed; if there are multiple arguments, <code>map()</code> returns a list consisting of tuples containing the corresponding items from all iterables (a kind of transpose operation). </p>\n\n<p>The iterable arguments may be a sequence or any iterable object; the result is always a list.</p>\n\n<p>What role does this play in making a Cartesian product?</p>\n\n<pre><code>content = map(tuple, array)\n</code></pre>\n\n<p>What effect does putting a tuple anywhere in there have? I also noticed that without the map function the output is <code>abc</code> and with it, it's <code>a, b, c</code>.</p>\n\n<p>I want to fully understand this function. The reference definitions is also hard to understand. Too much fancy fluff. </p>\n",
        "answer": "<p><code>map</code> isn't particularly pythonic. I would recommend using list comprehensions instead:</p>\n\n<pre><code>map(f, iterable)\n</code></pre>\n\n<p>is basically equivalent to:</p>\n\n<pre><code>[f(x) for x in iterable]\n</code></pre>\n\n<p><code>map</code> on its own can't do a Cartesian product, because the length of its output list is always the same as its input list. You can trivially do a Cartesian product with a list comprehension though:</p>\n\n<pre><code>[(a, b) for a in iterable_a for b in iterable_b]\n</code></pre>\n\n<p>The syntax is a little confusing -- that's basically equivalent to:</p>\n\n<pre><code>result = []\nfor a in iterable_a:\n    for b in iterable_b:\n        result.append((a, b))\n</code></pre>\n"
    },
    "836": {
        "question_id": "189555",
        "answer_id": "189580",
        "question": "<p>I want to download and parse webpage using python, but to access it I need a couple of cookies set. Therefore I need to login over https to the webpage first. The login moment involves sending two POST params (username, password) to /login.php. During the login request I want to retrieve the cookies from the response header and store them so I can use them in the request to download the webpage /data.php.</p>\n\n<p>How would I do this in python (preferably 2.6)? If possible I only want to use builtin modules.</p>\n",
        "answer": "<pre><code>import urllib, urllib2, cookielib\n\nusername = 'myuser'\npassword = 'mypassword'\n\ncj = cookielib.CookieJar()\nopener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))\nlogin_data = urllib.urlencode({'username' : username, 'j_password' : password})\nopener.open('http://www.example.com/login.php', login_data)\nresp = opener.open('http://www.example.com/hiddenpage.php')\nprint resp.read()\n</code></pre>\n\n<p><code>resp.read()</code> is the straight html of the page you want to open, and you can use <code>opener</code> to view any page using your session cookie.</p>\n"
    },
    "837": {
        "question_id": "2369492",
        "answer_id": "2461029",
        "question": "<p>I have a set of X,Y data points (about 10k) that are easy to plot as a scatter plot but that I would like to represent as a heatmap.</p>\n\n<p>I looked through the examples in MatPlotLib and they all seem to already start with heatmap cell values to generate the image.</p>\n\n<p>Is there a method that converts a bunch of x,y, all different, to a heatmap (where zones with higher frequency of x,y would be \"warmer\")?</p>\n",
        "answer": "<p>If you don't want hexagons, you can use numpy's <code>histogram2d</code> function:</p>\n\n<pre><code>import numpy as np\nimport numpy.random\nimport matplotlib.pyplot as plt\n\n# Generate some test data\nx = np.random.randn(8873)\ny = np.random.randn(8873)\n\nheatmap, xedges, yedges = np.histogram2d(x, y, bins=50)\nextent = [xedges[0], xedges[-1], yedges[0], yedges[-1]]\n\nplt.clf()\nplt.imshow(heatmap.T, extent=extent, origin='lower')\nplt.show()\n</code></pre>\n\n<p>This makes a 50x50 heatmap. If you want, say, 512x384, you can put <code>bins=(512, 384)</code> in the call to <code>histogram2d</code>.</p>\n\n<p>Example: <img src=\"https://i.stack.imgur.com/YcXBC.png\" alt=\"Matplotlib heat map example\"></p>\n"
    },
    "838": {
        "question_id": "135041",
        "answer_id": "135114",
        "question": "<p>Why or why not?</p>\n",
        "answer": "<p>For performance, especially when you're iterating over a large range, <code>xrange()</code> is usually better.  However, there are still a few cases why you might prefer <code>range()</code>:</p>\n\n<ul>\n<li><p>In python 3, <code>range()</code> does what <code>xrange()</code> used to do and <code>xrange()</code> does not exist.  If you want to write code that will run on both Python 2 and Python 3, you can't use <code>xrange()</code>.</p></li>\n<li><p><code>range()</code> can actually be faster in some cases - eg. if iterating over the same sequence multiple times.  <code>xrange()</code> has to reconstruct the integer object every time, but <code>range()</code> will have real integer objects.  (It will always perform worse in terms of memory however)</p></li>\n<li><p><code>xrange()</code> isn't usable in all cases where a real list is needed.  For instance, it doesn't support slices, or any list methods.</p></li>\n</ul>\n\n<p>[Edit] There are a couple of posts mentioning how <code>range()</code> will be upgraded by the 2to3 tool.  For the record, here's the output of running the tool on some sample usages of <code>range()</code> and <code>xrange()</code></p>\n\n<pre><code>RefactoringTool: Skipping implicit fixer: buffer\nRefactoringTool: Skipping implicit fixer: idioms\nRefactoringTool: Skipping implicit fixer: ws_comma\n--- range_test.py (original)\n+++ range_test.py (refactored)\n@@ -1,7 +1,7 @@\n\n for x in range(20):\n-    a=range(20)\n+    a=list(range(20))\n     b=list(range(20))\n     c=[x for x in range(20)]\n     d=(x for x in range(20))\n-    e=xrange(20)\n+    e=range(20)\n</code></pre>\n\n<p>As you can see, when used in a for loop or comprehension, or where already wrapped with list(), range is left unchanged.</p>\n"
    },
    "839": {
        "question_id": "42950",
        "answer_id": "43663",
        "question": "<p>Is there a way using Python's standard library to easily determine (i.e. one function call) the last day of a given month?</p>\n\n<p>If the standard library doesn't support that, does the dateutil package support this?</p>\n",
        "answer": "<p>I didn't notice this earlier when I was looking at the <a href=\"https://docs.python.org/2/library/calendar.html\" rel=\"noreferrer\">documentation for the calendar module</a>, but a method called <a href=\"http://docs.python.org/library/calendar.html#calendar.monthrange\" rel=\"noreferrer\">monthrange</a> provides this information:</p>\n\n<blockquote>\n  <p><b>monthrange(year, month)</b><br>\n  &nbsp;&nbsp;&nbsp;&nbsp;Returns weekday of first day of the month and number of days in month, for the specified year and month. </p>\n</blockquote>\n\n<pre><code>&gt;&gt;&gt; import calendar\n&gt;&gt;&gt; calendar.monthrange(2002,1)\n(1, 31)\n&gt;&gt;&gt; calendar.monthrange(2008,2)\n(4, 29)\n&gt;&gt;&gt; calendar.monthrange(2100,2)\n(0, 28)\n</code></pre>\n\n<p>so:</p>\n\n<pre><code>calendar.monthrange(year, month)[1]\n</code></pre>\n\n<p>seems like the simplest way to go.</p>\n\n<p>Just to be clear, <code>monthrange</code> supports leap years as well:</p>\n\n<pre><code>&gt;&gt;&gt; from calendar import monthrange\n&gt;&gt;&gt; monthrange(2012, 2)\n(2, 29)\n</code></pre>\n\n<p><a href=\"https://stackoverflow.com/questions/42950/get-last-day-of-the-month-in-python#43088\">My previous answer</a> still works, but is clearly suboptimal.</p>\n"
    },
    "840": {
        "question_id": "18172851",
        "answer_id": "18173074",
        "question": "<p>I have the following DataFrame:</p>\n\n<pre><code>             daysago  line_race rating        rw    wrating\n line_date                                                 \n 2007-03-31       62         11     56  1.000000  56.000000\n 2007-03-10       83         11     67  1.000000  67.000000\n 2007-02-10      111          9     66  1.000000  66.000000\n 2007-01-13      139         10     83  0.880678  73.096278\n 2006-12-23      160         10     88  0.793033  69.786942\n 2006-11-09      204          9     52  0.636655  33.106077\n 2006-10-22      222          8     66  0.581946  38.408408\n 2006-09-29      245          9     70  0.518825  36.317752\n 2006-09-16      258         11     68  0.486226  33.063381\n 2006-08-30      275          8     72  0.446667  32.160051\n 2006-02-11      475          5     65  0.164591  10.698423\n 2006-01-13      504          0     70  0.142409   9.968634\n 2006-01-02      515          0     64  0.134800   8.627219\n 2005-12-06      542          0     70  0.117803   8.246238\n 2005-11-29      549          0     70  0.113758   7.963072\n 2005-11-22      556          0     -1  0.109852  -0.109852\n 2005-11-01      577          0     -1  0.098919  -0.098919\n 2005-10-20      589          0     -1  0.093168  -0.093168\n 2005-09-27      612          0     -1  0.083063  -0.083063\n 2005-09-07      632          0     -1  0.075171  -0.075171\n 2005-06-12      719          0     69  0.048690   3.359623\n 2005-05-29      733          0     -1  0.045404  -0.045404\n 2005-05-02      760          0     -1  0.039679  -0.039679\n 2005-04-02      790          0     -1  0.034160  -0.034160\n 2005-03-13      810          0     -1  0.030915  -0.030915\n 2004-11-09      934          0     -1  0.016647  -0.016647\n</code></pre>\n\n<p>I need to remove the rows where <code>line_race</code> is equal to <code>0</code>. What's the most efficient way to do this?</p>\n",
        "answer": "<p>If I'm understanding correctly, it should be as simple as:</p>\n\n<pre><code>df = df[df.line_race != 0]\n</code></pre>\n"
    },
    "841": {
        "question_id": "3844801",
        "answer_id": "3844832",
        "question": "<p>I need the following function:</p>\n\n<p><strong>Input</strong>: a <code>list</code></p>\n\n<p><strong>Output</strong>: </p>\n\n<ul>\n<li><code>True</code> if all elements in the input list evaluate as equal to each other using the standard equality operator; </li>\n<li><code>False</code> otherwise.</li>\n</ul>\n\n<p><strong>Performance</strong>: of course, I prefer not to incur any unnecessary overhead.</p>\n\n<p>I feel it would be best to: </p>\n\n<ul>\n<li>iterate through the list </li>\n<li>compare adjacent elements</li>\n<li>and <code>AND</code> all the resulting Boolean values</li>\n</ul>\n\n<p>But I'm not sure what's the most Pythonic way to do that.</p>\n\n<hr>\n\n<p><strong>EDIT</strong>:</p>\n\n<p>Thank you for all the great answers. I rated up several, and it was really hard to choose between @KennyTM and @Ivo van der Wijk solutions.</p>\n\n<p>The lack of short-circuit feature only hurts on a long input (over ~50 elements) that have unequal elements early on. If this occurs often enough (how often depends on how long the lists might be), the short-circuit is required. The best short-circuit algorithm seems to be @KennyTM <code>checkEqual1</code>. It pays, however, a significant cost for this:</p>\n\n<ul>\n<li>up to 20x in performance nearly-identical lists</li>\n<li>up to 2.5x in performance on short lists</li>\n</ul>\n\n<p>If the long inputs with early unequal elements don't happen (or happen sufficiently rarely), short-circuit isn't required. Then, by far the fastest is @Ivo van der Wijk solution.</p>\n",
        "answer": "<p>General method:</p>\n\n<pre><code>def checkEqual1(iterator):\n    iterator = iter(iterator)\n    try:\n        first = next(iterator)\n    except StopIteration:\n        return True\n    return all(first == rest for rest in iterator)\n</code></pre>\n\n<p>One-liner:</p>\n\n<pre><code>def checkEqual2(iterator):\n   return len(set(iterator)) &lt;= 1\n</code></pre>\n\n<p>Also one-liner:</p>\n\n<pre><code>def checkEqual3(lst):\n   return lst[1:] == lst[:-1]\n</code></pre>\n\n<p>The difference between the 3 versions are that:</p>\n\n<ol>\n<li>In <code>checkEqual2</code> the content must be hashable.</li>\n<li><code>checkEqual1</code> and <code>checkEqual2</code> can use any iterators, but <code>checkEqual3</code> must take a sequence input, typically concrete containers like a list or tuple.</li>\n<li><code>checkEqual1</code> stops as soon as a difference is found.</li>\n<li>Since <code>checkEqual1</code> contains more Python code, it is less efficient when many of the items are equal in the beginning.</li>\n<li>Since <code>checkEqual2</code> and <code>checkEqual3</code> always perform O(N) copying operations, they will take longer if most of your input will return False.</li>\n<li>For <code>checkEqual2</code> and <code>checkEqual3</code> it's harder to adapt comparison from <code>a == b</code> to <code>a is b</code>.</li>\n</ol>\n\n<hr>\n\n<p><code>timeit</code> result, for Python 2.7 and (only s1, s4, s7, s9 should return True)</p>\n\n<pre><code>s1 = [1] * 5000\ns2 = [1] * 4999 + [2]\ns3 = [2] + [1]*4999\ns4 = [set([9])] * 5000\ns5 = [set([9])] * 4999 + [set([10])]\ns6 = [set([10])] + [set([9])] * 4999\ns7 = [1,1]\ns8 = [1,2]\ns9 = []\n</code></pre>\n\n<p>we get</p>\n\n<pre><code>      | checkEqual1 | checkEqual2 | checkEqual3  | checkEqualIvo | checkEqual6502 |\n|-----|-------------|-------------|--------------|---------------|----------------|\n| s1  | 1.19   msec | 348    usec | 183     usec | 51.6    usec  | 121     usec   |\n| s2  | 1.17   msec | 376    usec | 185     usec | 50.9    usec  | 118     usec   |\n| s3  | 4.17   usec | 348    usec | 120     usec | 264     usec  | 61.3    usec   |\n|     |             |             |              |               |                |\n| s4  | 1.73   msec |             | 182     usec | 50.5    usec  | 121     usec   |\n| s5  | 1.71   msec |             | 181     usec | 50.6    usec  | 125     usec   |\n| s6  | 4.29   usec |             | 122     usec | 423     usec  | 61.1    usec   |\n|     |             |             |              |               |                |\n| s7  | 3.1    usec | 1.4    usec | 1.24    usec | 0.932   usec  | 1.92    usec   |\n| s8  | 4.07   usec | 1.54   usec | 1.28    usec | 0.997   usec  | 1.79    usec   |\n| s9  | 5.91   usec | 1.25   usec | 0.749   usec | 0.407   usec  | 0.386   usec   |\n</code></pre>\n\n<p>Note:</p>\n\n<pre><code># http://stackoverflow.com/q/3844948/\ndef checkEqualIvo(lst):\n    return not lst or lst.count(lst[0]) == len(lst)\n\n# http://stackoverflow.com/q/3844931/\ndef checkEqual6502(lst):\n    return not lst or [lst[0]]*len(lst) == lst\n</code></pre>\n"
    },
    "842": {
        "question_id": "291945",
        "answer_id": "291968",
        "question": "<p>Say I have the following in my <code>models.py</code>:</p>\n\n<pre><code>class Company(models.Model):\n   name = ...\n\nclass Rate(models.Model):\n   company = models.ForeignKey(Company)\n   name = ...\n\nclass Client(models.Model):\n   name = ...\n   company = models.ForeignKey(Company)\n   base_rate = models.ForeignKey(Rate)\n</code></pre>\n\n<p>I.e. there are multiple <code>Companies</code>, each having a range of <code>Rates</code> and <code>Clients</code>.  Each <code>Client</code> should have a base <code>Rate</code> that is chosen from it's parent <code>Company's Rates</code>, not another <code>Company's Rates</code>.</p>\n\n<p>When creating a form for adding a <code>Client</code>, I would like to remove the <code>Company</code> choices (as that has already been selected via an \"Add Client\" button on the <code>Company</code> page) and limit the <code>Rate</code> choices to that <code>Company</code> as well.</p>\n\n<p>How do I go about this in Django 1.0?  </p>\n\n<p>My current <code>forms.py</code> file is just boilerplate at the moment:</p>\n\n<pre><code>from models import *\nfrom django.forms import ModelForm\n\nclass ClientForm(ModelForm):\n    class Meta:\n        model = Client\n</code></pre>\n\n<p>And the <code>views.py</code> is also basic:</p>\n\n<pre><code>from django.shortcuts import render_to_response, get_object_or_404\nfrom models import *\nfrom forms import *\n\ndef addclient(request, company_id):\n    the_company = get_object_or_404(Company, id=company_id)\n\n    if request.POST:\n        form = ClientForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return HttpResponseRedirect(the_company.get_clients_url())\n    else:\n        form = ClientForm()\n\n    return render_to_response('addclient.html', {'form': form, 'the_company':the_company})\n</code></pre>\n\n<p>In Django 0.96 I was able to hack this in by doing something like the following before rendering the template:</p>\n\n<pre><code>manipulator.fields[0].choices = [(r.id,r.name) for r in Rate.objects.filter(company_id=the_company.id)]\n</code></pre>\n\n<p><a href=\"http://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey.limit_choices_to\" rel=\"noreferrer\"><code>ForeignKey.limit_choices_to</code></a> seems promising but I don't know how to pass in <code>the_company.id</code> and I'm not clear if that will work outside the Admin interface anyway.</p>\n\n<p>Thanks.  (This seems like a pretty basic request but if I should redesign something I'm open to suggestions.)</p>\n",
        "answer": "<p>ForeignKey is represented by django.forms.ModelChoiceField, which is a ChoiceField whose choices are a model QuerySet.  See the reference for <a href=\"http://docs.djangoproject.com/en/dev/ref/forms/fields/#modelchoicefield\" rel=\"noreferrer\">ModelChoiceField</a>.</p>\n\n<p>So, provide a QuerySet to the field's <code>queryset</code> attribute.  Depends on how your form is built.  If you build an explicit form, you'll have fields named directly. </p>\n\n<pre><code>form.rate.queryset = Rate.objects.filter(company_id=the_company.id)\n</code></pre>\n\n<p>If you take the default ModelForm object, <code>form.fields[\"rate\"].queryset = ...</code></p>\n\n<p>This is done explicitly in the view.  No hacking around.</p>\n"
    },
    "843": {
        "question_id": "699866",
        "answer_id": "699891",
        "question": "<p>Are there any canned Python methods to convert an Integer (or Long) into a binary string in Python?</p>\n\n<p>There are a myriad of dec2bin() functions out on Google... But I was hoping I could use a built-in function / library.</p>\n",
        "answer": "<p>Python's string format method can take a format spec. </p>\n\n<pre><code>&gt;&gt;&gt; \"{0:b}\".format(37)\n'100101'\n</code></pre>\n\n<p><a href=\"https://docs.python.org/2/library/string.html#formatspec\" rel=\"noreferrer\">Format spec docs for Python 2</a> </p>\n\n<p><a href=\"https://docs.python.org/3/library/string.html#formatspec\" rel=\"noreferrer\">Format spec docs for Python 3</a></p>\n"
    },
    "844": {
        "question_id": "1261875",
        "answer_id": "1261961",
        "question": "<p>What does the Python <code>nonlocal</code> statement do (in Python 3.0 and later)? </p>\n\n<p>There's no documentation on the official Python website and <code>help(\"nonlocal\")</code> does not work, either.</p>\n",
        "answer": "<p>Compare this, without using <code>nonlocal</code>:</p>\n\n<pre><code>x = 0\ndef outer():\n    x = 1\n    def inner():\n        x = 2\n        print(\"inner:\", x)\n\n    inner()\n    print(\"outer:\", x)\n\nouter()\nprint(\"global:\", x)\n\n# inner: 2\n# outer: 1\n# global: 0\n</code></pre>\n\n<p>To this, using <strong><code>nonlocal</code></strong>, where <code>inner()</code>'s <code>x</code> is now also <code>outer()</code>'s <code>x</code>:</p>\n\n<pre><code>x = 0\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x = 2\n        print(\"inner:\", x)\n\n    inner()\n    print(\"outer:\", x)\n\nouter()\nprint(\"global:\", x)\n\n# inner: 2\n# outer: 2\n# global: 0\n</code></pre>\n\n<blockquote>\n  <p>If we were to use <strong><code>global</code></strong>, it would bind <code>x</code> to the properly \"global\" value:</p>\n\n<pre><code>x = 0\ndef outer():\n    x = 1\n    def inner():\n        global x\n        x = 2\n        print(\"inner:\", x)\n\n    inner()\n    print(\"outer:\", x)\n\nouter()\nprint(\"global:\", x)\n\n# inner: 2\n# outer: 1\n# global: 2\n</code></pre>\n</blockquote>\n"
    },
    "845": {
        "question_id": "944700",
        "answer_id": "944733",
        "question": "<p><code>float('nan')</code> results in Nan (not a number). But how do I check for it? Should be very easy, but I cannot find it.</p>\n",
        "answer": "<p><a href=\"http://docs.python.org/library/math.html#math.isnan\" rel=\"noreferrer\">math.isnan()</a></p>\n\n<blockquote>\n  <p>Checks if the float x is a NaN (not a number). NaNs are part of the IEEE 754 standards. Operation like but not limited to inf * 0, inf / inf or any operation involving a NaN, e.g. nan * 1, return a NaN.</p>\n  \n  <p><em>New in version 2.6.</em></p>\n</blockquote>\n\n<pre><code>&gt;&gt;&gt; import math\n&gt;&gt;&gt; x=float('nan')\n&gt;&gt;&gt; math.isnan(x)\nTrue\n&gt;&gt;&gt; \n</code></pre>\n"
    },
    "846": {
        "question_id": "9252543",
        "answer_id": "9252628",
        "question": "<p>I have four different files named: main, vector, entity and physics. I will not post all the code, just the imports, because I think that's where the error is. (If you want, I can post more)</p>\n\n<p>Main:</p>\n\n<pre><code>import time\nfrom entity import Ent\nfrom vector import Vect\n#the rest just creates an entity and prints the result of movement\n</code></pre>\n\n<p>Entity:</p>\n\n<pre><code>from vector import Vect\nfrom physics import Physics\nclass Ent:\n    #holds vector information and id\ndef tick(self, dt):\n    #this is where physics changes the velocity and position vectors\n</code></pre>\n\n<p>Vector:</p>\n\n<pre><code>from math import *\nclass Vect:\n    #holds i, j, k, and does vector math\n</code></pre>\n\n<p>Physics:</p>\n\n<pre><code>from entity import Ent\nclass Physics:\n    #physics class gets an entity and does physics calculations on it.\n</code></pre>\n\n<p>I then run from main.py and I get the following error:</p>\n\n<blockquote>\n<pre><code>Traceback (most recent call last):\nFile \"main.py\", line 2, in &lt;module&gt;\n    from entity import Ent\nFile \".../entity.py\", line 5, in &lt;module&gt;\n    from physics import Physics\nFile \".../physics.py\", line 2, in &lt;module&gt;\n    from entity import Ent\nImportError: cannot import name Ent\n</code></pre>\n</blockquote>\n\n<p>I am very new to Python but have worked with C++ for a long time. I'm guessing that the error is due to importing entity twice, once in main, and later in physics, but I don't know a workaround. Can anyone help?</p>\n",
        "answer": "<p>You have circular dependent imports. <code>physics.py</code> is imported from <code>entity</code> before class <code>Ent</code> is defined and <code>physics</code> tries to import <code>entity</code> that is already initializing. Remove the dependency to <code>physics</code> from <code>entity</code> module.</p>\n"
    },
    "847": {
        "question_id": "32899",
        "answer_id": "32939",
        "question": "<p>I have some kind of test data and want to create a unit test for each item. My first idea was to do it like this:</p>\n\n<pre><code>import unittest\n\nl = [[\"foo\", \"a\", \"a\",], [\"bar\", \"a\", \"b\"], [\"lee\", \"b\", \"b\"]]\n\nclass TestSequence(unittest.TestCase):\n    def testsample(self):\n        for name, a,b in l:\n            print \"test\", name\n            self.assertEqual(a,b)\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>\n\n<p>The downside of this is that it handles all data in one test. I would like to generate one test for each item on the fly. Any suggestions?</p>\n",
        "answer": "<p>i use something like this:</p>\n\n<pre><code>import unittest\n\nl = [[\"foo\", \"a\", \"a\",], [\"bar\", \"a\", \"b\"], [\"lee\", \"b\", \"b\"]]\n\nclass TestSequense(unittest.TestCase):\n    pass\n\ndef test_generator(a, b):\n    def test(self):\n        self.assertEqual(a,b)\n    return test\n\nif __name__ == '__main__':\n    for t in l:\n        test_name = 'test_%s' % t[0]\n        test = test_generator(t[1], t[2])\n        setattr(TestSequense, test_name, test)\n    unittest.main()\n</code></pre>\n\n<p>The <a href=\"https://github.com/wolever/parameterized\" rel=\"noreferrer\"><code>parameterized</code></a> package can be used to automate this process:</p>\n\n<pre><code>from parameterized import parameterized\n\nclass TestSequence(unittest.TestCase):\n    @parameterized.expand([\n        [\"foo\", \"a\", \"a\",],\n        [\"bar\", \"a\", \"b\"],\n        [\"lee\", \"b\", \"b\"],\n    ])\n    def test_sequence(self, name, a, b):\n        self.assertEqual(a,b)\n</code></pre>\n\n<p>Which will generate the tests:</p>\n\n<pre><code>test_sequence_0_foo (__main__.TestSequence) ... ok\ntest_sequence_1_bar (__main__.TestSequence) ... FAIL\ntest_sequence_2_lee (__main__.TestSequence) ... ok\n\n======================================================================\nFAIL: test_sequence_1_bar (__main__.TestSequence)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/site-packages/parameterized/parameterized.py\", line 233, in &lt;lambda&gt;\n    standalone_func = lambda *a: func(*(a + p.args), **p.kwargs)\n  File \"x.py\", line 12, in test_sequence\n    self.assertEqual(a,b)\nAssertionError: 'a' != 'b'\n</code></pre>\n"
    },
    "848": {
        "question_id": "1855095",
        "answer_id": "1855118",
        "question": "<p>How can I create a zip archive of a directory structure in Python? </p>\n",
        "answer": "<p>As others have pointed out, you should use <a href=\"http://docs.python.org/library/zipfile.html\" rel=\"noreferrer\">zipfile</a>. The documentation tells you what functions are available, but doesn't really explain how you can use them to zip an entire directory. I think it's easiest to explain with some example code:</p>\n\n<pre><code>#!/usr/bin/env python\nimport os\nimport zipfile\n\ndef zipdir(path, ziph):\n    # ziph is zipfile handle\n    for root, dirs, files in os.walk(path):\n        for file in files:\n            ziph.write(os.path.join(root, file))\n\nif __name__ == '__main__':\n    zipf = zipfile.ZipFile('Python.zip', 'w', zipfile.ZIP_DEFLATED)\n    zipdir('tmp/', zipf)\n    zipf.close()\n</code></pre>\n\n<p>Adapted from: <a href=\"http://www.devshed.com/c/a/Python/Python-UnZipped/\" rel=\"noreferrer\">http://www.devshed.com/c/a/Python/Python-UnZipped/</a></p>\n"
    },
    "849": {
        "question_id": "35215161",
        "answer_id": "46470401",
        "question": "<p>What is the most efficient way to map a function over a numpy array? The way I've been doing it in my current project is as follows:</p>\n\n<pre><code>import numpy as np \n\nx = np.array([1, 2, 3, 4, 5])\n\n# Obtain array of square of each element in x\nsquarer = lambda t: t ** 2\nsquares = np.array([squarer(xi) for xi in x])\n</code></pre>\n\n<p>However, this seems like it is probably very inefficient, since I am using a list comprehension to construct the new array as a Python list before converting it back to a numpy array.</p>\n\n<p>Can we do better?</p>\n",
        "answer": "<p>I've tested all suggested methods plus <code>np.array(map(f, x))</code> with <a href=\"https://github.com/nschloe/perfplot\" rel=\"noreferrer\"><code>perfplot</code></a> (a small project of mine).</p>\n\n<blockquote>\n  <p>Message #1: If you can use numpy's native functions, do that.</p>\n</blockquote>\n\n<p>If the function you're trying to vectorize already <em>is</em> vectorized (like the <code>x**2</code> example in the original post), using that is <em>much</em> faster than anything else (note the log scale):</p>\n\n<p><a href=\"https://i.stack.imgur.com/2UD0a.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/2UD0a.png\" alt=\"enter image description here\"></a></p>\n\n<p>If you actually need vectorization, it doesn't really matter much which variant you use.</p>\n\n<p><a href=\"https://i.stack.imgur.com/KSDWl.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/KSDWl.png\" alt=\"enter image description here\"></a></p>\n\n<hr>\n\n<p>Code to reproduce the plots:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import numpy as np\nimport perfplot\nimport math\n\n\ndef f(x):\n    # return math.sqrt(x)\n    return np.sqrt(x)\n\n\nvf = np.vectorize(f)\n\n\ndef array_for(x):\n    return np.array([f(xi) for xi in x])\n\n\ndef array_map(x):\n    return np.array(list(map(f, x)))\n\n\ndef fromiter(x):\n    return np.fromiter((f(xi) for xi in x), x.dtype)\n\n\ndef vectorize(x):\n    return np.vectorize(f)(x)\n\n\ndef vectorize_without_init(x):\n    return vf(x)\n\n\nperfplot.show(\n    setup=lambda n: np.random.rand(n),\n    n_range=[2**k for k in range(20)],\n    kernels=[\n        f,\n        array_for, array_map, fromiter, vectorize, vectorize_without_init\n        ],\n    logx=True,\n    logy=True,\n    xlabel='len(x)',\n    )\n</code></pre>\n"
    },
    "850": {
        "question_id": "938733",
        "answer_id": "21632554",
        "question": "<p>Is there a way for a Python program to determine how much memory it's currently using? I've seen discussions about memory usage for a single object, but what I need is total memory usage for the process, so that I can determine when it's necessary to start discarding cached data.</p>\n",
        "answer": "<p><a href=\"http://fa.bianp.net/blog/2013/different-ways-to-get-memory-consumption-or-lessons-learned-from-memory_profiler/\" rel=\"nofollow noreferrer\">Here</a> is a useful solution that works for various operating systems, including Linux, Windows 7, etc.: </p>\n\n<pre><code>import os\nimport psutil\nprocess = psutil.Process(os.getpid())\nprint(process.memory_info().rss)  # in bytes \n</code></pre>\n\n<p>On my current Python 2.7 install with psutil 5.6.3, the last line should be </p>\n\n<pre><code>print(process.memory_info()[0])\n</code></pre>\n\n<p>instead (there was a change in the API).</p>\n\n<p>Note: do <code>pip install psutil</code> if it is not installed yet.</p>\n"
    },
    "851": {
        "question_id": "1841565",
        "answer_id": "8948303",
        "question": "<p>I am creating a program that reads a file and if the first line of the file is not blank, it reads the next four lines.  Calculations are performed on those lines and then the next line is read.  If that line is not empty it continues.  However, I am getting this error:</p>\n\n<p><code>ValueError: invalid literal for int() with base 10: ''.</code> </p>\n\n<p>It is reading the first line but can't convert it to an integer.  </p>\n\n<p>What can I do to fix this problem?</p>\n\n<p>The code:</p>\n\n<pre><code>file_to_read = raw_input(\"Enter file name of tests (empty string to end program):\")\ntry:\n    infile = open(file_to_read, 'r')\n    while file_to_read != \" \":\n        file_to_write = raw_input(\"Enter output file name (.csv will be appended to it):\")\n        file_to_write = file_to_write + \".csv\"\n        outfile = open(file_to_write, \"w\")\n        readings = (infile.readline())\n        print readings\n        while readings != 0:\n            global count\n            readings = int(readings)\n            minimum = (infile.readline())\n            maximum = (infile.readline())\n</code></pre>\n",
        "answer": "<p>Just for the record:</p>\n\n<pre><code>&gt;&gt;&gt; int('55063.000000')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: invalid literal for int() with base 10: '55063.000000'\n</code></pre>\n\n<p>Got me here...</p>\n\n<pre><code>&gt;&gt;&gt; float('55063.000000')\n55063.0\n</code></pre>\n\n<p>Has to be used!</p>\n"
    },
    "852": {
        "question_id": "23377108",
        "answer_id": "23377232",
        "question": "<p>This is obviously simple, but as a numpy newbe I'm getting stuck.</p>\n\n<p>I have a CSV file that contains 3 columns, the State, the Office ID, and the Sales for that office.</p>\n\n<p>I want to calculate the percentage of sales per office in a given state (total of all percentages in each state is 100%).</p>\n\n<pre><code>df = pd.DataFrame({'state': ['CA', 'WA', 'CO', 'AZ'] * 3,\n                   'office_id': range(1, 7) * 2,\n                   'sales': [np.random.randint(100000, 999999)\n                             for _ in range(12)]})\n\ndf.groupby(['state', 'office_id']).agg({'sales': 'sum'})\n</code></pre>\n\n<p>This returns:</p>\n\n<pre><code>                  sales\nstate office_id        \nAZ    2          839507\n      4          373917\n      6          347225\nCA    1          798585\n      3          890850\n      5          454423\nCO    1          819975\n      3          202969\n      5          614011\nWA    2          163942\n      4          369858\n      6          959285\n</code></pre>\n\n<p>I can't seem to figure out how to \"reach up\" to the <code>state</code> level of the <code>groupby</code> to total up the <code>sales</code> for the entire <code>state</code> to calculate the fraction.</p>\n",
        "answer": "<p><a href=\"https://stackoverflow.com/a/23377155/3393459\">Paul H's answer</a> is right that you will have to make a second <code>groupby</code> object, but you can calculate the percentage in a simpler way -- just <code>groupby</code> the <code>state_office</code> and divide the <code>sales</code> column by its sum. Copying the beginning of Paul H's answer:</p>\n\n<pre><code># From Paul H\nimport numpy as np\nimport pandas as pd\nnp.random.seed(0)\ndf = pd.DataFrame({'state': ['CA', 'WA', 'CO', 'AZ'] * 3,\n                   'office_id': list(range(1, 7)) * 2,\n                   'sales': [np.random.randint(100000, 999999)\n                             for _ in range(12)]})\nstate_office = df.groupby(['state', 'office_id']).agg({'sales': 'sum'})\n# Change: groupby state_office and divide by sum\nstate_pcts = state_office.groupby(level=0).apply(lambda x:\n                                                 100 * x / float(x.sum()))\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>                     sales\nstate office_id           \nAZ    2          16.981365\n      4          19.250033\n      6          63.768601\nCA    1          19.331879\n      3          33.858747\n      5          46.809373\nCO    1          36.851857\n      3          19.874290\n      5          43.273852\nWA    2          34.707233\n      4          35.511259\n      6          29.781508\n</code></pre>\n"
    },
    "853": {
        "question_id": "316866",
        "answer_id": "317206",
        "question": "<p>How do I ping a website or IP address with Python?</p>\n",
        "answer": "<p>See this <a href=\"https://pypi.python.org/pypi/python-ping/2011.10.17.376a019\" rel=\"noreferrer\">pure Python ping</a> by <a href=\"http://www.mondoinfo.com/\" rel=\"noreferrer\">Matthew Dixon Cowles</a> and <a href=\"http://www.jensdiemer.de/\" rel=\"noreferrer\">Jens Diemer</a>.  Also, remember that Python requires root to spawn ICMP (i.e. ping) sockets in linux.</p>\n\n<pre><code>import ping, socket\ntry:\n    ping.verbose_ping('www.google.com', count=3)\n    delay = ping.Ping('www.wikipedia.org', timeout=2000).do()\nexcept socket.error, e:\n    print \"Ping Error:\", e\n</code></pre>\n\n<p>The source code itself is easy to read, see the implementations of <code>verbose_ping</code> and of <code>Ping.do</code> for inspiration.</p>\n"
    },
    "854": {
        "question_id": "18713321",
        "answer_id": "18713344",
        "question": "<p>I have now:</p>\n\n<pre><code>list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n</code></pre>\n\n<p>I wish to have:</p>\n\n<pre><code>[1, 2, 3]\n +  +  +\n[4, 5, 6]\n|| || ||\n[5, 7, 9]\n</code></pre>\n\n<p>Simply an element-wise addition of two lists.</p>\n\n<p>I can surely iterate the two lists, but I don't want do that.</p>\n\n<p>What is <strong>the most Pythonic way</strong> of doing so?</p>\n",
        "answer": "<p>Use <a href=\"https://docs.python.org/2/library/functions.html#map\" rel=\"noreferrer\"><code>map</code></a> with <a href=\"https://docs.python.org/2/library/operator.html#operator.add\" rel=\"noreferrer\"><code>operator.add</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; from operator import add\n&gt;&gt;&gt; list( map(add, list1, list2) )\n[5, 7, 9]\n</code></pre>\n\n<p>or <a href=\"https://docs.python.org/2/library/functions.html#zip\" rel=\"noreferrer\"><code>zip</code></a> with a list comprehension:</p>\n\n<pre><code>&gt;&gt;&gt; [sum(x) for x in zip(list1, list2)]\n[5, 7, 9]\n</code></pre>\n\n<h3>Timing comparisons:</h3>\n\n<pre><code>&gt;&gt;&gt; list2 = [4, 5, 6]*10**5\n&gt;&gt;&gt; list1 = [1, 2, 3]*10**5\n&gt;&gt;&gt; %timeit from operator import add;map(add, list1, list2)\n10 loops, best of 3: 44.6 ms per loop\n&gt;&gt;&gt; %timeit from itertools import izip; [a + b for a, b in izip(list1, list2)]\n10 loops, best of 3: 71 ms per loop\n&gt;&gt;&gt; %timeit [a + b for a, b in zip(list1, list2)]\n10 loops, best of 3: 112 ms per loop\n&gt;&gt;&gt; %timeit from itertools import izip;[sum(x) for x in izip(list1, list2)]\n1 loops, best of 3: 139 ms per loop\n&gt;&gt;&gt; %timeit [sum(x) for x in zip(list1, list2)]\n1 loops, best of 3: 177 ms per loop\n</code></pre>\n"
    },
    "855": {
        "question_id": "26763344",
        "answer_id": "26763793",
        "question": "<p>I have one field in a pandas DataFrame that was imported as string format. \nIt should be a datetime variable.\nHow do I convert it to a datetime column and then filter based on date.</p>\n\n<p>Example:</p>\n\n<ul>\n<li>DataFrame Name: <strong>raw_data</strong>    </li>\n<li>Column Name: <strong>Mycol</strong>    </li>\n<li>Value\nFormat in Column: <strong>'05SEP2014:00:00:00.000'</strong></li>\n</ul>\n",
        "answer": "<p>Use the <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html\" rel=\"noreferrer\"><code>to_datetime</code></a> function, specifying a <a href=\"http://strftime.org/\" rel=\"noreferrer\">format</a> to match your data.</p>\n\n<pre><code>raw_data['Mycol'] =  pd.to_datetime(raw_data['Mycol'], format='%d%b%Y:%H:%M:%S.%f')\n</code></pre>\n"
    },
    "856": {
        "question_id": "18039057",
        "answer_id": "18129082",
        "question": "<p>I'm trying to use pandas to manipulate a .csv file but I get this error:</p>\n\n<blockquote>\n  <p>pandas.parser.CParserError: Error tokenizing data. C error: Expected 2 fields in line 3,  saw 12</p>\n</blockquote>\n\n<p>I have tried to read the pandas docs, but found nothing.</p>\n\n<p>My code is simple:</p>\n\n<pre><code>path = 'GOOG Key Ratios.csv'\n#print(open(path).read())\ndata = pd.read_csv(path)\n</code></pre>\n\n<p>How can I resolve this? Should I use the <code>csv</code> module or another language ?</p>\n\n<p>File is from <a href=\"http://financials.morningstar.com/ratios/r.html?t=GOOG&amp;region=usa&amp;culture=en-US\" rel=\"noreferrer\">Morningstar</a></p>\n",
        "answer": "<p>you could also try;</p>\n\n<pre><code>data = pd.read_csv('file1.csv', error_bad_lines=False)\n</code></pre>\n\n<p>Do note that this will cause the offending lines to be skipped.</p>\n"
    },
    "857": {
        "question_id": "13303449",
        "answer_id": "13303773",
        "question": "<p>I am trying to automate download of historic stock data using python. The URL I am trying to open responds with a CSV file, but I am unable to open using urllib2. I have tried changing user agent as specified in few questions earlier, I even tried to accept response cookies, with no luck. Can you please help. </p>\n\n<p><em>Note: The same method works for yahoo Finance.</em></p>\n\n<p><strong>Code:</strong></p>\n\n<pre><code>import urllib2,cookielib\n\nsite= \"http://www.nseindia.com/live_market/dynaContent/live_watch/get_quote/getHistoricalData.jsp?symbol=JPASSOCIAT&amp;fromDate=1-JAN-2012&amp;toDate=1-AUG-2012&amp;datePeriod=unselected&amp;hiddDwnld=true\"\n\nhdr = {'User-Agent':'Mozilla/5.0'}\n\nreq = urllib2.Request(site,headers=hdr)\n\npage = urllib2.urlopen(req)\n</code></pre>\n\n<p><strong>Error</strong></p>\n\n<blockquote>\n  <p>File \"C:\\Python27\\lib\\urllib2.py\", line 527, in http_error_default\n      raise HTTPError(req.get_full_url(), code, msg, hdrs, fp) urllib2.HTTPError: HTTP Error 403: Forbidden</p>\n</blockquote>\n\n<p>Thanks for your assistance</p>\n",
        "answer": "<p>By adding a few more headers I was able to get the data:</p>\n\n<pre><code>import urllib2,cookielib\n\nsite= \"http://www.nseindia.com/live_market/dynaContent/live_watch/get_quote/getHistoricalData.jsp?symbol=JPASSOCIAT&amp;fromDate=1-JAN-2012&amp;toDate=1-AUG-2012&amp;datePeriod=unselected&amp;hiddDwnld=true\"\nhdr = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11',\n       'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n       'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.3',\n       'Accept-Encoding': 'none',\n       'Accept-Language': 'en-US,en;q=0.8',\n       'Connection': 'keep-alive'}\n\nreq = urllib2.Request(site, headers=hdr)\n\ntry:\n    page = urllib2.urlopen(req)\nexcept urllib2.HTTPError, e:\n    print e.fp.read()\n\ncontent = page.read()\nprint content\n</code></pre>\n\n<p>Actually, it works with just this one additional header:</p>\n\n<pre><code>'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n</code></pre>\n"
    },
    "858": {
        "question_id": "14354171",
        "answer_id": "14357169",
        "question": "<p>Ok so I included the code for my project below, I'm just doing some experimenting with pygame on making a platformer. I'm trying to figure out how to do some very simple scrolling that follows the player, so the player is the center of the camera and it bounces/follows him. Can anyone help me?</p>\n\n<pre><code>import pygame\nfrom pygame import *\n\nWIN_WIDTH = 800\nWIN_HEIGHT = 640\nHALF_WIDTH = int(WIN_WIDTH / 2)\nHALF_HEIGHT = int(WIN_HEIGHT / 2)\n\nDISPLAY = (WIN_WIDTH, WIN_HEIGHT)\nDEPTH = 32\nFLAGS = 0\nCAMERA_SLACK = 30\n\ndef main():\n    global cameraX, cameraY\n    pygame.init()\n    screen = pygame.display.set_mode(DISPLAY, FLAGS, DEPTH)\n    pygame.display.set_caption(\"Use arrows to move!\")\n    timer = pygame.time.Clock()\n\n    up = down = left = right = running = False\n    bg = Surface((32,32))\n    bg.convert()\n    bg.fill(Color(\"#000000\"))\n    entities = pygame.sprite.Group()\n    player = Player(32, 32)\n    platforms = []\n\n    x = y = 0\n    level = [\n        \"PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\",\n        \"P                                P\",\n        \"P                                P\",\n        \"P                                P\",\n        \"P                                P\",\n        \"P                                P\",\n        \"P                                P\",\n        \"P                                P\",\n        \"P       PPPPPPPPPPP              P\",\n        \"P                                P\",\n        \"P                                P\",\n        \"P                                P\",\n        \"P                                P\",\n        \"PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\",]\n    # build the level\n    for row in level:\n        for col in row:\n            if col == \"P\":\n                p = Platform(x, y)\n                platforms.append(p)\n                entities.add(p)\n            if col == \"E\":\n                e = ExitBlock(x, y)\n                platforms.append(e)\n                entities.add(e)\n            x += 32\n        y += 32\n        x = 0\n\n    entities.add(player)\n\n    while 1:\n        timer.tick(60)\n\n        for e in pygame.event.get():\n            if e.type == QUIT: raise SystemExit, \"QUIT\"\n            if e.type == KEYDOWN and e.key == K_ESCAPE:\n                raise SystemExit, \"ESCAPE\"\n            if e.type == KEYDOWN and e.key == K_UP:\n                up = True\n            if e.type == KEYDOWN and e.key == K_DOWN:\n                down = True\n            if e.type == KEYDOWN and e.key == K_LEFT:\n                left = True\n            if e.type == KEYDOWN and e.key == K_RIGHT:\n                right = True\n            if e.type == KEYDOWN and e.key == K_SPACE:\n                running = True\n\n            if e.type == KEYUP and e.key == K_UP:\n                up = False\n            if e.type == KEYUP and e.key == K_DOWN:\n                down = False\n            if e.type == KEYUP and e.key == K_RIGHT:\n                right = False\n            if e.type == KEYUP and e.key == K_LEFT:\n                left = False\n            if e.type == KEYUP and e.key == K_RIGHT:\n                right = False\n\n        # draw background\n        for y in range(32):\n            for x in range(32):\n                screen.blit(bg, (x * 32, y * 32))\n\n        # update player, draw everything else\n        player.update(up, down, left, right, running, platforms)\n        entities.draw(screen)\n\n        pygame.display.update()\n\nclass Entity(pygame.sprite.Sprite):\n    def __init__(self):\n        pygame.sprite.Sprite.__init__(self)\n\nclass Player(Entity):\n    def __init__(self, x, y):\n        Entity.__init__(self)\n        self.xvel = 0\n        self.yvel = 0\n        self.onGround = False\n        self.image = Surface((32,32))\n        self.image.fill(Color(\"#0000FF\"))\n        self.image.convert()\n        self.rect = Rect(x, y, 32, 32)\n\n    def update(self, up, down, left, right, running, platforms):\n        if up:\n            # only jump if on the ground\n            if self.onGround: self.yvel -= 10\n        if down:\n            pass\n        if running:\n            self.xvel = 12\n        if left:\n            self.xvel = -8\n        if right:\n            self.xvel = 8\n        if not self.onGround:\n            # only accelerate with gravity if in the air\n            self.yvel += 0.3\n            # max falling speed\n            if self.yvel &gt; 100: self.yvel = 100\n        if not(left or right):\n            self.xvel = 0\n        # increment in x direction\n        self.rect.left += self.xvel\n        # do x-axis collisions\n        self.collide(self.xvel, 0, platforms)\n        # increment in y direction\n        self.rect.top += self.yvel\n        # assuming we're in the air\n        self.onGround = False;\n        # do y-axis collisions\n        self.collide(0, self.yvel, platforms)\n\n    def collide(self, xvel, yvel, platforms):\n        for p in platforms:\n            if pygame.sprite.collide_rect(self, p):\n                if isinstance(p, ExitBlock):\n                    pygame.event.post(pygame.event.Event(QUIT))\n                if xvel &gt; 0:\n                    self.rect.right = p.rect.left\n                    print \"collide right\"\n                if xvel &lt; 0:\n                    self.rect.left = p.rect.right\n                    print \"collide left\"\n                if yvel &gt; 0:\n                    self.rect.bottom = p.rect.top\n                    self.onGround = True\n                    self.yvel = 0\n                if yvel &lt; 0:\n                    self.rect.top = p.rect.bottom\n\n\nclass Platform(Entity):\n    def __init__(self, x, y):\n        Entity.__init__(self)\n        self.image = Surface((32, 32))\n        self.image.convert()\n        self.image.fill(Color(\"#DDDDDD\"))\n        self.rect = Rect(x, y, 32, 32)\n\n    def update(self):\n        pass\n\nclass ExitBlock(Platform):\n    def __init__(self, x, y):\n        Platform.__init__(self, x, y)\n        self.image.fill(Color(\"#0033FF\"))\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n",
        "answer": "<p>You need to apply an <em>offset</em> to the position of your entities when drawing them. Let's call that <em>offset</em> a <code>camera</code>, since this is the effect we want to achieve with this.</p>\n\n<p>First of all, we can't use the <code>draw</code> function of the sprite group, since the sprites don't need to know that their position (<code>rect</code>) is not the position they are going to be drawn on the screen (At the end, we'll subclass the <code>Group</code> class and reimplement the it's <code>draw</code> to be aware of the camera, but let's start slow).</p>\n\n<hr>\n\n<p>Let's start by creating a <code>Camera</code> class to hold the state of the offset we want to apply to the position of our entities:</p>\n\n<pre><code>class Camera(object):\n    def __init__(self, camera_func, width, height):\n        self.camera_func = camera_func\n        self.state = Rect(0, 0, width, height)\n\n    def apply(self, target):\n        return target.rect.move(self.state.topleft)\n\n    def update(self, target):\n        self.state = self.camera_func(self.state, target.rect)\n</code></pre>\n\n<p>some things to note here:</p>\n\n<p>We need to store the position of the camera, and the width and height of the level in pixels (since we want to stop scrolling at the edges of the level). I used a <code>Rect</code> to store all these informations, but you could easily just use some fields. </p>\n\n<p>Using <code>Rect</code> comes in handy in the <code>apply</code> function. This is where we re-calculate the position of an entity on the screen to <em>apply</em> the scrolling.</p>\n\n<p>Once per iteration of the main loop, we need to update the position of the camera, hence there's the <code>update</code> function. It just alters the state by calling the <code>camera_func</code> function, which will do <em>all the hard work</em> for us. We implement it later.</p>\n\n<p>Let's create an instace of the camera:</p>\n\n<pre><code>for row in level:\n    ...\n\ntotal_level_width  = len(level[0])*32 # calculate size of level in pixels\ntotal_level_height = len(level)*32    # maybe make 32 an constant\ncamera = Camera(*to_be_implemented*, total_level_width, total_level_height)\n\nentities.add(player)\n... \n</code></pre>\n\n<p>and alter our main loop:</p>\n\n<pre><code># draw background\nfor y in range(32):\n    ...\n\ncamera.update(player) # camera follows player. Note that we could also follow any other sprite\n\n# update player, draw everything else\nplayer.update(up, down, left, right, running, platforms)\nfor e in entities:\n    # apply the offset to each entity.\n    # call this for everything that should scroll,\n    # which is basically everything other than GUI/HUD/UI\n    screen.blit(e.image, camera.apply(e)) \n\npygame.display.update()\n</code></pre>\n\n<p>Our camera class is already very flexible and yet dead simple. It can use different kinds of scrolling (by providing different <code>camera_func</code> functions), and it can follow any arbitary sprite, not just the player. You even can change this at runtime.</p>\n\n<p>Now for the implementation of <code>camera_func</code>. A simple approach is to just center the player (or whichever entity we want to follow) at the screen, and the implementation is straight forward:</p>\n\n<pre><code>def simple_camera(camera, target_rect):\n    l, t, _, _ = target_rect # l = left,  t = top\n    _, _, w, h = camera      # w = width, h = height\n    return Rect(-l+HALF_WIDTH, -t+HALF_HEIGHT, w, h)\n</code></pre>\n\n<p>We just take the position of our <code>target</code>, and add the half total screen size. You can try it by creating your camera like this:</p>\n\n<pre><code>camera = Camera(simple_camera, total_level_width, total_level_height)\n</code></pre>\n\n<p>So far, so good. But maybe we don't want to see the black background <em>outside</em> the level? How about:</p>\n\n<pre><code>def complex_camera(camera, target_rect):\n    # we want to center target_rect\n    x = -target_rect.center[0] + WIN_WIDTH/2 \n    y = -target_rect.center[1] + WIN_HEIGHT/2\n    # move the camera. Let's use some vectors so we can easily substract/multiply\n    camera.topleft += (pygame.Vector2((x, y)) - pygame.Vector2(camera.topleft)) * 0.06 # add some smoothness coolnes\n    # set max/min x/y so we don't see stuff outside the world\n    camera.x = max(-(camera.width-WIN_WIDTH), min(0, camera.x))\n    camera.y = max(-(camera.height-WIN_HEIGHT), min(0, camera.y))\n\n    return camera\n</code></pre>\n\n<p>Here we simply use the <code>min</code>/<code>max</code> functions to ensure we don't scroll <em>outside</em> out level. </p>\n\n<p>Try it by creating your camera like this:</p>\n\n<pre><code>camera = Camera(complex_camera, total_level_width, total_level_height)\n</code></pre>\n\n<p>There's a little animation of our final scrolling in action:</p>\n\n<p><a href=\"https://i.stack.imgur.com/0sP1e.gif\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/0sP1e.gif\" alt=\"enter image description here\"></a></p>\n\n<p>Here's the complete code again. Note I changed some things:</p>\n\n<ul>\n<li>the level is bigger and to have some more platforms</li>\n<li>use python 3</li>\n<li>use a sprite group to handle the camera</li>\n<li>refactored some duplicate code</li>\n<li>since Vector2/3 is now stable, use them for easier math</li>\n<li>get rid of that ugly event handling code and use <code>pygame.key.get_pressed</code> instead</li>\n</ul>\n\n<hr>\n\n<pre><code> #! /usr/bin/python\n\nimport pygame\nfrom pygame import *\n\nSCREEN_SIZE = pygame.Rect((0, 0, 800, 640))\nTILE_SIZE = 32 \nGRAVITY = pygame.Vector2((0, 0.3))\n\nclass CameraAwareLayeredUpdates(pygame.sprite.LayeredUpdates):\n    def __init__(self, target, world_size):\n        super().__init__()\n        self.target = target\n        self.cam = pygame.Vector2(0, 0)\n        self.world_size = world_size\n        if self.target:\n            self.add(target)\n\n    def update(self, *args):\n        super().update(*args)\n        if self.target:\n            x = -self.target.rect.center[0] + SCREEN_SIZE.width/2\n            y = -self.target.rect.center[1] + SCREEN_SIZE.height/2\n            self.cam += (pygame.Vector2((x, y)) - self.cam) * 0.05\n            self.cam.x = max(-(self.world_size.width-SCREEN_SIZE.width), min(0, self.cam.x))\n            self.cam.y = max(-(self.world_size.height-SCREEN_SIZE.height), min(0, self.cam.y))\n\n    def draw(self, surface):\n        spritedict = self.spritedict\n        surface_blit = surface.blit\n        dirty = self.lostsprites\n        self.lostsprites = []\n        dirty_append = dirty.append\n        init_rect = self._init_rect\n        for spr in self.sprites():\n            rec = spritedict[spr]\n            newrect = surface_blit(spr.image, spr.rect.move(self.cam))\n            if rec is init_rect:\n                dirty_append(newrect)\n            else:\n                if newrect.colliderect(rec):\n                    dirty_append(newrect.union(rec))\n                else:\n                    dirty_append(newrect)\n                    dirty_append(rec)\n            spritedict[spr] = newrect\n        return dirty            \n\ndef main():\n    pygame.init()\n    screen = pygame.display.set_mode(SCREEN_SIZE.size)\n    pygame.display.set_caption(\"Use arrows to move!\")\n    timer = pygame.time.Clock()\n\n    level = [\n        \"PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\",\n        \"P                                          P\",\n        \"P                                          P\",\n        \"P                                          P\",\n        \"P                    PPPPPPPPPPP           P\",\n        \"P                                          P\",\n        \"P                                          P\",\n        \"P                                          P\",\n        \"P    PPPPPPPP                              P\",\n        \"P                                          P\",\n        \"P                          PPPPPPP         P\",\n        \"P                 PPPPPP                   P\",\n        \"P                                          P\",\n        \"P         PPPPPPP                          P\",\n        \"P                                          P\",\n        \"P                     PPPPPP               P\",\n        \"P                                          P\",\n        \"P   PPPPPPPPPPP                            P\",\n        \"P                                          P\",\n        \"P                 PPPPPPPPPPP              P\",\n        \"P                                          P\",\n        \"P                                          P\",\n        \"P                                          P\",\n        \"P                                          P\",\n        \"PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\",]\n\n\n    platforms = pygame.sprite.Group()\n    player = Player(platforms, (TILE_SIZE, TILE_SIZE))\n    level_width  = len(level[0])*TILE_SIZE\n    level_height = len(level)*TILE_SIZE\n    entities = CameraAwareLayeredUpdates(player, pygame.Rect(0, 0, level_width, level_height))\n\n    # build the level\n    x = y = 0\n    for row in level:\n        for col in row:\n            if col == \"P\":\n                Platform((x, y), platforms, entities)\n            if col == \"E\":\n                ExitBlock((x, y), platforms, entities)\n            x += TILE_SIZE\n        y += TILE_SIZE\n        x = 0\n\n    while 1:\n\n        for e in pygame.event.get():\n            if e.type == QUIT: \n                return\n            if e.type == KEYDOWN and e.key == K_ESCAPE:\n                return\n\n        entities.update()\n\n        screen.fill((0, 0, 0))\n        entities.draw(screen)\n        pygame.display.update()\n        timer.tick(60)\n\nclass Entity(pygame.sprite.Sprite):\n    def __init__(self, color, pos, *groups):\n        super().__init__(*groups)\n        self.image = Surface((TILE_SIZE, TILE_SIZE))\n        self.image.fill(color)\n        self.rect = self.image.get_rect(topleft=pos)\n\nclass Player(Entity):\n    def __init__(self, platforms, pos, *groups):\n        super().__init__(Color(\"#0000FF\"), pos)\n        self.vel = pygame.Vector2((0, 0))\n        self.onGround = False\n        self.platforms = platforms\n        self.speed = 8\n        self.jump_strength = 10\n\n    def update(self):\n        pressed = pygame.key.get_pressed()\n        up = pressed[K_UP]\n        left = pressed[K_LEFT]\n        right = pressed[K_RIGHT]\n        running = pressed[K_SPACE]\n\n        if up:\n            # only jump if on the ground\n            if self.onGround: self.vel.y = -self.jump_strength\n        if left:\n            self.vel.x = -self.speed\n        if right:\n            self.vel.x = self.speed\n        if running:\n            self.vel.x *= 1.5\n        if not self.onGround:\n            # only accelerate with gravity if in the air\n            self.vel += GRAVITY\n            # max falling speed\n            if self.vel.y &gt; 100: self.vel.y = 100\n        print(self.vel.y)\n        if not(left or right):\n            self.vel.x = 0\n        # increment in x direction\n        self.rect.left += self.vel.x\n        # do x-axis collisions\n        self.collide(self.vel.x, 0, self.platforms)\n        # increment in y direction\n        self.rect.top += self.vel.y\n        # assuming we're in the air\n        self.onGround = False;\n        # do y-axis collisions\n        self.collide(0, self.vel.y, self.platforms)\n\n    def collide(self, xvel, yvel, platforms):\n        for p in platforms:\n            if pygame.sprite.collide_rect(self, p):\n                if isinstance(p, ExitBlock):\n                    pygame.event.post(pygame.event.Event(QUIT))\n                if xvel &gt; 0:\n                    self.rect.right = p.rect.left\n                if xvel &lt; 0:\n                    self.rect.left = p.rect.right\n                if yvel &gt; 0:\n                    self.rect.bottom = p.rect.top\n                    self.onGround = True\n                    self.yvel = 0\n                if yvel &lt; 0:\n                    self.rect.top = p.rect.bottom\n\nclass Platform(Entity):\n    def __init__(self, pos, *groups):\n        super().__init__(Color(\"#DDDDDD\"), pos, *groups)\n\nclass ExitBlock(Platform):\n    def __init__(self, pos, *groups):\n        super().__init__(Color(\"#0033FF\"), pos, *groups)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n"
    },
    "859": {
        "question_id": "728891",
        "answer_id": "729016",
        "question": "<p><a href=\"http://www.python.org/dev/peps/pep-0263/\" rel=\"noreferrer\">PEP 263</a> defines how to declare Python source code encoding.</p>\n\n<p>Normally, the first 2 lines of a Python file should start with:</p>\n\n<pre><code>#!/usr/bin/python\n# -*- coding: &lt;encoding name&gt; -*-\n</code></pre>\n\n<p>But I have seen a lot of files starting with:</p>\n\n<pre><code>#!/usr/bin/python\n# -*- encoding: &lt;encoding name&gt; -*-\n</code></pre>\n\n<p>=> <strong>encoding</strong> instead of <strong>coding</strong>.</p>\n\n<p>So what is the correct way of declaring the file encoding?</p>\n\n<p>Is <strong>encoding</strong> permitted because the regex used is lazy? Or is it just another form of declaring the file encoding?</p>\n\n<p>I'm asking this question because the PEP does not talk about <strong>encoding</strong>, it just talks about <strong>coding</strong>.</p>\n",
        "answer": "<p>Check the docs <a href=\"http://docs.python.org/reference/lexical_analysis.html#encoding-declarations\" rel=\"noreferrer\">here</a>: </p>\n\n<p>\"If a comment in the first or second line of the Python script matches the regular expression <code>coding[=:]\\s*([-\\w.]+)</code>, this comment is processed as an encoding declaration\"</p>\n\n<p>\"The recommended forms of this expression are</p>\n\n<pre><code># -*- coding: &lt;encoding-name&gt; -*-\n</code></pre>\n\n<p>which is recognized also by GNU Emacs, and</p>\n\n<pre><code># vim:fileencoding=&lt;encoding-name&gt;\n</code></pre>\n\n<p>which is recognized by Bram Moolenaar\u2019s VIM.\"</p>\n\n<p>So, you can put pretty much anything before the \"coding\" part, but stick to \"coding\" (with no prefix) if you want to be 100% python-docs-recommendation-compatible.</p>\n\n<p>More specifically, you need to use whatever is recognized by Python <em>and the specific editing software you use</em> (if it needs/accepts anything at all). E.g. the <code>coding</code> form is recognized (out of the box) by GNU Emacs but not Vim (yes, without a universal agreement, it's essentially a <a href=\"https://en.wikipedia.org/wiki/Turf_war\" rel=\"noreferrer\">turf war</a>).</p>\n"
    },
    "860": {
        "question_id": "4576077",
        "answer_id": "4576110",
        "question": "<p>I have a text file. I need get a list of sentences. </p>\n\n<p>How can this be implemented? There are a lot of subtleties, such as dot being used in abbreviations.</p>\n\n<p>My old regexp works  bad.</p>\n\n<pre><code>re.compile('(\\. |^|!|\\?)([A-Z][^;\u2191\\.&lt;&gt;@\\^&amp;/\\[\\]]*(\\.|!|\\?) )',re.M)\n</code></pre>\n",
        "answer": "<p>The Natural Language Toolkit (<a href=\"http://www.nltk.org/\" rel=\"noreferrer\">nltk.org</a>) has what you need.  <a href=\"http://mailman.uib.no/public/corpora/2007-October/005426.html\" rel=\"noreferrer\">This group posting</a> indicates this does it:</p>\n\n<pre><code>import nltk.data\n\ntokenizer = nltk.data.load('tokenizers/punkt/english.pickle')\nfp = open(\"test.txt\")\ndata = fp.read()\nprint '\\n-----\\n'.join(tokenizer.tokenize(data))\n</code></pre>\n\n<p>(I haven't tried it!) </p>\n"
    },
    "861": {
        "question_id": "8134602",
        "answer_id": "10147451",
        "question": "<p>I need to insert multiple rows with one query (number of rows is not constant), so I need to execute query like this one:</p>\n\n<pre><code>INSERT INTO t (a, b) VALUES (1, 2), (3, 4), (5, 6);\n</code></pre>\n\n<p>The only way I know is</p>\n\n<pre><code>args = [(1,2), (3,4), (5,6)]\nargs_str = ','.join(cursor.mogrify(\"%s\", (x, )) for x in args)\ncursor.execute(\"INSERT INTO t (a, b) VALUES \"+args_str)\n</code></pre>\n\n<p>but I want some simpler way.</p>\n",
        "answer": "<p>I built a program that inserts multiple lines to a server that was located in another city.  </p>\n\n<p>I found out that using this method was about 10 times faster than <code>executemany</code>. In my case <code>tup</code> is a tuple containing about 2000 rows. It took about 10 seconds when using this method:</p>\n\n<pre><code>args_str = ','.join(cur.mogrify(\"(%s,%s,%s,%s,%s,%s,%s,%s,%s)\", x) for x in tup)\ncur.execute(\"INSERT INTO table VALUES \" + args_str) \n</code></pre>\n\n<p>and 2 minutes when using this method:</p>\n\n<pre><code>cur.executemany(\"INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)\", tup)\n</code></pre>\n"
    },
    "862": {
        "question_id": "5212870",
        "answer_id": "5212885",
        "question": "<p>I have the following list created from a sorted csv</p>\n\n<pre><code>list1 = sorted(csv1, key=operator.itemgetter(1))\n</code></pre>\n\n<p>I would actually like to sort the list by two criteria: first by the value in field 1 and then by the value in field 2. How do I do this?</p>\n",
        "answer": "<p>like this:</p>\n\n<pre><code>import operator\nlist1 = sorted(csv1, key=operator.itemgetter(1, 2))\n</code></pre>\n"
    },
    "863": {
        "question_id": "5598181",
        "answer_id": "5598349",
        "question": "<p>I want to run a script, which basicly shows things like:</p>\n\n<pre><code>Installing XXX...               [DONE]\n</code></pre>\n\n<p>Now, at the moment, I use print to print the whole line AFTER the function has succeeded. However, I now want it to print \"Installing xxx...\" first, and AFTER the function has run, to add the \"DONE\" tag; but on the same line.</p>\n\n<p>Any ideas?</p>\n",
        "answer": "<p>You can use the <code>print</code> statement to do this without importing <code>sys</code>.</p>\n\n<pre><code>def install_xxx():\n   print \"Installing XXX...      \",\n\ninstall_xxx()\nprint \"[DONE]\"\n</code></pre>\n\n<p>The comma on the end of the <code>print</code> line prevents <code>print</code> from issuing a new line (you should note that there will be an extra space at the end of the output).</p>\n\n<p><strong>The Python 3 Solution</strong><br>\nSince the above does not work in Python 3, you can do this instead (again, without importing <code>sys</code>):</p>\n\n<pre><code>def install_xxx():\n    print(\"Installing XXX...      \", end=\"\", flush=True)\n\ninstall_xxx()\nprint(\"[DONE]\")\n</code></pre>\n\n<p>The print function accepts an <code>end</code> parameter which defaults to <code>\"\\n\"</code>. Setting it to an empty string prevents it from issuing a new line at the end of the line.</p>\n"
    },
    "864": {
        "question_id": "802134",
        "answer_id": "802146",
        "question": "<p>How can I download a webpage with a user agent other than the default one on urllib2.urlopen?</p>\n",
        "answer": "<p><a href=\"http://www.diveintopython.net/http_web_services/user_agent.html\" rel=\"noreferrer\">Setting the User-Agent</a> from everyone's favorite <a href=\"http://diveintopython.net/\" rel=\"noreferrer\">Dive Into Python</a>.</p>\n\n<p>The short story: You can use <a href=\"http://docs.python.org/library/urllib2.html#urllib2.Request.add_header\" rel=\"noreferrer\">Request.add_header</a> to do this.</p>\n\n<p>You can also pass the headers as a dictionary when creating the Request itself, <a href=\"http://docs.python.org/library/urllib2.html#urllib2.Request\" rel=\"noreferrer\">as the docs note</a>:</p>\n\n<blockquote>\n  <p><em>headers</em> should be a dictionary, and will be treated as if <code>add_header()</code> was called with each key and value as arguments. This is often used to \u201cspoof\u201d the <code>User-Agent</code> header, which is used by a browser to identify itself \u2013 some HTTP servers only allow requests coming from common browsers as opposed to scripts. For example, Mozilla Firefox may identify itself as <code>\"Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11\"</code>, while <code>urllib2</code>\u2018s default user agent string is <code>\"Python-urllib/2.6\"</code> (on Python 2.6).</p>\n</blockquote>\n"
    },
    "865": {
        "question_id": "1277278",
        "answer_id": "1277311",
        "question": "<p>Is there a built-in function that works like <code>zip()</code> but that will pad the results so that the length of the resultant list is the length of the <em>longest</em> input rather than the <em>shortest</em> input?</p>\n\n<pre><code>&gt;&gt;&gt; a=['a1']\n&gt;&gt;&gt; b=['b1','b2','b3']\n&gt;&gt;&gt; c=['c1','c2']\n\n&gt;&gt;&gt; zip(a,b,c)\n[('a1', 'b1', 'c1')]\n\n&gt;&gt;&gt; What command goes here?\n[('a1', 'b1', 'c1'), (None, 'b2', 'c2'), (None, 'b3', None)]\n</code></pre>\n",
        "answer": "<p>In Python 3 you can use <a href=\"https://docs.python.org/3/library/itertools.html#itertools.zip_longest\" rel=\"noreferrer\"><code>itertools.zip_longest</code></a></p>\n\n<pre><code>&gt;&gt;&gt; list(itertools.zip_longest(a, b, c))\n[('a1', 'b1', 'c1'), (None, 'b2', 'c2'), (None, 'b3', None)]\n</code></pre>\n\n<p>You can pad with a different value than <code>None</code> by using the <code>fillvalue</code> parameter:</p>\n\n<pre><code>&gt;&gt;&gt; list(itertools.zip_longest(a, b, c, fillvalue='foo'))\n[('a1', 'b1', 'c1'), ('foo', 'b2', 'c2'), ('foo', 'b3', 'foo')]\n</code></pre>\n\n<p>With Python 2 you can either use <a href=\"https://docs.python.org/2/library/itertools.html#itertools.izip_longest\" rel=\"noreferrer\"><code>itertools.izip_longest</code></a> (Python 2.6+), or you can use <code>map</code> with <code>None</code>. It is a little known <a href=\"https://docs.python.org/2/library/functions.html#map\" rel=\"noreferrer\">feature of <code>map</code></a> (but <code>map</code> changed in Python 3.x, so this only works in Python 2.x).</p>\n\n<pre><code>&gt;&gt;&gt; map(None, a, b, c)\n[('a1', 'b1', 'c1'), (None, 'b2', 'c2'), (None, 'b3', None)]\n</code></pre>\n"
    },
    "866": {
        "question_id": "493174",
        "answer_id": "493788",
        "question": "<p>I need to convert <code>one</code> into <code>1</code>, <code>two</code> into <code>2</code> and so on.</p>\n\n<p>Is there a way to do this with a library or a class or anything?</p>\n",
        "answer": "<p>The majority of this code is to set up the numwords dict, which is only done on the first call.</p>\n\n<pre><code>def text2int(textnum, numwords={}):\n    if not numwords:\n      units = [\n        \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n        \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\n        \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\",\n      ]\n\n      tens = [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"]\n\n      scales = [\"hundred\", \"thousand\", \"million\", \"billion\", \"trillion\"]\n\n      numwords[\"and\"] = (1, 0)\n      for idx, word in enumerate(units):    numwords[word] = (1, idx)\n      for idx, word in enumerate(tens):     numwords[word] = (1, idx * 10)\n      for idx, word in enumerate(scales):   numwords[word] = (10 ** (idx * 3 or 2), 0)\n\n    current = result = 0\n    for word in textnum.split():\n        if word not in numwords:\n          raise Exception(\"Illegal word: \" + word)\n\n        scale, increment = numwords[word]\n        current = current * scale + increment\n        if scale &gt; 100:\n            result += current\n            current = 0\n\n    return result + current\n\nprint text2int(\"seven billion one hundred million thirty one thousand three hundred thirty seven\")\n#7100031337\n</code></pre>\n"
    },
    "867": {
        "question_id": "12201928",
        "answer_id": "12201952",
        "question": "<p>For some reason my code is having trouble opening a simple file:</p>\n\n<p>This is the code:</p>\n\n<pre><code>file1 = open('recentlyUpdated.yaml')\n</code></pre>\n\n<p>And the error is: </p>\n\n<pre><code>IOError: [Errno 2] No such file or directory: 'recentlyUpdated.yaml'\n</code></pre>\n\n\n\n<ul>\n<li>Naturally I checked that this is the correct name of the file.</li>\n<li>I have tried moving around the file, giving <code>open()</code> the full path to the file and none of it seems to work.</li>\n</ul>\n",
        "answer": "<ul>\n<li>Make sure the file exists: use <code>os.listdir()</code> to see the list of files in the current working directory</li>\n<li>Make sure you're in the directory you think you're in with <code>os.getcwd()</code> (if you launch your code from an IDE, you may well be in a different directory)</li>\n<li>You can then either:\n\n<ul>\n<li>Call <code>os.chdir(dir)</code>, <code>dir</code> being the folder where the file is\nlocated, then open the file with just its name like you were doing.</li>\n<li>Specify an absolute path to the file in your <code>open</code> call.</li>\n</ul></li>\n<li>Remember to use a raw string if your path uses backslashes, like\nso: <code>dir = r'C:\\Python32'</code>\n\n<ul>\n<li>If you don't use raw-string, you have to escape every backslash: <code>'C:\\\\User\\\\Bob\\\\...'</code></li>\n<li>Forward-slashes also work on Windows <code>'C:/Python32'</code> and do not need to be escaped.</li>\n</ul></li>\n</ul>\n\n<p>Let me clarify how Python finds files: </p>\n\n<ul>\n<li>An <strong>absolute path</strong> is a path that starts with your computer's root directory, for example 'C:\\Python\\scripts..' if you're on Windows. </li>\n<li>A <strong>relative path</strong> is a path that does not start with your computer's root directory, and is instead relative to something called the <code>working directory</code>. You can view Python's current working directory by calling <code>os.getcwd()</code>. </li>\n</ul>\n\n<p>If you try to do <code>open('sortedLists.yaml')</code>, Python will see that you are passing it a relative path, so it will search for the file inside the current working directory. Calling <code>os.chdir</code> will change the current working directory.</p>\n\n<p>Example: Let's say <code>file.txt</code> is found in <code>C:\\Folder</code>.</p>\n\n<p>To open it, you can do:</p>\n\n<pre><code>os.chdir(r'C:\\Folder')\nopen('file.txt') #relative path, looks inside the current working directory\n</code></pre>\n\n<p>or </p>\n\n<pre><code>open(r'C:\\Folder\\file.txt') #full path\n</code></pre>\n"
    },
    "868": {
        "question_id": "904041",
        "answer_id": "904085",
        "question": "<p>I am trying to read a CSV file with accented characters with Python (only French and/or Spanish characters). Based on the Python 2.5 documentation for the csvreader (<a href=\"http://docs.python.org/library/csv.html\" rel=\"noreferrer\">http://docs.python.org/library/csv.html</a>), I came up with the following code to read the CSV file since the csvreader supports only ASCII.</p>\n\n<pre><code>def unicode_csv_reader(unicode_csv_data, dialect=csv.excel, **kwargs):\n    # csv.py doesn't do Unicode; encode temporarily as UTF-8:\n    csv_reader = csv.reader(utf_8_encoder(unicode_csv_data),\n                            dialect=dialect, **kwargs)\n    for row in csv_reader:\n        # decode UTF-8 back to Unicode, cell by cell:\n        yield [unicode(cell, 'utf-8') for cell in row]\n\ndef utf_8_encoder(unicode_csv_data):\n    for line in unicode_csv_data:\n        yield line.encode('utf-8')\n\nfilename = 'output.csv'\nreader = unicode_csv_reader(open(filename))\ntry:\n    products = []\n    for field1, field2, field3 in reader:\n        ...\n</code></pre>\n\n<p>Below is an extract of the CSV file I am trying to read:</p>\n\n<pre><code>0665000FS10120684,SD1200IS,Appareil photo num\u00e9rique PowerShot de 10 Mpx de Canon avec tr\u00e9pied (SD1200IS) - Bleu\n0665000FS10120689,SD1200IS,Appareil photo num\u00e9rique PowerShot de 10 Mpx de Canon avec tr\u00e9pied (SD1200IS) - Gris\n0665000FS10120687,SD1200IS,Appareil photo num\u00e9rique PowerShot de 10 Mpx de Canon avec tr\u00e9pied (SD1200IS) - Vert\n...\n</code></pre>\n\n<p>Even though I try to encode/decode to UTF-8, I am still getting the following exception:</p>\n\n<pre><code>Traceback (most recent call last):\n  File \".\\Test.py\", line 53, in &lt;module&gt;\n    for field1, field2, field3 in reader:\n  File \".\\Test.py\", line 40, in unicode_csv_reader\n    for row in csv_reader:\n  File \".\\Test.py\", line 46, in utf_8_encoder\n    yield line.encode('utf-8', 'ignore')\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 68: ordinal not in range(128)\n</code></pre>\n\n<p>How do I fix this?</p>\n",
        "answer": "<p>The <code>.encode</code> method gets applied to a Unicode string to make a byte-string; but you're calling it on a byte-string instead... the wrong way 'round!  Look at the <code>codecs</code> module in the standard library and <code>codecs.open</code> in particular for better general solutions for reading UTF-8 encoded text files. However, for the <code>csv</code> module in particular, you need to pass in utf-8 data, and that's what you're already getting, so your code can be much simpler:</p>\n\n<pre><code>import csv\n\ndef unicode_csv_reader(utf8_data, dialect=csv.excel, **kwargs):\n    csv_reader = csv.reader(utf8_data, dialect=dialect, **kwargs)\n    for row in csv_reader:\n        yield [unicode(cell, 'utf-8') for cell in row]\n\nfilename = 'da.csv'\nreader = unicode_csv_reader(open(filename))\nfor field1, field2, field3 in reader:\n  print field1, field2, field3 \n</code></pre>\n\n<p>PS: if it turns out that your input data is NOT in utf-8, but e.g. in ISO-8859-1, then you do need a \"transcoding\" (if you're keen on using utf-8 at the <code>csv</code> module level), of the form <code>line.decode('whateverweirdcodec').encode('utf-8')</code> -- but probably you can just use the name of your existing encoding in the <code>yield</code> line in my code above, instead of <code>'utf-8'</code>, as <code>csv</code> is actually going to be just fine with ISO-8859-* encoded bytestrings.</p>\n"
    },
    "869": {
        "question_id": "19122345",
        "answer_id": "19122532",
        "question": "<p>I have any string. like 'buffalo',</p>\n\n<pre><code>x='buffalo'\n</code></pre>\n\n<p>I want to convert this string to some variable name like,</p>\n\n<pre><code>buffalo=4 \n</code></pre>\n\n<p>not only this example, I want to convert any input string to some variable name. How should I do that (in python)?</p>\n",
        "answer": "<pre><code>x='buffalo'    \nexec(\"%s = %d\" % (x,2))\n</code></pre>\n\n<p>After that you can check it by:</p>\n\n<pre><code>print buffalo\n</code></pre>\n\n<p>As an output you will see:\n<code>2</code></p>\n"
    },
    "870": {
        "question_id": "30244952",
        "answer_id": "30244979",
        "question": "<p>Trying to create a new column with the groupby calculation. In the code below, I get the correct calculated values for each date (see group below) but when I try to create a new column (df['Data4']) with it I get NaN. So I am trying to create a new column in the dataframe with the sum of 'Data3' for the all dates and apply that to each date row. For example, 2015-05-08 is in 2 rows (total is 50+5 = 55) and in this new column I would like to have 55 in both of the rows. </p>\n\n<pre><code>import pandas as pd\nimport numpy as np\nfrom pandas import DataFrame\n\n\ndf = pd.DataFrame({'Date': ['2015-05-08', '2015-05-07', '2015-05-06', '2015-05-05', '2015-05-08', '2015-05-07', '2015-05-06', '2015-05-05'], 'Sym': ['aapl', 'aapl', 'aapl', 'aapl', 'aaww', 'aaww', 'aaww', 'aaww'], 'Data2': [11, 8, 10, 15, 110, 60, 100, 40],'Data3': [5, 8, 6, 1, 50, 100, 60, 120]})\n\ngroup = df['Data3'].groupby(df['Date']).sum()\n\ndf['Data4'] = group\n</code></pre>\n",
        "answer": "<p>You want to use <a href=\"http://pandas.pydata.org/pandas-docs/stable/groupby.html#transformation\" rel=\"noreferrer\"><code>transform</code></a> this will return a Series with the index aligned to the df so you can then add it as a new column:</p>\n\n<pre><code>In [74]:\n\ndf = pd.DataFrame({'Date': ['2015-05-08', '2015-05-07', '2015-05-06', '2015-05-05', '2015-05-08', '2015-05-07', '2015-05-06', '2015-05-05'], 'Sym': ['aapl', 'aapl', 'aapl', 'aapl', 'aaww', 'aaww', 'aaww', 'aaww'], 'Data2': [11, 8, 10, 15, 110, 60, 100, 40],'Data3': [5, 8, 6, 1, 50, 100, 60, 120]})\n\u200b\ndf['Data4'] = df['Data3'].groupby(df['Date']).transform('sum')\ndf\nOut[74]:\n   Data2  Data3        Date   Sym  Data4\n0     11      5  2015-05-08  aapl     55\n1      8      8  2015-05-07  aapl    108\n2     10      6  2015-05-06  aapl     66\n3     15      1  2015-05-05  aapl    121\n4    110     50  2015-05-08  aaww     55\n5     60    100  2015-05-07  aaww    108\n6    100     60  2015-05-06  aaww     66\n7     40    120  2015-05-05  aaww    121\n</code></pre>\n"
    },
    "871": {
        "question_id": "27905295",
        "answer_id": "27905350",
        "question": "<p>Suppose I have a DataFrame with some <code>NaN</code>s:</p>\n\n<pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; df = pd.DataFrame([[1, 2, 3], [4, None, None], [None, None, 9]])\n&gt;&gt;&gt; df\n    0   1   2\n0   1   2   3\n1   4 NaN NaN\n2 NaN NaN   9\n</code></pre>\n\n<p>What I need to do is replace every <code>NaN</code> with the first non-<code>NaN</code> value in the same column above it. It is assumed that the first row will never contain a <code>NaN</code>. So for the previous example the result would be</p>\n\n<pre><code>   0  1  2\n0  1  2  3\n1  4  2  3\n2  4  2  9\n</code></pre>\n\n<p>I can just loop through the whole DataFrame column-by-column, element-by-element and set the values directly, but is there an easy (optimally a loop-free) way of achieving this?</p>\n",
        "answer": "<p>You could use the <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.fillna.html\" rel=\"noreferrer\"><code>fillna</code></a> method on the DataFrame and specify the method as <code>ffill</code> (forward fill):</p>\n\n<pre><code>&gt;&gt;&gt; df = pd.DataFrame([[1, 2, 3], [4, None, None], [None, None, 9]])\n&gt;&gt;&gt; df.fillna(method='ffill')\n   0  1  2\n0  1  2  3\n1  4  2  3\n2  4  2  9\n</code></pre>\n\n<p>This method...</p>\n\n<blockquote>\n  <p>propagate[s] last valid observation forward to next valid</p>\n</blockquote>\n\n<p>To go the opposite way, there's also a <code>bfill</code> method.</p>\n\n<p>This method doesn't modify the DataFrame inplace - you'll need to rebind the returned DataFrame to a variable or else specify <code>inplace=True</code>:</p>\n\n<pre><code>df.fillna(method='ffill', inplace=True)\n</code></pre>\n"
    },
    "872": {
        "question_id": "10865116",
        "answer_id": "10865170",
        "question": "<p>I am trying to create buttons in tkinter within a for loop. And with each loop pass the i count value out as an argument in the command value. So when the function is called from the command value I can tell which button was pressed and act accordingly. The problem is, lets say len is 3, it will create 3 buttons with titles \"Game 1\" through \"Game 3\" but when any of the buttons are pressed the printed value is always 2, the last iteration. So it appears the buttons are being made as separate entities, but the i value in the command arguments seem to be all the same. Here is the code:</p>\n\n<pre><code>def createGameURLs(self):\n    self.button = []\n    for i in range(3):\n        self.button.append(Button(self, text='Game '+str(i+1),command=lambda:self.open_this(i)))\n        self.button[i].grid(column=4, row=i+1, sticky=W)\ndef open_this(self, myNum):\n    print(myNum)\n</code></pre>\n\n<p>Is there a way to get the current i value, upon each iteration, to stick with that particular button?</p>\n",
        "answer": "<p>Change your lambda to <code>lambda i=i: self.open_this(i)</code>.</p>\n\n<p>This may look magical, but here's what's happening.  When you use that lambda to define your function, the open_this call doesn't get the value of the variable i at the time you define the function.  Instead, it makes a closure, which is sort of like a note to itself saying \"I should look for what the value of the variable i is <em>at the time that I am called</em>\".  Of course, the function is called after the loop is over, so at that time i will always be equal to the last value from the loop.</p>\n\n<p>Using the <code>i=i</code> trick causes your function to store the current value of i at the time your lambda is defined, instead of waiting to look up the value of i later.</p>\n"
    },
    "873": {
        "question_id": "7664779",
        "answer_id": "7664904",
        "question": "<p>Lets say I define a simple function which will display an integer passed to it:</p>\n\n<pre><code>def funct1(param1):\n    print(param1)\n    return(param1)\n</code></pre>\n\n<p>the output will be the same but and I know that when a <code>return</code> statement is used in a function the output can be used again. Otherwise the value of a <code>print</code> statement cannot be used. But I know this is not the formal definition, Can anyone provide me with a good definition?</p>\n",
        "answer": "<p>Dramatically different things. Imagine if I have this python program:</p>\n\n<pre><code>#!/usr/bin/env python\n\ndef printAndReturnNothing():\n    x = \"hello\"\n    print(x)\n\ndef printAndReturn():\n    x = \"hello\"\n    print(x)\n    return x\n\ndef main():\n    ret = printAndReturn()\n    other = printAndReturnNothing()\n\n    print(\"ret is: %s\" % ret)\n    print(\"other is: %s\" % other)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n\n<p>What do you expect to be the output?</p>\n\n<pre><code>hello\nhello\nret is : hello\nother is: None\n</code></pre>\n\n<hr>\n\n<h2>Why?</h2>\n\n<p>Why? Because <code>print</code> takes its arguments/expressions and dumps them to standard output, so in the functions I made up, <code>print</code> will output the value of <code>x</code>, which is <code>hello</code>.</p>\n\n<ul>\n<li><p><code>printAndReturn</code> will return <code>x</code> to the caller of the method, so:</p>\n\n<p><code>ret = printAndReturn()</code></p></li>\n</ul>\n\n<p><code>ret</code> will have the same value as <code>x</code>, i.e. <code>\"hello\"</code></p>\n\n<ul>\n<li><p><code>printAndReturnNothing</code> doesn't return anything, so:</p>\n\n<p><code>other = printAndReturnNothing()</code></p></li>\n</ul>\n\n<p><code>other</code> actually becomes <code>None</code> because that is the default return from a python function. Python functions always return something, but if no <code>return</code> is declared, the function will return <code>None</code>.</p>\n\n<hr>\n\n<h2>Resources</h2>\n\n<p>Going through the python tutorial will introduce you to these concepts: <a href=\"http://docs.python.org/tutorial\" rel=\"noreferrer\">http://docs.python.org/tutorial</a></p>\n\n<p>Here's something about functions form python's tutorial: <a href=\"http://docs.python.org/tutorial/controlflow.html#defining-functions\" rel=\"noreferrer\">http://docs.python.org/tutorial/controlflow.html#defining-functions</a></p>\n\n<blockquote>\n  <p>This example, as usual, demonstrates some new Python features:</p>\n  \n  <p>The return statement returns with a value from a function. return without an expression argument returns None. Falling off the end of a function also returns None.</p>\n</blockquote>\n"
    },
    "874": {
        "question_id": "4417962",
        "answer_id": "4418891",
        "question": "<p>I have a Python program for Linux almost looks like this one :</p>\n\n<pre><code>import os\nimport time\n\nprocess = os.popen(\"top\").readlines()\n\ntime.sleep(1)\n\nos.popen(\"killall top\")\n\nprint process\n</code></pre>\n\n<p>the program hangs in this line :</p>\n\n<pre><code>process = os.popen(\"top\").readlines()\n</code></pre>\n\n<p>and that happens in the tools that keep update outputting like \"Top\"</p>\n\n<p>my best trials :</p>\n\n<pre><code>import os\nimport time\nimport subprocess\n\nprocess = subprocess.Popen('top')\n\ntime.sleep(2)\n\nos.popen(\"killall top\")\n\nprint process\n</code></pre>\n\n<p>it worked better than the first one (it's kelled ), but it returns :</p>\n\n<pre><code>&lt;subprocess.Popen object at 0x97a50cc&gt;\n</code></pre>\n\n<p>the second trial :</p>\n\n<pre><code>import os\nimport time\nimport subprocess\n\nprocess = subprocess.Popen('top').readlines()\n\ntime.sleep(2)\n\nos.popen(\"killall top\")\n\nprint process\n</code></pre>\n\n<p>the same as the first one. It hanged due to \"readlines()\"</p>\n\n<p>Its returning should be like this :</p>\n\n<pre><code>top - 05:31:15 up 12:12,  5 users,  load average: 0.25, 0.14, 0.11\nTasks: 174 total,   2 running, 172 sleeping,   0 stopped,   0 zombie\nCpu(s):  9.3%us,  3.8%sy,  0.1%ni, 85.9%id,  0.9%wa,  0.0%hi,  0.0%si,  0.0%st\nMem:   1992828k total,  1849456k used,   143372k free,   233048k buffers\nSwap:  4602876k total,        0k used,  4602876k free,  1122780k cached\n\n  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND            \n31735 Barakat   20   0  246m  52m  20m S 19.4  2.7  13:54.91 totem              \n 1907 root      20   0 91264  45m  15m S  1.9  2.3  38:54.14 Xorg               \n 2138 Barakat   20   0 17356 5368 4284 S  1.9  0.3   3:00.15 at-spi-registry    \n 2164 Barakat    9 -11  164m 7372 6252 S  1.9  0.4   2:54.58 pulseaudio         \n 2394 Barakat   20   0 27212 9792 8256 S  1.9  0.5   6:01.48 multiload-apple    \n 6498 Barakat   20   0 56364  30m  18m S  1.9  1.6   0:03.38 pyshell            \n    1 root      20   0  2880 1416 1208 S  0.0  0.1   0:02.02 init               \n    2 root      20   0     0    0    0 S  0.0  0.0   0:00.02 kthreadd           \n    3 root      RT   0     0    0    0 S  0.0  0.0   0:00.12 migration/0        \n    4 root      20   0     0    0    0 S  0.0  0.0   0:02.07 ksoftirqd/0        \n    5 root      RT   0     0    0    0 S  0.0  0.0   0:00.00 watchdog/0         \n    9 root      20   0     0    0    0 S  0.0  0.0   0:01.43 events/0           \n   11 root      20   0     0    0    0 S  0.0  0.0   0:00.00 cpuset             \n   12 root      20   0     0    0    0 S  0.0  0.0   0:00.02 khelper            \n   13 root      20   0     0    0    0 S  0.0  0.0   0:00.00 netns              \n   14 root      20   0     0    0    0 S  0.0  0.0   0:00.00 async/mgr          \n   15 root      20   0     0    0    0 S  0.0  0.0   0:00.00 pm\n</code></pre>\n\n<p>and save in the variable \"process\". Any I idea guys, I'm really stuck now ?</p>\n",
        "answer": "<pre><code>#!/usr/bin/env python\n\"\"\"Start process; wait 2 seconds; kill the process; print all process output.\"\"\"\nimport subprocess\nimport tempfile\nimport time\n\ndef main():\n    # open temporary file (it automatically deleted when it is closed)\n    #  `Popen` requires `f.fileno()` so `SpooledTemporaryFile` adds nothing here\n    f = tempfile.TemporaryFile() \n\n    # start process, redirect stdout\n    p = subprocess.Popen([\"top\"], stdout=f)\n\n    # wait 2 seconds\n    time.sleep(2)\n\n    # kill process\n    #NOTE: if it doesn't kill the process then `p.wait()` blocks forever\n    p.terminate() \n    p.wait() # wait for the process to terminate otherwise the output is garbled\n\n    # print saved output\n    f.seek(0) # rewind to the beginning of the file\n    print f.read(), \n    f.close()\n\nif __name__==\"__main__\":\n    main()\n</code></pre>\n\n<h1>Tail-like Solutions that print only the portion of the output</h1>\n\n<p>You could read the process output in another thread and save the required number of the last lines in a queue:</p>\n\n<pre><code>import collections\nimport subprocess\nimport time\nimport threading\n\ndef read_output(process, append):\n    for line in iter(process.stdout.readline, \"\"):\n        append(line)\n\ndef main():\n    # start process, redirect stdout\n    process = subprocess.Popen([\"top\"], stdout=subprocess.PIPE, close_fds=True)\n    try:\n        # save last `number_of_lines` lines of the process output\n        number_of_lines = 200\n        q = collections.deque(maxlen=number_of_lines) # atomic .append()\n        t = threading.Thread(target=read_output, args=(process, q.append))\n        t.daemon = True\n        t.start()\n\n        #\n        time.sleep(2)\n    finally:\n        process.terminate() #NOTE: it doesn't ensure the process termination\n\n    # print saved lines\n    print ''.join(q)\n\nif __name__==\"__main__\":\n    main()\n</code></pre>\n\n<p>This variant requires <code>q.append()</code> to be atomic operation. Otherwise the output might be corrupted.</p>\n\n<h2><a href=\"http://docs.python.org/library/signal.html#signal.alarm\" rel=\"noreferrer\"><code>signal.alarm()</code></a> solution</h2>\n\n<p>You could use  <a href=\"http://docs.python.org/library/signal.html#signal.alarm\" rel=\"noreferrer\"><code>signal.alarm()</code></a> to call the <code>process.terminate()</code> after specified timeout instead of reading in another thread. Though it might not interact very well with the <code>subprocess</code> module. Based on <a href=\"https://stackoverflow.com/questions/1191374/subprocess-with-timeout/1191537#1191537\">@Alex Martelli's answer</a>:</p>\n\n<pre><code>import collections\nimport signal\nimport subprocess\n\nclass Alarm(Exception):\n    pass\n\ndef alarm_handler(signum, frame):\n    raise Alarm\n\ndef main():\n    # start process, redirect stdout\n    process = subprocess.Popen([\"top\"], stdout=subprocess.PIPE, close_fds=True)\n\n    # set signal handler\n    signal.signal(signal.SIGALRM, alarm_handler)\n    signal.alarm(2) # produce SIGALRM in 2 seconds\n\n    try:\n        # save last `number_of_lines` lines of the process output\n        number_of_lines = 200\n        q = collections.deque(maxlen=number_of_lines)\n        for line in iter(process.stdout.readline, \"\"):\n            q.append(line)\n        signal.alarm(0) # cancel alarm\n    except Alarm:\n        process.terminate()\n    finally:\n        # print saved lines\n        print ''.join(q)\n\nif __name__==\"__main__\":\n    main()\n</code></pre>\n\n<p>This approach works only on *nix systems. It might block if <code>process.stdout.readline()</code> doesn't return.</p>\n\n<h2><a href=\"http://docs.python.org/library/threading.html#threading.Timer\" rel=\"noreferrer\"><code>threading.Timer</code></a> solution</h2>\n\n<pre><code>import collections\nimport subprocess\nimport threading\n\ndef main():\n    # start process, redirect stdout\n    process = subprocess.Popen([\"top\"], stdout=subprocess.PIPE, close_fds=True)\n\n    # terminate process in timeout seconds\n    timeout = 2 # seconds\n    timer = threading.Timer(timeout, process.terminate)\n    timer.start()\n\n    # save last `number_of_lines` lines of the process output\n    number_of_lines = 200\n    q = collections.deque(process.stdout, maxlen=number_of_lines)\n    timer.cancel()\n\n    # print saved lines\n    print ''.join(q),\n\nif __name__==\"__main__\":\n    main()\n</code></pre>\n\n<p>This approach should also work on Windows. Here I've used <code>process.stdout</code> as an iterable; it might introduce an additional output buffering, you could switch to the <code>iter(process.stdout.readline, \"\")</code> approach if it is not desirable. if the process doesn't terminate on <code>process.terminate()</code> then the scripts hangs.</p>\n\n<h2>No threads, no signals solution</h2>\n\n<pre><code>import collections\nimport subprocess\nimport sys\nimport time\n\ndef main():\n    args = sys.argv[1:]\n    if not args:\n        args = ['top']\n\n    # start process, redirect stdout\n    process = subprocess.Popen(args, stdout=subprocess.PIPE, close_fds=True)\n\n    # save last `number_of_lines` lines of the process output\n    number_of_lines = 200\n    q = collections.deque(maxlen=number_of_lines)\n\n    timeout = 2 # seconds\n    now = start = time.time()    \n    while (now - start) &lt; timeout:\n        line = process.stdout.readline()\n        if not line:\n            break\n        q.append(line)\n        now = time.time()\n    else: # on timeout\n        process.terminate()\n\n    # print saved lines\n    print ''.join(q),\n\nif __name__==\"__main__\":\n    main()\n</code></pre>\n\n<p>This variant use neither threads, no signals but it produces garbled output in the terminal. It will block if <code>process.stdout.readline()</code> blocks.</p>\n"
    },
    "875": {
        "question_id": "42045767",
        "answer_id": "42045987",
        "question": "<p>So currently learning how to import data and work with it in matplotlib and I am having trouble even tho I have the exact code from the book.</p>\n\n<p><a href=\"https://i.stack.imgur.com/Wuk3c.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/Wuk3c.png\" alt=\"enter image description here\"></a></p>\n\n<p>This is what the plot looks like, but my question is how can I get it where there is no white space between the start and the end of the x-axis.</p>\n\n<p>Here is the code:</p>\n\n<pre><code>import csv\n\nfrom matplotlib import pyplot as plt\nfrom datetime import datetime\n\n# Get dates and high temperatures from file.\nfilename = 'sitka_weather_07-2014.csv'\nwith open(filename) as f:\n    reader = csv.reader(f)\n    header_row = next(reader)\n\n    #for index, column_header in enumerate(header_row):\n        #print(index, column_header)\n    dates, highs = [], []\n    for row in reader:\n        current_date = datetime.strptime(row[0], \"%Y-%m-%d\")\n        dates.append(current_date)\n\n        high = int(row[1])\n        highs.append(high)\n\n# Plot data. \nfig = plt.figure(dpi=128, figsize=(10,6))\nplt.plot(dates, highs, c='red')\n\n\n# Format plot.\nplt.title(\"Daily high temperatures, July 2014\", fontsize=24)\nplt.xlabel('', fontsize=16)\nfig.autofmt_xdate()\nplt.ylabel(\"Temperature (F)\", fontsize=16)\nplt.tick_params(axis='both', which='major', labelsize=16)\n\nplt.show()\n</code></pre>\n",
        "answer": "<p>In matplotlib 2.x there is an automatic margin set at the edges, which ensures the data to be nicely fitting within the axis spines. In this case such a margin is probably desired on the y axis. By default it is set to <code>0.05</code> in units of axis span.\nTo set the margin to <code>0</code> on the x axis, use </p>\n\n<pre><code>plt.margins(x=0)\n</code></pre>\n\n<p>or </p>\n\n<pre><code>ax.margins(x=0)\n</code></pre>\n\n<p>depending on the context. Also see <a href=\"http://matplotlib.org/devdocs/api/_as_gen/matplotlib.axes.Axes.margins.html\" rel=\"noreferrer\">the documentation</a>.</p>\n\n<p>In case you want to get rid of the margin in the whole script, you can use </p>\n\n<pre><code>plt.rcParams['axes.xmargin'] = 0\n</code></pre>\n\n<p>at the beginning of your script (same for <code>y</code> of course). If you want to get rid of the margin entirely and forever, you might want to change the according line in the <a href=\"http://matplotlib.org/users/customizing.html\" rel=\"noreferrer\">matplotlib rc file</a>.</p>\n\n<p><hr>\nAlternatively to changing the margins, use <code>plt.xlim(..)</code> or <code>ax.set_xlim(..)</code> to manually set the limits of the axes such that there is no white space left. </p>\n"
    },
    "876": {
        "question_id": "37897748",
        "answer_id": "37897765",
        "question": "<p>For example, I have two numpy arrays,</p>\n\n<pre><code>A = np.array(\n  [[0,1], \n   [2,3], \n   [4,5]])\nB = np.array(\n  [[1],\n   [0],\n   [1]], dtype='int')\n</code></pre>\n\n<p>and I want to extract one element from each row of <code>A</code>, and that element is indexed by <code>B</code>, so I want the following results:</p>\n\n<pre><code>C = np.array(\n  [[1],\n   [2],\n   [5]])\n</code></pre>\n\n<p>I tried <code>A[:, B.ravel()]</code>, but it'll broadcast <code>B</code>, not what I want. Also looked into <code>np.take</code>, seems not the right solution to my problem.</p>\n\n<p>However, I could use <code>np.choose</code> by transposing <code>A</code>, </p>\n\n<pre><code>np.choose(B.ravel(), A.T)\n</code></pre>\n\n<p>but any other better solution?</p>\n",
        "answer": "<p>You can use <a href=\"http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#purely-integer-array-indexing\" rel=\"nofollow noreferrer\"><code>NumPy's purely integer array indexing</code></a> -</p>\n\n<pre><code>A[np.arange(A.shape[0]),B.ravel()]\n</code></pre>\n\n<p>Sample run -</p>\n\n<pre><code>In [57]: A\nOut[57]: \narray([[0, 1],\n       [2, 3],\n       [4, 5]])\n\nIn [58]: B\nOut[58]: \narray([[1],\n       [0],\n       [1]])\n\nIn [59]: A[np.arange(A.shape[0]),B.ravel()]\nOut[59]: array([1, 2, 5])\n</code></pre>\n\n<p>Please note that if <code>B</code> is a <code>1D</code> array or a list of such column indices, you could simply skip the flattening operation with <code>.ravel()</code>.</p>\n\n<p>Sample run -</p>\n\n<pre><code>In [186]: A\nOut[186]: \narray([[0, 1],\n       [2, 3],\n       [4, 5]])\n\nIn [187]: B\nOut[187]: [1, 0, 1]\n\nIn [188]: A[np.arange(A.shape[0]),B]\nOut[188]: array([1, 2, 5])\n</code></pre>\n"
    },
    "877": {
        "question_id": "930397",
        "answer_id": "930398",
        "question": "<p>In Python, how do you get the last element of a list?</p>\n",
        "answer": "<p><code>some_list[-1]</code> is the shortest and most Pythonic.</p>\n\n<p>In fact, you can do much more with this syntax. The <code>some_list[-n]</code> syntax gets the nth-to-last element. So <code>some_list[-1]</code> gets the last element, <code>some_list[-2]</code> gets the second to last, etc, all the way down to <code>some_list[-len(some_list)]</code>, which gives you the first element.</p>\n\n<p>You can also set list elements in this way. For instance:</p>\n\n<pre><code>&gt;&gt;&gt; some_list = [1, 2, 3]\n&gt;&gt;&gt; some_list[-1] = 5 # Set the last element\n&gt;&gt;&gt; some_list[-2] = 3 # Set the second to last element\n&gt;&gt;&gt; some_list\n[1, 3, 5]\n</code></pre>\n\n<p>Note that getting a list item by index will raise an <a href=\"https://docs.python.org/3/library/exceptions.html#IndexError\" rel=\"noreferrer\"><code>IndexError</code></a> if the expected item doesn't exist. This means that <code>some_list[-1]</code> will raise an exception if <code>some_list</code> is empty, because an empty list can't have a last element.</p>\n"
    },
    "878": {
        "question_id": "8609192",
        "answer_id": "8609425",
        "question": "<p>When we add a database field in django we generally write <code>models.CharField(max_length=100, null=True, blank=True)</code>. The same is done with <code>ForeignKey</code>, <code>DecimalField</code> etc. What is the basic difference in having </p>\n\n<ol>\n<li><code>null=True</code> only</li>\n<li><code>blank=True</code> only</li>\n<li><code>null=True</code>, <code>blank=True</code></li>\n</ol>\n\n<p>in respect to different (<code>CharField</code>, <code>ForeignKey</code>, <code>ManyToManyField</code>, <code>DateTimeField</code>) fields. What are the advantages/disadvantages of using 1/2/3?</p>\n",
        "answer": "<p><code>null=True</code> sets <code>NULL</code> (versus <code>NOT NULL</code>) on the column in your DB. Blank values for Django field types such as <code>DateTimeField</code> or <code>ForeignKey</code> will be stored as <code>NULL</code> in the DB.</p>\n\n<p><code>blank=True</code> determines whether the field will be required in forms. This includes the admin and your own custom forms. If <code>blank=True</code> then the field will not be required, whereas if it's <code>False</code> the field cannot be blank.</p>\n\n<p>The combo of the two is so frequent because typically if you're going to allow a field to be blank in your form, you're going to also need your database to allow <code>NULL</code> values for that field. The exception is <code>CharField</code>s and <code>TextField</code>s, which in Django are <em>never</em> saved as <code>NULL</code>. Blank values are stored in the DB as an empty string (<code>''</code>).</p>\n\n<p>A few examples:</p>\n\n<pre><code>models.DateTimeField(blank=True) # raises IntegrityError if blank\n\nmodels.DateTimeField(null=True) # NULL allowed, but must be filled out in a form\n</code></pre>\n\n<p>Obviously those two options don't make logical sense to use (though, there might be a use case for <code>null=True, blank=False</code> if you want a field to always be required in forms, but optional when dealing with an object through something like the shell.)</p>\n\n<pre><code>models.CharField(blank=True) # No problem, blank is stored as ''\n\nmodels.CharField(null=True) # NULL allowed, but will never be set as NULL\n</code></pre>\n\n<p><code>CHAR</code> and <code>TEXT</code> types are never saved as <code>NULL</code> by Django, so <code>null=True</code> is unnecessary. However, you can manually set one of these fields to <code>None</code> to force set it as <code>NULL</code>. If you have a scenario where that might be necessary, you should still include <code>null=True</code>.</p>\n"
    },
    "879": {
        "question_id": "206154",
        "answer_id": "206964",
        "question": "<p>I've never used <a href=\"http://en.wikipedia.org/wiki/SOAP\" rel=\"noreferrer\">SOAP</a> before and I'm sort of new to Python.  I'm doing this to get myself acquainted with both technologies.  I've installed <a href=\"http://trac.optio.webfactional.com/wiki/soaplib\" rel=\"noreferrer\">SOAPlib</a> and I've tried to read their <a href=\"http://trac.optio.webfactional.com/wiki/Client\" rel=\"noreferrer\">Client</a> documentation, but I don't understand it too well.  Is there anything else I can look into which is more suited for being a SOAP Client library for Python?</p>\n\n<p>Edit: Just in case it helps, I'm using Python 2.6.</p>\n",
        "answer": "<p><strong><em>Update (2016):</em></strong></p>\n\n<p>If you only need SOAP client, there is well maintained library called <a href=\"https://pypi.org/project/zeep/\" rel=\"noreferrer\">zeep</a>. It supports both Python 2 and 3 :)</p>\n\n<hr>\n\n<p><strong><em>Update:</em></strong></p>\n\n<p>Additionally to what is mentioned above, I will refer to <a href=\"https://wiki.python.org/moin/WebServices#SOAP\" rel=\"noreferrer\">Python WebServices</a> page which is always up-to-date with all actively maintained and recommended modules to <strong>SOAP</strong> and all other webservice types.</p>\n\n<hr>\n\n<p>Unfortunately, at the moment, I don't think there is a \"best\" Python SOAP library. Each of the mainstream ones available has its own pros and cons.</p>\n\n<p>Older libraries:</p>\n\n<ul>\n<li><p><a href=\"http://soapy.sourceforge.net\" rel=\"noreferrer\">SOAPy</a>: Was the \"best,\" but no longer maintained. Does not work on Python 2.5+</p></li>\n<li><p><a href=\"http://pywebsvcs.sourceforge.net\" rel=\"noreferrer\">ZSI</a>: Very painful to use, and development is slow. Has a module called \"SOAPpy\", which is different than SOAPy (above).</p></li>\n</ul>\n\n<p>\"Newer\" libraries:</p>\n\n<ul>\n<li><p><a href=\"https://fedorahosted.org/suds\" rel=\"noreferrer\">SUDS</a>: Very Pythonic, and easy to create WSDL-consuming SOAP clients. Creating SOAP servers is a little bit more difficult. (This package does not work with Python3. For Python3 see SUDS-py3)</p></li>\n<li><p><a href=\"https://pypi.org/project/suds-py3/\" rel=\"noreferrer\">SUDS-py3</a>: The Python3 version of SUDS</p></li>\n<li><p><a href=\"https://github.com/arskom/spyne\" rel=\"noreferrer\">spyne</a>: Creating servers is easy, creating clients a little bit more challenging. Documentation is somewhat lacking.</p></li>\n<li><p><a href=\"http://pypi.python.org/pypi/ladon\" rel=\"noreferrer\">ladon</a>: Creating servers is much like in soaplib (using a decorator). Ladon exposes more interfaces than SOAP at the same time without extra user code needed.</p></li>\n<li><p><a href=\"http://code.google.com/p/pysimplesoap/\" rel=\"noreferrer\">pysimplesoap</a>: very lightweight but useful for both client and server - includes a web2py server integration that ships with web2py.</p></li>\n<li><a href=\"https://github.com/kiorky/SOAPpy\" rel=\"noreferrer\">SOAPpy</a>: Distinct from the abandoned SOAPpy that's hosted at the ZSI link above, this version was actually maintained until 2011, now it seems to be abandoned too.</li>\n<li><a href=\"http://www.python.org/pypi/soaplib\" rel=\"noreferrer\">soaplib</a>: Easy to use python library for writing and calling soap web services. Webservices written with soaplib are simple, lightweight, work well with other SOAP implementations, and can be deployed as WSGI applications.</li>\n<li><a href=\"https://bitbucket.org/sboz/osa\" rel=\"noreferrer\">osa</a>: A fast/slim easy to use SOAP python client library.</li>\n</ul>\n\n<p>Of the above, I've only used SUDS personally, and I liked it a lot.</p>\n"
    },
    "880": {
        "question_id": "956867",
        "answer_id": "33571117",
        "question": "<p>I'm using <strong>Python 2</strong> to parse JSON from <strong>ASCII encoded</strong> text files. </p>\n\n<p>When loading these files with either <a href=\"https://docs.python.org/2/library/json.html\" rel=\"noreferrer\"><code>json</code></a> or  <a href=\"https://pypi.python.org/pypi/simplejson/\" rel=\"noreferrer\"><code>simplejson</code></a>, all my string values are cast to Unicode objects instead of string objects. The problem is, I have to use the data with some libraries that only accept string objects. I <em>can't change the libraries</em> nor update them.</p>\n\n<p>Is it possible to get string objects instead of Unicode ones?</p>\n\n<h1>Example</h1>\n\n<pre><code>>>> import json\n>>> original_list = ['a', 'b']\n>>> json_list = json.dumps(original_list)\n>>> json_list\n'[\"a\", \"b\"]'\n>>> new_list = json.loads(json_list)\n>>> new_list\n[u'a', u'b']  # I want these to be of type `str`, not `unicode`</code></pre>\n\n<h1>Update</h1>\n\n<p>This question was asked <em>a long time ago</em>, when I was stuck with <strong>Python 2</strong>. One easy and clean solution for today is to use a recent version of Python \u2014 i.e. <strong>Python 3</strong> and forward.</p>\n",
        "answer": "<h3>A solution with <code>object_hook</code></h3>\n\n<pre><code>import json\n\ndef json_load_byteified(file_handle):\n    return _byteify(\n        json.load(file_handle, object_hook=_byteify),\n        ignore_dicts=True\n    )\n\ndef json_loads_byteified(json_text):\n    return _byteify(\n        json.loads(json_text, object_hook=_byteify),\n        ignore_dicts=True\n    )\n\ndef _byteify(data, ignore_dicts = False):\n    # if this is a unicode string, return its string representation\n    if isinstance(data, unicode):\n        return data.encode('utf-8')\n    # if this is a list of values, return list of byteified values\n    if isinstance(data, list):\n        return [ _byteify(item, ignore_dicts=True) for item in data ]\n    # if this is a dictionary, return dictionary of byteified keys and values\n    # but only if we haven't already byteified it\n    if isinstance(data, dict) and not ignore_dicts:\n        return {\n            _byteify(key, ignore_dicts=True): _byteify(value, ignore_dicts=True)\n            for key, value in data.iteritems()\n        }\n    # if it's anything else, return it in its original form\n    return data\n</code></pre>\n\n<p>Example usage:</p>\n\n<pre><code>>>> <b><i>json_loads_byteified('{\"Hello\": \"World\"}')</i></b>\n{'Hello': 'World'}\n>>> <b><i>json_loads_byteified('\"I am a top-level string\"')</i></b>\n'I am a top-level string'\n>>> <b><i>json_loads_byteified('7')</i></b>\n7\n>>> <b><i>json_loads_byteified('[\"I am inside a list\"]')</i></b>\n['I am inside a list']\n>>> <b><i>json_loads_byteified('[[[[[[[[\"I am inside a big nest of lists\"]]]]]]]]')</i></b>\n[[[[[[[['I am inside a big nest of lists']]]]]]]]\n>>> <b><i>json_loads_byteified('{\"foo\": \"bar\", \"things\": [7, {\"qux\": \"baz\", \"moo\": {\"cow\": [\"milk\"]}}]}')</i></b>\n{'things': [7, {'qux': 'baz', 'moo': {'cow': ['milk']}}], 'foo': 'bar'}\n>>> <b><i>json_load_byteified(open('somefile.json'))</i></b>\n{'more json': 'from a file'}</code></pre>\n\n<h3>How does this work and why would I use it?</h3>\n\n<p><a href=\"https://stackoverflow.com/a/13105359/1709587\">Mark Amery's function</a> is shorter and clearer than these ones, so what's the point of them? Why would you want to use them?</p>\n\n<p>Purely for <strong>performance</strong>. Mark's answer decodes the JSON text fully first with unicode strings, then recurses through the entire decoded value to convert all strings to byte strings. This has a couple of undesirable effects:</p>\n\n<ul>\n<li>A copy of the entire decoded structure gets created in memory</li>\n<li>If your JSON object is <em>really</em> deeply nested (500 levels or more) then you'll hit Python's maximum recursion depth</li>\n</ul>\n\n<p>This answer mitigates both of those performance issues by using the <code>object_hook</code> parameter of <code>json.load</code> and <code>json.loads</code>. From <a href=\"https://docs.python.org/2/library/json.html#json.load\" rel=\"noreferrer\">the docs</a>:</p>\n\n<blockquote>\n  <p><code>object_hook</code> is an optional function that will be called with the result of any object literal decoded (a <code>dict</code>). The return value of object_hook will be used instead of the <code>dict</code>. This feature can be used to implement custom decoders</p>\n</blockquote>\n\n<p>Since dictionaries nested many levels deep in other dictionaries get passed to <code>object_hook</code> <em>as they're decoded</em>, we can byteify any strings or lists inside them at that point and avoid the need for deep recursion later.</p>\n\n<p>Mark's answer isn't suitable for use as an <code>object_hook</code> as it stands, because it recurses into nested dictionaries. We prevent that recursion in this answer with the <code>ignore_dicts</code> parameter to <code>_byteify</code>, which gets passed to it at all times <em>except</em> when <code>object_hook</code> passes it a new <code>dict</code> to byteify. The <code>ignore_dicts</code> flag tells <code>_byteify</code> to ignore <code>dict</code>s since they already been byteified.</p>\n\n<p>Finally, our implementations of <code>json_load_byteified</code> and <code>json_loads_byteified</code> call <code>_byteify</code> (with <code>ignore_dicts=True</code>) on the result returned from <code>json.load</code> or <code>json.loads</code> to handle the case where the JSON text being decoded doesn't have a <code>dict</code> at the top level.</p>\n"
    },
    "881": {
        "question_id": "18425379",
        "answer_id": "18425592",
        "question": "<p>I'm running Mountain Lion and the basic default Python version is 2.7. I downloaded Python 3.3 and want to set it as default.</p>\n\n<p>Currently:</p>\n\n<pre><code>$ python\n    version 2.7.5\n$ python3.3\n    version 3.3\n</code></pre>\n\n<p>How do I set it so that every time I run <code>$ python</code> it opens 3.3?</p>\n",
        "answer": "<p>Changing the default python version system wide would break some applications that depend on python2. </p>\n\n<p>You can alias the commands in most shells, Mac OS X uses bash by default, if you also do put this into your <code>~/.bash_profile</code>:</p>\n\n<pre><code>alias python='python3'\n</code></pre>\n\n<p><code>python</code> command now refers to <code>python3</code>. If you want the original python (that refers to <em>python2</em>), you can escape the alias i.e. doing <code>\\python</code> will launch <em>python2</em> leaving the alias untouched)</p>\n\n<p>If you launch interpreters more often <em>(I do)</em>, better is to:</p>\n\n<pre><code>alias 2='python2'\nalias 3='python3'\n</code></pre>\n\n<hr>\n\n<p>Tip: Instead of doing:</p>\n\n<pre><code>#!/usr/bin/env python\n</code></pre>\n\n<p>use:</p>\n\n<pre><code>#!/usr/bin/env python3\n</code></pre>\n\n<p>system will use python3 for running python <strong><em>executables</em></strong>.</p>\n"
    },
    "882": {
        "question_id": "1276764",
        "answer_id": "1277047",
        "question": "<p>What is the best way to strip all non alphanumeric characters from a string, using Python?</p>\n\n<p>The solutions presented in the <a href=\"https://stackoverflow.com/questions/840948\">PHP variant of this question</a> will probably work with some minor adjustments, but don't seem very 'pythonic' to me.</p>\n\n<p>For the record, I don't just want to strip periods and commas  (and other punctuation), but also quotes, brackets, etc.</p>\n",
        "answer": "<p>I just timed some functions out of curiosity.  In these tests I'm removing non-alphanumeric characters from the string <code>string.printable</code> (part of the built-in <code>string</code> module).</p>\n\n<pre><code>$ python -m timeit -s \\\n     \"import string\" \\\n     \"''.join(ch for ch in string.printable if ch.isalnum())\" \n10000 loops, best of 3: 57.6 usec per loop\n\n$ python -m timeit -s \\\n    \"import string\" \\\n    \"filter(str.isalnum, string.printable)\"                 \n10000 loops, best of 3: 37.9 usec per loop\n\n$ python -m timeit -s \\\n    \"import re, string\" \\\n    \"re.sub('[\\W_]', '', string.printable)\"\n10000 loops, best of 3: 27.5 usec per loop\n\n$ python -m timeit -s \\\n    \"import re, string\" \\\n    \"re.sub('[\\W_]+', '', string.printable)\"                \n100000 loops, best of 3: 15 usec per loop\n\n$ python -m timeit -s \\\n    \"import re, string; pattern = re.compile('[\\W_]+')\" \\\n    \"pattern.sub('', string.printable)\" \n100000 loops, best of 3: 11.2 usec per loop\n</code></pre>\n"
    },
    "883": {
        "question_id": "2792650",
        "answer_id": "2792652",
        "question": "<p>Here's my code:</p>\n\n<pre><code>import urllib2.request\n\nresponse = urllib2.urlopen(\"http://www.google.com\")\nhtml = response.read()\nprint(html)\n</code></pre>\n\n<p>Any help?</p>\n",
        "answer": "<p>As stated in the <a href=\"https://docs.python.org/2/library/urllib2.html\" rel=\"noreferrer\"><code>urllib2</code> documentation</a>:</p>\n\n<blockquote>\n  <p>The <code>urllib2</code> module has been split across several modules in Python 3 named <code>urllib.request</code> and <code>urllib.error</code>. The <code>2to3</code> tool will automatically adapt imports when converting your sources to Python 3.</p>\n</blockquote>\n\n<p>So you should instead be saying</p>\n\n<pre><code>from urllib.request import urlopen\nhtml = urlopen(\"http://www.google.com/\")\nprint(html)\n</code></pre>\n\n<p>Your current, now-edited code sample is incorrect because you are saying <code>urllib.urlopen(\"http://www.google.com/\")</code> instead of just <code>urlopen(\"http://www.google.com/\")</code>.</p>\n"
    },
    "884": {
        "question_id": "6783194",
        "answer_id": "6789205",
        "question": "<p>I have a program which interfaces with a radio I am using via a gui I wrote in PyQt.  Obviously one of the main functions of the radio is to transmit data, but to do this continuously, I have to loop the writes, which causes the gui to hang. Since I have never dealt with threading, I tried to get rid of these hangs using <code>QCoreApplication.processEvents().</code> The radio needs to sleep between transmissions, though, so the gui still hangs based on how long these sleeps last.  </p>\n\n<p>Is there a simple way to fix this using QThread?  I have looked for tutorials on how to implement multithreading with PyQt, but most of them deal with setting up servers and are much more advanced than I need them to be.  I honestly don't even really need my thread to update anything while it is running, I just need to start it, have it transmit in the background, and stop it.</p>\n",
        "answer": "<p>I created a little example that shows 3 different and simple ways of dealing with threads. I hope it will help you find the right approach to your problem.</p>\n\n<pre><code>import sys\nimport time\n\nfrom PyQt5.QtCore import (QCoreApplication, QObject, QRunnable, QThread,\n                          QThreadPool, pyqtSignal)\n\n\n# Subclassing QThread\n# http://qt-project.org/doc/latest/qthread.html\nclass AThread(QThread):\n\n    def run(self):\n        count = 0\n        while count &lt; 5:\n            time.sleep(1)\n            print(\"A Increasing\")\n            count += 1\n\n# Subclassing QObject and using moveToThread\n# http://blog.qt.digia.com/blog/2007/07/05/qthreads-no-longer-abstract\nclass SomeObject(QObject):\n\n    finished = pyqtSignal()\n\n    def long_running(self):\n        count = 0\n        while count &lt; 5:\n            time.sleep(1)\n            print(\"B Increasing\")\n            count += 1\n        self.finished.emit()\n\n# Using a QRunnable\n# http://qt-project.org/doc/latest/qthreadpool.html\n# Note that a QRunnable isn't a subclass of QObject and therefore does\n# not provide signals and slots.\nclass Runnable(QRunnable):\n\n    def run(self):\n        count = 0\n        app = QCoreApplication.instance()\n        while count &lt; 5:\n            print(\"C Increasing\")\n            time.sleep(1)\n            count += 1\n        app.quit()\n\n\ndef using_q_thread():\n    app = QCoreApplication([])\n    thread = AThread()\n    thread.finished.connect(app.exit)\n    thread.start()\n    sys.exit(app.exec_())\n\ndef using_move_to_thread():\n    app = QCoreApplication([])\n    objThread = QThread()\n    obj = SomeObject()\n    obj.moveToThread(objThread)\n    obj.finished.connect(objThread.quit)\n    objThread.started.connect(obj.long_running)\n    objThread.finished.connect(app.exit)\n    objThread.start()\n    sys.exit(app.exec_())\n\ndef using_q_runnable():\n    app = QCoreApplication([])\n    runnable = Runnable()\n    QThreadPool.globalInstance().start(runnable)\n    sys.exit(app.exec_())\n\nif __name__ == \"__main__\":\n    #using_q_thread()\n    #using_move_to_thread()\n    using_q_runnable()\n</code></pre>\n"
    },
    "885": {
        "question_id": "10588317",
        "answer_id": "10588342",
        "question": "<p>I know I should avoid using global variables in the first place due to confusion like this, but if I were to use them, is the following a valid way to go about using them? (I am trying to call the global copy of a variable created in a separate function.)</p>\n\n<pre><code>x = somevalue\n\ndef func_A ():\n   global x\n   # Do things to x\n   return x\n\ndef func_B():\n   x=func_A()\n   # Do things\n   return x\n\nfunc_A()\nfunc_B()\n</code></pre>\n\n<p>Does the <code>x</code> that the second function uses have the same value of the global copy of <code>x</code> that <code>func_a</code> uses and modifies? When calling the functions after definition, does order matter?</p>\n",
        "answer": "<p>If you want to simply access a global variable you just use its name. However to <strong>change</strong> its value you need to use the <a href=\"https://docs.python.org/reference/simple_stmts.html#the-global-statement\"><code>global</code></a> keyword.</p>\n\n<p>E.g.</p>\n\n<pre><code>global someVar\nsomeVar = 55\n</code></pre>\n\n<p>This would change the value of the global variable to 55. Otherwise it would just assign 55 to a local variable.</p>\n\n<p>The order of function definition listings doesn't matter (assuming they don't refer to each other in some way), the order they are called does.</p>\n"
    },
    "886": {
        "question_id": "20638006",
        "answer_id": "20638258",
        "question": "<p>I have a list of dictionaries like this:</p>\n\n<pre><code>[{'points': 50, 'time': '5:00', 'year': 2010}, \n{'points': 25, 'time': '6:00', 'month': \"february\"}, \n{'points':90, 'time': '9:00', 'month': 'january'}, \n{'points_h1':20, 'month': 'june'}]\n</code></pre>\n\n<p>And I want to turn this into a pandas <code>DataFrame</code> like this:</p>\n\n<pre><code>      month  points  points_h1  time  year\n0       NaN      50        NaN  5:00  2010\n1  february      25        NaN  6:00   NaN\n2   january      90        NaN  9:00   NaN\n3      june     NaN         20   NaN   NaN\n</code></pre>\n\n<p>Note: Order of the columns does not matter.</p>\n\n<p>How can I turn the list of dictionaries into a pandas DataFrame as shown above?</p>\n",
        "answer": "<p>Supposing <code>d</code> is your list of dicts, simply:</p>\n\n<pre><code>pd.DataFrame(d)\n</code></pre>\n"
    },
    "887": {
        "question_id": "11218477",
        "answer_id": "11218504",
        "question": "<p>I have looked through the information that the <a href=\"https://docs.python.org/3/library/pickle.html\" rel=\"noreferrer\">Python docs</a> give, but I'm still a little confused. Could somebody post sample code that would write a new file then use pickle to dump a dictionary into it?</p>\n",
        "answer": "<p>Try this:</p>\n\n<pre><code>import pickle\n\na = {'hello': 'world'}\n\nwith open('filename.pickle', 'wb') as handle:\n    pickle.dump(a, handle, protocol=pickle.HIGHEST_PROTOCOL)\n\nwith open('filename.pickle', 'rb') as handle:\n    b = pickle.load(handle)\n\nprint a == b\n</code></pre>\n"
    },
    "888": {
        "question_id": "3605680",
        "answer_id": "3605831",
        "question": "<p>What are my options if I want to create a simple XML file in python? (library wise)</p>\n\n<p>The xml I want looks like:</p>\n\n<pre><code>&lt;root&gt;\n &lt;doc&gt;\n     &lt;field1 name=\"blah\"&gt;some value1&lt;/field1&gt;\n     &lt;field2 name=\"asdfasd\"&gt;some vlaue2&lt;/field2&gt;\n &lt;/doc&gt;\n\n&lt;/root&gt;\n</code></pre>\n",
        "answer": "<p>These days, the most popular (and very simple) option is the <a href=\"https://docs.python.org/2/library/xml.etree.elementtree.html\" rel=\"noreferrer\">ElementTree API</a>,\nwhich has been included in the standard library since Python 2.5.</p>\n\n<p>The available options for that are:</p>\n\n<ul>\n<li>ElementTree (Basic, pure-Python implementation of ElementTree.  Part of the standard library since 2.5)</li>\n<li>cElementTree (Optimized C implementation of ElementTree. Also offered in the standard library since 2.5)</li>\n<li>LXML (Based on libxml2. Offers a rich superset of the ElementTree API as well XPath, CSS Selectors, and more)</li>\n</ul>\n\n<p>Here's an example of how to generate your example document using the in-stdlib cElementTree:</p>\n\n<pre><code>import xml.etree.cElementTree as ET\n\nroot = ET.Element(\"root\")\ndoc = ET.SubElement(root, \"doc\")\n\nET.SubElement(doc, \"field1\", name=\"blah\").text = \"some value1\"\nET.SubElement(doc, \"field2\", name=\"asdfasd\").text = \"some vlaue2\"\n\ntree = ET.ElementTree(root)\ntree.write(\"filename.xml\")\n</code></pre>\n\n<p>I've tested it and it works, but I'm assuming whitespace isn't significant. If you need \"prettyprint\" indentation, let me know and I'll look up how to do that. (It may be an LXML-specific option. I don't use the stdlib implementation much)</p>\n\n<p>For further reading, here are some useful links:</p>\n\n<ul>\n<li><a href=\"http://docs.python.org/library/xml.etree.elementtree.html\" rel=\"noreferrer\">API docs for the implementation in the Python standard library</a></li>\n<li><a href=\"http://effbot.org/zone/element-index.htm\" rel=\"noreferrer\">Introductory Tutorial</a> (From the original author's site)</li>\n<li><a href=\"http://lxml.de/tutorial.html\" rel=\"noreferrer\">LXML etree tutorial</a>. (With example code for loading the best available option from all major ElementTree implementations)</li>\n</ul>\n\n<p>As a final note, either cElementTree or LXML should be fast enough for all your needs (both are optimized C code), but in the event you're in a situation where you need to squeeze out every last bit of performance, the benchmarks on the LXML site indicate that:</p>\n\n<ul>\n<li>LXML clearly wins for serializing (generating) XML</li>\n<li>As a side-effect of implementing proper parent traversal, LXML is a bit slower than cElementTree for parsing.</li>\n</ul>\n"
    },
    "889": {
        "question_id": "41570359",
        "answer_id": "44433442",
        "question": "<p>I'm trying to convert a fairly simple Python program to an executable and couldn't find what I was looking for, so I have a few questions (I'm running Python3.6):</p>\n\n<p>The methods of doing this that I have found so far are as follows</p>\n\n<ol>\n<li>downloading an old version of Python and using <code>pyinstaller/py2exe</code> </li>\n<li>setting up a virtual environment in 3.6 that will allow me to do 1. </li>\n<li>downloading a Python to C++ converter and using that.</li>\n</ol>\n\n<p>Here is what I've tried/what problems I've run into. </p>\n\n<ul>\n<li>I installed <code>pyinstaller</code> before the required download before it (pypi-something) so it did not work. After downloading the prerequisite file, <code>pyinstaller</code> still does not recognize it. </li>\n<li>If I'm setting up a virtualenv in 2.7, do I actually need to have 2.7 installed? </li>\n<li>similarly, the only python to C++ converters I see work only up until python 3.5 - do I need to download and use this version if attempting this?</li>\n</ul>\n",
        "answer": "<p><strong>Steps to convert .py to .exe in Python 3.6</strong></p>\n\n<ol>\n<li>Install <a href=\"https://www.python.org/downloads/\" rel=\"noreferrer\" title=\"Python\">Python 3.6</a>.</li>\n<li>Install cx_Freeze, (open your command prompt and type <code>pip install cx_Freeze</code>.</li>\n<li>Install idna, (open your command prompt and type <code>pip install idna</code>.</li>\n<li>Write a <code>.py</code> program named <code>myfirstprog.py</code>.</li>\n<li>Create a new python file named <code>setup.py</code> on the current directory of your script.</li>\n<li>In the <code>setup.py</code> file, copy the code below and save it.</li>\n<li>With shift pressed right click on the same directory, so you are able to open a command prompt window.</li>\n<li>In the prompt, type <code>python setup.py build</code></li>\n<li>If your script is error free, then there will be no problem on creating application. </li>\n<li>Check the newly created folder <code>build</code>. It has another folder in it. Within that folder you can find your application. Run it. Make yourself happy.</li>\n</ol>\n\n<p>See the original script in my <a href=\"https://regilanj.wordpress.com/2017/06/07/py-to-exe-in-python-3-6-1/\" rel=\"noreferrer\">blog</a>.</p>\n\n<p><strong>setup.py:</strong></p>\n\n<pre class=\"lang-py prettyprint-override\"><code>from cx_Freeze import setup, Executable\n\nbase = None    \n\nexecutables = [Executable(\"myfirstprog.py\", base=base)]\n\npackages = [\"idna\"]\noptions = {\n    'build_exe': {    \n        'packages':packages,\n    },    \n}\n\nsetup(\n    name = \"&lt;any name&gt;\",\n    options = options,\n    version = \"&lt;any number&gt;\",\n    description = '&lt;any description&gt;',\n    executables = executables\n)\n</code></pre>\n\n<p>EDIT:</p>\n\n<ul>\n<li>be sure that instead of <code>myfirstprog.py</code> you should put your <code>.py</code>extension file name as created in <strong>step 4</strong>;</li>\n<li>you should include each <code>import</code>ed package in your <code>.py</code> into <code>packages</code> list (ex: <code>packages = [\"idna\", \"os\",\"sys\"]</code>)</li>\n<li><code>any name, any number, any description</code> in <code>setup.py</code> file should not remain the same, you should change it accordingly (ex:<code>name = \"&lt;first_ever&gt;\", version = \"0.11\", description = ''</code> )</li>\n<li>the <code>import</code>ed packages must be installed before you start <strong>step 8</strong>.</li>\n</ul>\n"
    },
    "890": {
        "question_id": "7974849",
        "answer_id": "7975511",
        "question": "<p>How can I make one python file to run another?  </p>\n\n<p>For example I have two <em>.py files</em>.  I want one file to be run, and then have it run the other <em>.py file</em>.</p>\n",
        "answer": "<p>There are more than a few ways. I'll list them in order of inverted preference (<em>i.e.</em>, best first, worst last):</p>\n\n<ol>\n<li><strong>Treat it like a module:</strong> <code>import file</code>. This is good because it's secure, fast, and maintainable. Code gets reused as it's supposed to be done. Most Python libraries run using multiple methods stretched over lots of files. Highly recommended. Note that if your file is called <code>file.py</code>, your <code>import</code> should <em>not</em> include the <code>.py</code> extension at the end.</li>\n<li><strong>The infamous (and unsafe) <a href=\"http://docs.python.org/library/functions.html#exec\" rel=\"noreferrer\">exec</a> command:</strong> <code>execfile('file.py')</code>. Insecure, hacky, usually the wrong answer. Avoid where possible.</li>\n<li><strong>Spawn a shell process:</strong> <code>os.system('python file.py')</code>. Use when desperate.</li>\n</ol>\n"
    },
    "891": {
        "question_id": "6181935",
        "answer_id": "6181978",
        "question": "<p>For example purposes...</p>\n\n<pre><code>for x in range(0,9):\n    string'x' = \"Hello\"\n</code></pre>\n\n<p>So I end up with string1, string2, string3... all equaling \"Hello\"</p>\n",
        "answer": "<p>Sure you can; its called a <a href=\"http://docs.python.org/tutorial/datastructures.html#dictionaries\" rel=\"noreferrer\">dictionary</a>:</p>\n\n<pre><code>d={}\nfor x in range(1,10):\n        d[\"string{0}\".format(x)]=\"Hello\"\n\nIn [7]: d[\"string5\"]\nOut[7]: 'Hello'\n\nIn [8]: d\nOut[8]: \n{'string1': 'Hello',\n 'string2': 'Hello',\n 'string3': 'Hello',\n 'string4': 'Hello',\n 'string5': 'Hello',\n 'string6': 'Hello',\n 'string7': 'Hello',\n 'string8': 'Hello',\n 'string9': 'Hello'}\n</code></pre>\n\n<p>I said this somewhat tongue in check, but really the best way to associate one value with another value is a dictionary. That is what it was designed for!    </p>\n"
    },
    "892": {
        "question_id": "7969949",
        "answer_id": "7969953",
        "question": "<p>What is the difference between <code>globals()</code>, <code>locals()</code>, and <code>vars()</code>?  What do they return?  Are updates to the results useful?</p>\n",
        "answer": "<p>Each of these return a dictionary:</p>\n\n<ul>\n<li><code>globals()</code> <em>always</em> returns the dictionary of the <em>module</em> namespace</li>\n<li><code>locals()</code> <em>always</em> returns <em>a</em> dictionary of the <em>current</em> namespace</li>\n<li><code>vars()</code> returns <em>either a</em> dictionary of the current namespace (if called with no argument) or <em>the</em> dictionary of the argument.</li>\n</ul>\n\n<p><code>locals</code> and <code>vars</code> could use some more explanation.  if <code>locals()</code> is called inside a function it constructs a dictionary of the function namespace as of that moment and returns it -- any further name assignments are <em>not</em> reflected in the returned dictionary, and any assignments <em>to</em> the dictionary are <em>not</em> reflected in the actual local namespace:</p>\n\n<pre><code>def test():\n    a = 1\n    b = 2\n    huh = locals()\n    c = 3\n    print(huh)\n    huh['d'] = 4\n    print(d)\n</code></pre>\n\n<p>gives us:</p>\n\n<pre><code>{'a': 1, 'b': 2}\nTraceback (most recent call last):\n  File \"test.py\", line 30, in &lt;module&gt;\n    test()\n  File \"test.py\", line 26, in test\n    print(d)\nNameError: global name 'd' is not defined\n</code></pre>\n\n<p>Two notes:</p>\n\n<ol>\n<li>This behavior is CPython specific -- other Pythons may allow the updates to make it back to the local namespace</li>\n<li>In CPython 2.x it is possible to make this work by putting an <code>exec \"pass\"</code> line in the function.</li>\n</ol>\n\n<p>If <code>locals()</code> is called <em>outside</em> a function it returns the actual dictionary that is the current namespace.  Further changes to the namespace <em>are</em> reflected in the dictionary, and changes to the dictionary <em>are</em> reflected in the namespace:</p>\n\n<pre><code>class Test(object):\n    a = 'one'\n    b = 'two'\n    huh = locals()\n    c = 'three'\n    huh['d'] = 'four'\n    print huh\n</code></pre>\n\n<p>gives us:</p>\n\n<pre><code>{\n  'a': 'one',\n  'b': 'two',\n  'c': 'three',\n  'd': 'four',\n  'huh': {...},\n  '__module__': '__main__',\n}\n</code></pre>\n\n<p>So far, everything I've said about <code>locals()</code> is also true for <code>vars()</code>... here's the difference:  <code>vars()</code> accepts a single object as its argument, and if you give it an object it returns the <code>__dict__</code> of that object.  If that object was <em>not</em> a function the <code>__dict__</code> returned is that object's namespace:</p>\n\n<pre><code>class Test(object):\n    a = 'one'\n    b = 'two'\n    def frobber(self):\n        print self.c\nt = Test()\nhuh = vars(t)\nhuh['c'] = 'three'\nt.frobber()\n</code></pre>\n\n<p>which gives us:</p>\n\n<pre><code>three\n</code></pre>\n\n<p>If the object <em>was</em> a function, you still get its <code>__dict__</code>, but unless you're doing fun and interesting stuff its probably not very useful:</p>\n\n<pre><code>def test():\n    a = 1\n    b = 2\n    print test.c\nhuh = vars(test)       # these two lines are the same as 'test.c = 3'\nhuh['c'] = 3\ntest()\n</code></pre>\n\n<p>which gives us:</p>\n\n<pre><code>3\n</code></pre>\n"
    },
    "893": {
        "question_id": "3295938",
        "answer_id": "3295949",
        "question": "<p>I've noticed the following code is legal in Python. My question is why? Is there a specific reason?</p>\n\n<pre><code>n = 5\nwhile n != 0:\n    print n\n    n -= 1\nelse:\n    print \"what the...\"\n</code></pre>\n",
        "answer": "<p>The <code>else</code> clause is only executed when your <code>while</code> condition becomes false.  If you <code>break</code> out of the loop, or if an exception is raised, it won't be executed.  </p>\n\n<p>One way to think about it is as an if/else construct with respect to the condition:</p>\n\n<pre><code>if condition:\n    handle_true()\nelse:\n    handle_false()\n</code></pre>\n\n<p>is analogous to the looping construct:</p>\n\n<pre><code>while condition:\n    handle_true()\nelse:\n    # condition is false now, handle and go on with the rest of the program\n    handle_false()\n</code></pre>\n\n<p>An example might be along the lines of:</p>\n\n<pre><code>while value &lt; threshold:\n    if not process_acceptable_value(value):\n        # something went wrong, exit the loop; don't pass go, don't collect 200\n        break\n    value = update(value)\nelse:\n    # value &gt;= threshold; pass go, collect 200\n    handle_threshold_reached()\n</code></pre>\n"
    },
    "894": {
        "question_id": "3862310",
        "answer_id": "3862957",
        "question": "<p>I need a working approach of getting all classes that are inherited from a base class in Python.</p>\n",
        "answer": "<p>New-style classes (i.e. subclassed from <code>object</code>, which is the default in Python 3) have a <code>__subclasses__</code> method which returns the subclasses:</p>\n\n<pre><code>class Foo(object): pass\nclass Bar(Foo): pass\nclass Baz(Foo): pass\nclass Bing(Bar): pass\n</code></pre>\n\n<p>Here are the names of the subclasses:</p>\n\n<pre><code>print([cls.__name__ for cls in Foo.__subclasses__()])\n# ['Bar', 'Baz']\n</code></pre>\n\n<p>Here are the subclasses themselves:</p>\n\n<pre><code>print(Foo.__subclasses__())\n# [&lt;class '__main__.Bar'&gt;, &lt;class '__main__.Baz'&gt;]\n</code></pre>\n\n<p>Confirmation that the subclasses do indeed list <code>Foo</code> as their base:</p>\n\n<pre><code>for cls in Foo.__subclasses__():\n    print(cls.__base__)\n# &lt;class '__main__.Foo'&gt;\n# &lt;class '__main__.Foo'&gt;\n</code></pre>\n\n<p>Note if you want subsubclasses, you'll have to recurse:</p>\n\n<pre><code>def all_subclasses(cls):\n    return set(cls.__subclasses__()).union(\n        [s for c in cls.__subclasses__() for s in all_subclasses(c)])\n\nprint(all_subclasses(Foo))\n# {&lt;class '__main__.Bar'&gt;, &lt;class '__main__.Baz'&gt;, &lt;class '__main__.Bing'&gt;}\n</code></pre>\n\n<p>Note that if the class definition of a subclass hasn't been executed yet - for example, if the subclass's module hasn't been imported yet - then that subclass doesn't exist yet, and <code>__subclasses__</code> won't find it.</p>\n\n<hr>\n\n<p>You mentioned \"given its name\". Since Python classes are first-class objects, you don't need to use a string with the class's name in place of the class or anything like that. You can just use the class directly, and you probably should.</p>\n\n<p>If you do have a string representing the name of a class and you want to find that class's subclasses, then there are two steps: find the class given its name, and then find the subclasses with <code>__subclasses__</code> as above.</p>\n\n<p>How to find the class from the name depends on where you're expecting to find it. If you're expecting to find it in the same module as the code that's trying to locate the class, then</p>\n\n<pre><code>cls = globals()[name]\n</code></pre>\n\n<p>would do the job, or in the unlikely case that you're expecting to find it in locals,</p>\n\n<pre><code>cls = locals()[name]\n</code></pre>\n\n<p>If the class could be in any module, then your name string should contain the fully-qualified name - something like <code>'pkg.module.Foo'</code> instead of just <code>'Foo'</code>. Use <code>importlib</code> to load the class's module, then retrieve the corresponding attribute:</p>\n\n<pre><code>import importlib\nmodname, _, clsname = name.rpartition('.')\nmod = importlib.import_module(modname)\ncls = getattr(mod, clsname)\n</code></pre>\n\n<p>However you find the class, <code>cls.__subclasses__()</code> would then return a list of its subclasses.</p>\n"
    },
    "895": {
        "question_id": "17841149",
        "answer_id": "17841294",
        "question": "<p>I have a dataframe like this:</p>\n\n<pre><code>   A         B       C\n0  1  0.749065    This\n1  2  0.301084      is\n2  3  0.463468       a\n3  4  0.643961  random\n4  1  0.866521  string\n5  2  0.120737       !\n</code></pre>\n\n<p>Calling </p>\n\n<pre><code>In [10]: print df.groupby(\"A\")[\"B\"].sum()\n</code></pre>\n\n<p>will return </p>\n\n<pre><code>A\n1    1.615586\n2    0.421821\n3    0.463468\n4    0.643961\n</code></pre>\n\n<p>Now I would like to do \"the same\" for column \"C\". Because that column contains strings, sum() doesn't work (although you might think that it would concatenate the strings). What I would really like to see is a list or set of the strings for each group, i.e. </p>\n\n<pre><code>A\n1    {This, string}\n2    {is, !}\n3    {a}\n4    {random}\n</code></pre>\n\n<p>I have been trying to find ways to do this. </p>\n\n<p>Series.unique() (<a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.unique.html\" rel=\"noreferrer\">http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.unique.html</a>) doesn't work, although</p>\n\n<pre><code>df.groupby(\"A\")[\"B\"]\n</code></pre>\n\n<p>is a</p>\n\n<pre><code>pandas.core.groupby.SeriesGroupBy object\n</code></pre>\n\n<p>so I was hoping any Series method would work. Any ideas?</p>\n",
        "answer": "<pre><code>In [4]: df = read_csv(StringIO(data),sep='\\s+')\n\nIn [5]: df\nOut[5]: \n   A         B       C\n0  1  0.749065    This\n1  2  0.301084      is\n2  3  0.463468       a\n3  4  0.643961  random\n4  1  0.866521  string\n5  2  0.120737       !\n\nIn [6]: df.dtypes\nOut[6]: \nA      int64\nB    float64\nC     object\ndtype: object\n</code></pre>\n\n<p>When you apply your own function, there is not automatic exclusions of non-numeric columns. This is slower, though, than the application of <code>.sum()</code> to the <code>groupby</code></p>\n\n<pre><code>In [8]: df.groupby('A').apply(lambda x: x.sum())\nOut[8]: \n   A         B           C\nA                         \n1  2  1.615586  Thisstring\n2  4  0.421821         is!\n3  3  0.463468           a\n4  4  0.643961      random\n</code></pre>\n\n<p><code>sum</code> by default concatenates</p>\n\n<pre><code>In [9]: df.groupby('A')['C'].apply(lambda x: x.sum())\nOut[9]: \nA\n1    Thisstring\n2           is!\n3             a\n4        random\ndtype: object\n</code></pre>\n\n<p>You can do pretty much what you want</p>\n\n<pre><code>In [11]: df.groupby('A')['C'].apply(lambda x: \"{%s}\" % ', '.join(x))\nOut[11]: \nA\n1    {This, string}\n2           {is, !}\n3               {a}\n4          {random}\ndtype: object\n</code></pre>\n\n<p>Doing this a whole frame group at a time. Key is to return a <code>Series</code></p>\n\n<pre><code>def f(x):\n     return Series(dict(A = x['A'].sum(), \n                        B = x['B'].sum(), \n                        C = \"{%s}\" % ', '.join(x['C'])))\n\nIn [14]: df.groupby('A').apply(f)\nOut[14]: \n   A         B               C\nA                             \n1  2  1.615586  {This, string}\n2  4  0.421821         {is, !}\n3  3  0.463468             {a}\n4  4  0.643961        {random}\n</code></pre>\n"
    },
    "896": {
        "question_id": "9427163",
        "answer_id": "9427216",
        "question": "<p>I have a list of dicts, and I'd like to remove the dicts with identical key and value pairs.</p>\n\n<p>For this list: <code>[{'a': 123}, {'b': 123}, {'a': 123}]</code></p>\n\n<p>I'd like to return this: <code>[{'a': 123}, {'b': 123}]</code></p>\n\n<p>Another example:</p>\n\n<p>For this list: <code>[{'a': 123, 'b': 1234}, {'a': 3222, 'b': 1234}, {'a': 123, 'b': 1234}]</code></p>\n\n<p>I'd like to return this: <code>[{'a': 123, 'b': 1234}, {'a': 3222, 'b': 1234}]</code></p>\n",
        "answer": "<p>Try this:</p>\n\n<pre><code>[dict(t) for t in {tuple(d.items()) for d in l}]\n</code></pre>\n\n<p>The strategy is to convert the list of dictionaries to a list of tuples where the tuples contain the items of the dictionary. Since the tuples can be hashed, you can remove duplicates using <code>set</code> (using a <em>set comprehension</em> here, older python alternative would be <code>set(tuple(d.items()) for d in l)</code>) and, after that, re-create the dictionaries from tuples with <code>dict</code>.</p>\n\n<p>where:</p>\n\n<ul>\n<li><code>l</code> is the original list</li>\n<li><code>d</code> is one of the dictionaries in the list</li>\n<li><code>t</code> is one of the tuples created from a dictionary</li>\n</ul>\n\n<p>Edit: If you want to preserve ordering, the one-liner above won't work since <code>set</code> won't do that. However, with a few lines of code, you can also do that:</p>\n\n<pre><code>l = [{'a': 123, 'b': 1234},\n        {'a': 3222, 'b': 1234},\n        {'a': 123, 'b': 1234}]\n\nseen = set()\nnew_l = []\nfor d in l:\n    t = tuple(d.items())\n    if t not in seen:\n        seen.add(t)\n        new_l.append(d)\n\nprint new_l\n</code></pre>\n\n<p>Example output:</p>\n\n<pre><code>[{'a': 123, 'b': 1234}, {'a': 3222, 'b': 1234}]\n</code></pre>\n\n<p>Note: As pointed out by @alexis it might happen that two dictionaries with the same keys and values, don't result in the same tuple. That could happen if they go through a different adding/removing keys history. If that's the case for your problem, then consider sorting <code>d.items()</code> as he suggests.</p>\n"
    },
    "897": {
        "question_id": "366682",
        "answer_id": "366763",
        "question": "<p>There is a socket related function call in my code, that function is from another module thus out of my control, the problem is that it blocks for hours occasionally, which is totally unacceptable, How can I limit the function execution time from my code? I guess the solution must utilize another thread.</p>\n",
        "answer": "<p>I'm not sure how cross-platform this might be, but using signals and alarm might be a good way of looking at this.  With a little work you could make this completely generic as well and usable in any situation.</p>\n\n<p><a href=\"http://docs.python.org/library/signal.html\" rel=\"noreferrer\">http://docs.python.org/library/signal.html</a></p>\n\n<p>So your code is going to look something like this.</p>\n\n<pre><code>import signal\n\ndef signal_handler(signum, frame):\n    raise Exception(\"Timed out!\")\n\nsignal.signal(signal.SIGALRM, signal_handler)\nsignal.alarm(10)   # Ten seconds\ntry:\n    long_function_call()\nexcept Exception, msg:\n    print \"Timed out!\"\n</code></pre>\n"
    },
    "898": {
        "question_id": "11556958",
        "answer_id": "11566296",
        "question": "<p>I have the code below in my Python script:</p>\n\n<pre><code>def cmd_wui(argv, path_to_tx):\n    \"\"\"Run a web UI.\"\"\"\n    from flask import Flask, flash, jsonify, render_template, request\n    import webbrowser\n    app = Flask(__name__)\n\n\n    @app.route('/tx/index/')\n    def index():\n        \"\"\"Load start page where you select your project folder\n        or load history projects from local DB.\"\"\"\n        from txclib import get_version\n        txc_version = get_version()\n        prj = project.Project(path_to_tx)\n\n        # Let's create a resource list from our config file\n        res_list = []\n        prev_proj = ''\n        for idx, res in enumerate(prj.get_resource_list()):\n                hostname = prj.get_resource_host(res)\n        username, password = prj.getset_host_credentials(hostname)\n        return render_template('init.html', txc_version=txc_version, username=username)\n</code></pre>\n\n<p>Also, I have an HTML form in init.html:</p>\n\n<pre><code>&lt;form&gt;\n&lt;input type=\"text\" id=\"projectFilepath\" size=\"40\" placeholder=\"Spot your project files\"&gt;\n&lt;input type=\"button\" id=\"spotButton\" value=\"Spot\"&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>How can I pass the user input from \"projectFilepath\" when a user clicks \"spotButton\" on a variable in my python script?</p>\n\n<p>I'm new in Python and Flask, so forgive me if I make any mistakes.</p>\n",
        "answer": "<p>The <code>form</code> tag needs two attributes set:</p>\n\n<ol>\n<li><code>action</code>: The URL that the form data is sent to on submit. Generate it with <code>url_for</code>. It can be omitted if the same URL handles showing the form and processing the data.</li>\n<li><code>method</code>: Whether to submit the data as a query string (GET) or form data (POST).</li>\n</ol>\n\n<p>Add a view to handle the form data:</p>\n\n<pre><code>@app.route('/handle_data', methods=['POST'])\ndef handle_data():\n    projectpath = request.form['projectFilepath']\n    # your code\n    # return a response\n</code></pre>\n\n<p>Set the form's <code>action</code> to that view's URL:\n</p>\n\n<pre><code>&lt;form action=\"{{ url_for('handle_data') }}\" method=\"post\"&gt;\n    &lt;input type=\"text\" name=\"projectFilepath\"&gt;\n    &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n"
    },
    "899": {
        "question_id": "835092",
        "answer_id": "835430",
        "question": "<p>It looks like the lists returned by <code>keys()</code> and <code>values()</code> methods of a dictionary are always a 1-to-1 mapping (assuming the dictionary is not altered between calling the 2 methods).</p>\n\n<p>For example:</p>\n\n<pre><code>&gt;&gt;&gt; d = {'one':1, 'two': 2, 'three': 3}\n&gt;&gt;&gt; k, v = d.keys(), d.values()\n&gt;&gt;&gt; for i in range(len(k)):\n    print d[k[i]] == v[i]\n\nTrue\nTrue\nTrue\n</code></pre>\n\n<p>If you do not alter the dictionary between calling <code>keys()</code> and calling <code>values()</code>, is it wrong to assume the above for-loop will always print True?  I could not find any documentation confirming this.</p>\n",
        "answer": "<p>Found this:</p>\n\n<blockquote>\n  <p>If <code>items()</code>, <code>keys()</code>, <code>values()</code>,\n  <code>iteritems()</code>, <code>iterkeys()</code>, and\n  <code>itervalues()</code> are called with no\n  intervening modifications to the\n  dictionary, the lists will directly\n  correspond.</p>\n</blockquote>\n\n<p>On <a href=\"https://docs.python.org/2/library/stdtypes.html#dict.items\" rel=\"noreferrer\">2.x documentation</a> and <a href=\"https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects\" rel=\"noreferrer\">3.x documentation</a>.</p>\n"
    },
    "900": {
        "question_id": "13636848",
        "answer_id": "13680953",
        "question": "<p>I have two DataFrames which I want to merge based on a column. However, due to alternate spellings, different number of spaces, absence/presence of diacritical marks, I would like to be able to merge as long as they are similar to one another.</p>\n\n<p>Any similarity algorithm will do (soundex, Levenshtein, difflib's). </p>\n\n<p>Say one DataFrame has the following data:</p>\n\n<pre><code>df1 = DataFrame([[1],[2],[3],[4],[5]], index=['one','two','three','four','five'], columns=['number'])\n\n       number\none         1\ntwo         2\nthree       3\nfour        4\nfive        5\n\ndf2 = DataFrame([['a'],['b'],['c'],['d'],['e']], index=['one','too','three','fours','five'], columns=['letter'])\n\n      letter\none        a\ntoo        b\nthree      c\nfours      d\nfive       e\n</code></pre>\n\n<p>Then I want to get the resulting DataFrame</p>\n\n<pre><code>       number letter\none         1      a\ntwo         2      b\nthree       3      c\nfour        4      d\nfive        5      e\n</code></pre>\n",
        "answer": "<p>Similar to @locojay suggestion, you can apply <a href=\"http://docs.python.org/2/library/difflib.html\" rel=\"noreferrer\"><code>difflib</code></a>'s <a href=\"http://docs.python.org/2/library/difflib.html#difflib.get_close_matches\" rel=\"noreferrer\"><code>get_close_matches</code></a> to <code>df2</code>'s index and then apply a <a href=\"http://pandas.pydata.org/pandas-docs/dev/merging.html#joining-on-index\" rel=\"noreferrer\"><code>join</code></a>:</p>\n\n<pre><code>In [23]: import difflib \n\nIn [24]: difflib.get_close_matches\nOut[24]: &lt;function difflib.get_close_matches&gt;\n\nIn [25]: df2.index = df2.index.map(lambda x: difflib.get_close_matches(x, df1.index)[0])\n\nIn [26]: df2\nOut[26]: \n      letter\none        a\ntwo        b\nthree      c\nfour       d\nfive       e\n\nIn [31]: df1.join(df2)\nOut[31]: \n       number letter\none         1      a\ntwo         2      b\nthree       3      c\nfour        4      d\nfive        5      e\n</code></pre>\n\n<p>.</p>\n\n<p>If these were columns, in the same vein you could apply to the column then <a href=\"http://pandas.pydata.org/pandas-docs/dev/merging.html#database-style-dataframe-joining-merging\" rel=\"noreferrer\"><code>merge</code></a>:</p>\n\n<pre><code>df1 = DataFrame([[1,'one'],[2,'two'],[3,'three'],[4,'four'],[5,'five']], columns=['number', 'name'])\ndf2 = DataFrame([['a','one'],['b','too'],['c','three'],['d','fours'],['e','five']], columns=['letter', 'name'])\n\ndf2['name'] = df2['name'].apply(lambda x: difflib.get_close_matches(x, df1['name'])[0])\ndf1.merge(df2)\n</code></pre>\n"
    },
    "901": {
        "question_id": "6022764",
        "answer_id": "6022811",
        "question": "<p>I'm iterating over a list of elements in Python, do some action on it, and then remove them if they meet certain criteria.</p>\n\n<pre><code>for element in somelist:\n    do_action(element)\n    if check(element):\n        remove_element_from_list\n</code></pre>\n\n<p>What should I use in place of remove_element?\nI have seen similar questions asked, but notice the presence of the do_action part that is to be executed for all elements and thus eliminates the solution of using filters.</p>\n",
        "answer": "<p>You could always iterate over a copy of the list, leaving you free to modify the original:</p>\n\n<pre><code>for item in list(somelist):\n  ...\n  somelist.remove(item)\n</code></pre>\n"
    },
    "902": {
        "question_id": "38231591",
        "answer_id": "38231651",
        "question": "<p>I have data saved in a postgreSQL database. I am querying this data using Python2.7 and turning it into a Pandas DataFrame. However, the last column of this dataframe has a dictionary (or list?) of values within it. The DataFrame looks like this:</p>\n\n<pre><code>[1] df\nStation ID     Pollutants\n8809           {\"a\": \"46\", \"b\": \"3\", \"c\": \"12\"}\n8810           {\"a\": \"36\", \"b\": \"5\", \"c\": \"8\"}\n8811           {\"b\": \"2\", \"c\": \"7\"}\n8812           {\"c\": \"11\"}\n8813           {\"a\": \"82\", \"c\": \"15\"}\n</code></pre>\n\n<p>I need to split this column into separate columns so that the DataFrame looks like this:</p>\n\n<pre><code>[2] df2\nStation ID     a      b       c\n8809           46     3       12\n8810           36     5       8\n8811           NaN    2       7\n8812           NaN    NaN     11\n8813           82     NaN     15\n</code></pre>\n\n<p>The major issue I'm having is that the lists are not the same lengths. But all of the lists only contain up to the same 3 values: a, b, and c. And they always appear in the same order (a first, b second, c third). </p>\n\n<p>The following code USED to work and return exactly what I wanted (df2). </p>\n\n<pre><code>[3] df \n[4] objs = [df, pandas.DataFrame(df['Pollutant Levels'].tolist()).iloc[:, :3]]\n[5] df2 = pandas.concat(objs, axis=1).drop('Pollutant Levels', axis=1)\n[6] print(df2)\n</code></pre>\n\n<p>I was running this code just last week and it was working fine. But now my code is broken and I get this error from line [4]: </p>\n\n<pre><code>IndexError: out-of-bounds on slice (end) \n</code></pre>\n\n<p>I made no changes to the code but am now getting the error. I feel this is due to my method not being robust or proper. </p>\n\n<p>Any suggestions or guidance on how to split this column of lists into separate columns would be super appreciated!</p>\n\n<p>EDIT: I think the .tolist() and .apply methods are not working on my code because it is one unicode string, i.e.:</p>\n\n<pre><code>#My data format \nu{'a': '1', 'b': '2', 'c': '3'}\n\n#and not\n{u'a': '1', u'b': '2', u'c': '3'}\n</code></pre>\n\n<p>The data is importing from the postgreSQL database in this format. Any help or ideas with this issue? is there a way to convert the unicode? </p>\n",
        "answer": "<p>To convert the string to an actual dict, you can do <code>df['Pollutant Levels'].map(eval)</code>. Afterwards, the solution below can be used to convert the dict to different columns.</p>\n\n<hr>\n\n<p>Using a small example, you can use <code>.apply(pd.Series)</code>:</p>\n\n<pre><code>In [2]: df = pd.DataFrame({'a':[1,2,3], 'b':[{'c':1}, {'d':3}, {'c':5, 'd':6}]})\n\nIn [3]: df\nOut[3]:\n   a                   b\n0  1           {u'c': 1}\n1  2           {u'd': 3}\n2  3  {u'c': 5, u'd': 6}\n\nIn [4]: df['b'].apply(pd.Series)\nOut[4]:\n     c    d\n0  1.0  NaN\n1  NaN  3.0\n2  5.0  6.0\n</code></pre>\n\n<p>To combine it with the rest of the dataframe, you can <code>concat</code> the other columns with the above result:</p>\n\n<pre><code>In [7]: pd.concat([df.drop(['b'], axis=1), df['b'].apply(pd.Series)], axis=1)\nOut[7]:\n   a    c    d\n0  1  1.0  NaN\n1  2  NaN  3.0\n2  3  5.0  6.0\n</code></pre>\n\n<hr>\n\n<p>Using your code, this also works if I leave out the <code>iloc</code> part:</p>\n\n<pre><code>In [15]: pd.concat([df.drop('b', axis=1), pd.DataFrame(df['b'].tolist())], axis=1)\nOut[15]:\n   a    c    d\n0  1  1.0  NaN\n1  2  NaN  3.0\n2  3  5.0  6.0\n</code></pre>\n"
    },
    "903": {
        "question_id": "7992559",
        "answer_id": "7992643",
        "question": "<p>In the case of a single element tuple, the trailing comma is required.</p>\n\n<pre><code>a = ('foo',)\n</code></pre>\n\n<p>What about a tuple with multiple elements? It seems that whether the trailing comma exists or not, they are both valid. Is this correct? Having a trailing comma is easier for editing in my opinion. Is that a bad coding style?</p>\n\n<pre><code>a = ('foo1', 'foo2')\nb = ('foo1', 'foo2',)\n</code></pre>\n",
        "answer": "<p>In all cases except the empty tuple the comma is the important thing. Parentheses are only required when required for other syntactic reasons: to distinguish a tuple from a set of function arguments, operator precedence, or to allow line breaks.</p>\n\n<p>The trailing comma for tuples, lists, or function arguments is good style especially when you have a long initialisation that is split over multiple lines. If you always include a trailing comma then you won't add another line to the end expecting to add another element and instead just creating a valid expression:</p>\n\n<pre><code>a = [\n   \"a\",\n   \"b\"\n   \"c\"\n]\n</code></pre>\n\n<p>Assuming that started as a 2 element list that was later extended it has gone wrong in a perhaps not immediately obvious way. Always include the trailing comma and you avoid that trap.</p>\n"
    },
    "904": {
        "question_id": "21047524",
        "answer_id": "21047622",
        "question": "<pre><code>In [55]: a = 5\n\nIn [56]: b = 6\n\nIn [57]: (a, b) = (b, a)\n\nIn [58]: a\nOut[58]: 6\n\nIn [59]: b\nOut[59]: 5\n</code></pre>\n\n<p>How does this swapping of values of a and b work internally? Its definitely not using a temp variable.</p>\n",
        "answer": "<p>Python separates the right-hand side expression from the left-hand side assignment. First the right-hand side is evaluated, and the result is stored on the stack, and then the left-hand side names are assigned using opcodes that take values <em>from</em> the stack again.</p>\n\n<p>For tuple assignments with 2 or 3 items, Python just uses the stack directly:</p>\n\n<pre><code>&gt;&gt;&gt; import dis\n&gt;&gt;&gt; def foo(a, b):\n...     a, b = b, a\n... \n&gt;&gt;&gt; dis.dis(foo)\n  2           0 LOAD_FAST                1 (b)\n              3 LOAD_FAST                0 (a)\n              6 ROT_TWO             \n              7 STORE_FAST               0 (a)\n             10 STORE_FAST               1 (b)\n             13 LOAD_CONST               0 (None)\n             16 RETURN_VALUE        \n</code></pre>\n\n<p>After the two <a href=\"http://docs.python.org/2/library/dis.html#opcode-LOAD_FAST\" rel=\"noreferrer\"><code>LOAD_FAST</code> opcodes</a> (which push a value from a variable onto the stack), the top of stack holds <code>[a, b]</code>. The <a href=\"http://docs.python.org/2/library/dis.html#opcode-ROT_TWO\" rel=\"noreferrer\"><code>ROT_TWO</code> opcode</a> swaps the top two positions on the stack so the stack now has <code>[b, a]</code> at the top. The two <a href=\"http://docs.python.org/2/library/dis.html#opcode-STORE_FAST\" rel=\"noreferrer\"><code>STORE_FAST</code> opcodes</a> then takes those two values and store them in the names on the left-hand side of the assignment. The first <code>STORE_FAST</code> pops a value of the top of the stack and puts it into <code>a</code>, the next pops again, storing the value in <code>b</code>. The rotation is needed because Python guarantees that assignments in a target list on the left-hand side are done from left to right.</p>\n\n<p>For a 3-name assignment, <a href=\"http://docs.python.org/2/library/dis.html#opcode-ROT_THREE\" rel=\"noreferrer\"><code>ROT_THREE</code></a> followed by <code>ROT_TWO</code> is executed to reverse the top three items on the stack.</p>\n\n<p>For longer left-hand-side assignments, an explicit tuple is built:</p>\n\n<pre><code>&gt;&gt;&gt; def bar(a, b, c, d):\n...     d, c, b, a = a, b, c, d\n... \n&gt;&gt;&gt; dis.dis(bar)\n  2           0 LOAD_FAST                0 (a)\n              3 LOAD_FAST                1 (b)\n              6 LOAD_FAST                2 (c)\n              9 LOAD_FAST                3 (d)\n             12 BUILD_TUPLE              4\n             15 UNPACK_SEQUENCE          4\n             18 STORE_FAST               3 (d)\n             21 STORE_FAST               2 (c)\n             24 STORE_FAST               1 (b)\n             27 STORE_FAST               0 (a)\n             30 LOAD_CONST               0 (None)\n             33 RETURN_VALUE        \n</code></pre>\n\n<p>Here the stack with <code>[d, c, b, a]</code> is used to build a tuple (in reverse order, <a href=\"http://docs.python.org/2/library/dis.html#opcode-BUILD_TUPLE\" rel=\"noreferrer\"><code>BUILD_TUPLE</code></a> pops from the stack again, pushing the resulting tuple onto the stack), and then <a href=\"http://docs.python.org/2/library/dis.html#opcode-UNPACK_SEQUENCE\" rel=\"noreferrer\"><code>UNPACK_SEQUENCE</code></a> pops the tuple from the stack again, pushes all elements back from the tuple back onto the stack again for the <code>STORE_FAST</code> operations.</p>\n\n<p>The latter may seem like a wasteful operation, but the right-hand side of an assignment may be something entirely different, a function call that <em>produces</em> a tuple perhaps, so the Python interpreter makes no assumptions and uses the <code>UNPACK_SEQUENCE</code> opcode always. It does so even for the two and three-name assignment operations, <a href=\"http://hg.python.org/cpython/file/3696b9ae6b17/Python/peephole.c#l426\" rel=\"noreferrer\">but a later (peephole) optimization step</a> replaces a <code>BUILD_TUPLE</code> / <code>UNPACK_SEQUENCE</code> combination with 2 or 3 arguments with the above <code>ROT_TWO</code> and <code>ROT_THREE</code> opcodes for efficiency.</p>\n"
    },
    "905": {
        "question_id": "11699298",
        "answer_id": "11703998",
        "question": "<p>I'm using Python bindings to OpenCV 2.4 installed with following <a href=\"http://opencvpython.blogspot.com/2012/05/install-opencv-in-windows-for-python.html\" rel=\"noreferrer\">instructions</a>.</p>\n\n<p>My problem is similar to <a href=\"https://stackoverflow.com/questions/11444926/videocapture-is-not-working-in-opencv-2-4-2\">this one</a>, but I need Windows machine solution.</p>\n\n<p>Problem: when I try to use </p>\n\n<pre><code>cap = cv2.VideoCapture(0)\nprint cap.grab()\n</code></pre>\n\n<p>it works fine, but the following code</p>\n\n<pre><code>cap = cv2.VideoCapture(filename)\nprint cap.grab()\n</code></pre>\n\n<p>always return False. </p>\n\n<p>Path to the file is correct, absolute and has no spaces.</p>\n\n<p>I tried on two machines with Windows XP and Windows 7 with similar results. On Linux (Ubuntu) it works fine for me.</p>\n",
        "answer": "<p>Add <code>C:\\OpenCV\\3rdparty\\ffmpeg\\</code> to the Windows PATH environment variable or copy <code>opencv_ffmpeg.dll</code> from that directory to <code>C:\\Python27\\</code> or to a directory that is in the PATH. Alternatively, use the OpenCV binaries from <a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv\" rel=\"noreferrer\">http://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv</a>.</p>\n\n<p>Renaming the <code>opencv_ffmpeg.dll</code> file may also be necessary.</p>\n\n<p>For OpenCV version X.Y.Z<br>\n<code>opencv_ffmpeg.dll</code> ==> <code>opencv_ffmpegXYZ.dll</code></p>\n\n<p>For 64-bit OpenCV version X.Y.Z<br>\n<code>opencv_ffmpeg.dll</code> ==> <code>opencv_ffmpegXYZ_64.dll</code></p>\n"
    },
    "906": {
        "question_id": "11664443",
        "answer_id": "11664675",
        "question": "<p>I want to create a Python program which takes in multiple lines of user input. For example:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>This is a multilined input.\nIt has multiple sentences.\nEach sentence is on a newline.\n</code></pre>\n\n<p>How can I take in multiple lines of raw input?</p>\n",
        "answer": "<pre><code>sentinel = '' # ends when this string is seen\nfor line in iter(raw_input, sentinel):\n    pass # do things here\n</code></pre>\n\n<p>To get every line as a string you can do:</p>\n\n<pre><code>'\\n'.join(iter(raw_input, sentinel))\n</code></pre>\n\n<hr>\n\n<p>Python 3:</p>\n\n<pre><code>'\\n'.join(iter(input, sentinel))\n</code></pre>\n"
    },
    "907": {
        "question_id": "39048229",
        "answer_id": "39048475",
        "question": "<p>I have seen this question earlier here and I have took lessons from that. However I am not sure why I am getting an error when I feel it should work. </p>\n\n<p>I want to create a new column in existing Spark <code>DataFrame</code> by some rules. Here is what I wrote. iris_spark is the data frame with a categorical variable iris_spark with three distinct categories. </p>\n\n<pre><code>from pyspark.sql import functions as F\n\niris_spark_df = iris_spark.withColumn(\n    \"Class\", \n   F.when(iris_spark.iris_class == 'Iris-setosa', 0, F.when(iris_spark.iris_class == 'Iris-versicolor',1)).otherwise(2))\n</code></pre>\n\n<p>Throws the following error. </p>\n\n<pre><code>---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-157-21818c7dc060&gt; in &lt;module&gt;()\n----&gt; 1 iris_spark_df=iris_spark.withColumn(\"Class\",F.when(iris_spark.iris_class=='Iris-setosa',0,F.when(iris_spark.iris_class=='Iris-versicolor',1)))\n\nTypeError: when() takes exactly 2 arguments (3 given)\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-157-21818c7dc060&gt; in &lt;module&gt;()\n----&gt; 1 iris_spark_df=iris_spark.withColumn(\"Class\",F.when(iris_spark.iris_class=='Iris-setosa',0,F.when(iris_spark.iris_class=='Iris-versicolor',1)))\n\nTypeError: when() takes exactly 2 arguments (3 given)\n</code></pre>\n\n<p>Any idea why?</p>\n",
        "answer": "<p>Correct structure is either:</p>\n\n<pre><code>(when(col(\"iris_class\") == 'Iris-setosa', 0)\n.when(col(\"iris_class\") == 'Iris-versicolor', 1)\n.otherwise(2))\n</code></pre>\n\n<p>which is equivalent to</p>\n\n<pre><code>CASE \n    WHEN (iris_class = 'Iris-setosa') THEN 0\n    WHEN (iris_class = 'Iris-versicolor') THEN 1 \n    ELSE 2\nEND\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>(when(col(\"iris_class\") == 'Iris-setosa', 0)\n    .otherwise(when(col(\"iris_class\") == 'Iris-versicolor', 1)\n        .otherwise(2)))\n</code></pre>\n\n<p>which is equivalent to:</p>\n\n<pre><code>CASE WHEN (iris_class = 'Iris-setosa') THEN 0 \n     ELSE CASE WHEN (iris_class = 'Iris-versicolor') THEN 1 \n               ELSE 2 \n          END \nEND\n</code></pre>\n\n<p>with general syntax:</p>\n\n<pre><code>when(condition, value).when(...)\n</code></pre>\n\n<p>or</p>\n\n<pre><code>when(condition, value).otherwise(...)\n</code></pre>\n\n<p>You probably mixed up things with Hive <code>IF</code> conditional:</p>\n\n<pre><code>IF(condition, if-true, if-false)\n</code></pre>\n\n<p>which can be used only in raw SQL with Hive support.</p>\n"
    },
    "908": {
        "question_id": "30076185",
        "answer_id": "30165768",
        "question": "<p>I have a script <code>a.py</code> and while executing it will ask certain queries to user and frame the output in json format. Using python subprocess, I am able to call this script from another script named <code>b.py</code>. Everything is working as expected except that I am not able to get the output in a variable? I am doing this in Python 3.</p>\n",
        "answer": "<p>To call a Python script from another one using <code>subprocess</code> module and to pass it some input and to get its output:</p>\n\n<pre><code>#!/usr/bin/env python3\nimport os\nimport sys\nfrom subprocess import check_output\n\nscript_path = os.path.join(get_script_dir(), 'a.py')\noutput = check_output([sys.executable, script_path],\n                      input='\\n'.join(['query 1', 'query 2']),\n                      universal_newlines=True)\n</code></pre>\n\n<p>where <a href=\"https://stackoverflow.com/a/22881871/4279\"><code>get_script_dir()</code> function is defined here</a>.</p>\n\n<p>A more flexible alternative is to import module <code>a</code> and to call a function, to get the result (make sure <code>a.py</code> uses <code>if __name__==\"__main__\"</code> guard, to avoid running undesirable code on import):</p>\n\n<pre><code>#!/usr/bin/env python\nimport a # the dir with a.py should be in sys.path\n\nresult = [a.search(query) for query in ['query 1', 'query 2']]\n</code></pre>\n\n<p>You could use <code>mutliprocessing</code> to run each query in a separate process (if performing a query is CPU-intensive then it might improve time performance):</p>\n\n<pre><code>#!/usr/bin/env python\nfrom multiprocessing import freeze_support, Pool\nimport a\n\nif __name__ == \"__main__\":\n   freeze_support()\n   pool = Pool() # use all available CPUs\n   result = pool.map(a.search, ['query 1', 'query 2'])\n</code></pre>\n"
    },
    "909": {
        "question_id": "16460616",
        "answer_id": "16460627",
        "question": "<p>I was trying to test how the lists in python works according to a tutorial I was reading.\nWhen I tried to use <code>list.sort()</code> or <code>list.reverse()</code>, the interpreter gives me <code>None</code>.</p>\n\n<p>Please let me know how I can get a result from these two methods:</p>\n\n<pre><code>a = [66.25, 333, 333, 1, 1234.5]\nprint(a.sort())\nprint(a.reverse())\n</code></pre>\n",
        "answer": "<p><code>.sort()</code> and <code>.reverse()</code> change the list <em>in place</em> and return <code>None</code> See the <a href=\"http://docs.python.org/2/library/stdtypes.html#mutable-sequence-types\" rel=\"noreferrer\">mutable sequence documentation</a>:</p>\n\n<blockquote>\n  <p>The <code>sort()</code> and <code>reverse()</code> methods modify the list in place for economy of space when sorting or reversing a large list. To remind you that they operate by side effect, they don\u2019t return the sorted or reversed list.</p>\n</blockquote>\n\n<p>Do this instead:</p>\n\n<pre><code>a.sort()\nprint(a)\na.reverse()\nprint(a)\n</code></pre>\n\n<p>or use the <a href=\"http://docs.python.org/3/library/functions.html#sorted\" rel=\"noreferrer\"><code>sorted()</code></a> and <a href=\"http://docs.python.org/3/library/functions.html#reversed\" rel=\"noreferrer\"><code>reversed()</code></a> functions.</p>\n\n<pre><code>print(sorted(a))               # just sorted\nprint(list(reversed(a)))       # just reversed\nprint(a[::-1])                 # reversing by using a negative slice step\nprint(sorted(a, reverse=True)) # sorted *and* reversed\n</code></pre>\n\n<p>These methods return a <em>new</em> list and leave the original input list untouched.</p>\n\n<p>Demo, in-place sorting and reversing:</p>\n\n<pre><code>&gt;&gt;&gt; a = [66.25, 333, 333, 1, 1234.5]\n&gt;&gt;&gt; a.sort()\n&gt;&gt;&gt; print(a)\n[1, 66.25, 333, 333, 1234.5]\n&gt;&gt;&gt; a.reverse()\n&gt;&gt;&gt; print(a)\n[1234.5, 333, 333, 66.25, 1]\n</code></pre>\n\n<p>And creating new sorted and reversed lists:</p>\n\n<pre><code>&gt;&gt;&gt; a = [66.25, 333, 333, 1, 1234.5]\n&gt;&gt;&gt; print(sorted(a))\n[1, 66.25, 333, 333, 1234.5]\n&gt;&gt;&gt; print(list(reversed(a)))\n[1234.5, 1, 333, 333, 66.25]\n&gt;&gt;&gt; print(a[::-1])\n[1234.5, 1, 333, 333, 66.25]\n&gt;&gt;&gt; print(sorted(a, reverse=True))\n[1234.5, 333, 333, 66.25, 1]\n&gt;&gt;&gt; a  # input list is untouched\n[66.25, 333, 333, 1, 1234.5]\n</code></pre>\n"
    },
    "910": {
        "question_id": "21592630",
        "answer_id": "21592730",
        "question": "<p>I'm putting my buttons into an array but when I call them they are not there. If I print out the array I get:</p>\n\n<pre><code>{0: None, 1: None, 2: None, 3: None, 4: None, 5: None, 6: None, 7: None, ...}\n</code></pre>\n\n<p>I just don't know what I am doing wrong.</p>\n\n<pre><code>from tkinter import *\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n\nb={}\n\napp = Tk()\napp.grid()\n\nf = Frame(app, bg = \"orange\", width = 500, height = 500)\nf.pack(side=BOTTOM, expand = 1)\n\n\ndef color(x):\n   b[x].configure(bg=\"red\") # Error 'NoneType' object has no attribute 'configure'\n   print(b) # 0: None, 1: None, 2: None, 3: None, 4: None, 5:.... ect\n\n\ndef genABC():\n    for r in range(3):\n        for c in range(10):\n            if (c+(r*10)&gt;25):\n                break\n            print(c+(r*10))\n            b[c+(r*10)] = Button(f, text=chr(97+c+(r*10)), command=lambda a=c+(r*10): color(a), borderwidth=1,width=5,bg=\"white\").grid(row=r,column=c)\n\ngenABC()\napp.mainloop()\n</code></pre>\n",
        "answer": "<p>The <a href=\"http://www.effbot.org/tkinterbook/grid.htm\" rel=\"noreferrer\"><code>grid</code></a>, <a href=\"http://effbot.org/tkinterbook/pack.htm\" rel=\"noreferrer\"><code>pack</code></a>, and <a href=\"http://effbot.org/tkinterbook/place.htm\" rel=\"noreferrer\"><code>place</code></a> methods of every Tkinter widget operate <em>in-place</em> and always return <code>None</code>.  This means that you cannot call them on the same line as you create a widget.  Instead, they should be called on the line below:</p>\n\n<pre><code>widget = ...\nwidget.grid(...)\n\nwidget = ...\nwidget.pack(...)\n\nwidget = ...\nwidget.place(...)\n</code></pre>\n\n<p>So, in your code, it would be:</p>\n\n<pre><code>b[c+(r*10)] = Button(f, text=chr(97+c+(r*10)), command=lambda a=c+(r*10): color(a), borderwidth=1,width=5,bg=\"white\")\nb[c+(r*10)].grid(row=r,column=c)\n</code></pre>\n"
    },
    "911": {
        "question_id": "46544780",
        "answer_id": "48418102",
        "question": "<p>I'm using QtDesinger for design GUI to use in python, after designing my desired UI in QtDesigner, convert it to python code and then I changed generated code to do some action in my python code, but if I changed the UI with QtDesigner and convert it to python code again, I lost my previous changes on my code. </p>\n\n<p>how can I solve the problem?</p>\n\n<p>can we Spreading a Class Over Multiple Files in python to write code in other files?</p>\n",
        "answer": "<p>The easiest way is to use the *.ui file directly in the python code, you don't need convert to *.py file every time you change the ui.\nyou can use this pseudo code in your project.</p>\n\n<pre><code># imports\nfrom PyQt5 import uic\n\n# load ui file\nbaseUIClass, baseUIWidget = uic.loadUiType(\"MainGui.ui\")\n\n# use loaded ui file in the logic class\nclass Logic(baseUIWidget, baseUIClass):\n    def __init__(self, parent=None):\n        super(Logic, self).__init__(parent)\n        self.setupUi(self)\n         .\n         .\n         .\n         .\n\ndef main():\n    app = QtWidgets.QApplication(sys.argv)\n    ui = Logic(None)\n    ui.showMaximized()\n    sys.exit(app.exec_())\n</code></pre>\n"
    },
    "912": {
        "question_id": "6344076",
        "answer_id": "14753678",
        "question": "<h2>The Situation</h2>\n\n<p>I\u2019m trying to port an open-source library to Python 3.  (<a href=\"http://sympy.org/\">SymPy</a>, if anyone is wondering.) </p>\n\n<p>So, I need to run <code>2to3</code> automatically when building for Python 3. To do that, I need to use <code>distribute</code>. Therefore, I need to port the current system, which (according to the doctest) is <code>distutils</code>. </p>\n\n<p><br></p>\n\n<h2>The Problem</h2>\n\n<p>Unfortunately, I\u2019m not sure what\u2019s the difference between these modules\u2014<code>distutils</code>, <code>distribute</code>, <code>setuptools</code>. The documentation is sketchy as best, as they all seem to be a fork of one another, intended to be compatible in most circumstances (but actually, not all)\u2026and so on, and so forth. </p>\n\n<p><br></p>\n\n<h2>The Question</h2>\n\n<p><strong>Could someone explain the differences?</strong> What am I supposed to use?  What is the most modern solution? (As an aside, I\u2019d also appreciate some guide on porting to <code>Distribute</code>, but that\u2019s a tad beyond the scope of the question\u2026)</p>\n",
        "answer": "<p>As of January 2017, all of the other answers to this question are at least two years out-of-date. When you come across advice on Python packaging issues, remember to look at the date of publication, and don't trust out-of-date information.</p>\n\n<p>The <a href=\"https://packaging.python.org/\" rel=\"noreferrer\">Python Packaging User Guide</a> is worth a read. Every page has a \"last reviewed\" date displayed, so you can check the recency of the manual, and it's quite comprehensive. The fact that it's hosted on a subdomain of python.org of the Python Software Foundation just adds credence to it. The <a href=\"https://packaging.python.org/key_projects/\" rel=\"noreferrer\">Project Summaries</a> page is especially relevant here.</p>\n\n<h2>Summary of tools:</h2>\n\n<p>Here's a summary of the Python packaging landscape in January 2017:</p>\n\n<h3>Supported tools:</h3>\n\n<ul>\n<li><p><strong>Distutils</strong> is still the standard tool for packaging in Python. It is included in the standard library (Python 2 and Python 3.0 to 3.6). It is useful for simple Python distributions, but lacks features. It introduces the <code>distutils</code> Python package that can be imported in your <code>setup.py</code> script.</p>\n\n<ul>\n<li><sub><a href=\"https://docs.python.org/3/library/distutils.html\" rel=\"noreferrer\">Official docs</a> | <a href=\"https://packaging.python.org/key_projects/#distutils\" rel=\"noreferrer\"><code>distutils</code> section of Python Package User Guide</a></sub></li>\n</ul></li>\n<li><p><strong>Setuptools</strong> was developed to overcome Distutils' limitations, and is not included in the standard library. It introduced a command-line utility called <code>easy_install</code>. It also introduced the <code>setuptools</code> Python package that can be imported in your <code>setup.py</code> script, and the <code>pkg_resources</code> Python package that can be imported in your code to locate data files installed with a distribution. One of its gotchas is that it monkey-patches the <code>distutils</code> Python package. It should work well with <code>pip</code>. <a href=\"https://github.com/pypa/setuptools/releases\" rel=\"noreferrer\">It sees regular releases.</a></p>\n\n<ul>\n<li><sub><a href=\"https://setuptools.readthedocs.io/en/latest/\" rel=\"noreferrer\">Official docs</a> | <a href=\"https://pypi.python.org/pypi/setuptools\" rel=\"noreferrer\">Pypi page</a> | <a href=\"https://github.com/pypa/setuptools\" rel=\"noreferrer\">GitHub repo</a> | <a href=\"https://packaging.python.org/key_projects/#setuptools\" rel=\"noreferrer\"><code>setuptools</code> section of Python Package User Guide</a></sub></li>\n</ul></li>\n<li><p><strong>scikit-build</strong> is an improved build system generator that internally uses CMake to build compiled Python extensions. Because scikit-build isn't based on distutils, it doesn't really have any of its limitations. When ninja-build is present, scikit-build can compile large projects over three times faster than the alternatives. It should work well with <code>pip</code>. <a href=\"https://github.com/scikit-build/scikit-build/releases\" rel=\"noreferrer\">It sees regular releases.</a></p>\n\n<ul>\n<li><sub><a href=\"http://scikit-build.readthedocs.io/en/latest/\" rel=\"noreferrer\">Official docs</a> | <a href=\"https://pypi.org/project/scikit-build/\" rel=\"noreferrer\">Pypi page</a> | <a href=\"https://github.com/scikit-build/scikit-build\" rel=\"noreferrer\">GitHub repo</a></sub></li>\n</ul></li>\n</ul>\n\n<h3>Deprecated/abandoned tools:</h3>\n\n<ul>\n<li><p><strong>Distribute</strong> was a fork of Setuptools. It shared the same namespace, so if you had Distribute installed, <code>import setuptools</code> would actually import the package distributed with Distribute. <strong><em>Distribute was merged back into Setuptools 0.7</em></strong>, so you don't need to use Distribute any more. In fact, the version on Pypi is just a compatibility layer that installs Setuptools.</p></li>\n<li><p><strong>Distutils2</strong> was an attempt to take the best of Distutils, Setuptools and Distribute and become the standard tool included in Python's standard library. The idea was that Distutils2 would be distributed for old Python versions, and that Distutils2 would be renamed to <code>packaging</code> for Python 3.3, which would include it in its standard library. These plans did not go as intended, however, and currently, <strong><em>Distutils2 is an abandoned project</em></strong>. The latest release was in March 2012, and its Pypi home page has finally been updated to reflect its death.</p></li>\n</ul>\n\n<h3>Alpha software:</h3>\n\n<ul>\n<li><p><strong>Distlib</strong> is a tool that aims to implement a subset of the previous tools' functionality, but only functionality that is very well-defined in accepted PEPs. It is one of the tools of the PyPA (Python Package Authority), and it should hopefully be included eventually in the Python standard library someday. <strong><em>It is still considered alpha software, so end-users beware.</em></strong></p>\n\n<ul>\n<li><sub><a href=\"http://pythonhosted.org/distlib/\" rel=\"noreferrer\">Official docs</a> | <a href=\"https://pypi.python.org/pypi/distlib\" rel=\"noreferrer\">Pypi page</a> | <a href=\"https://bitbucket.org/vinay.sajip/distlib\" rel=\"noreferrer\">Bitbucket repo</a> | <a href=\"https://packaging.python.org/key_projects/#distlib\" rel=\"noreferrer\"><code>distlib</code> section of Python Package User Guide</a></sub></li>\n</ul></li>\n<li><p>There are <a href=\"https://packaging.python.org/key_projects/\" rel=\"noreferrer\">a couple more tools</a> (eg: Bento), but I won't mention them as they are too obscure or niche or early or undeveloped for this answer post, or else they're not direct alternatives.</p></li>\n</ul>\n\n<h2>Recommendation:</h2>\n\n<p>So in conclusion, out of all these options, <strong>I would recommend Setuptools</strong>, unless your requirements are very basic and you only need Distutils. Setuptools works very well with Virtualenv and Pip, tools that I highly recommend. Virtualenv and Pip could both be considered official, as they're part of PyPA, and Python 3 now ships <a href=\"https://docs.python.org/3/library/ensurepip.html\" rel=\"noreferrer\"><code>ensurepip</code></a> (which helps you install <code>pip</code> on some systems).</p>\n\n<p>If you're looking into Virtualenv, you might be interested in this question: <a href=\"https://stackoverflow.com/q/41573587/247696\">What is the difference between <code>venv</code>, <code>pyvenv</code>, <code>pyenv</code>, <code>virtualenv</code>, <code>virtualenvwrapper</code>, etc?</a>. (Yes, I know, I groan with you.)</p>\n\n<p>As a side-note, I recommend using Virtualenv 1.10 or higher, as it is the first release that recognises the Setuptools/Distribute merger, for both Python 2 and 3.</p>\n"
    },
    "913": {
        "question_id": "1305532",
        "answer_id": "1305663",
        "question": "<p>I'm searching for an elegant way to get data using attribute access on a dict with some nested dicts and lists (i.e. javascript-style object syntax).</p>\n\n<p>For example:</p>\n\n<pre><code>&gt;&gt;&gt; d = {'a': 1, 'b': {'c': 2}, 'd': [\"hi\", {'foo': \"bar\"}]}\n</code></pre>\n\n<p>Should be accessible in this way:</p>\n\n<pre><code>&gt;&gt;&gt; x = dict2obj(d)\n&gt;&gt;&gt; x.a\n1\n&gt;&gt;&gt; x.b.c\n2\n&gt;&gt;&gt; x.d[1].foo\nbar\n</code></pre>\n\n<p>I think, this is not possible without recursion, but what would be a nice way to get an object style for dicts?</p>\n",
        "answer": "<p><strong>Update:</strong> In Python 2.6 and onwards, consider whether the <a href=\"https://docs.python.org/2/library/collections.html#collections.namedtuple\" rel=\"noreferrer\"><code>namedtuple</code></a> data structure suits your needs:</p>\n\n<pre><code>&gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; MyStruct = namedtuple('MyStruct', 'a b d')\n&gt;&gt;&gt; s = MyStruct(a=1, b={'c': 2}, d=['hi'])\n&gt;&gt;&gt; s\nMyStruct(a=1, b={'c': 2}, d=['hi'])\n&gt;&gt;&gt; s.a\n1\n&gt;&gt;&gt; s.b\n{'c': 2}\n&gt;&gt;&gt; s.c\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'MyStruct' object has no attribute 'c'\n&gt;&gt;&gt; s.d\n['hi']\n</code></pre>\n\n<p>The alternative (original answer contents) is:</p>\n\n<pre><code>class Struct:\n    def __init__(self, **entries):\n        self.__dict__.update(entries)\n</code></pre>\n\n<p>Then, you can use:</p>\n\n<pre><code>&gt;&gt;&gt; args = {'a': 1, 'b': 2}\n&gt;&gt;&gt; s = Struct(**args)\n&gt;&gt;&gt; s\n&lt;__main__.Struct instance at 0x01D6A738&gt;\n&gt;&gt;&gt; s.a\n1\n&gt;&gt;&gt; s.b\n2\n</code></pre>\n"
    },
    "914": {
        "question_id": "120656",
        "answer_id": "120701",
        "question": "<p>How do I get a list of all files (and directories) in a given directory in Python?</p>\n",
        "answer": "<p>This is a way to traverse every file and directory in a directory tree:</p>\n\n<pre><code>import os\n\nfor dirname, dirnames, filenames in os.walk('.'):\n    # print path to all subdirectories first.\n    for subdirname in dirnames:\n        print(os.path.join(dirname, subdirname))\n\n    # print path to all filenames.\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n    # Advanced usage:\n    # editing the 'dirnames' list will stop os.walk() from recursing into there.\n    if '.git' in dirnames:\n        # don't go into any .git directories.\n        dirnames.remove('.git')\n</code></pre>\n"
    },
    "915": {
        "question_id": "1626326",
        "answer_id": "1629770",
        "question": "\n\n<p>What is the recommended way of handling settings for local development and the production server? Some of them (like constants, etc) can be changed/accessed in both, but some of them (like paths to static files) need to remain different, and hence should not be overwritten every time the new code is deployed.</p>\n\n<p>Currently, I am adding all constants to <code>settings.py</code>. But every time I change some constant locally, I have to copy it to the production server and edit the file for production specific changes... :( </p>\n\n<p><em>Edit: looks like there is no standard answer to this question, I've accepted the most popular method.</em></p>\n",
        "answer": "<p>In <code>settings.py</code>:</p>\n\n<pre><code>try:\n    from local_settings import *\nexcept ImportError as e:\n    pass\n</code></pre>\n\n<p>You can override what needed in <code>local_settings.py</code>; it should stay out of your version control then. But since you mention copying I'm guessing you use none ;)</p>\n"
    },
    "916": {
        "question_id": "1024435",
        "answer_id": "1024489",
        "question": "<p>I have some Python code that have inconsistent indentation. There is a lot of mixture of tabs and spaces to make the matter even worse, and even space indentation is not preserved.</p>\n\n<p>The code works as expected, but it's difficult to maintain.</p>\n\n<p>How can I fix the indentation (like <a href=\"https://en.wikipedia.org/wiki/HTML_Tidy\" rel=\"noreferrer\">HTML Tidy</a>, but for Python) without breaking the code?</p>\n",
        "answer": "<p>Use the <code>reindent.py</code> script that you find in the <code>Tools/scripts/</code> directory of your Python installation:</p>\n\n<blockquote>\n  <p>Change Python (.py) files to use\n  4-space indents and no hard tab\n  characters. Also trim excess spaces\n  and tabs from ends of lines, and\n  remove empty lines at the end of\n  files.  Also ensure the last line ends\n  with a newline.</p>\n</blockquote>\n\n<p>Have a look at that script for detailed usage instructions.</p>\n"
    },
    "917": {
        "question_id": "3160699",
        "answer_id": "3160819",
        "question": "<p>How do I use a progress bar when my script is doing some task that is likely to take time?</p>\n\n<p>For example, a function which takes some time to complete and returns <code>True</code> when done. How can I display a progress bar during the time the function is being executed?</p>\n\n<p>Note that I need this to be in real time, so I can't figure out what to do about it. Do I need a <code>thread</code> for this? I have no idea.</p>\n\n<p>Right now I am not printing anything while the function is being executed, however a progress bar would be nice. Also I am more interested in how this can be done from a code point of view.</p>\n",
        "answer": "<p>There are specific libraries (<a href=\"http://pypi.python.org/pypi/progressbar2\" rel=\"nofollow noreferrer\">like this one here</a>) but maybe something very simple would do:</p>\n\n<pre><code>import time\nimport sys\n\ntoolbar_width = 40\n\n# setup toolbar\nsys.stdout.write(\"[%s]\" % (\" \" * toolbar_width))\nsys.stdout.flush()\nsys.stdout.write(\"\\b\" * (toolbar_width+1)) # return to start of line, after '['\n\nfor i in xrange(toolbar_width):\n    time.sleep(0.1) # do real work here\n    # update the bar\n    sys.stdout.write(\"-\")\n    sys.stdout.flush()\n\nsys.stdout.write(\"]\\n\") # this ends the progress bar\n</code></pre>\n\n<p>Note: this progressbar is a fork of <a href=\"https://pypi.python.org/pypi/progressbar\" rel=\"nofollow noreferrer\">progressbar</a> which hasn't been maintained in years.</p>\n"
    },
    "918": {
        "question_id": "452104",
        "answer_id": "452143",
        "question": "<p>Is there any benefit in using compile for regular expressions in Python?</p>\n\n<pre><code>h = re.compile('hello')\nh.match('hello world')\n</code></pre>\n\n<p>vs</p>\n\n<pre><code>re.match('hello', 'hello world')\n</code></pre>\n",
        "answer": "<p>I've had a lot of experience running a compiled regex 1000s of times versus compiling on-the-fly, and have not noticed any perceivable difference.  Obviously, this is anecdotal, and certainly not a great argument <em>against</em> compiling, but I've found the difference to be negligible.</p>\n\n<p>EDIT:\nAfter a quick glance at the actual Python 2.5 library code, I see that Python internally compiles AND CACHES regexes whenever you use them anyway (including calls to <code>re.match()</code>), so you're really only changing WHEN the regex gets compiled, and shouldn't be saving much time at all - only the time it takes to check the cache (a key lookup on an internal <code>dict</code> type).</p>\n\n<p>From module re.py (comments are mine):</p>\n\n<pre><code>def match(pattern, string, flags=0):\n    return _compile(pattern, flags).match(string)\n\ndef _compile(*key):\n\n    # Does cache check at top of function\n    cachekey = (type(key[0]),) + key\n    p = _cache.get(cachekey)\n    if p is not None: return p\n\n    # ...\n    # Does actual compilation on cache miss\n    # ...\n\n    # Caches compiled regex\n    if len(_cache) &gt;= _MAXCACHE:\n        _cache.clear()\n    _cache[cachekey] = p\n    return p\n</code></pre>\n\n<p>I still often pre-compile regular expressions, but only to bind them to a nice, reusable name, not for any expected performance gain.</p>\n"
    },
    "919": {
        "question_id": "16353729",
        "answer_id": "16354730",
        "question": "<p>I have some problems with the Pandas apply function, when using multiple columns with the following dataframe</p>\n\n<pre><code>df = DataFrame ({'a' : np.random.randn(6),\n                 'b' : ['foo', 'bar'] * 3,\n                 'c' : np.random.randn(6)})\n</code></pre>\n\n<p>and the following function</p>\n\n<pre><code>def my_test(a, b):\n    return a % b\n</code></pre>\n\n<p>When I try to apply this function with :</p>\n\n<pre><code>df['Value'] = df.apply(lambda row: my_test(row[a], row[c]), axis=1)\n</code></pre>\n\n<p>I get the error message:</p>\n\n<pre><code>NameError: (\"global name 'a' is not defined\", u'occurred at index 0')\n</code></pre>\n\n<p>I do not understand this message, I defined the name properly. </p>\n\n<p>I would highly appreciate any help on this issue</p>\n\n<p>Update</p>\n\n<p>Thanks for your help. I made indeed some syntax mistakes with the code, the index should be put ''. However I still get the same issue using a more complex function such as:</p>\n\n<pre><code>def my_test(a):\n    cum_diff = 0\n    for ix in df.index():\n        cum_diff = cum_diff + (a - df['a'][ix])\n    return cum_diff \n</code></pre>\n",
        "answer": "<p>Seems you forgot the <code>''</code> of your string.</p>\n\n<pre><code>In [43]: df['Value'] = df.apply(lambda row: my_test(row['a'], row['c']), axis=1)\n\nIn [44]: df\nOut[44]:\n                    a    b         c     Value\n          0 -1.674308  foo  0.343801  0.044698\n          1 -2.163236  bar -2.046438 -0.116798\n          2 -0.199115  foo -0.458050 -0.199115\n          3  0.918646  bar -0.007185 -0.001006\n          4  1.336830  foo  0.534292  0.268245\n          5  0.976844  bar -0.773630 -0.570417\n</code></pre>\n\n<p>BTW, in my opinion, following way is more elegant:</p>\n\n<pre><code>In [53]: def my_test2(row):\n....:     return row['a'] % row['c']\n....:     \n\nIn [54]: df['Value'] = df.apply(my_test2, axis=1)\n</code></pre>\n"
    },
    "920": {
        "question_id": "212358",
        "answer_id": "2233940",
        "question": "<p>Is there a library function that performs binary search on a list/tuple and return the position of the item if found and 'False' (-1, None, etc.) if not?</p>\n\n<p>I found the functions bisect_left/right in the <a href=\"http://docs.python.org/library/bisect.html\" rel=\"noreferrer\">bisect module</a>, but they still return a position even if the item is not in the list. That's perfectly fine for their intended usage, but I just want to know if an item is in the list or not (don't want to insert anything).</p>\n\n<p>I thought of using <code>bisect_left</code> and then checking if the item at that position is equal to what I'm searching, but that seems cumbersome (and I also need to do bounds checking if the number can be larger than the largest number in my list). If there is a nicer method I'd like to know about it.</p>\n\n<p><strong>Edit</strong> To clarify what I need this for: I'm aware that a dictionary would be very well suited for this, but I'm trying to keep the memory consumption as low as possible. My intended usage would be a sort of double-way look-up table. I have in the table a list of values and I need to be able to access the values based on their index. And also I want to be able to find the index of a particular value or None if the value is not in the list.</p>\n\n<p>Using a dictionary for this would be the fastest way, but would (approximately) double the memory requirements.</p>\n\n<p>I was asking this question thinking that I may have overlooked something in the Python libraries. It seems I'll have to write my own code, as Moe suggested.</p>\n",
        "answer": "\n\n<pre class=\"lang-python prettyprint-override\"><code>from bisect import bisect_left\n\ndef binary_search(a, x, lo=0, hi=None):  # can't use a to specify default for hi\n    hi = hi if hi is not None else len(a)  # hi defaults to len(a)   \n    pos = bisect_left(a, x, lo, hi)  # find insertion position\n    return (pos if pos != hi and a[pos] == x else -1)  # don't walk off the end\n</code></pre>\n"
    },
    "921": {
        "question_id": "8600161",
        "answer_id": "8600301",
        "question": "<p>I am working on Windows. I want to execute a function <em>foo()</em> every 10 seconds.</p>\n\n<p>How do I do this?</p>\n",
        "answer": "<p>At the end of <code>foo()</code>, create a <code>Timer</code> which calls <code>foo()</code> itself after 10 seconds.<br>\nBecause, <code>Timer</code> create a new <code>thread</code> to call <code>foo()</code>.<br>\n You can do other stuff without being blocked.</p>\n\n<pre><code>import time, threading\ndef foo():\n    print(time.ctime())\n    threading.Timer(10, foo).start()\n\nfoo()\n\n#output:\n#Thu Dec 22 14:46:08 2011\n#Thu Dec 22 14:46:18 2011\n#Thu Dec 22 14:46:28 2011\n#Thu Dec 22 14:46:38 2011\n</code></pre>\n"
    },
    "922": {
        "question_id": "151199",
        "answer_id": "151211",
        "question": "<p>If I have two dates (ex. <code>'8/18/2008'</code> and <code>'9/26/2008'</code>), what is the best way to get the number of days between these two dates?</p>\n",
        "answer": "<p>If you have two date objects, you can just subtract them.</p>\n\n<pre><code>from datetime import date\n\nd0 = date(2008, 8, 18)\nd1 = date(2008, 9, 26)\ndelta = d1 - d0\nprint delta.days\n</code></pre>\n\n<p>The relevant section of the docs:\n<a href=\"https://docs.python.org/library/datetime.html\" rel=\"noreferrer\">https://docs.python.org/library/datetime.html</a>.</p>\n"
    },
    "923": {
        "question_id": "1574088",
        "answer_id": "1574146",
        "question": "<p>I have an array of timestamps in the format (HH:MM:SS.mmmmmm) and another array of floating point numbers, each corresponding to a value in the timestamp array.</p>\n\n<p>Can I plot time on the x axis and the numbers on the y-axis using Matplotlib?</p>\n\n<p>I was trying to, but somehow it was only accepting arrays of floats. How can I get it to plot the time? Do I have to modify the format in any way?</p>\n",
        "answer": "<p>You must first convert your timestamps to Python <code>datetime</code> objects (use <code>datetime.strptime</code>). Then use <code>date2num</code> to convert the dates to matplotlib format.</p>\n\n<p>Plot the dates and values using <a href=\"http://matplotlib.org/api/pyplot_api.html?highlight=plot_date#matplotlib.pyplot.plot_date\" rel=\"noreferrer\"><code>plot_date</code></a>:</p>\n\n<pre><code>dates = matplotlib.dates.date2num(list_of_datetimes)\nmatplotlib.pyplot.plot_date(dates, values)\n</code></pre>\n"
    },
    "924": {
        "question_id": "19917492",
        "answer_id": "19917565",
        "question": "<p>How can I make any use of PYTHONPATH? When I try to run a script in the path the file is not\nfound. When I cd to the directory holding the script the script runs. So what good is the\nPYTHONPATH?</p>\n\n<pre><code>$ echo $PYTHONPATH\n:/home/randy/lib/python\n\n$ tree -L 1 '/home/randy/lib/python' \n/home/randy/lib/python\n\u251c\u2500\u2500 gbmx_html.py\n\u251c\u2500\u2500 gbmx.py\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 __pycache__\n\u251c\u2500\u2500 scripts\n\u2514\u2500\u2500 yesno.py\n\n$ python gbmx.py -h\npython: can't open file 'gbmx.py': [Errno 2] No such file or directory\n\n$ cd '/home/randy/lib/python'\n</code></pre>\n\n<p>After cd to the file directory it runs ..</p>\n\n<pre><code>$ python gbmx.py -h\nusage: gbmx.py [-h] [-b]\n</code></pre>\n\n<p>Why can I not make any use of the PYTHONPATH?</p>\n",
        "answer": "<p>I think you're a little confused. PYTHONPATH sets the search path for <strong>importing</strong> python modules, not for executing them like you're trying.</p>\n\n<blockquote>\n  <p>PYTHONPATH Augment the default search path for module files. The\n  format is the same as the shell\u2019s PATH: one or more directory\n  pathnames separated by os.pathsep (e.g. colons on Unix or semicolons\n  on Windows). Non-existent directories are silently ignored.</p>\n  \n  <p>In addition to normal directories, individual PYTHONPATH entries may\n  refer to zipfiles containing pure Python modules (in either source or\n  compiled form). Extension modules cannot be imported from zipfiles.</p>\n  \n  <p>The default search path is installation dependent, but generally\n  begins with prefix/lib/pythonversion (see PYTHONHOME above). It is\n  always appended to PYTHONPATH.</p>\n  \n  <p>An additional directory will be inserted in the search path in front\n  of PYTHONPATH as described above under Interface options. The search\n  path can be manipulated from within a Python program as the variable\n  sys.path.</p>\n</blockquote>\n\n<p><a href=\"http://docs.python.org/2/using/cmdline.html#envvar-PYTHONPATH\" rel=\"noreferrer\">http://docs.python.org/2/using/cmdline.html#envvar-PYTHONPATH</a></p>\n\n<p>What you're looking for is PATH. </p>\n\n<pre><code>export PATH=$PATH:/home/randy/lib/python \n</code></pre>\n\n<p>However, to run your python script as a program, you also need to set a <a href=\"http://en.wikipedia.org/wiki/Shebang_%28Unix%29\" rel=\"noreferrer\">shebang</a> for Python in the first line. Something like this should work:</p>\n\n<pre><code>#!/usr/bin/env python\n</code></pre>\n\n<p>And give execution privileges to it:</p>\n\n<pre><code>chmod +x /home/randy/lib/python/gbmx.py\n</code></pre>\n\n<p>Then you should be able to simply run <code>gmbx.py</code> from anywhere.</p>\n"
    },
    "925": {
        "question_id": "3393612",
        "answer_id": "3393759",
        "question": "<p>Is there a way to, for example, print <code>Hello World!</code> every n seconds?\nFor example, the program would go through whatever code I had, then once it had been 5 seconds (with <code>time.sleep()</code>) it would execute that code. I would be using this to update a file though, not print Hello World.</p>\n\n<p>For example:</p>\n\n<pre><code>startrepeat(\"print('Hello World')\", .01) # Repeats print('Hello World') ever .01 seconds\n\nfor i in range(5):\n    print(i)\n\n&gt;&gt; Hello World!\n&gt;&gt; 0\n&gt;&gt; 1\n&gt;&gt; 2\n&gt;&gt; Hello World!\n&gt;&gt; 3\n&gt;&gt; Hello World!\n&gt;&gt; 4\n</code></pre>\n",
        "answer": "<pre><code>import threading\n\ndef printit():\n  threading.Timer(5.0, printit).start()\n  print \"Hello, World!\"\n\nprintit()\n\n# continue with the rest of your code\n</code></pre>\n\n<p><a href=\"https://docs.python.org/3/library/threading.html#timer-objects\" rel=\"noreferrer\">https://docs.python.org/3/library/threading.html#timer-objects</a></p>\n"
    },
    "926": {
        "question_id": "2399307",
        "answer_id": "2399332",
        "question": "<pre><code>class A:\n    def __init__(self):\n        print(\"world\")\n\nclass B(A):\n    def __init__(self):\n       print(\"hello\")\n\nB()  # output: hello\n</code></pre>\n\n<p>In all other languages I've worked with the super constructor is invoked implicitly. How does one invoke it in Python? I would expect <code>super(self)</code> but this doesn't work.</p>\n",
        "answer": "<p><code>super()</code> returns a parent-like object <em>in new-style classes</em>:</p>\n\n<pre><code>class A(object):\n    def __init__(self):\n        print \"world\"\n\nclass B(A):\n    def __init__(self):\n        print \"hello\"\n        super(B, self).__init__()\n\nB()\n</code></pre>\n"
    },
    "927": {
        "question_id": "5676646",
        "answer_id": "5676676",
        "question": "<p>I want to fill out a string with spaces. I know that the following works for zero's:</p>\n\n<pre><code>&gt;&gt;&gt; print  \"'%06d'\"%4\n'000004'\n</code></pre>\n\n<p>But what should I do when I want this?:</p>\n\n<pre><code>'hi    '\n</code></pre>\n\n<p>of course I can measure string length and do <code>str+\" \"*leftover</code>, but I'd like the shortest way.</p>\n",
        "answer": "<p>You can do this with <a href=\"http://docs.python.org/library/stdtypes.html#str.ljust\" rel=\"noreferrer\"><strong><code>str.ljust(width[, fillchar])</code></strong></a>:</p>\n\n<blockquote>\n  <p>Return the string left justified in a string of length <em>width</em>. Padding is done using the specified <em>fillchar</em> (default is a space). The original string is returned if <em>width</em> is less than <code>len(s)</code>.</p>\n</blockquote>\n\n<pre><code>&gt;&gt;&gt; 'hi'.ljust(10)\n'hi        '\n</code></pre>\n"
    },
    "928": {
        "question_id": "4174941",
        "answer_id": "4174955",
        "question": "<p>I have a list of lists.  For example,</p>\n\n<pre><code>[\n[0,1,'f'],\n[4,2,'t'],\n[9,4,'afsd']\n]\n</code></pre>\n\n<p>If I wanted to sort the outer list by the string field of the inner lists, how would you do that in python?</p>\n",
        "answer": "<p>This is a job for <a href=\"http://docs.python.org/library/operator.html#operator.itemgetter\" rel=\"noreferrer\">itemgetter</a></p>\n\n<pre><code>&gt;&gt;&gt; from operator import itemgetter\n&gt;&gt;&gt; L=[[0, 1, 'f'], [4, 2, 't'], [9, 4, 'afsd']]\n&gt;&gt;&gt; sorted(L, key=itemgetter(2))\n[[9, 4, 'afsd'], [0, 1, 'f'], [4, 2, 't']]\n</code></pre>\n\n<p>It is also possible to use a lambda function here, however the lambda function is slower in this simple case</p>\n"
    },
    "929": {
        "question_id": "216972",
        "answer_id": "216980",
        "question": "<p>Which types of objects fall into the domain of \"subscriptable\"?</p>\n",
        "answer": "<p>It basically means that the object implements the <code>__getitem__()</code> method. In other words, it describes objects that are \"containers\", meaning they contain other objects. This includes lists, tuples, and dictionaries.</p>\n"
    },
    "930": {
        "question_id": "12435211",
        "answer_id": "12435256",
        "question": "<p>I'm having difficulties with the python timer and would greatly appreciate some advice or help :D</p>\n\n<p>I'm not too knowledgeable of how threads work, but I just want to fire off a function every 0.5 seconds and be able to start and stop and reset the timer.</p>\n\n<p>However, I keep getting <code>RuntimeError: threads can only be started once</code> when I execute <code>threading.timer.start()</code> twice. Is there a work around for this? I tried applying <code>threading.timer.cancel()</code> before each start.</p>\n\n<p>Pseudo code:</p>\n\n<pre><code>t=threading.timer(0.5,function)\nwhile True:\n    t.cancel()\n    t.start()\n</code></pre>\n",
        "answer": "<p>The best way is to start the timer thread once. Inside your timer thread you'd code the following</p>\n\n<pre><code>class MyThread(Thread):\n    def __init__(self, event):\n        Thread.__init__(self)\n        self.stopped = event\n\n    def run(self):\n        while not self.stopped.wait(0.5):\n            print(\"my thread\")\n            # call a function\n</code></pre>\n\n<p>In the code that started the timer, you can then <code>set</code> the stopped event to stop the timer.</p>\n\n<pre><code>stopFlag = Event()\nthread = MyThread(stopFlag)\nthread.start()\n# this will stop the timer\nstopFlag.set()\n</code></pre>\n"
    },
    "931": {
        "question_id": "5552555",
        "answer_id": "5552623",
        "question": "<p>Why is the below item failing? and why does it succeed with \"latin-1\" codec?</p>\n\n<pre><code>o = \"a test of \\xe9 char\" #I want this to remain a string as this is what I am receiving\nv = o.decode(\"utf-8\")\n</code></pre>\n\n<p>results in:</p>\n\n<pre><code> Traceback (most recent call last):  \n File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;  \n File \"C:\\Python27\\lib\\encodings\\utf_8.py\",\n line 16, in decode\n     return codecs.utf_8_decode(input, errors, True) UnicodeDecodeError:\n 'utf8' codec can't decode byte 0xe9 in position 10: invalid continuation byte\n</code></pre>\n",
        "answer": "<p>In binary, 0xE9 looks like <code>1110 1001</code>. If you read about <a href=\"http://en.wikipedia.org/wiki/UTF-8#Design\" rel=\"noreferrer\">UTF-8 on Wikipedia</a>, you\u2019ll see that such a byte must be followed by two of the form <code>10xx xxxx</code>. So, for example:</p>\n\n<pre><code>&gt;&gt;&gt; b'\\xe9\\x80\\x80'.decode('utf-8')\nu'\\u9000'\n</code></pre>\n\n<p>But that\u2019s just the mechanical cause of the exception. In this case, you have a string that is almost certainly encoded in latin 1. You can see how UTF-8 and latin 1 look different:</p>\n\n<pre><code>&gt;&gt;&gt; u'\\xe9'.encode('utf-8')\nb'\\xc3\\xa9'\n&gt;&gt;&gt; u'\\xe9'.encode('latin-1')\nb'\\xe9'\n</code></pre>\n\n<p>(Note, I'm using a mix of Python 2 and 3 representation here. The input is valid in any version of Python, but your Python interpreter is unlikely to actually show both unicode and byte strings in this way.)</p>\n"
    },
    "932": {
        "question_id": "23944657",
        "answer_id": "23944658",
        "question": "<p>If I have a class ...</p>\n\n<pre><code>class MyClass:\n\n    def method(arg):\n        print(arg)\n</code></pre>\n\n<p>... which I use to create an object ...</p>\n\n<pre><code>my_object = MyClass()\n</code></pre>\n\n<p>... on which I call <code>method(\"foo\")</code> like so ...</p>\n\n<pre><code>&gt;&gt;&gt; my_object.method(\"foo\")\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: method() takes exactly 1 positional argument (2 given)\n</code></pre>\n\n<p>... why does Python tell me I gave it two arguments, when I only gave one?</p>\n",
        "answer": "<p>In Python, this:</p>\n\n<pre><code>my_object.method(\"foo\")\n</code></pre>\n\n<p>... is <a href=\"http://en.wikipedia.org/wiki/Syntactic_sugar\">syntactic sugar</a>, which the interpreter translates behind the scenes into:</p>\n\n<pre><code>MyClass.method(my_object, \"foo\")\n</code></pre>\n\n<p>... which, as you can see, does indeed have two arguments - it's just that the first one is implicit, from the point of view of the caller.</p>\n\n<p>This is because most methods do some work with the object they're called on, so there needs to be some way for that object to be referred to inside the method. By convention, this first argument is called <code>self</code> inside the method definition:</p>\n\n<pre><code>class MyNewClass:\n\n    def method(self, arg):\n        print(self)\n        print(arg)\n</code></pre>\n\n<p>If you call <code>method(\"foo\")</code> on an instance of <code>MyNewClass</code>, it works as expected:</p>\n\n<pre><code>&gt;&gt;&gt; my_new_object = MyNewClass()\n&gt;&gt;&gt; my_new_object.method(\"foo\")\n&lt;__main__.MyNewClass object at 0x29045d0&gt;\nfoo\n</code></pre>\n\n<p>Occasionally (but not often), you really <em>don't</em> care about the object that your method is bound to, and in that circumstance, you can <a href=\"https://docs.python.org/3/glossary.html#term-decorator\">decorate</a> the method with the builtin <a href=\"https://docs.python.org/3/library/functions.html#staticmethod\"><code>staticmethod()</code></a> function to say so:</p>\n\n<pre><code>class MyOtherClass:\n\n    @staticmethod\n    def method(arg):\n        print(arg)\n</code></pre>\n\n<p>... in which case you don't need to add a <code>self</code> argument to the method definition, and it still works:</p>\n\n<pre><code>&gt;&gt;&gt; my_other_object = MyOtherClass()\n&gt;&gt;&gt; my_other_object.method(\"foo\")\nfoo\n</code></pre>\n"
    },
    "933": {
        "question_id": "11743019",
        "answer_id": "11743262",
        "question": "<p>I have a time in UTC from which I want the number of seconds since epoch.</p>\n\n<p>I am using strftime to convert it to the number of seconds. Taking 1st April 2012 as an example.</p>\n\n<pre><code>&gt;&gt;&gt;datetime.datetime(2012,04,01,0,0).strftime('%s')\n'1333234800'\n</code></pre>\n\n<p>1st of April 2012 UTC from epoch is 1333238400 but this above returns 1333234800 which is different by 1 hour. </p>\n\n<p>So it looks like that strftime is taking my system time into account and applies a timezone shift somewhere. I thought datetime was purely naive?</p>\n\n<p>How can I get around that? If possible avoiding to import other libraries unless standard. (I have portability concerns).</p>\n",
        "answer": "<p>If you want to convert a python datetime to seconds since epoch you could do it explicitly:</p>\n\n<pre><code>&gt;&gt;&gt; (datetime.datetime(2012,04,01,0,0) - datetime.datetime(1970,1,1)).total_seconds()\n1333238400.0\n</code></pre>\n\n<p>In Python 3.3+ you can use <a href=\"https://docs.python.org/3/library/datetime.html?highlight=re#datetime.datetime.timestamp\" rel=\"noreferrer\"><code>timestamp()</code></a> instead:</p>\n\n<pre><code>&gt;&gt;&gt; datetime.datetime(2012,4,1,0,0).timestamp()\n1333234800.0\n</code></pre>\n\n<hr>\n\n<p><strong>Why you should not use <code>datetime.strftime('%s')</code></strong></p>\n\n<p>Python doesn't actually support %s as an argument to strftime (if you check at <a href=\"http://docs.python.org/library/datetime.html#strftime-and-strptime-behavior\" rel=\"noreferrer\">http://docs.python.org/library/datetime.html#strftime-and-strptime-behavior</a> it's not in the list), the only reason it's working is because Python is passing the information to your system's strftime, which uses your local timezone.</p>\n\n<pre><code>&gt;&gt;&gt; datetime.datetime(2012,04,01,0,0).strftime('%s')\n'1333234800'\n</code></pre>\n"
    },
    "934": {
        "question_id": "4183506",
        "answer_id": "4183540",
        "question": "<p>How can I sort this list in descending order?</p>\n\n<pre><code>timestamp = [\n    \"2010-04-20 10:07:30\",\n    \"2010-04-20 10:07:38\",\n    \"2010-04-20 10:07:52\",\n    \"2010-04-20 10:08:22\",\n    \"2010-04-20 10:08:22\",\n    \"2010-04-20 10:09:46\",\n    \"2010-04-20 10:10:37\",\n    \"2010-04-20 10:10:58\",\n    \"2010-04-20 10:11:50\",\n    \"2010-04-20 10:12:13\",\n    \"2010-04-20 10:12:13\",\n    \"2010-04-20 10:25:38\"\n]\n</code></pre>\n",
        "answer": "<p>In one line, using a <code>lambda</code>:</p>\n\n<pre><code>timestamp.sort(key=lambda x: time.strptime(x, '%Y-%m-%d %H:%M:%S')[0:6], reverse=True)\n</code></pre>\n\n<hr>\n\n<p>Passing a function to <code>list.sort</code>:</p>\n\n<pre><code>def foo(x):\n    return time.strptime(x, '%Y-%m-%d %H:%M:%S')[0:6]\n\ntimestamp.sort(key=foo, reverse=True)\n</code></pre>\n"
    },
    "935": {
        "question_id": "14301967",
        "answer_id": "14302007",
        "question": "<p>What does a bare asterisk in the arguments of a function do?</p>\n\n<p>When I looked at the pickle module, I see this: (http://docs.python.org/3.3/library/pickle.html#pickle.dump)</p>\n\n<pre><code>pickle.dump(obj, file, protocol=None, *, fix_imports=True)\n</code></pre>\n\n<p>I know about a single and double asterisks preceding arguments (for variable number of arguments), but this precedes nothing. And I'm pretty sure this has nothing to do with pickle. That's probably just an example of this happening. I only learned its name when I sent this to the interpreter:</p>\n\n<pre><code>&gt;&gt;&gt; def func(*):\n...     pass\n...\n  File \"&lt;stdin&gt;\", line 1\nSyntaxError: named arguments must follow bare *\n</code></pre>\n\n<p>If it matters, I'm on python 3.3.0.</p>\n",
        "answer": "<p>Bare <code>*</code> is used to force the caller to use named arguments - so you cannot define a function with <code>*</code> as an argument when you have no following keyword arguments.</p>\n\n<p>See <a href=\"https://stackoverflow.com/a/14298976/180174\">this answer</a> or <a href=\"http://docs.python.org/3/reference/compound_stmts.html#function-definitions\" rel=\"noreferrer\">Python 3 documentation</a> for more details.</p>\n"
    },
    "936": {
        "question_id": "12791501",
        "answer_id": "12791510",
        "question": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"https://stackoverflow.com/questions/7255383/python-list-append-behavior\">Python list append behavior</a>  </p>\n</blockquote>\n\n\n\n<p>I intend to initialize a list of list with length of n.</p>\n\n<pre><code>x = [[]] * n\n</code></pre>\n\n<p>However, this somehow links the lists together.</p>\n\n<pre><code>&gt;&gt;&gt; x = [[]] * 3\n&gt;&gt;&gt; x[1].append(0)\n&gt;&gt;&gt; x\n[[0], [0], [0]]\n</code></pre>\n\n<p>I expect to have something like: </p>\n\n<pre><code>[[], [0], []]\n</code></pre>\n\n<p>Any ideas?</p>\n",
        "answer": "<p>The problem is that they're all the same exact list in memory. When you use the <code>[x]*n</code> syntax, what you get is a list of <code>n</code> many <code>x</code> objects, but they're all references to the same object. They're not distinct instances, rather, just <code>n</code> references to the same instance.</p>\n\n<p>To make a list of 3 different lists, do this:</p>\n\n<pre><code>x = [[] for i in range(3)]\n</code></pre>\n\n<p>This gives you 3 separate instances of <code>[]</code>, which is what you want</p>\n\n<p><code>[[]]*n</code> is similar to</p>\n\n<pre><code>l = []\nx = []\nfor i in range(n):\n    x.append(l)\n</code></pre>\n\n<p>While <code>[[] for i in range(3)]</code> is similar to:</p>\n\n<pre><code>x = []\nfor i in range(n):\n    x.append([])   # appending a new list!\n</code></pre>\n\n<hr>\n\n<pre><code>In [20]: x = [[]] * 4\n\nIn [21]: [id(i) for i in x]\nOut[21]: [164363948, 164363948, 164363948, 164363948] # same id()'s for each list,i.e same object\n\n\nIn [22]: x=[[] for i in range(4)]\n\nIn [23]: [id(i) for i in x]\nOut[23]: [164382060, 164364140, 164363628, 164381292] #different id(), i.e unique objects this time\n</code></pre>\n"
    },
    "937": {
        "question_id": "6479423",
        "answer_id": "6479605",
        "question": "<p>I found that in <code>123</code>, <code>\\d</code> matches <code>1</code> and <code>3</code> but not <code>2</code>. I was wondering if <code>\\d</code> matches a digit satisfying what kind of requirement? I am talking about Python style regex. </p>\n\n<p>Regular expression plugin in Gedit is using Python style regex. I created a text file with its content being </p>\n\n<pre><code>123\n</code></pre>\n\n<p>Only <code>1</code> and <code>3</code> are matched by the regex <code>\\d</code>; <code>2</code> is not.</p>\n\n<p>Generally for a sequence of digit numbers without other characters in between, only the odd order digits are matches, and the even order digits are not. For example in <code>12345</code>, the matches are <code>1</code>, <code>3</code> and <code>5</code>. </p>\n",
        "answer": "<p><code>[0-9]</code> <strong>is not always equivalent</strong> to <code>\\d</code>.  In python3, <code>[0-9]</code> matches only <code>0123456789</code> characters, while <code>\\d</code> matches <code>[0-9]</code> and other digit characters, for example Eastern Arabic numerals <code>\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669</code>.  </p>\n"
    },
    "938": {
        "question_id": "1133857",
        "answer_id": "1133888",
        "question": "<p>I can give it floating point numbers, such as</p>\n\n<pre><code>time.sleep(0.5)\n</code></pre>\n\n<p>but how accurate is it? If i give it</p>\n\n<pre><code>time.sleep(0.05)\n</code></pre>\n\n<p>will it really sleep about 50 ms?</p>\n",
        "answer": "<p>The accuracy of the time.sleep function depends on your underlying OS's sleep accuracy.  For non-realtime OS's like a stock Windows the smallest interval you can sleep for is about 10-13ms.  I have seen accurate sleeps within several milliseconds of that time when above the minimum 10-13ms.</p>\n\n<p>Update:\nLike mentioned in the docs cited below, it's common to do the sleep in a loop that will make sure to go back to sleep if it wakes you up early.</p>\n\n<p>I should also mention that if you are running Ubuntu you can try out a pseudo real-time kernel (with the RT_PREEMPT patch set) by installing the rt kernel package (at least in Ubuntu 10.04 LTS).</p>\n\n<p>EDIT: Correction non-realtime Linux kernels have minimum sleep interval much closer to 1ms then 10ms but it varies in a non-deterministic manner.</p>\n"
    },
    "939": {
        "question_id": "12723751",
        "answer_id": "12723785",
        "question": "<p>This simple code that simply tries to replace semicolons (at i-specified postions) by colons does not work:</p>\n\n<pre><code>for i in range(0,len(line)):\n     if (line[i]==\";\" and i in rightindexarray):\n         line[i]=\":\"\n</code></pre>\n\n<p>It gives the error </p>\n\n<pre><code>line[i]=\":\"\nTypeError: 'str' object does not support item assignment\n</code></pre>\n\n<p>How can I work around this to replace the semicolons by colons? Using replace does not work as that function takes no index- there might be some semicolons I do not want to replace.</p>\n\n<p><strong>Example</strong></p>\n\n<p>In the string I might have any number of semicolons, eg \"Hei der! ; Hello there ;!;\"</p>\n\n<p>I know which ones I want to replace (I have their index in the string). Using replace does not work as I'm not able to use an index with it.</p>\n",
        "answer": "<p>Strings in python are immutable, so you cannot treat them as a list and assign to indices.</p>\n\n<p>Use <a href=\"http://docs.python.org/library/stdtypes.html#str.replace\"><code>.replace()</code></a> instead:</p>\n\n<pre><code>line = line.replace(';', ':')\n</code></pre>\n\n<p>If you need to replace only <em>certain</em> semicolons, you'll need to be more specific. You could use slicing to isolate the section of the string to replace in:</p>\n\n<pre><code>line = line[:10].replace(';', ':') + line[10:]\n</code></pre>\n\n<p>That'll replace all semi-colons in the first 10 characters of the string.</p>\n"
    },
    "940": {
        "question_id": "46525786",
        "answer_id": "46526249",
        "question": "<p>Given two dataframes <code>df_1</code> and <code>df_2</code>, how to join them such that datetime column <code>df_1</code> is in between <code>start</code> and <code>end</code>  in dataframe <code>df_2</code>:</p>\n\n<pre><code>print df_1\n\n  timestamp              A          B\n0 2016-05-14 10:54:33    0.020228   0.026572\n1 2016-05-14 10:54:34    0.057780   0.175499\n2 2016-05-14 10:54:35    0.098808   0.620986\n3 2016-05-14 10:54:36    0.158789   1.014819\n4 2016-05-14 10:54:39    0.038129   2.384590\n\n\nprint df_2\n\n  start                end                  event    \n0 2016-05-14 10:54:31  2016-05-14 10:54:33  E1\n1 2016-05-14 10:54:34  2016-05-14 10:54:37  E2\n2 2016-05-14 10:54:38  2016-05-14 10:54:42  E3\n</code></pre>\n\n<p>Get corresponding <code>event</code> where <code>df1.timestamp</code> is between <code>df_2.start</code> and <code>df2.end</code> </p>\n\n<pre><code>  timestamp              A          B          event\n0 2016-05-14 10:54:33    0.020228   0.026572   E1\n1 2016-05-14 10:54:34    0.057780   0.175499   E2\n2 2016-05-14 10:54:35    0.098808   0.620986   E2\n3 2016-05-14 10:54:36    0.158789   1.014819   E2\n4 2016-05-14 10:54:39    0.038129   2.384590   E3\n</code></pre>\n",
        "answer": "<p>One simple solution is create <code>interval index</code> from <code>start and end</code> setting <code>closed = both</code> then use <code>get_loc</code> to get the event i.e (Hope all the date times are in timestamps dtype ) </p>\n\n<pre><code>df_2.index = pd.IntervalIndex.from_arrays(df_2['start'],df_2['end'],closed='both')\ndf_1['event'] = df_1['timestamp'].apply(lambda x : df_2.iloc[df_2.index.get_loc(x)]['event'])\n</code></pre>\n\n<p>Output : </p>\n\n<pre>\n            timestamp         A         B event\n0 2016-05-14 10:54:33  0.020228  0.026572    E1\n1 2016-05-14 10:54:34  0.057780  0.175499    E2\n2 2016-05-14 10:54:35  0.098808  0.620986    E2\n3 2016-05-14 10:54:36  0.158789  1.014819    E2\n4 2016-05-14 10:54:39  0.038129  2.384590    E3\n</pre>\n"
    },
    "941": {
        "question_id": "36489576",
        "answer_id": "36489724",
        "question": "<p>I have a function which processes a DataFrame, largely to process data into buckets create a binary matrix of features in a particular column using <code>pd.get_dummies(df[col])</code>.</p>\n\n<p>To avoid processing all of my data using this function at once (which goes out of memory and causes iPython to crash), I have broken the large DataFrame into chunks using:</p>\n\n<pre><code>chunks = (len(df) / 10000) + 1\ndf_list = np.array_split(df, chunks)\n</code></pre>\n\n<p><code>pd.get_dummies(df)</code> will automatically create new columns based on the contents of <code>df[col]</code> and these are likely to differ for each <code>df</code> in <code>df_list</code>.</p>\n\n<p>After processing, I am concatenating the DataFrames back together using:</p>\n\n<pre><code>for i, df_chunk in enumerate(df_list):\n    print \"chunk\", i\n    [x, y] = preprocess_data(df_chunk)\n    super_x = pd.concat([super_x, x], axis=0)\n    super_y = pd.concat([super_y, y], axis=0)\n    print datetime.datetime.utcnow()\n</code></pre>\n\n<p>The processing time of the first chunk is perfectly acceptable, however, it grows per chunk! This is not to do with the <code>preprocess_data(df_chunk)</code> as there is no reason for it to increase. Is this increase in time occurring as a result of the call to <code>pd.concat()</code>?</p>\n\n<p>Please see log below:</p>\n\n<pre><code>chunks 6\nchunk 0\n2016-04-08 00:22:17.728849\nchunk 1\n2016-04-08 00:22:42.387693 \nchunk 2\n2016-04-08 00:23:43.124381\nchunk 3\n2016-04-08 00:25:30.249369\nchunk 4\n2016-04-08 00:28:11.922305\nchunk 5\n2016-04-08 00:32:00.357365\n</code></pre>\n\n<p>Is there a workaround to speed this up? I have 2900 chunks to process so any help is appreciated!</p>\n\n<p>Open to any other suggestions in Python!</p>\n",
        "answer": "<p>Never call <code>DataFrame.append</code> or <code>pd.concat</code> inside a for-loop. It leads to quadratic copying.</p>\n\n<p><code>pd.concat</code> returns a new DataFrame. Space has to be allocated for the new\nDataFrame, and data from the old DataFrames have to be copied into the new\nDataFrame. Consider the amount of copying required by this line inside the <code>for-loop</code> (assuming each <code>x</code> has size 1):</p>\n\n<pre><code>super_x = pd.concat([super_x, x], axis=0)\n\n| iteration | size of old super_x | size of x | copying required |\n|         0 |                   0 |         1 |                1 |\n|         1 |                   1 |         1 |                2 |\n|         2 |                   2 |         1 |                3 |\n|       ... |                     |           |                  |\n|       N-1 |                 N-1 |         1 |                N |\n</code></pre>\n\n<p><code>1 + 2 + 3 + ... + N = N(N-1)/2</code>. So there is <code>O(N**2)</code> copies required to\ncomplete the loop.</p>\n\n<p>Now consider</p>\n\n<pre><code>super_x = []\nfor i, df_chunk in enumerate(df_list):\n    [x, y] = preprocess_data(df_chunk)\n    super_x.append(x)\nsuper_x = pd.concat(super_x, axis=0)\n</code></pre>\n\n<p>Appending to a list is an <code>O(1)</code> operation and does not require copying.  Now\nthere is a single call to <code>pd.concat</code> after the loop is done. This call to\n<code>pd.concat</code> requires N copies to be made, since <code>super_x</code> contains <code>N</code>\nDataFrames of size 1. So when constructed this way, <code>super_x</code> requires <code>O(N)</code>\ncopies.</p>\n"
    },
    "942": {
        "question_id": "43938672",
        "answer_id": "45602605",
        "question": "<p>Using an OCR tool I extracted texts from screenshots (about 1-5 sentences each). However, when manually verifying the extracted text, I noticed several errors that occur from time to time.</p>\n\n<p>Given the text \"Hello there \ud83d\ude0a! I really like Spark \u2764\ufe0f!\", I noticed that:</p>\n\n<p>1) Letters like \"I\", \"!\", and \"l\" get replaced by \"|\".</p>\n\n<p>2) Emojis are not correctly extracted and replaced by other characters or are left out.</p>\n\n<p>3) Blank spaces are removed from time to time.</p>\n\n<p>As a result, I might end up with a string like this: \"Hello there 7l | real|y like Spark!\"</p>\n\n<p>Since I am trying to match these string against a dataset including the correct text (in thise case \"Hello there \ud83d\ude0a! I really like Spark \u2764\ufe0f!\"), I am looking for an efficient way how to match the string in Spark.</p>\n\n<p>Can anyone suggest an efficient algorithm for Spark which allows me to compare the extract texts (~100.000) against my dataset (~100 million)?</p>\n",
        "answer": "<p>I wouldn't use Spark in the first place, but if you are really committed to the particular stack, you can combine a bunch of ml transformers to get  best matches. You'll need <code>Tokenizer</code> (or <code>split</code>):</p>\n\n\n\n<pre class=\"lang-scala prettyprint-override\"><code>import org.apache.spark.ml.feature.RegexTokenizer\n\nval tokenizer = new RegexTokenizer().setPattern(\"\").setInputCol(\"text\").setMinTokenLength(1).setOutputCol(\"tokens\")\n</code></pre>\n\n<p><code>NGram</code> (for example 3-gram)</p>\n\n<pre class=\"lang-scala prettyprint-override\"><code>import org.apache.spark.ml.feature.NGram\n\nval ngram = new NGram().setN(3).setInputCol(\"tokens\").setOutputCol(\"ngrams\")\n</code></pre>\n\n<p><code>Vectorizer</code> (for example <code>CountVectorizer</code> or <code>HashingTF</code>):</p>\n\n<pre class=\"lang-scala prettyprint-override\"><code>import org.apache.spark.ml.feature.HashingTF\n\nval vectorizer = new HashingTF().setInputCol(\"ngrams\").setOutputCol(\"vectors\")\n</code></pre>\n\n<p>and <code>LSH</code>:</p>\n\n<pre class=\"lang-scala prettyprint-override\"><code>import org.apache.spark.ml.feature.{MinHashLSH, MinHashLSHModel}\n\n// Increase numHashTables in practice.\nval lsh = new MinHashLSH().setInputCol(\"vectors\").setOutputCol(\"lsh\")\n</code></pre>\n\n<p>Combine with <code>Pipeline</code></p>\n\n<pre class=\"lang-scala prettyprint-override\"><code>import org.apache.spark.ml.Pipeline\n\nval pipeline = new Pipeline().setStages(Array(tokenizer, ngram, vectorizer, lsh))\n</code></pre>\n\n<p>Fit on example data:</p>\n\n<pre class=\"lang-scala prettyprint-override\"><code>val query = Seq(\"Hello there 7l | real|y like Spark!\").toDF(\"text\")\nval db = Seq(\n  \"Hello there \ud83d\ude0a! I really like Spark \u2764\ufe0f!\", \n  \"Can anyone suggest an efficient algorithm\"\n).toDF(\"text\")\n\nval model = pipeline.fit(db)\n</code></pre>\n\n<p>Transform both:</p>\n\n<pre class=\"lang-scala prettyprint-override\"><code>val dbHashed = model.transform(db)\nval queryHashed = model.transform(query)\n</code></pre>\n\n<p>and join</p>\n\n<pre class=\"lang-scala prettyprint-override\"><code>model.stages.last.asInstanceOf[MinHashLSHModel]\n  .approxSimilarityJoin(dbHashed, queryHashed, 0.75).show\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>+--------------------+--------------------+------------------+                  \n|            datasetA|            datasetB|           distCol|\n+--------------------+--------------------+------------------+\n|[Hello there \ud83d\ude0a! ...|[Hello there 7l |...|0.5106382978723405|\n+--------------------+--------------------+------------------+\n</code></pre>\n\n<p>The same approach can be used in Pyspark</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>from pyspark.ml import Pipeline\nfrom pyspark.ml.feature import RegexTokenizer, NGram, HashingTF, MinHashLSH\n\nquery = spark.createDataFrame(\n    [\"Hello there 7l | real|y like Spark!\"], \"string\"\n).toDF(\"text\")\n\ndb = spark.createDataFrame([\n    \"Hello there \ud83d\ude0a! I really like Spark \u2764\ufe0f!\", \n    \"Can anyone suggest an efficient algorithm\"\n], \"string\").toDF(\"text\")\n\n\nmodel = Pipeline(stages=[\n    RegexTokenizer(\n        pattern=\"\", inputCol=\"text\", outputCol=\"tokens\", minTokenLength=1\n    ),\n    NGram(n=3, inputCol=\"tokens\", outputCol=\"ngrams\"),\n    HashingTF(inputCol=\"ngrams\", outputCol=\"vectors\"),\n    MinHashLSH(inputCol=\"vectors\", outputCol=\"lsh\")\n]).fit(db)\n\ndb_hashed = model.transform(db)\nquery_hashed = model.transform(query)\n\nmodel.stages[-1].approxSimilarityJoin(db_hashed, query_hashed, 0.75).show()\n# +--------------------+--------------------+------------------+\n# |            datasetA|            datasetB|           distCol|\n# +--------------------+--------------------+------------------+\n# |[Hello there \ud83d\ude0a! ...|[Hello there 7l |...|0.5106382978723405|\n# +--------------------+--------------------+------------------+\n</code></pre>\n\n<p><strong>Related</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/50088548/8371915\">Optimize Spark job that has to calculate each to each entry similarity and output top N similar items for each</a></li>\n</ul>\n"
    },
    "943": {
        "question_id": "13355233",
        "answer_id": "13355291",
        "question": "<p>I am trying to use closures to eliminate a variable from a function signature (the application is to make writing all the functions needed for connecting Qt signals for an interface to control a largish number of parameters to the dictionary that stores the values ).  </p>\n\n<p>I do not understand why the case of using the <code>lambda</code> not wrapped in another function returns the last name for all cases.</p>\n\n<pre><code>names = ['a', 'b', 'c']\n\ndef test_fun(name, x):\n    print(name, x)\n\ndef gen_clousure(name):\n    return lambda x: test_fun(name, x)\n\nfuncs1 = [gen_clousure(n) for n in names]\nfuncs2 = [lambda x: test_fun(n, x) for n in names]\n\n# this is what I want\nIn [88]: for f in funcs1:\n   ....:     f(1)\na 1\nb 1\nc 1\n\n# I do not understand why I get this\nIn [89]: for f in funcs2:\n   ....:     f(1)\nc 1\nc 1\nc 1\n</code></pre>\n",
        "answer": "<p>The reason is that closures (lambdas or otherwise) close over names, not values.  When you define <code>lambda x: test_fun(n, x)</code>, the n is not evaluated, because it is inside the function.  It is evaluated when the function is <em>called</em>, at which time the value that is there is the last value from the loop.</p>\n\n<p>You say at the beginning that you want to \"use closures to eliminate a variable from a function signature\", but it doesn't really work that way.  (See below, though, for a way that may satisfy you, depending on what you mean by \"eliminate\".)  Variables inside the function body will not be evaluated when the function is defined.  In order to get the function to take a \"snapshot\" of the variable as it exists at function-definition time, you <em>must</em> pass the variable as an argument.  The usual way to do this is to give the function an argument whose default value is the variable from the outer scope.  Look at the difference between these two examples:</p>\n\n<pre><code>&gt;&gt;&gt; stuff = [lambda x: n+x for n in [1, 2, 3]]\n&gt;&gt;&gt; for f in stuff:\n...     print f(1)\n4\n4\n4\n&gt;&gt;&gt; stuff = [lambda x, n=n: n+x for n in [1, 2, 3]]\n&gt;&gt;&gt; for f in stuff:\n...     print f(1)\n2\n3\n4\n</code></pre>\n\n<p>In the second example, passing <code>n</code> as an argument to the function \"locks in\" the current value of n to that function.  You have to do something like this if you want to lock in the value in this way.  (If it didn't work this way, things like global variables wouldn't work at all; it's essential that free variables be looked up at the time of use.)</p>\n\n<p>Note that nothing about this behavior is specific to lambdas.  The same scoping rules are in effect if you use <code>def</code> to define a function that references variables from the enclosing scope.</p>\n\n<p>If you really want to, you can avoid adding the extra argument to your returned function, but to do so you must wrap that function in yet another function, like so:</p>\n\n<pre><code>&gt;&gt;&gt; def makeFunc(n):\n...     return lambda x: x+n\n&gt;&gt;&gt; stuff = [makeFunc(n) for n in [1, 2, 3]]\n&gt;&gt;&gt; for f in stuff:\n...     print f(1)\n2\n3\n4\n</code></pre>\n\n<p>Here, the inner lambda still looks up the value of <code>n</code> when it is called.  But the <code>n</code> it refers to is no longer a global variable but a local variable inside the enclosing function <code>makeFunc</code>.  A new value of this local variable is created every time <code>makeFunc</code> is called, and the returned lambda creates a closure that \"saves\" the local variable value that was in effect for that invocation of <code>makeFunc</code>.  Thus each function created in the loop has its own \"private\" variable called <code>x</code>.  (For this simple case, this can also be done using a lambda for the outer function --- <code>stuff = [(lambda n: lambda x: x+n)(n) for n in [1, 2, 3]]</code> --- but this is less readable.)</p>\n\n<p>Notice that you still have to pass your <code>n</code> as an argument, it's just that, by doing it this way, you don't pass it as an argument to the same function that winds up going into the <code>stuff</code> list; instead you pass it as an argument to a helper function that creates the function you want to put into <code>stuff</code>.  The advantage of using this two-function approach is that the returned function is \"clean\" and doesn't have the extra argument; this could be useful if you were wrapping functions that accepted a lot of arguments, in which case it could become confusing to remember where the <code>n</code> argument was in the list.  The disadvantage is that, doing it this way, the process of making the functions is more complicated, since you need another enclosing function.</p>\n\n<p>The upshot is that there is a tradeoff: you can make the function-creation process simpler (i.e., no need for two nested functions), but then you must make the resulting function a bit more complicated (i.e., it has this extra <code>n=n</code> argument).  Or you can make the function simpler (i.e., it has no <code>n=</code>n argument), but then you must make the function-creation process more complicated (i.e., you need two nested functions to implement the mechanism).</p>\n"
    },
    "944": {
        "question_id": "18752409",
        "answer_id": "27230127",
        "question": "<p>wondering if someone may please explain how openssl works in python2.7.\nI'm not sure if python got its own openssl or picks it up from local machine/env?</p>\n\n<p>let me explain: \n(if I do this in Python)</p>\n\n<pre><code>&gt;&gt;&gt; import ssl\n&gt;&gt;&gt; ssl.OPENSSL_VERSION\n'OpenSSL 0.9.8x 10 May 2012'\n</code></pre>\n\n<p>(In terminal)</p>\n\n<pre><code>$ openssl version\nOpenSSL 0.9.8x 10 May 2012\n$ which openssl \n/usr/bin/openssl\n</code></pre>\n\n<p>now I updated openssl (downloaded .)</p>\n\n<pre><code>$ cd openssl-1.0.1c\n$ ./Configure darwin64-x86_64-cc --prefix=/usr --openssldir=/opt/local/etc/openssl shared\n$ make\n$ sudo make install\n</code></pre>\n\n<p>this created separate director(as specified), so I copied it to the old path </p>\n\n<pre><code>cp -f /usr/local/ssl/bin/openssl /usr/bin/openssl\n</code></pre>\n\n<p>now in terminal openssl version has been updated but not from python!</p>\n\n<pre><code>$ openssl version\nOpenSSL 1.0.1c 10 May 2012\n</code></pre>\n\n<p>I did noticed that .dylib is still pointing to old version, how can I change this?</p>\n\n<pre><code>$ ls -l /usr/lib/*ssl*\n-rwxr-xr-x  1 root  wheel  411680 Jul 17  2012 /usr/lib/libssl.0.9.7.dylib\n-rwxr-xr-x  1 root  wheel  602800 May 24 03:43 /usr/lib/libssl.0.9.8.dylib\n-rwxr-xr-x  1 root  wheel  390908 Sep  9 17:37 /usr/lib/libssl.1.0.0.dylib\nlrwxr-xr-x  1 root  wheel      18 Jul 17  2012 /usr/lib/libssl.dylib -&gt; libssl.0.9.8.dylib\n</code></pre>\n\n<p><em><strong>Update</em></strong>: I changed the link still got old version at python.</p>\n\n<pre><code>$ ls -l /usr/lib/*ssl*\n-rwxr-xr-x  1 root  wheel  411680 Jul 17  2012 /usr/lib/libssl.0.9.7.dylib\n-rwxr-xr-x  1 root  wheel  602800 May 24 03:43 /usr/lib/libssl.0.9.8.dylib\n-rwxr-xr-x  1 root  wheel  390908 Sep  9 17:37 /usr/lib/libssl.1.0.0.dylib\nlrwxr-xr-x  1 root  wheel      18 Sep 11 15:47 /usr/lib/libssl.dylib -&gt; libssl.1.0.0.dylib\n</code></pre>\n",
        "answer": "<p>Please refer to <a href=\"http://rkulla.blogspot.kr/2014/03/the-path-to-homebrew.html\">http://rkulla.blogspot.kr/2014/03/the-path-to-homebrew.html</a></p>\n\n<p>After upgrading openssl to 1.0.1j by homebrew on MAC, but system python still referred to old version 0.9.8. It turned out the python referred to openssl. So I have installed new python with brewed openssl and finished this issue on Mac, not yet Ubuntu.</p>\n\n<p>On Mac OS X version 10.10 and system python version 2.7.6, my procedure is as follows:</p>\n\n<pre><code>$ brew update\n\n$ brew install openssl\n</code></pre>\n\n<p>Then you can see openssl version 1.0.1j.</p>\n\n<pre><code>$ brew link openssl --force \n\n$ brew install python --with-brewed-openssl    \n</code></pre>\n\n<p>You have to install new python with brewed openssl.    Then, you can see /usr/local/Cellar/python/2.7.8_2/bin/python. </p>\n\n<p><code>$ sudo ln -s /usr/local/Cellar/python/2.7.8_2/bin/python /usr/local/bin/python</code>  </p>\n\n<p>Of course, /usr/local/* should be owned by $USER, not root, which is told by Ryan, but I used 'sudo'. And, before this instruction, I didn't have /usr/local/bin/python. After this instruction, you can use python version 2.7.8 not 2.7.6.</p>\n\n<p>Finally, you can see as belows;</p>\n\n<pre><code>$ python --version  \nPython 2.7.8\n\n$ python -c \"import ssl; print ssl.OPENSSL_VERSION\"\nOpenSSL 1.0.1j 15 Oct 2014\n</code></pre>\n\n<p>Till now, I'm working on it on Ubuntu 12.04. If I have a solution for Ubuntu 12.04, then I will update my answer. I hope this procedure help you.</p>\n"
    },
    "945": {
        "question_id": "11541262",
        "answer_id": "11542200",
        "question": "<p>In the given example from <a href=\"https://stackoverflow.com/q/3501849/2596334\">this post</a>, it was mentioned that if default bindtags are used then event value will not be visible inside definition (there will be lag by one). </p>\n\n<p>There was some explanation regarding class binding.<br>\nI am a beginner, so would like to understand the detailed reason.<br>\nCan some please explain why it was not working in first case and was working in second case (when order of bindtags is modified).</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import Tkinter\n\ndef OnKeyPress(event):\n value = event.widget.get()\n string=\"value of %s is '%s'\" % (event.widget._name, value)\n status.configure(text=string)\n\nroot = Tkinter.Tk()\n\nentry1 = Tkinter.Entry(root, name=\"entry1\")\nentry2 = Tkinter.Entry(root, name=\"entry2\")\nentry3 = Tkinter.Entry(root, name=\"entry3\")\n\nentry1.bindtags(('.entry1', 'Entry', '.', 'all'))\nentry2.bindtags(('Entry', '.entry1', '.', 'all'))\nentry3.bindtags(('.entry1','Entry','post-class-bindings', '.', 'all'))\n\nbtlabel1 = Tkinter.Label(text=\"bindtags: %s\" % \" \".join(entry1.bindtags()))\nbtlabel2 = Tkinter.Label(text=\"bindtags: %s\" % \" \".join(entry2.bindtags()))\nbtlabel3 = Tkinter.Label(text=\"bindtags: %s\" % \" \".join(entry3.bindtags()))\nstatus = Tkinter.Label(anchor=\"w\")\n\nentry1.grid(row=0,column=0)\nbtlabel1.grid(row=0,column=1, padx=10, sticky=\"w\")\nentry2.grid(row=1,column=0)\nbtlabel2.grid(row=1,column=1, padx=10, sticky=\"w\")\nentry3.grid(row=2,column=0)\nbtlabel3.grid(row=2,column=1, padx=10)\nstatus.grid(row=3, columnspan=2, sticky=\"w\")\nentry1.bind(\"&lt;KeyPress&gt;\", OnKeyPress)\nentry2.bind(\"&lt;KeyPress&gt;\", OnKeyPress)\nentry3.bind_class(\"post-class-bindings\", \"&lt;KeyPress&gt;\", OnKeyPress)\n\nroot.mainloop()\n</code></pre>\n",
        "answer": "<p>When you do a binding on a widget, you aren't actually binding to a widget per se. When you do <code>mywidget.bind(...)</code>, what is actually happening is that the binding is associated with a <em>bind tag</em> with the same name as the widget.</p>\n\n<p>When an event is detected, Tkinter first figures out which widget intercepted the event. This widget will have a list of zero or more (by default: four) bind tags associated with it. Tkinter will check each tag in order to see if there's a binding that matches the event. If it finds one, it will execute the binding and then continue to the next tag, until it runs out of tags or one of the bound functions returns the string <code>\"break\"</code>. </p>\n\n<p>The sequence looks something like this:</p>\n\n<ol>\n<li>You press the \"x\" key. <em>At this point the \"x\" hasn't been inserted anywhere</em></li>\n<li>Tkinter gets the bind tags for the widget that has the keyboard focus. </li>\n<li>By default the first bind tag is the widget itself. Is there a binding on that tag? If so, execute it. For example, you might print the contents of the widget. Because no other bindings have fired yet, the \"x\" will not be part of the contents.</li>\n<li>If the bound function returns <code>\"break\"</code> then no more event processing is done. The \"x\" will not get inserted into the widget.</li>\n<li>If the widget did not return <code>\"break\"</code>, tkinter proceeds to the next bind tag.</li>\n<li>By default, the next bind tag is the widget class. Is there a binding on the class that matches this event (a keypress of the letter \"x\")?</li>\n<li>In this case the class does have a binding for this event, which is to actually insert the \"x\" into the widget. <em>Until this point, the \"x\" still hasn't been inserted into the widget</em>. After this binding, however, if you did a print of the contents you would see the \"x\"</li>\n<li>Processing continues in this manner until all bind tags have been processed.</li>\n</ol>\n\n<p>Based on the ongoing discussion in the comment section, it appears this is still unclear. I'll try to make this as simple as possible: </p>\n\n<p>It is the class binding which copies a character from the in-memory event object to the widget and thus causing it to appear on screen. Before the class binding fires, the character will not appear in the widget. After the class binding it will be in the widget. </p>\n"
    },
    "946": {
        "question_id": "53073411",
        "answer_id": "53073789",
        "question": "<p>I'm aware there are several answers concerning this question but nothing has worked for me so far so therefor i'm posting a new question.</p>\n\n<p>Recently i switched computers and since then I can't launch chrome with selenium. i've also tried firefox but the browser just doesn't lanch. </p>\n\n<pre><code>from selenium import webdriver\n\nd = webdriver.Chrome('/home/PycharmProjects/chromedriver')\n\nd.get('https://www.google.nl/')\n</code></pre>\n\n<p>i get the following error:</p>\n\n<pre><code>selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: crashed\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /opt/google/chrome/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\n  (Driver info: chromedriver=2.43.600233, platform=Linux 4.15.0-38-generic x86_64)\n</code></pre>\n\n<p>i have the latest chrome version and chromedriver installed</p>\n\n<p>EDIT:\nAfter trying @b0sss solution i am getting the following error.</p>\n\n<pre><code>selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: crashed\n  (chrome not reachable)\n  (The process started from chrome location /opt/google/chrome/google-chrome is no longer running, so chromedriver is assuming that Chrome has crashed.)\n  (Driver info: chromedriver=2.43.600233 (523efee95e3d68b8719b3a1c83051aa63aa6b10d),platform=Linux 4.15.0-38-generic x86_64)\n</code></pre>\n",
        "answer": "<p>Try to download HERE and use this latest chrome driver version.</p>\n\n<p><a href=\"https://sites.google.com/a/chromium.org/chromedriver/downloads\" rel=\"noreferrer\">https://sites.google.com/a/chromium.org/chromedriver/downloads</a></p>\n\n<p>EDIT:</p>\n\n<p>Try this:</p>\n\n<pre><code>chrome_options = Options()\nchrome_options.add_argument('--headless')\nchrome_options.add_argument('--no-sandbox')\nchrome_options.add_argument('--disable-dev-shm-usage')\nd = webdriver.Chrome('/home/PycharmProjects/chromedriver',chrome_options=chrome_options)\nd.get('https://www.google.nl/')\n</code></pre>\n"
    },
    "947": {
        "question_id": "47999568",
        "answer_id": "48003289",
        "question": "<p>There is a test, smth like:</p>\n\n<pre><code> import //needed imports\n\n public class TestClass{\n    WebDriver driver;\n\n    @Before\n    public void setUp() {\n       //some code\n    }\n\n    @Test\n    public void test1() {\n       //some code, including init of driver (geckodriver)\n    }\n\n   //@After\n   // public void tearDown() {\n   //  driver.quit();\n   //}\n}\n</code></pre>\n\n<p>So, I inited geckodriver, and successfully running my tests, using firefox instances. \nBut I want Not to close firefox window after each run, because I just want to analyse what I have, and fix any needed, after test run(I'm going to unComment driver.quit() later).\nAt the same time, each calling without closing the driver leads to over-impact to RAM on my PC(and does not matter - did I close browser manually, or not, after test):\n<a href=\"https://i.stack.imgur.com/PuMzN.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/PuMzN.png\" alt=\"enter image description here\"></a></p>\n\n<p>So, question is:\nis there any way to close the process(more precisely - do smth, which will close geckodriver.exe process in taskmgr) of \"geckodriver\", but will NOT close the browser after test finished? e.g., adding some method in test itself, whatever... This not impacts my work/test itself, I just want to add some optimizing.</p>\n",
        "answer": "<p>As per your question commenting out <strong><code>driver.quit()</code></strong> just <code>Not to close firefox window after each run, because I just want to analyse what I have</code> won't be a part of best practices.</p>\n\n<p><strong>For any detailed analysis we can create log entries and take snapshots.</strong></p>\n\n<p>While automating through <strong><code>Selenium</code></strong> as per the best practices you should invoke the <strong><code>quit()</code></strong> method within the <code>tearDown() {}</code>. Invoking <strong><code>quit()</code></strong> <code>DELETE</code>s the current browsing session through sending <strong>\"quit\"</strong> command with <strong>{\"flags\":[\"eForceQuit\"]}</strong> and finally sends the <strong>GET</strong> request on <strong>/shutdown</strong> <code>EndPoint</code>. Here is an example below :</p>\n\n<pre><code>1503397488598   webdriver::server   DEBUG   -&gt; DELETE /session/8e457516-3335-4d3b-9140-53fb52aa8b74 \n1503397488607   geckodriver::marionette TRACE   -&gt; 37:[0,4,\"quit\",{\"flags\":[\"eForceQuit\"]}]\n1503397488821   webdriver::server   DEBUG   -&gt; GET /shutdown\n</code></pre>\n\n<p>So on invoking <strong><code>quit()</code></strong> method the <code>Web Browser</code> session and the <code>WebDriver</code> instance gets killed completely. Hence you don't have to incorporate any additional steps which will be an overhead.</p>\n\n<hr>\n\n<h2>Answer to this question :</h2>\n\n<p>Still if you want to execute kill the dangling <code>WebDriver</code> instances e.g. <strong><code>GeckoDriver.exe</code></strong> instances you can use either of the following code block to kill any of the dangling <code>WebDriver</code> instances :</p>\n\n<ul>\n<li><p>Java Solution(<strong>WindowsOS specific</strong>):</p>\n\n<pre><code>import java.io.IOException;\n\npublic class Kill_ChromeDriver_GeckoDriver_IEDriverserver \n{\n    public static void main(String[] args) throws Exception \n    {\n        Runtime.getRuntime().exec(\"taskkill /F /IM geckodriver.exe /T\");\n        Runtime.getRuntime().exec(\"taskkill /F /IM chromedriver.exe /T\");\n        Runtime.getRuntime().exec(\"taskkill /F /IM IEDriverServer.exe /T\");\n    }\n}\n</code></pre></li>\n<li><p>Python Solution(<strong>WindowsOS specific</strong>):</p>\n\n<pre><code>import os\nos.system(\"taskkill /f /im geckodriver.exe /T\")\nos.system(\"taskkill /f /im chromedriver.exe /T\")\nos.system(\"taskkill /f /im IEDriverServer.exe /T\")\n</code></pre></li>\n<li><p>Python Solution(<strong>Cross Platform</strong>): </p>\n\n<pre><code>import os\nimport psutil\n\nPROCNAME = \"geckodriver\" # or chromedriver or IEDriverServer\nfor proc in psutil.process_iter():\n    # check whether the process name matches\n    if proc.name() == PROCNAME:\n        proc.kill()\n</code></pre></li>\n</ul>\n"
    },
    "948": {
        "question_id": "20994716",
        "answer_id": "20994790",
        "question": "<p>I know <code>pip</code> is a package manager for python packages. However, I saw the installation on IPython's website use <code>conda</code> to install IPython.</p>\n\n<p>Can I use <code>pip</code> to install IPython? Why should I use <code>conda</code> as another python package manager when I already have <code>pip</code>?</p>\n\n<p>What is the difference between <code>pip</code> and <code>conda</code>?</p>\n",
        "answer": "<p>Quoting from the <a href=\"https://www.continuum.io/blog/developer-blog/python-packages-and-environments-conda\" rel=\"noreferrer\">Conda blog</a>:</p>\n\n<blockquote>\n  <p>Having been involved in the python world for so long, we are all aware of pip, easy_install, and virtualenv, but these tools did not meet all of our specific requirements. The main problem is that they are focused around Python, neglecting non-Python library dependencies, such as HDF5, MKL, LLVM, etc., which do not have a setup.py in their source code and also do not install files into Python\u2019s site-packages directory.</p>\n</blockquote>\n\n<p>So Conda is a packaging tool and installer that aims to do more than what <code>pip</code> does; handle library dependencies <em>outside</em> of the Python packages as well as the Python packages themselves. Conda also creates a virtual environment, like <code>virtualenv</code> does.</p>\n\n<p>As such, Conda should be compared to <a href=\"http://www.buildout.org/en/latest/\" rel=\"noreferrer\">Buildout</a> perhaps, another tool that lets you handle both Python and non-Python installation tasks.</p>\n\n<p>Because Conda introduces a new packaging format, you cannot use <code>pip</code> and Conda interchangeably;  <code>pip</code> cannot install the Conda package format. You can use the two tools side by side (by installing <code>pip</code> with <code>conda install pip</code>) but they do not interoperate either.</p>\n"
    },
    "949": {
        "question_id": "7948494",
        "answer_id": "7948504",
        "question": "<p>What's the difference between a Python module and a Python package?</p>\n\n<p>See also: <a href=\"https://stackoverflow.com/questions/3680883/whats-the-difference-between-package-and-module\">What&#39;s the difference between &quot;package&quot; and &quot;module&quot;</a> (for other languages)</p>\n",
        "answer": "<p>A module is a single file (or files) that are imported under one import and used. \ne.g.</p>\n\n<pre><code>import my_module\n</code></pre>\n\n<p>A package is a collection of modules in directories that give a package hierarchy.</p>\n\n<pre><code>from my_package.timing.danger.internets import function_of_love\n</code></pre>\n\n<p><a href=\"http://docs.python.org/tutorial/modules.html\" rel=\"noreferrer\">Documentation for modules</a></p>\n\n<p><a href=\"http://www.network-theory.co.uk/docs/pytut/Packages.html\" rel=\"noreferrer\">Introduction to packages</a></p>\n"
    },
    "950": {
        "question_id": "4142151",
        "answer_id": "4142178",
        "question": "<p>I have a directory that stores all the <strong>.py</strong> files.</p>\n\n<pre><code>bin/\n   main.py\n   user.py # where class User resides\n   dir.py # where class Dir resides\n</code></pre>\n\n<p>I want to use classes from <strong>user.py</strong> and <strong>dir.py</strong> in <strong>main.py</strong>.<br>\nHow can I import these Python classes into <strong>main.py</strong>?<br>\nFurthermore, how can I import class <code>User</code> if <strong>user.py</strong> is in a sub directory?</p>\n\n<pre><code>bin/\n    dir.py\n    main.py\n    usr/\n        user.py\n</code></pre>\n",
        "answer": "<h1>Python 2</h1>\n\n<p>Make an empty file called <code>__init__.py</code> in the same directory as the files. That will signify to Python that it's \"ok to import from this directory\".</p>\n\n<p>Then just do...</p>\n\n<pre><code>from user import User\nfrom dir import Dir\n</code></pre>\n\n<p>The same holds true if the files are in a subdirectory - put an <code>__init__.py</code> in the subdirectory as well, and then use regular import statements, with dot notation. For each level of directory, you need to add to the import path. </p>\n\n<pre><code>bin/\n    main.py\n    classes/\n        user.py\n        dir.py\n</code></pre>\n\n<p>So if the directory was named \"classes\", then you'd do this:</p>\n\n<pre><code>from classes.user import User\nfrom classes.dir import Dir\n</code></pre>\n\n<h1>Python 3</h1>\n\n<p>Same as previous, but prefix the module name with a <code>.</code> if not using a subdirectory:</p>\n\n<pre><code>from .user import User\nfrom .dir import Dir\n</code></pre>\n"
    },
    "951": {
        "question_id": "13295735",
        "answer_id": "13295801",
        "question": "<p>I have a dataframe as below</p>\n\n<pre><code>      itm Date                  Amount \n67    420 2012-09-30 00:00:00   65211\n68    421 2012-09-09 00:00:00   29424\n69    421 2012-09-16 00:00:00   29877\n70    421 2012-09-23 00:00:00   30990\n71    421 2012-09-30 00:00:00   61303\n72    485 2012-09-09 00:00:00   71781\n73    485 2012-09-16 00:00:00     NaN\n74    485 2012-09-23 00:00:00   11072\n75    485 2012-09-30 00:00:00  113702\n76    489 2012-09-09 00:00:00   64731\n77    489 2012-09-16 00:00:00     NaN\n</code></pre>\n\n<p>when I try to .apply a function to the Amount column I get the following error.</p>\n\n<pre><code>ValueError: cannot convert float NaN to integer\n</code></pre>\n\n<p>I have tried applying a function using .isnan from the Math Module\nI have tried the pandas .replace attribute\nI tried the .sparse data attribute from pandas 0.9\nI have also tried if NaN == NaN statement in a function.\nI have also looked at this article <a href=\"https://stackoverflow.com/questions/8161836/how-do-i-replace-na-values-with-zeros-in-r\">How do I replace NA values with zeros in an R dataframe?</a> whilst looking at some other articles. \nAll the methods I have tried have not worked or do not recognise NaN.\nAny Hints or solutions would be appreciated. </p>\n",
        "answer": "<p>I believe <code>DataFrame.fillna()</code> will do this for you.</p>\n\n<p>Link to Docs for <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.fillna.html\" rel=\"noreferrer\">a dataframe</a> and for <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.fillna.html\" rel=\"noreferrer\">a Series</a>. </p>\n\n<p>Example: </p>\n\n<pre><code>In [7]: df\nOut[7]: \n          0         1\n0       NaN       NaN\n1 -0.494375  0.570994\n2       NaN       NaN\n3  1.876360 -0.229738\n4       NaN       NaN\n\nIn [8]: df.fillna(0)\nOut[8]: \n          0         1\n0  0.000000  0.000000\n1 -0.494375  0.570994\n2  0.000000  0.000000\n3  1.876360 -0.229738\n4  0.000000  0.000000\n</code></pre>\n\n<p>To fill the NaNs in only one column, select just that column. in this case I'm using inplace=True to actually change the contents of df. </p>\n\n<pre><code>In [12]: df[1].fillna(0, inplace=True)\nOut[12]: \n0    0.000000\n1    0.570994\n2    0.000000\n3   -0.229738\n4    0.000000\nName: 1\n\nIn [13]: df\nOut[13]: \n          0         1\n0       NaN  0.000000\n1 -0.494375  0.570994\n2       NaN  0.000000\n3  1.876360 -0.229738\n4       NaN  0.000000\n</code></pre>\n"
    },
    "952": {
        "question_id": "4417546",
        "answer_id": "4417735",
        "question": "<p>To launch programs from my Python-scripts, I'm using the following method:</p>\n\n<pre><code>def execute(command):\n    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    output = process.communicate()[0]\n    exitCode = process.returncode\n\n    if (exitCode == 0):\n        return output\n    else:\n        raise ProcessException(command, exitCode, output)\n</code></pre>\n\n<p>So when i launch a process like <code>Process.execute(\"mvn clean install\")</code>, my program waits until the the process is finished, and only then i get the complete output of my program. This is annoying if i'm running a process that takes a while to finish.</p>\n\n<p>Can i let my program write the process output line by line, by polling the process output before it finishes in a loop or something?</p>\n\n<p>**[EDIT]\nSorry i didn't search very well before posting this question. Threading is actually the key. Found an example here which shows how to do it: **\n<a href=\"https://stackoverflow.com/questions/984941/python-subprocess-popen-from-a-thread\">Python Subprocess.Popen from a thread</a></p>\n",
        "answer": "<p>You can use <a href=\"https://docs.python.org/3/library/functions.html#iter\" rel=\"noreferrer\">iter</a> to process lines as soon as the command outputs them: <code>lines = iter(fd.readline, \"\")</code>. Here's a full example showing a typical use case (thanks to @jfs for helping out):</p>\n\n<pre><code>from __future__ import print_function # Only Python 2.x\nimport subprocess\n\ndef execute(cmd):\n    popen = subprocess.Popen(cmd, stdout=subprocess.PIPE, universal_newlines=True)\n    for stdout_line in iter(popen.stdout.readline, \"\"):\n        yield stdout_line \n    popen.stdout.close()\n    return_code = popen.wait()\n    if return_code:\n        raise subprocess.CalledProcessError(return_code, cmd)\n\n# Example\nfor path in execute([\"locate\", \"a\"]):\n    print(path, end=\"\")\n</code></pre>\n"
    },
    "953": {
        "question_id": "1053928",
        "answer_id": "1062629",
        "question": "<p><a href=\"http://en.wikipedia.org/wiki/NumPy\" rel=\"noreferrer\">NumPy</a> is an extremely useful library, and from using it I've found that it's capable of handling matrices which are quite large (10000 x 10000) easily, but begins to struggle with anything much larger (trying to create a matrix of 50000 x 50000 fails). Obviously, this is because of the massive memory requirements.</p>\n\n<p>Is there is a way to create huge matrices natively in NumPy (say 1 million by 1 million) in some way (without having several terrabytes of RAM)?</p>\n",
        "answer": "<p>PyTables and NumPy are the way to go.</p>\n\n<p>PyTables will store the data on disk in HDF format, with optional compression. My datasets often get 10x compression, which is handy when dealing with tens or hundreds of millions of rows. It's also very fast; my 5 year old laptop can crunch through data doing SQL-like GROUP BY aggregation at 1,000,000 rows/second. Not bad for a Python-based solution!</p>\n\n<p>Accessing the data as a NumPy recarray again is as simple as:</p>\n\n<pre><code>data = table[row_from:row_to]\n</code></pre>\n\n<p>The HDF library takes care of reading in the relevant chunks of data and converting to NumPy.</p>\n"
    },
    "954": {
        "question_id": "13638898",
        "answer_id": "13638960",
        "question": "<p><code>filter</code>, <code>map</code>, and <code>reduce</code> work perfectly in Python 2. Here is an example:</p>\n\n<pre><code>&gt;&gt;&gt; def f(x):\n        return x % 2 != 0 and x % 3 != 0\n&gt;&gt;&gt; filter(f, range(2, 25))\n[5, 7, 11, 13, 17, 19, 23]\n\n&gt;&gt;&gt; def cube(x):\n        return x*x*x\n&gt;&gt;&gt; map(cube, range(1, 11))\n[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\n&gt;&gt;&gt; def add(x,y):\n        return x+y\n&gt;&gt;&gt; reduce(add, range(1, 11))\n55\n</code></pre>\n\n<p>But in Python 3, I receive the following outputs:</p>\n\n<pre><code>&gt;&gt;&gt; filter(f, range(2, 25))\n&lt;filter object at 0x0000000002C14908&gt;\n\n&gt;&gt;&gt; map(cube, range(1, 11))\n&lt;map object at 0x0000000002C82B70&gt;\n\n&gt;&gt;&gt; reduce(add, range(1, 11))\nTraceback (most recent call last):\n  File \"&lt;pyshell#8&gt;\", line 1, in &lt;module&gt;\n    reduce(add, range(1, 11))\nNameError: name 'reduce' is not defined\n</code></pre>\n\n<p>I would appreciate if someone could explain to me why this is.</p>\n\n<p>Screenshot of code for further clarity:</p>\n\n<p><a href=\"https://i.imgur.com/WekeD.png\" rel=\"noreferrer\"><img src=\"https://i.imgur.com/WekeD.png\" alt=\"IDLE sessions of Python 2 and 3 side-by-side\"></a></p>\n",
        "answer": "<p>You can read about the changes in <a href=\"http://docs.python.org/3.0/whatsnew/3.0.html\">What's New In Python 3.0</a>. You should read it thoroughly when you move from 2.x to 3.x since a lot has been changed.</p>\n\n<p>The whole answer here are quotes from the documentation.</p>\n\n<p><strong><a href=\"http://docs.python.org/3.0/whatsnew/3.0.html#views-and-iterators-instead-of-lists\">Views And Iterators Instead Of Lists</a></strong></p>\n\n<blockquote>\n  <p>Some well-known APIs no longer return lists:</p>\n  \n  <ul>\n  <li>[...]</li>\n  <li><a href=\"http://docs.python.org/3.0/library/functions.html#map\"><code>map()</code></a> and <a href=\"http://docs.python.org/3.0/library/functions.html#filter\"><code>filter()</code></a> return iterators. If you really need a list, a quick fix is e.g. <code>list(map(...))</code>, but a better fix is often to use a list comprehension (especially when the original code uses lambda), or rewriting the code so it doesn\u2019t need a list at all. Particularly tricky is <code>map()</code> invoked for the side effects of the function; the correct transformation is to use a regular <code>for</code> loop (since creating a list would just be wasteful).</li>\n  <li>[...]</li>\n  </ul>\n</blockquote>\n\n<p><strong><a href=\"http://docs.python.org/3.0/whatsnew/3.0.html#builtins\">Builtins</a></strong></p>\n\n<blockquote>\n  <ul>\n  <li>[...]</li>\n  <li>Removed <code>reduce()</code>. Use <a href=\"http://docs.python.org/3.0/library/functools.html#functools.reduce\"><code>functools.reduce()</code></a> if you really need it; however, 99 percent of the time an explicit <code>for</code> loop is more readable.</li>\n  <li>[...]</li>\n  </ul>\n</blockquote>\n"
    },
    "955": {
        "question_id": "298772",
        "answer_id": "298793",
        "question": "<p>When I render a page using the Django template renderer, I can pass in a dictionary variable containing various values to manipulate them in the page using <code>{{ myVar }}</code>.</p>\n\n<p>Is there a way to access the same variable in Javascript (perhaps using the DOM, I don't know how Django makes the variables accessible)? I want to be able to lookup details using an AJAX lookup based on the values contained in the variables passed in.</p>\n",
        "answer": "<p>The <code>{{variable}}</code> is substituted directly into the HTML. Do a view source; it isn't a \"variable\" or anything like it. It's just rendered text.</p>\n\n<p>Having said that, you can put this kind of substitution into your JavaScript.</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;script type=\"text/javascript\"&gt; \n   var a = \"{{someDjangoVariable}}\";\n&lt;/script&gt;\n</code></pre>\n\n<p>This gives you \"dynamic\" javascript.</p>\n"
    },
    "956": {
        "question_id": "1936466",
        "answer_id": "1983219",
        "question": "<p>Basically, I want to use BeautifulSoup to grab strictly the <em>visible text</em> on a webpage. For instance, <a href=\"http://www.nytimes.com/2009/12/21/us/21storm.html\" rel=\"noreferrer\">this webpage</a> is my test case. And I mainly want to just get the body text (article) and maybe even a few tab names here and there. I have tried the suggestion in this <a href=\"https://stackoverflow.com/questions/1752662/beautifulsoup-easy-way-to-to-obtain-html-free-contents\">SO question</a> that returns lots of <code>&lt;script&gt;</code> tags and html comments which I don't want. I can't figure out the arguments I need for the function <a href=\"http://www.crummy.com/software/BeautifulSoup/documentation.html#arg-limit\" rel=\"noreferrer\"><code>findAll()</code></a> in order to just get the visible texts on a webpage.</p>\n\n<p>So, how should I find all visible text excluding scripts, comments, css etc.?</p>\n",
        "answer": "<p>Try this:</p>\n\n<pre><code>from bs4 import BeautifulSoup\nfrom bs4.element import Comment\nimport urllib.request\n\n\ndef tag_visible(element):\n    if element.parent.name in ['style', 'script', 'head', 'title', 'meta', '[document]']:\n        return False\n    if isinstance(element, Comment):\n        return False\n    return True\n\n\ndef text_from_html(body):\n    soup = BeautifulSoup(body, 'html.parser')\n    texts = soup.findAll(text=True)\n    visible_texts = filter(tag_visible, texts)  \n    return u\" \".join(t.strip() for t in visible_texts)\n\nhtml = urllib.request.urlopen('http://www.nytimes.com/2009/12/21/us/21storm.html').read()\nprint(text_from_html(html))\n</code></pre>\n"
    },
    "957": {
        "question_id": "11914472",
        "answer_id": "18284900",
        "question": "<p>I am using Python 3.2.1 and I can't import the <code>StringIO</code> module. I use \n<code>io.StringIO</code> and it works, but I can't use it with <code>numpy</code>'s <code>genfromtxt</code> like this:</p>\n\n<pre><code>x=\"1 3\\n 4.5 8\"        \nnumpy.genfromtxt(io.StringIO(x))\n</code></pre>\n\n<p>I get the following error:</p>\n\n<pre><code>TypeError: Can't convert 'bytes' object to str implicitly  \n</code></pre>\n\n<p>and when I write <code>import StringIO</code> it says</p>\n\n<pre><code>ImportError: No module named 'StringIO'\n</code></pre>\n",
        "answer": "<blockquote>\n  <p>when i write import StringIO it says there is no such module.</p>\n</blockquote>\n\n<p>From <a href=\"http://docs.python.org/3.0/whatsnew/3.0.html\" rel=\"noreferrer\">What\u2019s New In Python 3.0</a>:</p>\n\n<blockquote>\n  <p>The <code>StringIO</code> and <code>cStringIO</code> modules are gone. Instead, import the <code>io</code>\n  module and use <code>io.StringIO</code> or <code>io.BytesIO</code> for text and data\n  respectively.</p>\n</blockquote>\n\n<p>.</p>\n\n<hr>\n\n<p>A possibly useful method of fixing some Python 2 code to also work in Python 3 (caveat emptor):</p>\n\n<pre><code>try:\n    from StringIO import StringIO\nexcept ImportError:\n    from io import StringIO\n</code></pre>\n\n<blockquote>\n  <p><em>Note: This example may be tangential to the main issue of the question and is included only as something to consider when generically addressing the missing <code>StringIO</code> module.</em>  For a more direct solution the the message <code>TypeError: Can't convert 'bytes' object to str implicitly</code>, see <a href=\"https://stackoverflow.com/a/11970414/86967\">this answer</a>.</p>\n</blockquote>\n"
    },
    "958": {
        "question_id": "9110593",
        "answer_id": "9189249",
        "question": "<p>I tried the sample provided within the documentation of the <a href=\"http://docs.python-requests.org/en/latest/user/advanced/#asynchronous-requests\" rel=\"noreferrer\">requests library</a> for python.</p>\n\n<p>With <code>async.map(rs)</code>, I get the response codes, but I want to get the content of each page requested. This, for example, does not work:</p>\n\n<pre><code>out = async.map(rs)\nprint out[0].content\n</code></pre>\n",
        "answer": "<h2>Note</h2>\n\n<p>The below answer is <em>not</em> applicable to requests v0.13.0+. The asynchronous functionality was moved to <a href=\"https://github.com/kennethreitz/grequests\" rel=\"noreferrer\">grequests</a> after this question was written. However, you could just replace <code>requests</code> with <code>grequests</code> below and it should work.</p>\n\n<p>I've left this answer as is to reflect the original question which was about using requests &lt; v0.13.0.</p>\n\n<hr>\n\n<p>To do multiple tasks with <code>async.map</code> <em>asynchronously</em> you have to:</p>\n\n<ol>\n<li>Define a function for what you want to do with each object (your task)</li>\n<li>Add that function as an event hook in your request</li>\n<li>Call <code>async.map</code> on a list of all the requests / actions</li>\n</ol>\n\n<p>Example:</p>\n\n<pre><code>from requests import async\n# If using requests &gt; v0.13.0, use\n# from grequests import async\n\nurls = [\n    'http://python-requests.org',\n    'http://httpbin.org',\n    'http://python-guide.org',\n    'http://kennethreitz.com'\n]\n\n# A simple task to do to each response object\ndef do_something(response):\n    print response.url\n\n# A list to hold our things to do via async\nasync_list = []\n\nfor u in urls:\n    # The \"hooks = {...\" part is where you define what you want to do\n    # \n    # Note the lack of parentheses following do_something, this is\n    # because the response will be used as the first argument automatically\n    action_item = async.get(u, hooks = {'response' : do_something})\n\n    # Add the task to our list of things to do via async\n    async_list.append(action_item)\n\n# Do our list of things to do via async\nasync.map(async_list)\n</code></pre>\n"
    },
    "959": {
        "question_id": "9847213",
        "answer_id": "9847269",
        "question": "<p>I want to find out the following:\ngiven a date (<code>datetime</code> object), what is the corresponding day of the week.</p>\n\n<p>For instance Sunday is the first day, Monday: second day.. and so on</p>\n\n<p>And then if the input is something like today's date.</p>\n\n<h2>Example</h2>\n\n<pre><code>&gt;&gt;&gt; today = datetime.datetime(2017, 10, 20)\n&gt;&gt;&gt; today.get_weekday()  # what I look for\n</code></pre>\n\n<p>The output is maybe <code>6</code> (since its Friday)</p>\n",
        "answer": "<p>Use <code>weekday()</code> (<a href=\"http://docs.python.org/library/datetime.html#datetime.date.weekday\">docs</a>):</p>\n\n<pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; datetime.datetime.today()\ndatetime.datetime(2012, 3, 23, 23, 24, 55, 173504)\n&gt;&gt;&gt; datetime.datetime.today().weekday()\n4\n</code></pre>\n\n<p>From the documentation:</p>\n\n<blockquote>\n  <p>Return the day of the week as an integer, where Monday is 0 and Sunday is 6.</p>\n</blockquote>\n"
    },
    "960": {
        "question_id": "2887878",
        "answer_id": "2888042",
        "question": "<p>I have a CSV file and I want to bulk-import this file into my sqlite3 database using Python. the command is \".import .....\". but it seems that it cannot work like this. Can anyone give me an example of how to do it in sqlite3? I am using windows just in case.\nThanks</p>\n",
        "answer": "\n\n<pre class=\"lang-py prettyprint-override\"><code>import csv, sqlite3\n\ncon = sqlite3.connect(\":memory:\")\ncur = con.cursor()\ncur.execute(\"CREATE TABLE t (col1, col2);\") # use your column names here\n\nwith open('data.csv','rb') as fin: # `with` statement available in 2.5+\n    # csv.DictReader uses first line in file for column headings by default\n    dr = csv.DictReader(fin) # comma is default delimiter\n    to_db = [(i['col1'], i['col2']) for i in dr]\n\ncur.executemany(\"INSERT INTO t (col1, col2) VALUES (?, ?);\", to_db)\ncon.commit()\ncon.close()\n</code></pre>\n"
    },
    "961": {
        "question_id": "1848474",
        "answer_id": "1848647",
        "question": "<p>In the book <em>Python in a Nutshell (2nd Edition)</em> there is an example which uses<br>\nold style classes to demonstrate how methods are resolved in classic resolution order and<br>\nhow is it different with the new order. </p>\n\n<p>I tried the same example by rewriting the example in new style but the result is no different than what was obtained with old style classes. The python version I am using to run the example is <strong>2.5.2.</strong> Below is the example: </p>\n\n<pre><code>class Base1(object):  \n    def amethod(self): print \"Base1\"  \n\nclass Base2(Base1):  \n    pass\n\nclass Base3(object):  \n    def amethod(self): print \"Base3\"\n\nclass Derived(Base2,Base3):  \n    pass\n\ninstance = Derived()  \ninstance.amethod()  \nprint Derived.__mro__  \n</code></pre>\n\n<p>The call <code>instance.amethod()</code> prints <strong><code>Base1</code></strong>, but as per my understanding of the MRO with new style of classes the output should have been <strong><code>Base3</code></strong>. The call <code>Derived.__mro__</code> prints:      </p>\n\n<p><code>(&lt;class '__main__.Derived'&gt;, &lt;class '__main__.Base2'&gt;, &lt;class '__main__.Base1'&gt;, &lt;class '__main__.Base3'&gt;, &lt;type 'object'&gt;)</code></p>\n\n<p>I am not sure if my understanding of MRO with new style classes is incorrect or that I am doing a silly mistake which I am not able to detect. Please help me in better understanding of MRO.</p>\n",
        "answer": "<p>The crucial difference between resolution order for legacy vs new-style classes comes when the same ancestor class occurs more than once in the \"naive\", depth-first approach -- e.g., consider a \"diamond inheritance\" case:</p>\n\n<pre><code>&gt;&gt;&gt; class A: x = 'a'\n... \n&gt;&gt;&gt; class B(A): pass\n... \n&gt;&gt;&gt; class C(A): x = 'c'\n... \n&gt;&gt;&gt; class D(B, C): pass\n... \n&gt;&gt;&gt; D.x\n'a'\n</code></pre>\n\n<p>here, legacy-style, the resolution order is D - B - A - C - A : so when looking up D.x, A is the first base in resolution order to solve it, thereby hiding the definition in C.  While:</p>\n\n<pre><code>&gt;&gt;&gt; class A(object): x = 'a'\n... \n&gt;&gt;&gt; class B(A): pass\n... \n&gt;&gt;&gt; class C(A): x = 'c'\n... \n&gt;&gt;&gt; class D(B, C): pass\n... \n&gt;&gt;&gt; D.x\n'c'\n&gt;&gt;&gt; \n</code></pre>\n\n<p>here, new-style, the order is:</p>\n\n<pre><code>&gt;&gt;&gt; D.__mro__\n(&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, \n    &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)\n</code></pre>\n\n<p>with <code>A</code> forced to come in resolution order only once and after all of its subclasses, so that overrides (i.e., C's override of member <code>x</code>) actually work sensibly.</p>\n\n<p>It's one of the reasons that old-style classes should be avoided: multiple inheritance with \"diamond-like\" patterns just doesn't work sensibly with them, while it does with new-style.</p>\n"
    },
    "962": {
        "question_id": "18421757",
        "answer_id": "18422264",
        "question": "<p>I'm using a python script as a driver for a hydrodynamics code.  When it comes time to run the simulation, I use <code>subprocess.Popen</code> to run the code, collect the output from stdout and stderr into a <code>subprocess.PIPE</code> --- then I can print (and save to a log-file) the output information, and check for any errors.  The problem is, I have no idea how the code is progressing.  If I run it directly from the command line, it gives me output about what iteration its at, what time, what the next time-step is, etc.</p>\n\n<p><strong>Is there a way to both store the output (for logging and error checking), and also produce a live-streaming output?</strong></p>\n\n<p>The relevant section of my code:</p>\n\n<pre><code>ret_val = subprocess.Popen( run_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True )\noutput, errors = ret_val.communicate()\nlog_file.write(output)\nprint output\nif( ret_val.returncode ):\n    print \"RUN failed\\n\\n%s\\n\\n\" % (errors)\n    success = False\n\nif( errors ): log_file.write(\"\\n\\n%s\\n\\n\" % errors)\n</code></pre>\n\n<p>Originally I was piping the <code>run_command</code> through <code>tee</code> so that a copy went directly to the log-file, and the stream still output directly to the terminal -- but that way I can't store any errors (to my knowlege).</p>\n\n<hr>\n\n<p>Edit:</p>\n\n<p>Temporary solution:</p>\n\n<pre><code>ret_val = subprocess.Popen( run_command, stdout=log_file, stderr=subprocess.PIPE, shell=True )\nwhile not ret_val.poll():\n    log_file.flush()\n</code></pre>\n\n<p>then, in another terminal, run <code>tail -f log.txt</code> (s.t. <code>log_file = 'log.txt'</code>).</p>\n",
        "answer": "<p>You have two ways of doing this, either by creating an iterator from the <code>read</code> or <code>readline</code> functions and do:</p>\n\n<pre><code>import subprocess\nimport sys\nwith open('test.log', 'w') as f:  # replace 'w' with 'wb' for Python 3\n    process = subprocess.Popen(your_command, stdout=subprocess.PIPE)\n    for c in iter(lambda: process.stdout.read(1), ''):  # replace '' with b'' for Python 3\n        sys.stdout.write(c)\n        f.write(c)\n</code></pre>\n\n<p>or</p>\n\n<pre><code>import subprocess\nimport sys\nwith open('test.log', 'w') as f:  # replace 'w' with 'wb' for Python 3\n    process = subprocess.Popen(your_command, stdout=subprocess.PIPE)\n    for line in iter(process.stdout.readline, ''):  # replace '' with b'' for Python 3\n        sys.stdout.write(line)\n        f.write(line)\n</code></pre>\n\n<p>Or you can create a <code>reader</code> and a <code>writer</code> file. Pass the <code>writer</code> to the <code>Popen</code> and read from the <code>reader</code></p>\n\n<pre><code>import io\nimport time\nimport subprocess\nimport sys\n\nfilename = 'test.log'\nwith io.open(filename, 'wb') as writer, io.open(filename, 'rb', 1) as reader:\n    process = subprocess.Popen(command, stdout=writer)\n    while process.poll() is None:\n        sys.stdout.write(reader.read())\n        time.sleep(0.5)\n    # Read the remaining\n    sys.stdout.write(reader.read())\n</code></pre>\n\n<p>This way you will have the data written in the <code>test.log</code> as well as on the standard output. </p>\n\n<p>The only advantage of the file approach is that your code doesn't block. So you can do whatever you want in the meantime and read whenever you want from the <code>reader</code> in a non-blocking way. When you use <code>PIPE</code>, <code>read</code> and <code>readline</code> functions will block until either one character is written to the pipe or a line is written to the pipe respectively.</p>\n"
    },
    "963": {
        "question_id": "27263805",
        "answer_id": "27266225",
        "question": "<p>I have a dataframe where some cells contain lists of multiple values. Rather than storing multiple\nvalues in a cell, I'd like to expand the dataframe so that each item in the list gets its own row (with the same values in all other columns). So if I have:</p>\n\n<pre><code>import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(\n    {'trial_num': [1, 2, 3, 1, 2, 3],\n     'subject': [1, 1, 1, 2, 2, 2],\n     'samples': [list(np.random.randn(3).round(2)) for i in range(6)]\n    }\n)\n\ndf\nOut[10]: \n                 samples  subject  trial_num\n0    [0.57, -0.83, 1.44]        1          1\n1    [-0.01, 1.13, 0.36]        1          2\n2   [1.18, -1.46, -0.94]        1          3\n3  [-0.08, -4.22, -2.05]        2          1\n4     [0.72, 0.79, 0.53]        2          2\n5    [0.4, -0.32, -0.13]        2          3\n</code></pre>\n\n<p>How do I convert to long form, e.g.:</p>\n\n<pre><code>   subject  trial_num  sample  sample_num\n0        1          1    0.57           0\n1        1          1   -0.83           1\n2        1          1    1.44           2\n3        1          2   -0.01           0\n4        1          2    1.13           1\n5        1          2    0.36           2\n6        1          3    1.18           0\n# etc.\n</code></pre>\n\n<p>The index is not important, it's OK to set existing\ncolumns as the index and the final ordering isn't\nimportant.</p>\n",
        "answer": "<p>A bit longer than I expected:</p>\n\n<pre><code>&gt;&gt;&gt; df\n                samples  subject  trial_num\n0  [-0.07, -2.9, -2.44]        1          1\n1   [-1.52, -0.35, 0.1]        1          2\n2  [-0.17, 0.57, -0.65]        1          3\n3  [-0.82, -1.06, 0.47]        2          1\n4   [0.79, 1.35, -0.09]        2          2\n5   [1.17, 1.14, -1.79]        2          3\n&gt;&gt;&gt;\n&gt;&gt;&gt; s = df.apply(lambda x: pd.Series(x['samples']),axis=1).stack().reset_index(level=1, drop=True)\n&gt;&gt;&gt; s.name = 'sample'\n&gt;&gt;&gt;\n&gt;&gt;&gt; df.drop('samples', axis=1).join(s)\n   subject  trial_num  sample\n0        1          1   -0.07\n0        1          1   -2.90\n0        1          1   -2.44\n1        1          2   -1.52\n1        1          2   -0.35\n1        1          2    0.10\n2        1          3   -0.17\n2        1          3    0.57\n2        1          3   -0.65\n3        2          1   -0.82\n3        2          1   -1.06\n3        2          1    0.47\n4        2          2    0.79\n4        2          2    1.35\n4        2          2   -0.09\n5        2          3    1.17\n5        2          3    1.14\n5        2          3   -1.79\n</code></pre>\n\n<p>If you want sequential index, you can apply <code>reset_index(drop=True)</code> to the result.</p>\n\n<p><strong>update</strong>:</p>\n\n<pre><code>&gt;&gt;&gt; res = df.set_index(['subject', 'trial_num'])['samples'].apply(pd.Series).stack()\n&gt;&gt;&gt; res = res.reset_index()\n&gt;&gt;&gt; res.columns = ['subject','trial_num','sample_num','sample']\n&gt;&gt;&gt; res\n    subject  trial_num  sample_num  sample\n0         1          1           0    1.89\n1         1          1           1   -2.92\n2         1          1           2    0.34\n3         1          2           0    0.85\n4         1          2           1    0.24\n5         1          2           2    0.72\n6         1          3           0   -0.96\n7         1          3           1   -2.72\n8         1          3           2   -0.11\n9         2          1           0   -1.33\n10        2          1           1    3.13\n11        2          1           2   -0.65\n12        2          2           0    0.10\n13        2          2           1    0.65\n14        2          2           2    0.15\n15        2          3           0    0.64\n16        2          3           1   -0.10\n17        2          3           2   -0.76\n</code></pre>\n"
    },
    "964": {
        "question_id": "6027558",
        "answer_id": "6027615",
        "question": "<p>Suppose you have a dictionary like:</p>\n\n<pre><code>{'a': 1,\n 'c': {'a': 2,\n       'b': {'x': 5,\n             'y' : 10}},\n 'd': [1, 2, 3]}\n</code></pre>\n\n<p>How would you go about flattening that into something like:</p>\n\n<pre><code>{'a': 1,\n 'c_a': 2,\n 'c_b_x': 5,\n 'c_b_y': 10,\n 'd': [1, 2, 3]}\n</code></pre>\n",
        "answer": "<p>Basically the same way you would flatten a nested list, you just have to do the extra work for iterating the dict by key/value, creating new keys for your new dictionary and creating the dictionary at final step.</p>\n\n<pre><code>import collections\n\ndef flatten(d, parent_key='', sep='_'):\n    items = []\n    for k, v in d.items():\n        new_key = parent_key + sep + k if parent_key else k\n        if isinstance(v, collections.MutableMapping):\n            items.extend(flatten(v, new_key, sep=sep).items())\n        else:\n            items.append((new_key, v))\n    return dict(items)\n\n&gt;&gt;&gt; flatten({'a': 1, 'c': {'a': 2, 'b': {'x': 5, 'y' : 10}}, 'd': [1, 2, 3]})\n{'a': 1, 'c_a': 2, 'c_b_x': 5, 'd': [1, 2, 3], 'c_b_y': 10}\n</code></pre>\n"
    },
    "965": {
        "question_id": "9752958",
        "answer_id": "9752970",
        "question": "<p>I would like to return two values from a function in two separate variables. \nFor example:</p>\n\n<pre><code>def select_choice():\n    loop = 1\n    row = 0\n    while loop == 1:\n        print('''Choose from the following options?:\n                 1. Row 1\n                 2. Row 2\n                 3. Row 3''')\n\n        row = int(input(\"Which row would you like to move the card from?: \"))\n        if row == 1:\n            i = 2\n            card = list_a[-1]\n        elif row == 2:\n            i = 1\n            card = list_b[-1]\n        elif row == 3:\n            i = 0\n            card = list_c[-1]\n        return i\n        return card\n</code></pre>\n\n<p>And I want to be able to use these values separately. When I tried to use <code>return i, card</code>, it returns a <code>tuple</code> and this is not what I want. </p>\n",
        "answer": "<p>You cannot return two values, but you can return a <code>tuple</code> or a <code>list</code> and unpack it after the call:</p>\n\n<pre><code>def select_choice():\n    ...\n    return i, card  # or [i, card]\n\nmy_i, my_card = select_choice()\n</code></pre>\n\n<p>On line <code>return i, card</code> <code>i, card</code> means creating a tuple. You can also use parenthesis like <code>return (i, card)</code>, but tuples are created by comma, so parens are not mandatory. But you can use parens to make your code more readable or to split the tuple over multiple lines. The same applies to line <code>my_i, my_card = select_choice()</code>.</p>\n\n<p>If you want to return more than two values, consider using a <a href=\"https://docs.python.org/3.6/library/collections.html#collections.namedtuple\" rel=\"noreferrer\">named tuple</a>. It will allow the caller of the function to access fields of the returned value by name, which is more readable. You can still access items of the tuple by index. For example in <code>Schema.loads</code> method Marshmallow framework returns a <a href=\"https://marshmallow.readthedocs.io/en/2.x-line/api_reference.html#marshmallow.UnmarshalResult\" rel=\"noreferrer\"><code>UnmarshalResult</code></a> which is a <a href=\"https://github.com/marshmallow-code/marshmallow/blob/fe5469998a6f1f297f8c85acfba8c48ff7bc3d7d/marshmallow/schema.py#L29\" rel=\"noreferrer\"><code>namedtuple</code></a>. So you can do:</p>\n\n<pre><code>data, errors = MySchema.loads(request.json())\nif errors:\n    ...\n</code></pre>\n\n<p>or</p>\n\n<pre><code>result = MySchema.loads(request.json())\nif result.errors:\n    ...\nelse:\n    # use `result.data`\n</code></pre>\n\n<p>In other cases you may return a <code>dict</code> from your function:</p>\n\n<pre><code>def select_choice():\n    ...\n    return {'i': i, 'card': card, 'other_field': other_field, ...}\n</code></pre>\n\n<p>But you might want consider to return an instance of a utility class, which wraps your data:</p>\n\n<pre><code>class ChoiceData():\n    def __init__(self, i, card, other_field, ...):\n        # you can put here some validation logic\n        self.i = i\n        self.card = card\n        self.other_field = other_field\n        ...\n\ndef select_choice():\n    ...\n    return ChoiceData(i, card, other_field, ...)\n\nchoice_data = select_choice()\nprint(choice_data.i, choice_data.card)\n</code></pre>\n"
    },
    "966": {
        "question_id": "6930982",
        "answer_id": "6931070",
        "question": "<p>I'd like to use a <code>variable</code> inside a <code>regex</code>, how can I do this in <code>Python</code>?</p>\n\n<pre><code>TEXTO = sys.argv[1]\n\nif re.search(r\"\\b(?=\\w)TEXTO\\b(?!\\w)\", subject, re.IGNORECASE):\n    # Successful match\nelse:\n    # Match attempt failed\n</code></pre>\n",
        "answer": "<p>You have to build the regex as a string:</p>\n\n<pre><code>TEXTO = sys.argv[1]\nmy_regex = r\"\\b(?=\\w)\" + re.escape(TEXTO) + r\"\\b(?!\\w)\"\n\nif re.search(my_regex, subject, re.IGNORECASE):\n    etc.\n</code></pre>\n\n<p>Note the use of <code>re.escape</code> so that if your text has special characters, they won't be interpreted as such.</p>\n"
    },
    "967": {
        "question_id": "8898765",
        "answer_id": "8899042",
        "question": "<p>I am wondering if it is possible to call python functions from java code using jython, or is it only for calling java code from python?</p>\n",
        "answer": "<p>Jython: Python for the Java Platform - <a href=\"http://www.jython.org/index.html\" rel=\"noreferrer\">http://www.jython.org/index.html</a></p>\n\n<p>You can easily call python functions from Java code with Jython. That is as long as your python code itself runs under jython, i.e. doesn't use some c-extensions that aren't supported.</p>\n\n<p>If that works for you, it's certainly the simplest solution you can get. Otherwise you can use <code>org.python.util.PythonInterpreter</code> from the new Java6 interpreter support.</p>\n\n<p>A simple example from the top of my head - but should work I hope: (no error checking done for brevity)</p>\n\n<pre><code>PythonInterpreter interpreter = new PythonInterpreter();\ninterpreter.exec(\"import sys\\nsys.path.append('pathToModules if they are not there by default')\\nimport yourModule\");\n// execute a function that takes a string and returns a string\nPyObject someFunc = interpreter.get(\"funcName\");\nPyObject result = someFunc.__call__(new PyString(\"Test!\"));\nString realResult = (String) result.__tojava__(String.class);\n</code></pre>\n"
    },
    "968": {
        "question_id": "17241004",
        "answer_id": "17242374",
        "question": "<p>Do you know how to get the index or column of a DataFrame as a NumPy array or python list? </p>\n",
        "answer": "<p>To get a NumPy array, you should use the <code>values</code> attribute:</p>\n\n<pre><code>In [1]: df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]}, index=['a', 'b', 'c']); df\n   A  B\na  1  4\nb  2  5\nc  3  6\n\nIn [2]: df.index.values\nOut[2]: array(['a', 'b', 'c'], dtype=object)\n</code></pre>\n\n<p><em>This accesses how the data is already stored, so there's no need for a conversion.<br>\nNote: This attribute is also available for many other pandas' objects.</em></p>\n\n<pre><code>In [3]: df['A'].values\nOut[3]: Out[16]: array([1, 2, 3])\n</code></pre>\n\n<hr>\n\n<p>To get the index as a list, call <code>tolist</code>:</p>\n\n<pre><code>In [4]: df.index.tolist()\nOut[4]: ['a', 'b']\n</code></pre>\n\n<p>And similarly, for columns.</p>\n"
    },
    "969": {
        "question_id": "19608134",
        "answer_id": "19609168",
        "question": "<p>In Python 3.x, <a href=\"http://docs.python.org/3.3/library/functions.html#super\"><code>super()</code></a> can be called without arguments:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>class A(object):\n    def x(self):\n         print(\"Hey now\")\n\nclass B(A):\n    def x(self):\n        super().x()\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>&gt;&gt;&gt; B().x()\nHey now\n</code></pre>\n\n<p>In order to make this work, some compile-time magic is performed, one consequence of which is that the following code (which rebinds <code>super</code> to <code>super_</code>) fails:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>super_ = super\n\nclass A(object):\n    def x(self):\n        print(\"No flipping\")\n\nclass B(A):\n    def x(self):\n        super_().x()\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>&gt;&gt;&gt; B().x()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 3, in x\nRuntimeError: super(): __class__ cell not found\n</code></pre>\n\n<p>Why is <code>super()</code> unable to resolve the superclass at runtime without assistance from the compiler? Are there practical situations in which this behaviour, or the underlying reason for it, could bite an unwary programmer?</p>\n\n<p>... and, as a side question: are there any other examples in Python of functions, methods etc. which can be broken by rebinding them to a different name?</p>\n",
        "answer": "<p>The new magic <code>super()</code> behaviour was added to avoid violating the D.R.Y. (Don't Repeat Yourself) principle, see <a href=\"http://www.python.org/dev/peps/pep-3135/\" rel=\"noreferrer\">PEP 3135</a>. Having to explicitly name the class by referencing it as a global is also prone to the same rebinding issues you discovered with <code>super()</code> itself:</p>\n\n<pre><code>class Foo(Bar):\n    def baz(self):\n        return super(Foo, self).baz() + 42\n\nSpam = Foo\nFoo = something_else()\n\nSpam().baz()  # liable to blow up\n</code></pre>\n\n<p>The same applies to using class decorators where the decorator returns a new object, which rebinds the class name:</p>\n\n<pre><code>@class_decorator_returning_new_class\nclass Foo(Bar):\n    def baz(self):\n        # Now `Foo` is a *different class*\n        return super(Foo, self).baz() + 42\n</code></pre>\n\n<p>The magic <code>super()</code> <code>__class__</code> cell sidesteps these issues nicely by giving you access to the original class object.</p>\n\n<p>The PEP was kicked off by Guido, who <a href=\"https://mail.python.org/pipermail/python-3000/2007-April/006667.html\" rel=\"noreferrer\">initially envisioned <code>super</code> becoming a keyword</a>, and the idea of using a cell to look up the current class <a href=\"https://mail.python.org/pipermail/python-3000/2007-April/006671.html\" rel=\"noreferrer\">was also his</a>. Certainly, the idea to make it a keyword was part of the <a href=\"https://mail.python.org/pipermail/python-3000/2007-April/007024.html\" rel=\"noreferrer\">first draft of the PEP</a>.</p>\n\n<p>However, it was in fact Guido himself who then <a href=\"https://mail.python.org/pipermail/python-3000/2007-June/008242.html\" rel=\"noreferrer\">stepped away from the keyword idea as 'too magical'</a>, proposing the current implementation instead. He <a href=\"https://mail.python.org/pipermail/python-3000/2007-June/008301.html\" rel=\"noreferrer\">anticipated that using a different name for <code>super()</code> could be a problem</a>:</p>\n\n<blockquote>\n  <p>My patch uses an intermediate solution: it assumes you need <code>__class__</code>\n  whenever you use a variable named <code>'super'</code>. Thus, if you (globally)\n  rename <code>super</code> to <code>supper</code> and use <code>supper</code> but not <code>super</code>, it won't work\n  without arguments (but it will still work if you pass it either\n  <code>__class__</code> or the actual class object); if you have an unrelated\n  variable named <code>super</code>, things will work but the method will use the\n  slightly slower call path used for cell variables.</p>\n</blockquote>\n\n<p>So, in the end, it was Guido himself that proclaimed that using a <code>super</code> keyword did not feel right, and that providing a magic <code>__class__</code> cell was an acceptable compromise.</p>\n\n<p>I agree that the magic, implicit behaviour of the implementation is somewhat surprising, but <code>super()</code> is one of the most mis-applied functions in the language. Just take a look at all the misapplied <a href=\"https://searchcode.com/?q=super%28type%28self%29+lang%3APython\" rel=\"noreferrer\"><code>super(type(self), self)</code></a> or <a href=\"https://searchcode.com/?q=super%28self.__class__+lang%3APython\" rel=\"noreferrer\"><code>super(self.__class__, self)</code></a>  invocations found on the Internet; if any of that code was ever called from a derived class <a href=\"https://stackoverflow.com/questions/18208683/when-calling-super-in-a-derived-class-can-i-pass-in-self-class\">you'd end up with an infinite recursion exception</a>. At the very least the simplified <code>super()</code> call, without arguments, avoids <em>that</em> problem.</p>\n\n<p>As for the renamed <code>super_</code>; just reference <code>__class__</code> in your method <em>as well</em> and it'll work again. The cell is created if you reference either the <code>super</code> <strong>or</strong> <code>__class__</code> names in your method:</p>\n\n<pre><code>&gt;&gt;&gt; super_ = super\n&gt;&gt;&gt; class A(object):\n...     def x(self):\n...         print(\"No flipping\")\n... \n&gt;&gt;&gt; class B(A):\n...     def x(self):\n...         __class__  # just referencing it is enough\n...         super_().x()\n... \n&gt;&gt;&gt; B().x()\nNo flipping\n</code></pre>\n"
    },
    "970": {
        "question_id": "2535760",
        "answer_id": "2535770",
        "question": "<p>What is the difference between ',' and 'as' in except statements, eg:</p>\n\n<pre><code>try:\n    pass\nexcept Exception, exception:\n    pass\n</code></pre>\n\n<p>and:</p>\n\n<pre><code>try:\n    pass\nexcept Exception as exception:\n    pass\n</code></pre>\n\n<p>Is the second syntax legal in 2.6?  It works in CPython 2.6 on Windows but the 2.5 interpreter in cygwin complains that it is invalid.</p>\n\n<p>If they are both valid in 2.6 which should I use?</p>\n",
        "answer": "<p>The definitive document is <a href=\"http://www.python.org/dev/peps/pep-3110/\" rel=\"noreferrer\">PEP-3110: Catching Exceptions</a></p>\n\n<p>Summary:</p>\n\n<ul>\n<li>In Python 3.x, using <code>as</code> is <em>required</em> to assign an exception to a variable.</li>\n<li>In Python 2.6+, use the <code>as</code> syntax, since it is far less ambiguous and forward compatible with Python 3.x.</li>\n<li>In Python 2.5 and earlier, use the comma version, since <code>as</code> isn't supported.</li>\n</ul>\n"
    },
    "971": {
        "question_id": "22646463",
        "answer_id": "22647006",
        "question": "<p><strong>What explains the difference in behavior of boolean and bitwise operations on lists vs numpy.arrays?</strong> </p>\n\n<p>I'm getting confused about the appropriate use of the '<code>&amp;</code>' vs '<code>and</code>' in python, illustrated in the following simple examples. </p>\n\n<pre><code>    mylist1 = [True,  True,  True,  False,  True]\n    mylist2 = [False, True, False,  True, False]  \n\n    &gt;&gt;&gt; len(mylist1) == len(mylist2)\n    True\n\n    # ---- Example 1 ----\n    &gt;&gt;&gt;mylist1 and mylist2 \n    [False, True, False, True, False]\n    #I am confused: I would have expected [False, True, False, False, False]\n\n    # ---- Example 2 ----\n    &gt;&gt;&gt;mylist1 &amp; mylist2 \n    *** TypeError: unsupported operand type(s) for &amp;: 'list' and 'list'\n    #I am confused: Why not just like example 1? \n\n    # ---- Example 3 ----\n    &gt;&gt;&gt;import numpy as np\n\n    &gt;&gt;&gt; np.array(mylist1) and np.array(mylist2) \n    *** ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\n    #I am confused: Why not just like Example 4? \n\n     # ---- Example 4 ----\n    &gt;&gt;&gt; np.array(mylist1) &amp; np.array(mylist2) \n    array([False,  True, False, False, False], dtype=bool)\n    #This is the output I was expecting! \n</code></pre>\n\n<p>This <a href=\"https://stackoverflow.com/a/6490106/2098573\">answer</a>, and this <a href=\"https://stackoverflow.com/a/10246441/2098573\">answer</a> both helped me understand that <a href=\"http://docs.python.org/2/library/stdtypes.html#boolean-operations-and-or-not\" rel=\"noreferrer\">'and'</a> is a boolean operation but <a href=\"http://docs.python.org/3/reference/expressions.html#binary-bitwise-operations\" rel=\"noreferrer\">'&amp;'</a> is a bitwise operation. </p>\n\n<p>I was <a href=\"https://wiki.python.org/moin/BitwiseOperators\" rel=\"noreferrer\">reading</a> some information to better understand the concept of <a href=\"https://wiki.python.org/moin/BitwiseOperators\" rel=\"noreferrer\">bitwise operations</a>, but I am struggling to use that information to make sense of  my above 4 examples. </p>\n\n<p>Note, in my particular situation, my desired output is a newlist where:</p>\n\n<pre><code>    len(newlist) == len(mylist1) \n    newlist[i] == (mylist1[i] and mylist2[i]) #for every element of newlist\n</code></pre>\n\n<p>Example 4, above, led me to my desired output, so that is fine. </p>\n\n<p>But I am left feeling confused about when/how/why I should use 'and' vs '&amp;'. Why do lists and numpy arrays behave differently with these operators? </p>\n\n<p><strong>Can anyone help me understand the difference between boolean and bitwise operations to explain why they handle lists and numpy.arrays differently?</strong> </p>\n\n<p>I just want to make sure I continue to use these operations correctly going forward. Thanks a lot for the help!</p>\n\n<pre><code>Numpy version 1.7.1\n\npython 2.7\n\nReferences all inline with text.\n</code></pre>\n\n<p><strong>EDITS</strong></p>\n\n<p>1) Thanks @delnan for pointing out that in my original examples I had am ambiguity that was masking my deeper confusion. I have updated my examples to clarify my question. </p>\n",
        "answer": "<p><code>and</code> tests whether both expressions are logically <code>True</code> while <code>&amp;</code> (when used with <code>True</code>/<code>False</code> values) tests if both are <code>True</code>.</p>\n\n<p>In Python, empty built-in objects are typically treated as logically <code>False</code> while non-empty built-ins are logically <code>True</code>. This facilitates the common use case where you want to do something if a list is empty and something else if the list is not. Note that this means that the list [False] is logically <code>True</code>:</p>\n\n<pre><code>&gt;&gt;&gt; if [False]:\n...    print 'True'\n...\nTrue\n</code></pre>\n\n<p>So in Example 1, the first list is non-empty and therefore logically <code>True</code>, so the truth value of the <code>and</code> is the same as that of the second list. (In our case, the second list is non-empty and therefore logically <code>True</code>, but identifying that would require an unnecessary step of calculation.)</p>\n\n<p>For example 2, lists cannot meaningfully be combined in a bitwise fashion because they can contain arbitrary unlike elements. Things that can be combined bitwise include: Trues and Falses, integers.</p>\n\n<p>NumPy objects, by contrast, support vectorized calculations. That is, they let you perform the same operations on multiple pieces of data.</p>\n\n<p>Example 3 fails because NumPy arrays (of length > 1) have no truth value as this prevents vector-based logic confusion.</p>\n\n<p>Example 4 is simply a vectorized bit <code>and</code> operation.</p>\n\n<p><strong>Bottom Line</strong></p>\n\n<ul>\n<li><p>If you are not dealing with arrays and are not performing math manipulations of integers, you probably want <code>and</code>.</p></li>\n<li><p>If you have vectors of truth values that you wish to combine, use <code>numpy</code> with <code>&amp;</code>.</p></li>\n</ul>\n"
    },
    "972": {
        "question_id": "12523044",
        "answer_id": "31799492",
        "question": "<p>I'd like to make the output of tail -F or something similar available to me in Python without blocking or locking. I've found some really old code to do that <a href=\"http://code.activestate.com/recipes/436477-filetailpy/\">here</a>, but I'm thinking there must be a better way or a library to do the same thing by now. Anyone know of one?</p>\n\n<p>Ideally, I'd have something like <code>tail.getNewData()</code> that I could call every time I wanted more data.</p>\n",
        "answer": "<p>So, this is coming quite late, but I ran into the same problem again, and there's a much better solution now. Just use <a href=\"https://github.com/bgreenlee/pygtail\">pygtail</a>:</p>\n\n<blockquote>\n  <p>Pygtail reads log file lines that have not been read. It will even\n  handle log files that have been rotated. Based on logcheck's logtail2\n  (<a href=\"http://logcheck.org\">http://logcheck.org</a>)</p>\n</blockquote>\n"
    },
    "973": {
        "question_id": "8718885",
        "answer_id": "8719100",
        "question": "<p>I'm working on a documentation (personal) for nested matplotlib (MPL) library, which differs from MPL own provided, by interested submodule packages. I'm writing Python script which I hope will automate document generation from future MPL releases.<br>\nI selected interested submodules/packages and want to list their main classes from which I'll generate list and process it with <code>pydoc</code>  </p>\n\n<p>Problem is that I can't find a way to instruct Python to load submodule from string. Here is example of what I tried:</p>\n\n<pre><code>import matplotlib.text as text\nx = dir(text)\n</code></pre>\n\n<p>.  </p>\n\n<pre><code>i = __import__('matplotlib.text')\ny = dir(i)\n</code></pre>\n\n<p>.</p>\n\n<pre><code>j = __import__('matplotlib')\nz = dir(j)\n</code></pre>\n\n<p>And here is 3 way comparison of above lists through pprint:</p>\n\n<p><img src=\"https://i.stack.imgur.com/3n7pT.png\" alt=\"enter image description here\"></p>\n\n<p>I don't understand what's loaded in <code>y</code> object - it's base <code>matplotlib</code> plus something else, but it lack information that I wanted and that is main classes from <code>matplotlib.text</code> package. It's top blue coloured part on screenshot (<code>x</code> list)</p>\n\n<p>Please don't suggest Sphinx as different approach.</p>\n",
        "answer": "<p>The <code>__import__</code> function can be a bit hard to understand.</p>\n\n<p>If you change </p>\n\n<pre><code>i = __import__('matplotlib.text')\n</code></pre>\n\n<p>to</p>\n\n<pre><code>i = __import__('matplotlib.text', fromlist=[''])\n</code></pre>\n\n<p>then <code>i</code> will refer to <code>matplotlib.text</code>.</p>\n\n<p>In Python 2.7 and Python 3.1 or later, you can use <code>importlib</code>:</p>\n\n<pre><code>import importlib\n\ni = importlib.import_module(\"matplotlib.text\")\n</code></pre>\n\n<p>Some notes</p>\n\n<ul>\n<li><p>If you're trying to import something from a sub-folder e.g. <code>./feature/email.py</code>, the code will look like <code>importlib.import_module(\"feature.email\")</code></p></li>\n<li><p>You can't import anything if there is no <code>__init__.py</code> in the folder with file you are trying to import</p></li>\n</ul>\n"
    },
    "974": {
        "question_id": "1000900",
        "answer_id": "1000968",
        "question": "<p>I have just started with Python. When I execute a python script file on Windows, the output window appears but instantaneously goes away. I need it to stay there so I can analyze my output. How can I keep it open?</p>\n",
        "answer": "<p>You have a few options:</p>\n\n<ol>\n<li><p>Run the program from an already-open terminal. Open a command prompt and type:</p>\n\n<pre><code>python myscript.py\n</code></pre>\n\n<p>For that to work you need the python executable in your path. Just check on <a href=\"https://superuser.com/questions/284342/what-are-path-and-other-environment-variables-and-how-can-i-set-or-use-them\">how to edit environment variables</a> on Windows, and add <code>C:\\PYTHON26</code> (or whatever directory you installed python to).</p>\n\n<p>When the program ends, it'll drop you back to the <strong>cmd</strong> prompt instead of closing the window.</p></li>\n<li><p>Add code to wait at the end of your script. For Python2, adding ...</p>\n\n<pre><code>raw_input()\n</code></pre>\n\n<p>... at the end of the script makes it wait for the <kbd>Enter</kbd> key. That method is annoying because you have to modify the script, and have to remember removing it when you're done. Specially annoying when testing other people's scripts.  For Python3, use <code>input()</code>.</p></li>\n<li><p>Use an editor that pauses for you. Some editors prepared for python will automatically pause for you after execution. Other editors allow you to configure the command line it uses to run your program. I find it particularly useful to configure it as \"<code>python -i myscript.py</code>\" when running. That drops you to a python shell after the end of the program, with the program environment loaded, so you may further play with the variables and call functions and methods.</p></li>\n</ol>\n"
    },
    "975": {
        "question_id": "32468402",
        "answer_id": "32470490",
        "question": "<p>I'm looking to turn a pandas cell containing a list into rows for each of those values.</p>\n\n<p>So, take this:</p>\n\n<p><a href=\"https://i.stack.imgur.com/j7lFk.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/j7lFk.png\" alt=\"enter image description here\"></a>  </p>\n\n<p>If I'd like to unpack and stack the values in the <code>nearest_neighbors</code> column so that each value would be a row within each <code>opponent</code> index, how would I best go about this? Are there pandas methods that are meant for operations like this?</p>\n",
        "answer": "<p>In the code below, I first reset the index to make the row iteration easier.  </p>\n\n<p>I create a list of lists where each element of the outer list is a row of the target DataFrame and each element of the inner list is one of the columns.  This nested list will ultimately be concatenated to create the desired DataFrame.</p>\n\n<p>I use a <code>lambda</code> function together with list iteration to create a row for each element of the <code>nearest_neighbors</code> paired with the relevant <code>name</code> and <code>opponent</code>.  </p>\n\n<p>Finally, I create a new DataFrame from this list (using the original column names and setting the index back to <code>name</code> and <code>opponent</code>).</p>\n\n<pre><code>df = (pd.DataFrame({'name': ['A.J. Price'] * 3, \n                    'opponent': ['76ers', 'blazers', 'bobcats'], \n                    'nearest_neighbors': [['Zach LaVine', 'Jeremy Lin', 'Nate Robinson', 'Isaia']] * 3})\n      .set_index(['name', 'opponent']))\n\n&gt;&gt;&gt; df\n                                                    nearest_neighbors\nname       opponent                                                  \nA.J. Price 76ers     [Zach LaVine, Jeremy Lin, Nate Robinson, Isaia]\n           blazers   [Zach LaVine, Jeremy Lin, Nate Robinson, Isaia]\n           bobcats   [Zach LaVine, Jeremy Lin, Nate Robinson, Isaia]\n\ndf.reset_index(inplace=True)\nrows = []\n_ = df.apply(lambda row: [rows.append([row['name'], row['opponent'], nn]) \n                         for nn in row.nearest_neighbors], axis=1)\ndf_new = pd.DataFrame(rows, columns=df.columns).set_index(['name', 'opponent'])\n\n&gt;&gt;&gt; df_new\n                    nearest_neighbors\nname       opponent                  \nA.J. Price 76ers          Zach LaVine\n           76ers           Jeremy Lin\n           76ers        Nate Robinson\n           76ers                Isaia\n           blazers        Zach LaVine\n           blazers         Jeremy Lin\n           blazers      Nate Robinson\n           blazers              Isaia\n           bobcats        Zach LaVine\n           bobcats         Jeremy Lin\n           bobcats      Nate Robinson\n           bobcats              Isaia\n</code></pre>\n\n<p><strong>EDIT JUNE 2017</strong></p>\n\n<p>An alternative method is as follows:</p>\n\n<pre><code>&gt;&gt;&gt; (pd.melt(df.nearest_neighbors.apply(pd.Series).reset_index(), \n             id_vars=['name', 'opponent'],\n             value_name='nearest_neighbors')\n     .set_index(['name', 'opponent'])\n     .drop('variable', axis=1)\n     .dropna()\n     .sort_index()\n     )\n</code></pre>\n"
    },
    "976": {
        "question_id": "6523791",
        "answer_id": "6523852",
        "question": "<p>I have a Python program I'm building that can be run in either of 2 ways: the first is to call \"python main.py\" which prompts the user for input in a friendly manner and then runs the user input through the program.  The other way is to call \"python batch.py <em>-file-</em>\" which will pass over all the friendly input gathering and run an entire file's worth of input through the program in a single go.</p>\n\n<p>The problem is that when I run \"batch.py\" it imports some variables/methods/etc from \"main.py\", and when it runs this code:</p>\n\n<pre><code>import main\n</code></pre>\n\n<p>at the first line of the program, it immediately errors because it tries to run the code in \"main.py\".</p>\n\n<p>How can I stop Python from running the code contained in the \"main\" module which I'm importing?</p>\n",
        "answer": "<p>Because this is just how Python works - keywords such as <code>class</code> and <code>def</code> are <em>not declarations</em>. Instead, they are <em>real live statements</em> which are executed. If they were not executed your module would be .. empty :-)</p>\n\n<p>Anyway, the idiomatic approach is:</p>\n\n<pre><code># stuff to run always here such as class/def\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n   # stuff only to run when not called via 'import' here\n   main()\n</code></pre>\n\n<p>See <a href=\"http://effbot.org/pyfaq/tutor-what-is-if-name-main-for.htm\" rel=\"noreferrer\">What is <code>if __name__ == \"__main__\"</code> for?</a></p>\n\n<p>It does require source control over the module being <code>import</code>ed, however.</p>\n\n<p>Happy coding.</p>\n"
    },
    "977": {
        "question_id": "53927460",
        "answer_id": "53927461",
        "question": "<h3>Objective and Motivation</h3>\n\n<p>The <code>MultiIndex</code> API has been gaining popularity over the years, however, not everything about it is fully understood in terms of the structure, working, and associated operations. </p>\n\n<p>One important operation is <em>filtering</em>. Filtering is a common requirement, but the use cases are diverse. Accordingly, certain methods and functions will be more applicable to some use cases than others. </p>\n\n<p>In summary, the aim of this post is to touch upon some common filtering problems and use cases, demonstrate various different methods to solve these problems, and discuss their applicability. Some of the high-level questions this post seeks to address are</p>\n\n<ul>\n<li>Slicing based on a single value/label</li>\n<li>Slicing based on multiple labels from one or more levels</li>\n<li>Filtering on boolean conditions and expressions</li>\n<li>Which methods are applicable in what circumstances</li>\n</ul>\n\n<p>These problems have been broken down into 6 concrete questions, enumerated below. For simplicity, the example DataFrames in the setup below only have two levels, and do not have duplicate index keys. Most solutions presented to the problems can generalize to N levels. </p>\n\n<p>This post will <em>not</em> go through how to create MultiIndexes, how to perform assignment operations on them, or any performance related discussions (these are separate topics for another time). </p>\n\n<hr>\n\n<h3>Questions</h3>\n\n<blockquote>\n  <p>Question 1-6 will be asked in context to the setup below.</p>\n\n<pre><code>mux = pd.MultiIndex.from_arrays([\n    list('aaaabbbbbccddddd'),\n    list('tuvwtuvwtuvwtuvw')\n], names=['one', 'two'])\n\ndf = pd.DataFrame({'col': np.arange(len(mux))}, mux)\n\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\nb   t      4\n    u      5\n    v      6\n    w      7\n    t      8\nc   u      9\n    v     10\nd   w     11\n    t     12\n    u     13\n    v     14\n    w     15\n</code></pre>\n</blockquote>\n\n<p><strong>Question 1:</strong> Selecting a Single Item<br>\nHow do I select rows having \"a\" in level \"one\"? </p>\n\n<pre><code>         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n</code></pre>\n\n<p>Additionally, how would I be able to drop level \"one\" in the output?</p>\n\n<pre><code>     col\ntwo     \nt      0\nu      1\nv      2\nw      3\n</code></pre>\n\n<p><strong>Question 1b</strong><br>\nHow do I slice all rows with value \"t\" on level \"two\"?</p>\n\n<pre><code>         col\none two     \na   t      0\nb   t      4\n    t      8\nd   t     12\n</code></pre>\n\n<p><strong>Question 2:</strong> Selecting Multiple Values in a Level<br>\nHow can I select rows corresponding to items \"b\" and \"d\" in level \"one\"?</p>\n\n<pre><code>         col\none two     \nb   t      4\n    u      5\n    v      6\n    w      7\n    t      8\nd   w     11\n    t     12\n    u     13\n    v     14\n    w     15\n</code></pre>\n\n<p><strong>Question 2b</strong><br>\nHow would I get all values corresponding to \"t\" and \"w\" in level \"two\"?</p>\n\n<pre><code>         col\none two     \na   t      0\n    w      3\nb   t      4\n    w      7\n    t      8\nd   w     11\n    t     12\n    w     15\n</code></pre>\n\n<p><strong>Question 3:</strong> Slicing a Single Cross Section <code>(x, y)</code><br>\nHow do I retrieve a cross section, i.e., a single row having a specific values for the index from <code>df</code>? Specifically, how do I retrieve the cross section of <code>('c', 'u')</code>, given by</p>\n\n<pre><code>         col\none two     \nc   u      9\n</code></pre>\n\n<p><strong>Question 4:</strong> Slicing Multiple Cross Sections <code>[(a, b), (c, d), ...]</code><br>\nHow do I select the two rows corresponding to <code>('c', 'u')</code>, and <code>('a', 'w')</code>?</p>\n\n<pre><code>         col\none two     \nc   u      9\na   w      3\n</code></pre>\n\n<p><strong>Question 5:</strong> One Item Sliced per Level<br>\nHow can I retrieve all rows corresponding to \"a\" in level \"one\" or \"t\" in level \"two\"?</p>\n\n<pre><code>         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\nb   t      4\n    t      8\nd   t     12\n</code></pre>\n\n<p><strong>Question 6:</strong> Arbitrary Slicing<br>\nHow can I slice specific cross sections? For \"a\" and \"b\", I would like to select all rows with sub-levels \"u\" and \"v\", and for \"d\", I would like to select rows with sub-level \"w\".</p>\n\n<pre><code>         col\none two     \na   u      1\n    v      2\nb   u      5\n    v      6\nd   w     11\n    w     15\n</code></pre>\n\n<blockquote>\n  <p>Question 7 will use a unique setup consisting of a numeric level:</p>\n\n<pre><code>np.random.seed(0)\nmux2 = pd.MultiIndex.from_arrays([\n    list('aaaabbbbbccddddd'),\n    np.random.choice(10, size=16)\n], names=['one', 'two'])\n\ndf2 = pd.DataFrame({'col': np.arange(len(mux2))}, mux2)\n\n         col\none two     \na   5      0\n    0      1\n    3      2\n    3      3\nb   7      4\n    9      5\n    3      6\n    5      7\n    2      8\nc   4      9\n    7     10\nd   6     11\n    8     12\n    8     13\n    1     14\n    6     15\n</code></pre>\n</blockquote>\n\n<p><strong>Question 7:</strong> Inequality-based filtering on Numeric Levels<br>\nHow do I get all rows where values in level \"two\" are greater than 5?</p>\n\n<pre><code>         col\none two     \nb   7      4\n    9      5\nc   7     10\nd   6     11\n    8     12\n    8     13\n    6     15\n</code></pre>\n",
        "answer": "<h3><a href=\"https://pandas.pydata.org/pandas-docs/stable/advanced.html#multiindex-advanced-indexing\" rel=\"noreferrer\">MultiIndex / Advanced Indexing</a></h3>\n\n<blockquote>\n  <p><strong>Note</strong><br>\n  This post will be structured in the following manner: </p>\n  \n  <ol>\n  <li>The questions put forth in the OP will be addressed, one by one</li>\n  <li>For each question, one or more methods applicable to solving this problem and getting the expected result will be demonstrated.</li>\n  </ol>\n  \n  <p><strong>Note</strong>s (much like this one) will be included for readers interested in learning about additional functionality, implementation details,\n  and other info cursory to the topic at hand. These notes have been\n  compiled through scouring the docs and uncovering various obscure\n  features, and from my own (admittedly limited) experience.</p>\n  \n  <p>All code samples have created and tested on <strong>pandas v0.23.4, python3.7</strong>. If something is not clear, or factually incorrect, or if you did not\n  find a solution applicable to your use case, please feel free to\n  suggest an edit, request clarification in the comments, or open a new\n  question, ....as applicable.</p>\n</blockquote>\n\n<p>Here is an introduction to some common idioms (henceforth referred to as the Four Idioms) we will be frequently re-visiting</p>\n\n<ol>\n<li><p><em><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.loc.html\" rel=\"noreferrer\"><code>DataFrame.loc</code></a></em> - A general solution for selection by label (+ <em><a href=\"https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.IndexSlice.html\" rel=\"noreferrer\"><code>pd.IndexSlice</code></a></em> for more complex applications involving slices) </p></li>\n<li><p><em><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.xs.html\" rel=\"noreferrer\"><code>DataFrame.xs</code></a></em> - Extract a particular cross section from a Series/DataFrame.</p></li>\n<li><p><em><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.query.html\" rel=\"noreferrer\"><code>DataFrame.query</code></a></em> - Specify slicing and/or filtering operations dynamically (i.e., as an expression that is evaluated dynamically. Is more applicable to some scenarios than others. Also see <a href=\"https://pandas.pydata.org/pandas-docs/stable/indexing.html#multiindex-query-syntax\" rel=\"noreferrer\">this section of the docs</a> for querying on MultiIndexes.</p></li>\n<li><p>Boolean indexing with a mask generated using <em><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.MultiIndex.get_level_values.html\" rel=\"noreferrer\"><code>MultiIndex.get_level_values</code></a></em> (often in conjunction with <em><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Index.isin.html\" rel=\"noreferrer\"><code>Index.isin</code></a></em>, especially when filtering with multiple values). This is also quite useful in some circumstances.</p></li>\n</ol>\n\n<p>It will be beneficial to look at the various slicing and filtering problems in terms of the Four Idioms to gain a better understanding what can be applied to a given situation. It is very important to understand that not all of the idioms will work equally well (if at all) in every circumstance. If an idiom has not been listed as a potential solution to a problem below, that means that idiom cannot be applied to that problem effectively.</p>\n\n<hr>\n\n<blockquote>\n  <h3>Question 1</h3>\n  \n  <p>How do I select rows having \"a\" in level \"one\"? </p>\n\n<pre><code>         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n</code></pre>\n</blockquote>\n\n<p>You can use <code>loc</code>, as a general purpose solution applicable to most situations:</p>\n\n<pre><code>df.loc[['a']]\n</code></pre>\n\n<p>At this point, if you get</p>\n\n<pre><code>TypeError: Expected tuple, got str\n</code></pre>\n\n<p>That means you're using an older version of pandas. Consider upgrading! Otherwise, use <code>df.loc[('a', slice(None)), :]</code>.</p>\n\n<p>Alternatively, you can use <code>xs</code> here, since we are extracting a single cross section. Note the <code>levels</code> and <code>axis</code> arguments (reasonable defaults can be assumed here). </p>\n\n<pre><code>df.xs('a', level=0, axis=0, drop_level=False)\n# df.xs('a', drop_level=False)\n</code></pre>\n\n<p>Here, the <code>drop_level=False</code> argument is needed to prevent <code>xs</code> from dropping level \"one\" in the result (the level we sliced on).</p>\n\n<p>Yet another option here is using <code>query</code>:</p>\n\n<pre><code>df.query(\"one == 'a'\")\n</code></pre>\n\n<p>If the index did not have a name, you would need to change your query string to be <code>\"ilevel_0 == 'a'\"</code>.</p>\n\n<p>Finally, using <code>get_level_values</code>:</p>\n\n<pre><code>df[df.index.get_level_values('one') == 'a']\n# If your levels are unnamed, or if you need to select by position (not label),\n# df[df.index.get_level_values(0) == 'a']\n</code></pre>\n\n<blockquote>\n  <p>Additionally, how would I be able to drop level \"one\" in the output?</p>\n\n<pre><code>     col\ntwo     \nt      0\nu      1\nv      2\nw      3\n</code></pre>\n</blockquote>\n\n<p>This can be <em>easily</em> done using either</p>\n\n<pre><code>df.loc['a'] # Notice the single string argument instead the list.\n</code></pre>\n\n<p>Or,</p>\n\n<pre><code>df.xs('a', level=0, axis=0, drop_level=True)\n# df.xs('a')\n</code></pre>\n\n<p>Notice that we can omit the <code>drop_level</code> argument (it is assumed to be <code>True</code> by default).</p>\n\n<blockquote>\n  <p><strong>Note</strong><br>\n  You may notice that a filtered DataFrame may still have all the levels, even if they do not show when printing the DataFrame out. For example,</p>\n\n<pre><code>v = df.loc[['a']]\nprint(v)\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n\nprint(v.index)\nMultiIndex(levels=[['a', 'b', 'c', 'd'], ['t', 'u', 'v', 'w']],\n           labels=[[0, 0, 0, 0], [0, 1, 2, 3]],\n           names=['one', 'two'])\n</code></pre>\n  \n  <p>You can get rid of these levels using <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.MultiIndex.remove_unused_levels.html\" rel=\"noreferrer\"><em><code>MultiIndex.remove_unused_levels</code></em></a>:</p>\n\n<pre><code>v.index = v.index.remove_unused_levels()\n\nprint(v.index)\nMultiIndex(levels=[['a'], ['t', 'u', 'v', 'w']],\n           labels=[[0, 0, 0, 0], [0, 1, 2, 3]],\n           names=['one', 'two'])\n</code></pre>\n</blockquote>\n\n<hr>\n\n<blockquote>\n  <h3>Question 1b</h3>\n  \n  <p>How do I slice all rows with value \"t\" on level \"two\"?</p>\n\n<pre><code>         col\none two     \na   t      0\nb   t      4\n    t      8\nd   t     12\n</code></pre>\n</blockquote>\n\n<p>Intuitively, you would want something involving <a href=\"https://docs.python.org/3/library/functions.html#slice\" rel=\"noreferrer\"><em><code>slice()</code></em></a>: </p>\n\n<pre><code>df.loc[(slice(None), 't'), :]\n</code></pre>\n\n<p>It Just Works!\u2122 But it is clunky. We can facilitate a more natural slicing syntax using the <code>pd.IndexSlice</code> API here.</p>\n\n<pre><code>idx = pd.IndexSlice\ndf.loc[idx[:, 't'], :]\n</code></pre>\n\n<p>This is much, much cleaner.</p>\n\n<blockquote>\n  <p><strong>Note</strong><br>\n  Why is the trailing slice <code>:</code> across the columns required? This is because, <code>loc</code> can be used to select and slice along both axes (<code>axis=0</code> or\n  <code>axis=1</code>). Without explicitly making it clear which axis the slicing\n  is to be done on, the operation becomes ambiguous. See the big red box in the <a href=\"http://pandas.pydata.org/pandas-docs/stable/advanced.html#using-slicers\" rel=\"noreferrer\">documentation on slicing</a>.</p>\n  \n  <p>If you want to remove any shade of ambiguity, <code>loc</code> accepts an <code>axis</code>\n  parameter:</p>\n\n<pre><code>df.loc(axis=0)[pd.IndexSlice[:, 't']]\n</code></pre>\n  \n  <p>Without the <code>axis</code> parameter (i.e., just by doing <code>df.loc[pd.IndexSlice[:, 't']]</code>), slicing is assumed to be on the columns,\n  and a <code>KeyError</code> will be raised in this circumstance. </p>\n  \n  <p>This is documented in <a href=\"https://pandas.pydata.org/pandas-docs/stable/advanced.html#using-slicers\" rel=\"noreferrer\">slicers</a>. For the purpose of this post, however, we will explicitly specify all axes.    </p>\n</blockquote>\n\n<p>With <code>xs</code>, it is </p>\n\n<pre><code>df.xs('t', axis=0, level=1, drop_level=False)\n</code></pre>\n\n<p>With <code>query</code>, it is </p>\n\n<pre><code>df.query(\"two == 't'\")\n# Or, if the first level has no name, \n# df.query(\"ilevel_1 == 't'\") \n</code></pre>\n\n<p>And finally, with <code>get_level_values</code>, you may do</p>\n\n<pre><code>df[df.index.get_level_values('two') == 't']\n# Or, to perform selection by position/integer,\n# df[df.index.get_level_values(1) == 't']\n</code></pre>\n\n<p>All to the same effect.</p>\n\n<hr>\n\n<blockquote>\n  <h3>Question 2</h3>\n  \n  <p>How can I select rows corresponding to items \"b\" and \"d\" in level \"one\"?</p>\n\n<pre><code>         col\none two     \nb   t      4\n    u      5\n    v      6\n    w      7\n    t      8\nd   w     11\n    t     12\n    u     13\n    v     14\n    w     15\n</code></pre>\n</blockquote>\n\n<p>Using loc, this is done in a similar fashion by specifying a list.</p>\n\n<pre><code>df.loc[['b', 'd']]\n</code></pre>\n\n<p>To solve the above problem of selecting \"b\" and \"d\", you can also use <code>query</code>:</p>\n\n<pre><code>items = ['b', 'd']\ndf.query(\"one in @items\")\n# df.query(\"one == @items\", parser='pandas')\n# df.query(\"one in ['b', 'd']\")\n# df.query(\"one == ['b', 'd']\", parser='pandas')\n</code></pre>\n\n<blockquote>\n  <p><strong>Note</strong><br>\n  Yes, the default parser is <code>'pandas'</code>, but it is important to highlight this syntax isn't conventionally python. The\n  Pandas parser generates a slightly different parse tree from the\n  expression. This is done to make some operations more intuitive to\n  specify. For more information, please read my post on\n  <a href=\"https://stackoverflow.com/questions/53779986/dynamic-expression-evaluation-in-pandas-using-pd-eval\">Dynamic Expression Evaluation in pandas using pd.eval()</a>.</p>\n</blockquote>\n\n<p>And, with <code>get_level_values</code> + <code>Index.isin</code>:</p>\n\n<pre><code>df[df.index.get_level_values(\"one\").isin(['b', 'd'])]\n</code></pre>\n\n<hr>\n\n<blockquote>\n  <h3>Question 2b</h3>\n  \n  <p>How would I get all values corresponding to \"t\" and \"w\" in level \"two\"?</p>\n\n<pre><code>         col\none two     \na   t      0\n    w      3\nb   t      4\n    w      7\n    t      8\nd   w     11\n    t     12\n    w     15\n</code></pre>\n</blockquote>\n\n<p>With <code>loc</code>, this is possible <em>only</em> in conjuction with <code>pd.IndexSlice</code>.</p>\n\n<pre><code>df.loc[pd.IndexSlice[:, ['t', 'w']], :] \n</code></pre>\n\n<p>The first colon <code>:</code> in <code>pd.IndexSlice[:, ['t', 'w']]</code> means to slice across the first level. As the depth of the level being queried increases, you will need to specify more slices, one per level being sliced across. You will not need to specify more levels <em>beyond</em> the one being sliced, however. </p>\n\n<p>With <code>query</code>, this is </p>\n\n<pre><code>items = ['t', 'w']\ndf.query(\"two in @items\")\n# df.query(\"two == @items\", parser='pandas') \n# df.query(\"two in ['t', 'w']\")\n# df.query(\"two == ['t', 'w']\", parser='pandas')\n</code></pre>\n\n<p>With <code>get_level_values</code> and <code>Index.isin</code> (similar to above):</p>\n\n<pre><code>df[df.index.get_level_values('two').isin(['t', 'w'])]\n</code></pre>\n\n<hr>\n\n<blockquote>\n  <h3>Question 3</h3>\n  \n  <p>How do I retrieve a cross section, i.e., a single row having a specific values\n  for the index from <code>df</code>? Specifically, how do I retrieve the cross\n  section of <code>('c', 'u')</code>, given by</p>\n\n<pre><code>         col\none two     \nc   u      9\n</code></pre>\n</blockquote>\n\n<p>Use <code>loc</code> by specifying a tuple of keys:</p>\n\n<pre><code>df.loc[('c', 'u'), :]\n</code></pre>\n\n<p>Or,</p>\n\n<pre><code>df.loc[pd.IndexSlice[('c', 'u')]]\n</code></pre>\n\n<blockquote>\n  <p><strong>Note</strong><br>\n  At this point, you may run into a <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.errors.PerformanceWarning.html#pandas-errors-performancewarning\" rel=\"noreferrer\"><em><code>PerformanceWarning</code></em></a> that looks like this:</p>\n\n<pre><code>PerformanceWarning: indexing past lexsort depth may impact performance.\n</code></pre>\n  \n  <p>This just means that your index is not sorted. pandas depends on the index being sorted (in this case, lexicographically, since we are dealing with string values) for optimal search and retrieval. A quick fix would be to sort your\n  DataFrame in advance using <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort_index.html#pandas-dataframe-sort-index\" rel=\"noreferrer\"><em><code>DataFrame.sort_index</code></em></a>. This is especially desirable from a performance standpoint if you plan on doing\n  multiple such queries in tandem:</p>\n\n<pre><code>df_sort = df.sort_index()\ndf_sort.loc[('c', 'u')]\n</code></pre>\n  \n  <p>You can also use <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.MultiIndex.is_lexsorted.html\" rel=\"noreferrer\"><em><code>MultiIndex.is_lexsorted()</code></em></a> to check whether the index\n  is sorted or not. This function returns <code>True</code> or <code>False</code> accordingly.\n  You can call this function to determine whether an additional sorting\n  step is required or not.</p>\n</blockquote>\n\n<p>With <code>xs</code>, this is again simply passing a single tuple as the first argument, with all other arguments set to their appropriate defaults:</p>\n\n<pre><code>df.xs(('c', 'u'))\n</code></pre>\n\n<p>With <code>query</code>, things become a bit clunky:</p>\n\n<pre><code>df.query(\"one == 'c' and two == 'u'\")\n</code></pre>\n\n<p>You can see now that this is going to be relatively difficult to generalize. But is still OK for this particular problem.</p>\n\n<p>With accesses spanning multiple levels, <code>get_level_values</code> can still be used, but is not recommended:</p>\n\n<pre><code>m1 = (df.index.get_level_values('one') == 'c')\nm2 = (df.index.get_level_values('two') == 'u')\ndf[m1 &amp; m2]\n</code></pre>\n\n<hr>\n\n<blockquote>\n  <h3>Question 4</h3>\n  \n  <p>How do I select the two rows corresponding to <code>('c', 'u')</code>, and <code>('a', 'w')</code>?</p>\n\n<pre><code>         col\none two     \nc   u      9\na   w      3\n</code></pre>\n</blockquote>\n\n<p>With <code>loc</code>, this is still as simple as:</p>\n\n<pre><code>df.loc[[('c', 'u'), ('a', 'w')]]\n# df.loc[pd.IndexSlice[[('c', 'u'), ('a', 'w')]]]\n</code></pre>\n\n<p>With <code>query</code>, you will need to dynamically generate a query string by iterating over your cross sections and levels:</p>\n\n<pre><code>cses = [('c', 'u'), ('a', 'w')]\nlevels = ['one', 'two']\n# This is a useful check to make in advance.\nassert all(len(levels) == len(cs) for cs in cses) \n\nquery = '(' + ') or ('.join([\n    ' and '.join([f\"({l} == {repr(c)})\" for l, c in zip(levels, cs)]) \n    for cs in cses\n]) + ')'\n\nprint(query)\n# ((one == 'c') and (two == 'u')) or ((one == 'a') and (two == 'w'))\n\ndf.query(query)\n</code></pre>\n\n<p>100% DO NOT RECOMMEND! But it is possible. </p>\n\n<hr>\n\n<blockquote>\n  <h3>Question 5</h3>\n  \n  <p>How can I retrieve all rows corresponding to \"a\" in level \"one\" or\n  \"t\" in level \"two\"?</p>\n\n<pre><code>         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\nb   t      4\n    t      8\nd   t     12\n</code></pre>\n</blockquote>\n\n<p>This is actually very difficult to do with <code>loc</code> while ensuring correctness <em>and</em> still maintaining code clarity. <code>df.loc[pd.IndexSlice['a', 't']]</code> is incorrect, it is interpreted as <code>df.loc[pd.IndexSlice[('a', 't')]]</code> (i.e., selecting a cross section). You may think of a solution with <code>pd.concat</code> to handle each label separately:</p>\n\n<pre><code>pd.concat([\n    df.loc[['a'],:], df.loc[pd.IndexSlice[:, 't'],:]\n])\n\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n    t      0   # Does this look right to you? No, it isn't!\nb   t      4\n    t      8\nd   t     12\n</code></pre>\n\n<p>But you'll notice one of the rows is duplicated. This is because that row satisfied both slicing conditions, and so appeared twice. You will instead need to do</p>\n\n<pre><code>v = pd.concat([\n        df.loc[['a'],:], df.loc[pd.IndexSlice[:, 't'],:]\n])\nv[~v.index.duplicated()]\n</code></pre>\n\n<p>But if your DataFrame inherently contains duplicate indices (that you want), then this will not retain them. <strong>Use with extreme caution</strong>.</p>\n\n<p>With <code>query</code>, this is stupidly simple:</p>\n\n<pre><code>df.query(\"one == 'a' or two == 't'\")\n</code></pre>\n\n<p>With <code>get_level_values</code>, this is still simple, but not as elegant:</p>\n\n<pre><code>m1 = (df.index.get_level_values('one') == 'c')\nm2 = (df.index.get_level_values('two') == 'u')\ndf[m1 | m2]\n</code></pre>\n\n<hr>\n\n<blockquote>\n  <h3>Question 6</h3>\n  \n  <p>How can I slice specific cross sections? For \"a\" and \"b\", I would like to select all rows with sub-levels \"u\" and \"v\", and\n  for \"d\", I would like to select rows with sub-level \"w\".</p>\n\n<pre><code>         col\none two     \na   u      1\n    v      2\nb   u      5\n    v      6\nd   w     11\n    w     15\n</code></pre>\n</blockquote>\n\n<p>This is a special case that I've added to help understand the applicability of the Four Idioms\u2014this is one case where none of them will work effectively, since the slicing is <em>very</em> specific, and does not follow any real pattern. </p>\n\n<p>Usually, slicing problems like this will require explicitly passing a list of keys to <code>loc</code>. One way of doing this is with:</p>\n\n<pre><code>keys = [('a', 'u'), ('a', 'v'), ('b', 'u'), ('b', 'v'), ('d', 'w')]\ndf.loc[keys, :]\n</code></pre>\n\n<p>If you want to save some typing, you will recognise that there is a pattern to slicing \"a\", \"b\" and its sublevels, so we can separate the slicing task into two portions and <code>concat</code> the result:</p>\n\n<pre><code>pd.concat([\n     df.loc[(('a', 'b'), ('u', 'v')), :], \n     df.loc[('d', 'w'), :]\n   ], axis=0)\n</code></pre>\n\n<p>Slicing specification for \"a\" and \"b\" is slightly cleaner <code>(('a', 'b'), ('u', 'v'))</code> because the same sub-levels being indexed are the same for each level.</p>\n\n<hr>\n\n<blockquote>\n  <h3>Question 7</h3>\n  \n  <p>How do I get all rows where values in level \"two\" are greater than 5?</p>\n\n<pre><code>         col\none two     \nb   7      4\n    9      5\nc   7     10\nd   6     11\n    8     12\n    8     13\n    6     15\n</code></pre>\n</blockquote>\n\n<p>This can be done using <code>query</code>,</p>\n\n<pre><code>df2.query(\"two &gt; 5\")\n</code></pre>\n\n<p>And <code>get_level_values</code>.</p>\n\n<pre><code>df2[df2.index.get_level_values('two') &gt; 5]\n</code></pre>\n\n<blockquote>\n  <p><strong>Note</strong><br>\n  Similar to this example, we can filter based on any arbitrary condition using these constructs. In general, it is useful to remember that <code>loc</code> and <code>xs</code> are specifically for label-based indexing, while <code>query</code> and\n  <code>get_level_values</code> are helpful for building general conditional masks\n  for filtering.</p>\n</blockquote>\n\n<hr>\n\n<blockquote>\n  <h3>Bonus Question</h3>\n  \n  <p>What if I need to slice a <code>MultiIndex</code> <em>column</em>?</p>\n</blockquote>\n\n<p>Actually, most solutions here are applicable to columns as well, with minor changes. Consider:</p>\n\n<pre><code>np.random.seed(0)\nmux3 = pd.MultiIndex.from_product([\n        list('ABCD'), list('efgh')\n], names=['one','two'])\n\ndf3 = pd.DataFrame(np.random.choice(10, (3, len(mux))), columns=mux3)\nprint(df3)\n\none  A           B           C           D         \ntwo  e  f  g  h  e  f  g  h  e  f  g  h  e  f  g  h\n0    5  0  3  3  7  9  3  5  2  4  7  6  8  8  1  6\n1    7  7  8  1  5  9  8  9  4  3  0  3  5  0  2  3\n2    8  1  3  3  3  7  0  1  9  9  0  4  7  3  2  7\n</code></pre>\n\n<p>These are the following changes you will need to make to the Four Idioms to have them working with columns.</p>\n\n<ol>\n<li><p>To slice with <code>loc</code>, use </p>\n\n<pre><code>df3.loc[:, ....] # Notice how we slice across the index with `:`. \n</code></pre>\n\n<p>Or,</p>\n\n<pre><code>df3.loc[:, pd.IndexSlice[...]]\n</code></pre></li>\n<li><p>To use <code>xs</code> as appropriate, just pass an argument <code>axis=1</code>.</p></li>\n<li><p>You can access the column level values directly using <code>df.columns.get_level_values</code>. You will then need to do something like </p>\n\n<pre><code>df.loc[:, {condition}] \n</code></pre>\n\n<p>Where <code>{condition}</code> represents some condition built using <code>columns.get_level_values</code>.</p></li>\n<li><p>To use <code>query</code>, your only option is to transpose, query on the index, and transpose again:</p>\n\n<pre><code>df3.T.query(...).T\n</code></pre>\n\n<p>Not recommended, use one of the other 3 options.</p></li>\n</ol>\n"
    },
    "978": {
        "question_id": "4960208",
        "answer_id": "4960216",
        "question": "<p>I want to get a string from a user, and then to manipulate it.</p>\n\n<pre><code>testVar = input(\"Ask user for something.\")\n</code></pre>\n\n<p>Is there a way for testVar to be a string without me having the user type his response in quotes?  i.e. \"Hello\" vs. Hello</p>\n\n<p>If the user types in Hello, I get the following error:</p>\n\n<p>NameError: name 'Hello' is not defined</p>\n",
        "answer": "<p>Use <code>raw_input()</code> instead of <code>input()</code>:</p>\n\n<pre><code>testVar = raw_input(\"Ask user for something.\")\n</code></pre>\n\n<p><code>input()</code> actually evaluates the input as Python code.  I suggest to never use it.  <code>raw_input()</code> returns the verbatim string entered by the user.</p>\n"
    },
    "979": {
        "question_id": "19951816",
        "answer_id": "19951895",
        "question": "<p>I've got a list that I create a copy of in order to do some manipulations while still keeping the original list. However, when I set <code>copy_list</code> equal to <code>org_list</code>, they become the same thing, and if I change <code>copy_list</code>, <code>org_list</code> changes too. For example:</p>\n\n<pre><code>org_list = ['y', 'c', 'gdp', 'cap']\n\ncopy_list = org_list\n\ncopy_list.append('hum')\n\nprint(copy_list)\nprint(org_list)\n</code></pre>\n\n<p>returns</p>\n\n<pre><code>['y', 'c', 'gdp', 'cap', 'hum']\n['y', 'c', 'gdp', 'cap', 'hum']\n</code></pre>\n\n<p>I don't know too much about what is actually going on but it looks like <code>org_list</code> is actually  passing itself to <code>copy_list</code> so that they are actually the same thing.</p>\n\n<p>Is there a way to make an independent copy of org_list without doing something clumsy like:</p>\n\n<pre><code>copy_list = []\nfor i in org_list:\n    copy_list.append(i)\n</code></pre>\n\n<p>I say this because I have the same problem with other types of variables, for example a pandas dataframe.</p>\n",
        "answer": "<p>That is because in python setting a variable actually sets a reference to the variable. Almost every person learning python encounters this at some point. The solution is simply to copy the list:</p>\n\n<pre><code>copy_list = org_list[:] \n</code></pre>\n"
    },
    "980": {
        "question_id": "2612548",
        "answer_id": "2612577",
        "question": "<p>I am trying to extract the content of a single \"value\" attribute in a specific \"input\" tag on a webpage. I use the following code:</p>\n\n<pre><code>import urllib\nf = urllib.urlopen(\"http://58.68.130.147\")\ns = f.read()\nf.close()\n\nfrom BeautifulSoup import BeautifulStoneSoup\nsoup = BeautifulStoneSoup(s)\n\ninputTag = soup.findAll(attrs={\"name\" : \"stainfo\"})\n\noutput = inputTag['value']\n\nprint str(output)\n</code></pre>\n\n<p>I get a TypeError: list indices must be integers, not str</p>\n\n<p>even though from the Beautifulsoup documentation i understand that strings should not be a problem here... but i a no specialist and i may have misunderstood. </p>\n\n<p>Any suggestion is greatly appreciated!\nThanks in advance.</p>\n",
        "answer": "<p><code>.findAll()</code> returns list of all found elements, so:</p>\n\n<pre><code>inputTag = soup.findAll(attrs={\"name\" : \"stainfo\"})\n</code></pre>\n\n<p><code>inputTag</code> is a list (probably containing only one element). Depending on what you want exactly you either should do:</p>\n\n<pre><code> output = inputTag[0]['value']\n</code></pre>\n\n<p>or use <code>.find()</code> method which returns only one (first) found element:</p>\n\n<pre><code> inputTag = soup.find(attrs={\"name\": \"stainfo\"})\n output = inputTag['value']\n</code></pre>\n"
    },
    "981": {
        "question_id": "5453267",
        "answer_id": "5463419",
        "question": "<p>Is it possible to parse a file line by line, and edit a line in-place while going through the lines?</p>\n",
        "answer": "<blockquote>\n  <p>Is it possible to parse a file line by line, and edit a line in-place while going through the lines?</p>\n</blockquote>\n\n<p>It can be simulated using a backup file as stdlib's <a href=\"http://docs.python.org/library/fileinput\" rel=\"noreferrer\"><code>fileinput</code> module</a> does.</p>\n\n<p>Here's an example script that removes lines that do not satisfy <code>some_condition</code> from files given on the command line or <code>stdin</code>:</p>\n\n<pre><code>#!/usr/bin/env python\n# grep_some_condition.py\nimport fileinput\n\nfor line in fileinput.input(inplace=True, backup='.bak'):\n    if some_condition(line):\n        print line, # this goes to the current file\n</code></pre>\n\n<p>Example: </p>\n\n<pre><code>$ python grep_some_condition.py first_file.txt second_file.txt\n</code></pre>\n\n<p>On completion <code>first_file.txt</code> and <code>second_file.txt</code> files will contain only lines that satisfy <code>some_condition()</code> predicate.</p>\n"
    },
    "982": {
        "question_id": "22211525",
        "answer_id": "30822962",
        "question": "<p>Updated answer:NLTK works for 2.7 well. I had 3.2. I uninstalled 3.2 and installed 2.7. Now it works!!</p>\n\n<p>I have installed NLTK and tried to download NLTK Data. What I did was to follow the instrution on this site: <a href=\"http://www.nltk.org/data.html\">http://www.nltk.org/data.html</a></p>\n\n<p>I downloaded NLTK, installed it, and then tried to run the following code:</p>\n\n<pre><code>&gt;&gt;&gt; import nltk\n&gt;&gt;&gt; nltk.download()\n</code></pre>\n\n<p>It gave me the error message like below:</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"&lt;pyshell#6&gt;\", line 1, in &lt;module&gt;\n    nltk.download()\nAttributeError: 'module' object has no attribute 'download'\n Directory of C:\\Python32\\Lib\\site-packages\n</code></pre>\n\n<p>Tried both <code>nltk.download()</code> and <code>nltk.downloader()</code>, both gave me error messages.</p>\n\n<p>Then I used <code>help(nltk)</code> to pull out the package, it shows the following info:</p>\n\n<pre><code>NAME\n    nltk\n\nPACKAGE CONTENTS\n    align\n    app (package)\n    book\n    ccg (package)\n    chat (package)\n    chunk (package)\n    classify (package)\n    cluster (package)\n    collocations\n    corpus (package)\n    data\n    decorators\n    downloader\n    draw (package)\n    examples (package)\n    featstruct\n    grammar\n    help\n    inference (package)\n    internals\n    lazyimport\n    metrics (package)\n    misc (package)\n    model (package)\n    parse (package)\n    probability\n    sem (package)\n    sourcedstring\n    stem (package)\n    tag (package)\n    test (package)\n    text\n    tokenize (package)\n    toolbox\n    tree\n    treetransforms\n    util\n    yamltags\n\nFILE\n    c:\\python32\\lib\\site-packages\\nltk\n</code></pre>\n\n<p>I do see Downloader there, not sure why it does not work. Python 3.2.2, system Windows vista.</p>\n",
        "answer": "<h1>TL;DR</h1>\n\n<p>To download a particular dataset/models, use the <code>nltk.download()</code> function, e.g. if you are looking to download the <code>punkt</code> sentence tokenizer, use:</p>\n\n<pre><code>$ python3\n&gt;&gt;&gt; import nltk\n&gt;&gt;&gt; nltk.download('punkt')\n</code></pre>\n\n<p>If you're unsure of which data/model you need, you can start out with the basic list of data + models with:</p>\n\n<pre><code>&gt;&gt;&gt; import nltk\n&gt;&gt;&gt; nltk.download('popular')\n</code></pre>\n\n<p>It will download a list of \"popular\" resources, these includes:</p>\n\n<pre><code>&lt;collection id=\"popular\" name=\"Popular packages\"&gt;\n      &lt;item ref=\"cmudict\" /&gt;\n      &lt;item ref=\"gazetteers\" /&gt;\n      &lt;item ref=\"genesis\" /&gt;\n      &lt;item ref=\"gutenberg\" /&gt;\n      &lt;item ref=\"inaugural\" /&gt;\n      &lt;item ref=\"movie_reviews\" /&gt;\n      &lt;item ref=\"names\" /&gt;\n      &lt;item ref=\"shakespeare\" /&gt;\n      &lt;item ref=\"stopwords\" /&gt;\n      &lt;item ref=\"treebank\" /&gt;\n      &lt;item ref=\"twitter_samples\" /&gt;\n      &lt;item ref=\"omw\" /&gt;\n      &lt;item ref=\"wordnet\" /&gt;\n      &lt;item ref=\"wordnet_ic\" /&gt;\n      &lt;item ref=\"words\" /&gt;\n      &lt;item ref=\"maxent_ne_chunker\" /&gt;\n      &lt;item ref=\"punkt\" /&gt;\n      &lt;item ref=\"snowball_data\" /&gt;\n      &lt;item ref=\"averaged_perceptron_tagger\" /&gt;\n    &lt;/collection&gt;\n</code></pre>\n\n<hr>\n\n<h1>EDITED</h1>\n\n<p>In case anyone is avoiding errors from downloading larger datasets from <code>nltk</code>, from <a href=\"https://stackoverflow.com/a/38135306/610569\">https://stackoverflow.com/a/38135306/610569</a></p>\n\n<pre><code>$ rm /Users/&lt;your_username&gt;/nltk_data/corpora/panlex_lite.zip\n$ rm -r /Users/&lt;your_username&gt;/nltk_data/corpora/panlex_lite\n$ python\n\n&gt;&gt;&gt; import nltk\n&gt;&gt;&gt; dler = nltk.downloader.Downloader()\n&gt;&gt;&gt; dler._update_index()\n&gt;&gt;&gt; dler._status_cache['panlex_lite'] = 'installed' # Trick the index to treat panlex_lite as it's already installed.\n&gt;&gt;&gt; dler.download('popular')\n</code></pre>\n\n<h1>Updated</h1>\n\n<p><a href=\"https://github.com/nltk/nltk/pull/1806\" rel=\"noreferrer\">From v3.2.5, NLTK has a more informative error message</a> when <code>nltk_data</code> resource is not found, e.g.:</p>\n\n<pre><code>&gt;&gt;&gt; from nltk import word_tokenize\n&gt;&gt;&gt; word_tokenize('x')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/Users/l/alvas/git/nltk/nltk/tokenize/__init__.py\", line 128, in word_tokenize\n    sentences = [text] if preserve_line else sent_tokenize(text, language)\n  File \"/Users//alvas/git/nltk/nltk/tokenize/__init__.py\", line 94, in sent_tokenize\n    tokenizer = load('tokenizers/punkt/{0}.pickle'.format(language))\n  File \"/Users/alvas/git/nltk/nltk/data.py\", line 820, in load\n    opened_resource = _open(resource_url)\n  File \"/Users/alvas/git/nltk/nltk/data.py\", line 938, in _open\n    return find(path_, path + ['']).open()\n  File \"/Users/alvas/git/nltk/nltk/data.py\", line 659, in find\n    raise LookupError(resource_not_found)\nLookupError: \n**********************************************************************\n  Resource punkt not found.\n  Please use the NLTK Downloader to obtain the resource:\n\n  &gt;&gt;&gt; import nltk\n  &gt;&gt;&gt; nltk.download('punkt')\n\n  Searched in:\n    - '/Users/alvas/nltk_data'\n    - '/usr/share/nltk_data'\n    - '/usr/local/share/nltk_data'\n    - '/usr/lib/nltk_data'\n    - '/usr/local/lib/nltk_data'\n    - ''\n**********************************************************************\n</code></pre>\n\n<h1>Related</h1>\n\n<ul>\n<li><p>To <strong>find <code>nltk_data</code> directory</strong> (auto-magically), see <a href=\"https://stackoverflow.com/a/36383314/610569\">https://stackoverflow.com/a/36383314/610569</a> </p></li>\n<li><p>To <strong>download <code>nltk_data</code> to a different path</strong>, see <a href=\"https://stackoverflow.com/a/48634212/610569\">https://stackoverflow.com/a/48634212/610569</a></p></li>\n<li><p>To <strong>config <code>nltk_data</code> path</strong> (i.e. set a different path for NLTK to find <code>nltk_data</code>), see <a href=\"https://stackoverflow.com/a/22987374/610569\">https://stackoverflow.com/a/22987374/610569</a></p></li>\n</ul>\n"
    },
    "983": {
        "question_id": "33357233",
        "answer_id": "33399896",
        "question": "<p>I'm getting the flow of using <code>asyncio</code> in Python 3.5 but I haven't seen a description of what things I should be <code>await</code>ing and things I should not be or where it would be neglible. Do I just have to use my best judgement in terms of \"this is an IO operation and thus should be <code>await</code>ed\"? </p>\n",
        "answer": "<p>By default all your code is synchronous. You can make it asynchronous defining functions with <code>async def</code> and \"calling\" this functions with <code>await</code>. More correct question is \"When should I write asynchronous code instead of synchronous?\". Answer is \"When you can benefit of it\". In most cases as you noted you will get benefit, when you work with I/O operations:</p>\n\n<pre><code># Synchronous way:\ndownload(url1)  # takes 5 sec.\ndownload(url2)  # takes 5 sec.\n# Total time: 10 sec.\n\n# Asynchronous way:\nawait asyncio.gather(\n    async_download(url1),  # takes 5 sec. \n    async_download(url2)   # takes 5 sec.\n)\n# Total time: only 5 sec. (+ little overhead for using asyncio)\n</code></pre>\n\n<p>Of course, if you created function that uses asynchronous code, this function should be asynchronous too (should be defined as <code>async def</code>). But any asynchronous function can freely use synchronous code. It makes no sense to cast synchronous code to asynchronous without some reason:</p>\n\n<pre><code># extract_links(url) should be async because it uses async func async_download() inside\nasync def extract_links(url):  \n\n    # async_download() was created async to get benefit of I/O\n    html = await async_download(url)  \n\n    # parse() doesn't work with I/O, there's no sense to make it async\n    links = parse(html)  \n\n    return links\n</code></pre>\n\n<hr>\n\n<p>One very important thing is that any long synchronous operation (> 50 ms, for example, it's hard to say exactly) will freeze all your asynchronous operations for that time:</p>\n\n<pre><code>async def extract_links(url):\n    data = await download(url)\n    links = parse(data)\n    # if search_in_very_big_file() takes much time to process,\n    # all your running async funcs (somewhere else in code) will be frozen\n    # you need to avoid this situation\n    links_found = search_in_very_big_file(links)\n</code></pre>\n\n<p>You can avoid it calling long running synchronous functions in separate process (and awaiting for result):</p>\n\n<pre><code>executor = ProcessPoolExecutor(2)\n\nasync def extract_links(url):\n    data = await download(url)\n    links = parse(data)\n    # Now your main process can handle another async functions while separate process running    \n    links_found = await loop.run_in_executor(executor, search_in_very_big_file, links)\n</code></pre>\n\n<p>One more example: when you need to use <code>requests</code> in asyncio. <code>requests.get</code> is just synchronous long running function, which you shouldn't call inside async code (again, to avoid freezing). But it's running long because of I/O, not because of long calculations. In that case, you can use <code>ThreadPoolExecutor</code> instead of <code>ProcessPoolExecutor</code> to avoid some multiprocessing overhead:</p>\n\n<pre><code>executor = ThreadPoolExecutor(2)\n\nasync def download(url):\n    response = await loop.run_in_executor(executor, requests.get, url)\n    return response.text\n</code></pre>\n"
    },
    "984": {
        "question_id": "46103044",
        "answer_id": "46103129",
        "question": "<p>What is the most elegant way to access an n dimensional array with an (n-1) dimensional array along a given dimension as in the dummy example</p>\n\n<pre><code>a = np.random.random_sample((3,4,4))\nb = np.random.random_sample((3,4,4))\nidx = np.argmax(a, axis=0)\n</code></pre>\n\n<p>How can I access now with <code>idx a</code> to get the maxima in <code>a</code> as if I had used <code>a.max(axis=0)</code>? or how to retrieve the values specified by <code>idx</code> in <code>b</code>?</p>\n\n<p>I thought about using <code>np.meshgrid</code> but I think it is an overkill. Note that the dimension <code>axis</code> can be any usefull axis (0,1,2) and is not known in advance. Is there an elegant way to do this?</p>\n",
        "answer": "<p>Make use of <a href=\"https://docs.scipy.org/doc/numpy-1.10.1/reference/arrays.indexing.html#advanced-indexing\" rel=\"noreferrer\"><code>advanced-indexing</code></a> -</p>\n\n<pre><code>m,n = a.shape[1:]\nI,J = np.ogrid[:m,:n]\na_max_values = a[idx, I, J]\nb_max_values = b[idx, I, J]\n</code></pre>\n\n<hr>\n\n<p>For the general case:</p>\n\n<pre><code>def argmax_to_max(arr, argmax, axis):\n    \"\"\"argmax_to_max(arr, arr.argmax(axis), axis) == arr.max(axis)\"\"\"\n    new_shape = list(arr.shape)\n    del new_shape[axis]\n\n    grid = np.ogrid[tuple(map(slice, new_shape))]\n    grid.insert(axis, argmax)\n\n    return arr[tuple(grid)]\n</code></pre>\n\n<p>Quite a bit more awkward than such a natural operation should be, unfortunately.</p>\n\n<p>For indexing a <code>n dim</code> array with a <code>(n-1) dim</code> array, we could simplify it a bit to give us the grid of indices for all axes, like so -</p>\n\n<pre><code>def all_idx(idx, axis):\n    grid = np.ogrid[tuple(map(slice, idx.shape))]\n    grid.insert(axis, idx)\n    return tuple(grid)\n</code></pre>\n\n<p>Hence, use it to index into input arrays -</p>\n\n<pre><code>axis = 0\na_max_values = a[all_idx(idx, axis=axis)]\nb_max_values = b[all_idx(idx, axis=axis)]\n</code></pre>\n"
    },
    "985": {
        "question_id": "15528939",
        "answer_id": "15530613",
        "question": "<p>What I would like to be able to do is ask a user a question using input. For example:</p>\n\n<pre><code>print('some scenario')\nprompt = input(\"You have 10 seconds to choose the correct answer...\\n\")\n</code></pre>\n\n<p>and then if the time elapses print something like</p>\n\n<pre><code>print('Sorry, times up.')\n</code></pre>\n\n<p>Any help pointing me in the right direction would be greatly appreciated.</p>\n",
        "answer": "<p>Interesting problem, this seems to work:</p>\n\n<pre><code>import time\nfrom threading import Thread\n\nanswer = None\n\ndef check():\n    time.sleep(2)\n    if answer != None:\n        return\n    print \"Too Slow\"\n\nThread(target = check).start()\n\nanswer = raw_input(\"Input something: \")\n</code></pre>\n"
    },
    "986": {
        "question_id": "6500888",
        "answer_id": "6501064",
        "question": "<p>The following code:</p>\n\n<pre><code>a = list(range(10))\nremove = False\nfor b in a:\n    if remove:\n        a.remove(b)\n    remove = not remove\nprint(a)\n</code></pre>\n\n<p>Outputs <code>[0, 2, 3, 5, 6, 8, 9]</code>, instead of <code>[0, 2, 4, 6, 8]</code> when using Python 3.2.</p>\n\n<ol>\n<li>Why does it output these particular values?</li>\n<li>Why is no error given to indicate that underlying iterator is being modified?</li>\n<li>Have the mechanics changed from earlier versions of Python with respect to this behaviour?</li>\n</ol>\n\n<p>Note that I am not looking to work around the behaviour, but to understand it.</p>\n",
        "answer": "<p>I debated answering this for a while, because similar questions have been asked many times here. But it's just unique enough to be given the benefit of the doubt. (Still, I won't object if others vote to close.) Here's a visual explanation of what is happening. </p>\n\n<pre><code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]       &lt;-  b = 0; remove? no\n ^\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]       &lt;-  b = 1; remove? yes\n    ^\n[0, 2, 3, 4, 5, 6, 7, 8, 9]          &lt;-  b = 3; remove? no\n       ^\n[0, 2, 3, 4, 5, 6, 7, 8, 9]          &lt;-  b = 4; remove? yes\n          ^\n[0, 2, 3, 5, 6, 7, 8, 9]             &lt;-  b = 6; remove? no\n             ^\n[0, 2, 3, 5, 6, 7, 8, 9]             &lt;-  b = 7; remove? yes\n                ^\n[0, 2, 3, 5, 6, 8, 9]                &lt;-  b = 9; remove? no\n                   ^\n</code></pre>\n\n<p>Since no one else has, I'll attempt to answer your other questions: </p>\n\n<blockquote>\n  <p>Why is no error given to indicate that underlying iterator is being modified?</p>\n</blockquote>\n\n<p>To throw an error without prohibiting many perfectly valid loop constructions, Python would have to know a <em>lot</em> about what's going on, and it would probably have to get that information at runtime. All that information would take time to process. It would make Python a lot slower, in just the place where speed really counts -- a loop.  </p>\n\n<blockquote>\n  <p>Have the mechanics changed from earlier versions of Python with respect to this behaviour?                   </p>\n</blockquote>\n\n<p>In short, no. Or at least I <em>highly</em> doubt it, and certainly it has behaved this way since I learned Python (2.4). Frankly I would expect any straightforward implementation of a mutable sequence to behave in just this way. Anyone who knows better, please correct me. (Actually, a quick doc lookup confirms that the text that <a href=\"https://stackoverflow.com/questions/6500888/removing-from-a-list-while-iterating-over-it/6500896#6500896\">Mikola</a> cited has been in the tutorial since <a href=\"http://docs.python.org/release/1.4/tut/node29.html#SECTION00520000000000000000\" rel=\"noreferrer\">version 1.4</a>!)</p>\n"
    },
    "987": {
        "question_id": "193161",
        "answer_id": "193181",
        "question": "<p>Imagine that you want to develop a non-trivial end-user desktop (not web) application in Python. What is the best way to structure the project's folder hierarchy?</p>\n\n<p>Desirable features are ease of maintenance, IDE-friendliness, suitability for source control branching/merging, and easy generation of install packages.</p>\n\n<p>In particular:</p>\n\n<ol>\n<li>Where do you put the source?</li>\n<li>Where do you put application startup scripts?</li>\n<li>Where do you put the IDE project cruft?</li>\n<li>Where do you put the unit/acceptance tests?</li>\n<li>Where do you put non-Python data such as config files?</li>\n<li>Where do you put non-Python sources such as C++ for pyd/so binary extension modules?</li>\n</ol>\n",
        "answer": "<p>Doesn't too much matter.  Whatever makes you happy will work.  There aren't a lot of silly rules because Python projects can be simple.</p>\n\n<ul>\n<li><code>/scripts</code> or <code>/bin</code> for that kind of command-line interface stuff</li>\n<li><code>/tests</code> for your tests</li>\n<li><code>/lib</code> for your C-language libraries</li>\n<li><code>/doc</code> for most documentation</li>\n<li><code>/apidoc</code> for the Epydoc-generated API docs.</li>\n</ul>\n\n<p>And the top-level directory can contain README's, Config's and whatnot.</p>\n\n<p>The hard choice is whether or not to use a <code>/src</code> tree.  Python doesn't have a distinction between <code>/src</code>, <code>/lib</code>, and <code>/bin</code> like Java or C has.</p>\n\n<p>Since a top-level <code>/src</code> directory is seen by some as meaningless, your top-level directory can be the top-level architecture of your application.</p>\n\n<ul>\n<li><code>/foo</code></li>\n<li><code>/bar</code></li>\n<li><code>/baz</code></li>\n</ul>\n\n<p>I recommend putting all of this under the \"name-of-my-product\" directory.  So, if you're writing an application named <code>quux</code>, the directory that contains all this stuff is named  <code>/quux</code>.</p>\n\n<p>Another project's <code>PYTHONPATH</code>, then, can include <code>/path/to/quux/foo</code> to reuse the <code>QUUX.foo</code> module.  </p>\n\n<p>In my case, since I use Komodo Edit, my IDE cuft is a single .KPF file.  I actually put that in the top-level <code>/quux</code> directory, and omit adding it to SVN.</p>\n"
    },
    "988": {
        "question_id": "610883",
        "answer_id": "610893",
        "question": "<p>Is there a way in Python to determine if an object has some attribute?  For example:</p>\n\n<pre><code>&gt;&gt;&gt; a = SomeClass()\n&gt;&gt;&gt; a.someProperty = value\n&gt;&gt;&gt; a.property\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: SomeClass instance has no attribute 'property'\n</code></pre>\n\n<p>How can you tell if <code>a</code> has the attribute <code>property</code> before using it?</p>\n",
        "answer": "<p>Try <a href=\"https://docs.python.org/3/library/functions.html#hasattr\" rel=\"noreferrer\"><code>hasattr()</code></a>:</p>\n\n<pre><code>if hasattr(a, 'property'):\n    a.property\n</code></pre>\n\n<p>EDIT: See <a href=\"https://stackoverflow.com/a/610923/117030\">zweiterlinde's answer</a> below, who offers good advice about asking forgiveness! A very pythonic approach! </p>\n\n<p>The general practice in python is that, if the property is likely to be there most of the time, simply call it and either let the exception propagate, or trap it with a try/except block. This will likely be faster than <code>hasattr</code>. If the property is likely to not be there most of the time, or you're not sure, using <code>hasattr</code> will probably be faster than repeatedly falling into an exception block.</p>\n"
    },
    "989": {
        "question_id": "20306981",
        "answer_id": "20307569",
        "question": "<p>I am new to Django and pretty new to Ajax. I am working on a project where I need to integrate the two. I believe that I understand the principles behind them both, but have not found a good explanation of the two together. </p>\n\n<p>Could someone give me a quick explanation of how the codebase must change with the two of them integrating together?</p>\n\n<p>For example, can I still use the <code>HttpResponse</code> with Ajax, or do my responses have to change with the use of Ajax? If so, could you please provide an example of how the responses to the requests must change? If it makes any difference, the data I am returning is JSON. </p>\n",
        "answer": "<p>Even though this isn't entirely in the SO spirit, I love this question, because I had the same trouble when I started, so I'll give you a quick guide. Obviously you don't understand the principles behind them (don't take it as an offense, but if you did you wouldn't be asking). </p>\n\n<p>Django is <strong>server-side</strong>. It means, say a client goes to a URL, you have a function inside <code>views</code> that renders what he sees and returns a response in HTML. Let's break it up into examples:</p>\n\n<p><strong>views.py:</strong></p>\n\n<pre><code>def hello(request):\n    return HttpResponse('Hello World!')\n\ndef home(request):\n    return render_to_response('index.html', {'variable': 'world'})\n</code></pre>\n\n<p><strong>index.html:</strong></p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;h1&gt;Hello {{ variable }}, welcome to my awesome site&lt;/h1&gt;\n</code></pre>\n\n<p><strong>urls.py:</strong></p>\n\n<pre><code>url(r'^hello/', 'myapp.views.hello'),\nurl(r'^home/', 'myapp.views.home'),\n</code></pre>\n\n<p>That's an example of the simplest of usages. Going to <code>127.0.0.1:8000/hello</code> means a request to the <code>hello()</code> function, going to <code>127.0.0.1:8000/home</code> will return the <code>index.html</code> and replace all the variables as asked (you probably know all this by now).</p>\n\n<p>Now let's talk about <strong>AJAX</strong>. AJAX calls are client-side code that does asynchronous requests. That sounds complicated, but it simply means it does a request for you in the background and then handles the response. So when you do an AJAX call for some URL, you get the same data you would get as a user going to that place. </p>\n\n<p>For example, an AJAX call to <code>127.0.0.1:8000/hello</code> will return the same thing it would as if you visited it. Only this time, you have it inside a JavaScript function and you can deal with it however you'd like. Let's look at a simple use case:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>$.ajax({\n    url: '127.0.0.1:8000/hello',\n    type: 'get', // This is the default though, you don't actually need to always mention it\n    success: function(data) {\n        alert(data);\n    },\n    failure: function(data) { \n        alert('Got an error dude');\n    }\n}); \n</code></pre>\n\n<p>The general process is this:</p>\n\n<ol>\n<li>The call goes to the URL <code>127.0.0.1:8000/hello</code> as if you opened a new tab and did it yourself.</li>\n<li>If it succeeds (status code 200), do the function for success, which will alert the data received.</li>\n<li>If fails, do a different function.</li>\n</ol>\n\n<p>Now what would happen here? You would get an alert with 'hello world' in it. What happens if you do an AJAX call to home? Same thing, you'll get an alert stating <code>&lt;h1&gt;Hello world, welcome to my awesome site&lt;/h1&gt;</code>.</p>\n\n<p>In other words - there's nothing new about AJAX calls. They are just a way for you to let the user get data and information without leaving the page, and it makes for a smooth and very neat design of your website. A few guidelines you should take note of:</p>\n\n<ol>\n<li><strong>Learn jQuery</strong>. I cannot stress this enough. You're gonna have to understand it a little to know how to handle the data you receive. You'll also need to understand some basic JavaScript syntax (not far from python, you'll get used to it). I strongly recommend <a href=\"https://tutsplus.com/course/30-days-to-learn-jquery/\" rel=\"noreferrer\">Envato's video tutorials for jQuery</a>, they are great and will put you on the right path.</li>\n<li><strong>When to use JSON?</strong>. You're going to see a lot of examples where the data sent by the Django views is in JSON. I didn't go into detail on that, because it isn't important <em>how</em> to do it (there are plenty of explanations abound) and a lot more important <em>when</em>. And the answer to that is - JSON data is serialized data. That is, data you can manipulate. Like I mentioned, an AJAX call will fetch the response as if the user did it himself. Now say you don't want to mess with all the html, and instead want to send data (a list of objects perhaps). JSON is good for this, because it sends it as an object (JSON data looks like a python dictionary), and then you can iterate over it or do something else that removes the need to sift through useless html.</li>\n<li><strong>Add it last</strong>. When you build a web app and want to implement AJAX - do yourself a favor. First, build the entire app completely devoid of any AJAX. See that everything is working. Then, and only then, start writing the AJAX calls. That's a good process that helps you learn a lot as well.</li>\n<li><strong>Use chrome's developer tools</strong>. Since AJAX calls are done in the background it's sometimes very hard to debug them. You should use the chrome developer tools (or similar tools such as firebug) and <code>console.log</code> things to debug. I won't explain in detail, just google around and find out about it. It would be very helpful to you.</li>\n<li><strong>CSRF awareness</strong>. Finally, remember that post requests in Django require the <code>csrf_token</code>. With AJAX calls, a lot of times you'd like to send data without refreshing the page. You'll probably face some trouble before you'd finally remember that - wait, you forgot to send the <code>csrf_token</code>. This is a known beginner roadblock in AJAX-Django integration, but after you learn how to make it play nice, it's easy as pie.</li>\n</ol>\n\n<p>That's everything that comes to my head. It's a vast subject, but yeah, there's probably not enough examples out there. Just work your way there, slowly, you'll get it eventually.</p>\n"
    },
    "990": {
        "question_id": "7837722",
        "answer_id": "11617194",
        "question": "<p>I want to perform my own complex operations on financial data in dataframes in a sequential manner.</p>\n\n<p>For example I am using the following MSFT CSV file taken from <a href=\"http://finance.yahoo.com/q/hp?s=MSFT\">Yahoo Finance</a>:</p>\n\n<pre><code>Date,Open,High,Low,Close,Volume,Adj Close\n2011-10-19,27.37,27.47,27.01,27.13,42880000,27.13\n2011-10-18,26.94,27.40,26.80,27.31,52487900,27.31\n2011-10-17,27.11,27.42,26.85,26.98,39433400,26.98\n2011-10-14,27.31,27.50,27.02,27.27,50947700,27.27\n\n....\n</code></pre>\n\n<p>I then do the following:</p>\n\n<pre><code>#!/usr/bin/env python\nfrom pandas import *\n\ndf = read_csv('table.csv')\n\nfor i, row in enumerate(df.values):\n    date = df.index[i]\n    open, high, low, close, adjclose = row\n    #now perform analysis on open/close based on date, etc..\n</code></pre>\n\n<p>Is that the most efficient way? Given the focus on speed in pandas, I would assume there must be some special function to iterate through the  values in a manner that one also retrieves the index (possibly through a generator to be memory efficient)? <code>df.iteritems</code> unfortunately only iterates column by column.</p>\n",
        "answer": "<p>The newest versions of pandas now include a built-in function for iterating over rows. </p>\n\n<pre><code>for index, row in df.iterrows():\n\n    # do some logic here\n</code></pre>\n\n<p>Or, if you want it faster use <code>itertuples()</code></p>\n\n<p>But, unutbu's suggestion to use numpy functions to avoid iterating over rows will produce the fastest code. </p>\n"
    },
    "991": {
        "question_id": "2793324",
        "answer_id": "2793341",
        "question": "<pre><code>a = [1, 2, 3, 4]\nb = a.index(6)\n\ndel a[b]\nprint a\n</code></pre>\n\n<p>The above shows the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Traceback (most recent call last):\n  File \"D:\\zjm_code\\a.py\", line 6, in &lt;module&gt;\n    b = a.index(6)\nValueError: list.index(x): x not in list\n</code></pre>\n\n<p>So I have to do this:</p>\n\n<pre><code>a = [1, 2, 3, 4]\n\ntry:\n    b = a.index(6)\n    del a[b]\nexcept:\n    pass\n\nprint a\n</code></pre>\n\n<p>But is there not a simpler way to do this?</p>\n",
        "answer": "<p>To remove an element's first occurrence in a list, simply use <code>list.remove</code>:</p>\n\n<pre><code>&gt;&gt;&gt; a = ['a', 'b', 'c', 'd']\n&gt;&gt;&gt; a.remove('b')\n&gt;&gt;&gt; print a\n['a', 'c', 'd']\n</code></pre>\n\n<p>Mind that it does not remove all occurrences of your element. Use a list comprehension for that.</p>\n\n<pre><code>&gt;&gt;&gt; a = [10, 20, 30, 40, 20, 30, 40, 20, 70, 20]\n&gt;&gt;&gt; a = [x for x in a if x != 20]\n&gt;&gt;&gt; print a\n[10, 30, 40, 30, 40, 70]\n</code></pre>\n"
    },
    "992": {
        "question_id": "678236",
        "answer_id": "678242",
        "question": "<p>How to get the filename without the extension from a path in Python?</p>\n",
        "answer": "<p>Getting the name of the file without the extension:</p>\n\n<pre><code>import os\nprint(os.path.splitext(\"/path/to/some/file.txt\")[0])\n</code></pre>\n\n<p>Prints:</p>\n\n<pre><code>/path/to/some/file\n</code></pre>\n\n<p>If the filename has multiple dots, only the extension after the last one is removed. For example:</p>\n\n<pre><code>import os\nprint(os.path.splitext(\"/path/to/some/file.txt.zip.asc\")[0])\n</code></pre>\n\n<p>Prints:</p>\n\n<pre><code>/path/to/some/file.txt.zip\n</code></pre>\n"
    },
    "993": {
        "question_id": "973473",
        "answer_id": "973488",
        "question": "<p>Is there a way to return a list of all the subdirectories in the current directory in Python?</p>\n\n<p>I know you can do this with files, but I need to get the list of directories instead.</p>\n",
        "answer": "<p>Do you mean immediate subdirectories, or every directory right down the tree? </p>\n\n<p>Either way, you could use <a href=\"http://docs.python.org/library/os.html#os.walk\" rel=\"noreferrer\"><code>os.walk</code></a> to do this:</p>\n\n<pre><code>os.walk(directory)\n</code></pre>\n\n<p>will yield a tuple for each subdirectory. Ths first entry in the 3-tuple is a directory name, so</p>\n\n<pre><code>[x[0] for x in os.walk(directory)]\n</code></pre>\n\n<p>should give you all of the subdirectories, recursively.</p>\n\n<p>Note that the second entry in the tuple is the list of child directories of the entry in the first position, so you could use this instead, but it's not likely to save you much.</p>\n\n<p>However, you could use it just to give you the immediate child directories:</p>\n\n<pre><code>next(os.walk('.'))[1]\n</code></pre>\n\n<p>Or see the other solutions already posted, using <a href=\"http://docs.python.org/library/os.html#os.listdir\" rel=\"noreferrer\"><code>os.listdir</code></a> and <a href=\"http://docs.python.org/library/os.path.html#os.path.isdir\" rel=\"noreferrer\"><code>os.path.isdir</code></a>, including those at \"<a href=\"https://stackoverflow.com/questions/800197/get-all-of-the-immediate-subdirectories-in-python\">How to get all of the immediate subdirectories in Python</a>\".</p>\n"
    },
    "994": {
        "question_id": "7065164",
        "answer_id": "7065242",
        "question": "<p><strong>What I need to do</strong></p>\n\n<p>I have a timezone-unaware datetime object, to which I need to add a time zone in order to be able to compare it with other timezone-aware datetime objects.  I do not want to convert my entire application to timezone unaware for this one legacy case.</p>\n\n<p><strong>What I've Tried</strong></p>\n\n<p>First, to demonstrate the problem:</p>\n\n<pre><code>Python 2.6.1 (r261:67515, Jun 24 2010, 21:47:49) \n[GCC 4.2.1 (Apple Inc. build 5646)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; import pytz\n&gt;&gt;&gt; unaware = datetime.datetime(2011,8,15,8,15,12,0)\n&gt;&gt;&gt; unaware\ndatetime.datetime(2011, 8, 15, 8, 15, 12)\n&gt;&gt;&gt; aware = datetime.datetime(2011,8,15,8,15,12,0,pytz.UTC)\n&gt;&gt;&gt; aware\ndatetime.datetime(2011, 8, 15, 8, 15, 12, tzinfo=&lt;UTC&gt;)\n&gt;&gt;&gt; aware == unaware\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: can't compare offset-naive and offset-aware datetimes\n</code></pre>\n\n<p>First, I tried astimezone:</p>\n\n<pre><code>&gt;&gt;&gt; unaware.astimezone(pytz.UTC)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: astimezone() cannot be applied to a naive datetime\n&gt;&gt;&gt;\n</code></pre>\n\n<p>It's not terribly surprising this failed, since it's actually trying to do a conversion.  Replace seemed like a better choice (as per <a href=\"https://stackoverflow.com/questions/4530069/python-how-to-get-a-value-of-datetime-today-that-is-timezone-aware\">Python: How to get a value of datetime.today() that is &quot;timezone aware&quot;?</a>):</p>\n\n<pre><code>&gt;&gt;&gt; unaware.replace(tzinfo=pytz.UTC)\ndatetime.datetime(2011, 8, 15, 8, 15, 12, tzinfo=&lt;UTC&gt;)\n&gt;&gt;&gt; unaware == aware\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: can't compare offset-naive and offset-aware datetimes\n&gt;&gt;&gt; \n</code></pre>\n\n<p>But as you can see, replace seems to set the tzinfo, but not make the object aware.  I'm getting ready to fall back to doctoring the input string to have a timezone before parsing it (I'm using dateutil for parsing, if that matters), but that seems incredibly kludgy.</p>\n\n<p>Also, I've tried this in both python 2.6 and python 2.7, with the same results.</p>\n\n<p><strong>Context</strong></p>\n\n<p>I am writing a parser for some data files.  There is an old format I need to support where the date string does not have a timezone indicator.  I've already fixed the data source, but I still need to support the legacy data format.  A one time conversion of the legacy data is not an option for various business BS reasons.  While in general, I do not like the idea of hard-coding a default timezone, in this case it seems like the best option.  I know with reasonable confidence that all the legacy data in question is in UTC, so I'm prepared to accept the risk of defaulting to that in this case.</p>\n",
        "answer": "<p>In general, to make a naive datetime timezone-aware, use the <a href=\"http://pytz.sourceforge.net/#localized-times-and-date-arithmetic\" rel=\"noreferrer\">localize method</a>:</p>\n\n<pre><code>import datetime\nimport pytz\n\nunaware = datetime.datetime(2011, 8, 15, 8, 15, 12, 0)\naware = datetime.datetime(2011, 8, 15, 8, 15, 12, 0, pytz.UTC)\n\nnow_aware = pytz.utc.localize(unaware)\nassert aware == now_aware\n</code></pre>\n\n<p>For the UTC timezone, it is not really necessary to use <code>localize</code> since there is no daylight savings time calculation to handle:</p>\n\n<pre><code>now_aware = unaware.replace(tzinfo=pytz.UTC)\n</code></pre>\n\n<p>works. (<code>.replace</code> returns a new datetime; it does not modify <code>unaware</code>.)</p>\n"
    },
    "995": {
        "question_id": "7604966",
        "answer_id": "7604981",
        "question": "<p>I am looking for minimum and maximum values for integers in python. For eg., in Java, we have <code>Integer.MIN_VALUE</code> and <code>Integer.MAX_VALUE</code>. Is there something like this in python?</p>\n",
        "answer": "<h3>Python 3</h3>\n\n<p>In Python 3, this question doesn't apply. The plain <code>int</code> type is unbounded.</p>\n\n<p>However, you might actually be looking for the machine's <em><a href=\"http://en.wikipedia.org/wiki/Word_(computer_architecture)#Table_of_word_sizes\" rel=\"noreferrer\">word size</a></em>. That's still available in Python 3 as <code>sys.maxsize</code>. </p>\n\n<h3>Python 2</h3>\n\n<p>In Python 2, the maximum value for plain <code>int</code> values is available as <code>sys.maxint</code>:</p>\n\n<pre><code>&gt;&gt;&gt; sys.maxint\n9223372036854775807\n</code></pre>\n\n<p>You can calculate the minimum value with <code>-sys.maxint - 1</code> as shown <a href=\"https://docs.python.org/2/library/sys.html#sys.maxint\" rel=\"noreferrer\">here</a>. </p>\n\n<p>Python seamlessly switches from plain to long integers once you exceed this value. So most of the time, you won't need to know it.</p>\n"
    },
    "996": {
        "question_id": "51520",
        "answer_id": "51523",
        "question": "<p>Given a path such as <code>\"mydir/myfile.txt\"</code>, how do I find the file's absolute path relative to the current working directory in Python? E.g. on Windows, I might end up with:</p>\n\n<pre><code>\"C:/example/cwd/mydir/myfile.txt\"\n</code></pre>\n",
        "answer": "<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.path.abspath(\"mydir/myfile.txt\")\n'C:/example/cwd/mydir/myfile.txt'\n</code></pre>\n\n<p>Also works if it is already an absolute path:</p>\n\n<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.path.abspath(\"C:/example/cwd/mydir/myfile.txt\")\n'C:/example/cwd/mydir/myfile.txt'\n</code></pre>\n"
    },
    "997": {
        "question_id": "3781851",
        "answer_id": "3781869",
        "question": "<p>I want to run a Python script from another Python script. I want to pass variables like I would using the command line.</p>\n\n<p>For example, I would run my first script that would iterate through a list of values (0,1,2,3) and pass those to the 2nd script <code>script2.py 0</code> then <code>script2.py 1</code>, etc.</p>\n\n<p>I found <a href=\"https://stackoverflow.com/questions/1186789/what-is-the-best-way-to-call-a-python-script-from-another-python-script\">Stack&nbsp;Overflow question 1186789</a> which is a similar question, but ars's answer calls a function, where as I want to run the whole script, not just a function, and balpha's answer calls the script but with no arguments. I changed this to something like the below as a test:</p>\n\n<pre><code>execfile(\"script2.py 1\")\n</code></pre>\n\n<p>But it is not accepting variables properly. When I print out the <code>sys.argv</code> in script2.py it is the original command call to first script \"['C:\\script1.py'].</p>\n\n<p>I don't really want to change the original script (i.e. script2.py in my example) since I don't own it.</p>\n\n<p>I figure there must be a way to do this; I am just confused how you do it.</p>\n",
        "answer": "<p>Try using <a href=\"http://docs.python.org/library/os.html#os.system\"><code>os.system</code></a>:</p>\n\n<pre><code>os.system(\"script2.py 1\")\n</code></pre>\n\n<p><code>execfile</code> is different because it is designed to run a sequence of Python statements in the <em>current</em> execution context. That's why <code>sys.argv</code> didn't change for you.</p>\n"
    },
    "998": {
        "question_id": "2632199",
        "answer_id": "2632297",
        "question": "<p>This may seem like a newbie question, but it is not. Some common approaches don't work in all cases:</p>\n\n<h1>sys.argv[0]</h1>\n\n<p>This means using <code>path = os.path.abspath(os.path.dirname(sys.argv[0]))</code>, but this does not work if you are running from another Python script in another directory, and this can happen in real life.</p>\n\n<h1>__file__</h1>\n\n<p>This means using <code>path = os.path.abspath(os.path.dirname(__file__))</code>, but I found that this doesn't work:</p>\n\n<ul>\n<li><code>py2exe</code> doesn't have a <code>__file__</code> attribute, but there is a <a href=\"http://www.py2exe.org/index.cgi/WhereAmI\" rel=\"noreferrer\">workaround</a></li>\n<li>When you run from IDLE with <code>execute()</code> there is no <code>__file__</code> attribute</li>\n<li>OS X 10.6 where I get <code>NameError: global name '__file__' is not defined</code></li>\n</ul>\n\n<p>Related questions with incomplete answers:</p>\n\n<ul>\n<li><em><a href=\"https://stackoverflow.com/questions/1296501/python-find-path-to-file-being-run\">Python - Find Path to File Being Run</a></em></li>\n<li><em><a href=\"https://stackoverflow.com/questions/1483827/python-path-to-current-file-depends-on-how-i-execute-the-program\">Path to current file depends on how I execute the program</a></em></li>\n<li><em><a href=\"https://stackoverflow.com/questions/2259503/how-to-know-the-path-of-the-running-script-in-python\">How to know the path of the running script in Python?</a></em></li>\n<li><em><a href=\"https://stackoverflow.com/questions/509742/python-chdir-to-dir-the-py-script-is-in\">Change directory to the directory of a Python script</a></em></li>\n</ul>\n\n<p>I'm looking for a <strong>generic solution</strong>, one that would work in all above use cases.</p>\n\n<h3>Update</h3>\n\n<p>Here is the result of a testcase:</p>\n\n<h3>Output of python a.py (on Windows)</h3>\n\n<pre><code>a.py: __file__= a.py\na.py: os.getcwd()= C:\\zzz\n\nb.py: sys.argv[0]= a.py\nb.py: __file__= a.py\nb.py: os.getcwd()= C:\\zzz\n</code></pre>\n\n<h3>a.py</h3>\n\n<pre><code>#! /usr/bin/env python\nimport os, sys\n\nprint \"a.py: sys.argv[0]=\", sys.argv[0]\nprint \"a.py: __file__=\", __file__\nprint \"a.py: os.getcwd()=\", os.getcwd()\nprint\n\nexecfile(\"subdir/b.py\")\n</code></pre>\n\n<h3>subdir/b.py</h3>\n\n<pre><code>#! /usr/bin/env python\nimport os, sys\n\nprint \"b.py: sys.argv[0]=\", sys.argv[0]\nprint \"b.py: __file__=\", __file__\nprint \"b.py: os.getcwd()=\", os.getcwd()\nprint\n</code></pre>\n\n<h3>tree</h3>\n\n<pre><code>C:.\n|   a.py\n\\---subdir\n        b.py\n</code></pre>\n",
        "answer": "<p>You can't directly determine the location of the main script being executed.  After all, sometimes the script didn't come from a file at all.  For example, it could come from the interactive interpreter or dynamically generated code stored only in memory.</p>\n\n<p>However, you can reliably determine the location of a module, since modules are always loaded from a file.  If you create a module with the following code and put it in the same directory as your main script, then the main script can import the module and use that to locate itself.</p>\n\n<p>some_path/module_locator.py:</p>\n\n<pre><code>def we_are_frozen():\n    # All of the modules are built-in to the interpreter, e.g., by py2exe\n    return hasattr(sys, \"frozen\")\n\ndef module_path():\n    encoding = sys.getfilesystemencoding()\n    if we_are_frozen():\n        return os.path.dirname(unicode(sys.executable, encoding))\n    return os.path.dirname(unicode(__file__, encoding))\n</code></pre>\n\n<p>some_path/main.py:</p>\n\n<pre><code>import module_locator\nmy_path = module_locator.module_path()\n</code></pre>\n\n<p>If you have several main scripts in different directories, you may need more than one copy of module_locator.</p>\n\n<p>Of course, if your main script is loaded by some other tool that doesn't let you import modules that are co-located with your script, then you're out of luck.  In cases like that, the information you're after simply doesn't exist anywhere in your program.  Your best bet would be to file a bug with the authors of the tool.</p>\n"
    },
    "999": {
        "question_id": "6146963",
        "answer_id": "6147100",
        "question": "<p>I can't really think of any reason why python needs the <code>del</code> keyword (and most languages seem to not have a similar keyword).  For instance, rather than deleting a variable, one could just assign <code>None</code> to it.  And when deleting from a dictionary, a <code>del</code> method could be added.</p>\n\n<p>Is there any reason to keep <code>del</code> in python, or is it a vestige of Python's pre-garbage collection days?</p>\n",
        "answer": "<p>Firstly, you can del other things besides local variables</p>\n\n<pre><code>del list_item[4]\ndel dictionary[\"alpha\"]\n</code></pre>\n\n<p>Both of which should be clearly useful. Secondly, using <code>del</code> on a local variable makes the intent clearer.  Compare:</p>\n\n<pre><code>del foo\n</code></pre>\n\n<p>to</p>\n\n<pre><code>foo = None\n</code></pre>\n\n<p>I know in the case of <code>del foo</code> that the intent is to remove the variable from scope. It's not clear that <code>foo = None</code> is doing that. If somebody just assigned <code>foo = None</code> I might think it was dead code. But I instantly know what somebody who codes <code>del foo</code> was trying to do.</p>\n"
    },
    "1000": {
        "question_id": "432112",
        "answer_id": "432289",
        "question": "<p>I know there is a method for a Python list to return the first index of something:</p>\n\n<pre><code>&gt;&gt;&gt; l = [1, 2, 3]\n&gt;&gt;&gt; l.index(2)\n1\n</code></pre>\n\n<p>Is there something like that for NumPy arrays?</p>\n",
        "answer": "<p>Yes, here is the answer given a NumPy array, <code>array</code>, and a value, <code>item</code>, to search for:</p>\n\n<pre><code>itemindex = numpy.where(array==item)\n</code></pre>\n\n<p>The result is a tuple with first all the row indices, then all the column indices.</p>\n\n<p>For example, if an array is two dimensions and it contained your item at two locations then</p>\n\n<pre><code>array[itemindex[0][0]][itemindex[1][0]]\n</code></pre>\n\n<p>would be equal to your item and so would</p>\n\n<pre><code>array[itemindex[0][1]][itemindex[1][1]]\n</code></pre>\n\n<p><a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html\" rel=\"noreferrer\">numpy.where</a></p>\n"
    }
}